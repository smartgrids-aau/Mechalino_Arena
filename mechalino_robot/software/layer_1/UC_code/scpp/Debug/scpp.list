
scpp.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c458  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005b0  0800c5f8  0800c5f8  0000d5f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cba8  0800cba8  0000e228  2**0
                  CONTENTS
  4 .ARM          00000008  0800cba8  0800cba8  0000dba8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbb0  0800cbb0  0000e228  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbb0  0800cbb0  0000dbb0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbb4  0800cbb4  0000dbb4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000228  20000000  0800cbb8  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000734  20000228  0800cde0  0000e228  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000095c  0800cde0  0000e95c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e228  2**0
                  CONTENTS, READONLY
 12 .debug_info   000129ab  00000000  00000000  0000e258  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bfb  00000000  00000000  00020c03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001168  00000000  00000000  00023800  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dab  00000000  00000000  00024968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019aea  00000000  00000000  00025713  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016a5c  00000000  00000000  0003f1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f44f  00000000  00000000  00055c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  000f50a8  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000066ec  00000000  00000000  000f5130  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 000000a1  00000000  00000000  000fb81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000228 	.word	0x20000228
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800c5e0 	.word	0x0800c5e0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000022c 	.word	0x2000022c
 80001dc:	0800c5e0 	.word	0x0800c5e0

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9a0 	b.w	8000ff0 <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	460c      	mov	r4, r1
 8000d3c:	2b00      	cmp	r3, #0
 8000d3e:	d14e      	bne.n	8000dde <__udivmoddi4+0xaa>
 8000d40:	4694      	mov	ip, r2
 8000d42:	458c      	cmp	ip, r1
 8000d44:	4686      	mov	lr, r0
 8000d46:	fab2 f282 	clz	r2, r2
 8000d4a:	d962      	bls.n	8000e12 <__udivmoddi4+0xde>
 8000d4c:	b14a      	cbz	r2, 8000d62 <__udivmoddi4+0x2e>
 8000d4e:	f1c2 0320 	rsb	r3, r2, #32
 8000d52:	4091      	lsls	r1, r2
 8000d54:	fa20 f303 	lsr.w	r3, r0, r3
 8000d58:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d5c:	4319      	orrs	r1, r3
 8000d5e:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d62:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d66:	fa1f f68c 	uxth.w	r6, ip
 8000d6a:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb07 1114 	mls	r1, r7, r4, r1
 8000d76:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d7a:	fb04 f106 	mul.w	r1, r4, r6
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	d90a      	bls.n	8000d98 <__udivmoddi4+0x64>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f104 30ff 	add.w	r0, r4, #4294967295
 8000d8a:	f080 8112 	bcs.w	8000fb2 <__udivmoddi4+0x27e>
 8000d8e:	4299      	cmp	r1, r3
 8000d90:	f240 810f 	bls.w	8000fb2 <__udivmoddi4+0x27e>
 8000d94:	3c02      	subs	r4, #2
 8000d96:	4463      	add	r3, ip
 8000d98:	1a59      	subs	r1, r3, r1
 8000d9a:	fa1f f38e 	uxth.w	r3, lr
 8000d9e:	fbb1 f0f7 	udiv	r0, r1, r7
 8000da2:	fb07 1110 	mls	r1, r7, r0, r1
 8000da6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000daa:	fb00 f606 	mul.w	r6, r0, r6
 8000dae:	429e      	cmp	r6, r3
 8000db0:	d90a      	bls.n	8000dc8 <__udivmoddi4+0x94>
 8000db2:	eb1c 0303 	adds.w	r3, ip, r3
 8000db6:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dba:	f080 80fc 	bcs.w	8000fb6 <__udivmoddi4+0x282>
 8000dbe:	429e      	cmp	r6, r3
 8000dc0:	f240 80f9 	bls.w	8000fb6 <__udivmoddi4+0x282>
 8000dc4:	4463      	add	r3, ip
 8000dc6:	3802      	subs	r0, #2
 8000dc8:	1b9b      	subs	r3, r3, r6
 8000dca:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000dce:	2100      	movs	r1, #0
 8000dd0:	b11d      	cbz	r5, 8000dda <__udivmoddi4+0xa6>
 8000dd2:	40d3      	lsrs	r3, r2
 8000dd4:	2200      	movs	r2, #0
 8000dd6:	e9c5 3200 	strd	r3, r2, [r5]
 8000dda:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dde:	428b      	cmp	r3, r1
 8000de0:	d905      	bls.n	8000dee <__udivmoddi4+0xba>
 8000de2:	b10d      	cbz	r5, 8000de8 <__udivmoddi4+0xb4>
 8000de4:	e9c5 0100 	strd	r0, r1, [r5]
 8000de8:	2100      	movs	r1, #0
 8000dea:	4608      	mov	r0, r1
 8000dec:	e7f5      	b.n	8000dda <__udivmoddi4+0xa6>
 8000dee:	fab3 f183 	clz	r1, r3
 8000df2:	2900      	cmp	r1, #0
 8000df4:	d146      	bne.n	8000e84 <__udivmoddi4+0x150>
 8000df6:	42a3      	cmp	r3, r4
 8000df8:	d302      	bcc.n	8000e00 <__udivmoddi4+0xcc>
 8000dfa:	4290      	cmp	r0, r2
 8000dfc:	f0c0 80f0 	bcc.w	8000fe0 <__udivmoddi4+0x2ac>
 8000e00:	1a86      	subs	r6, r0, r2
 8000e02:	eb64 0303 	sbc.w	r3, r4, r3
 8000e06:	2001      	movs	r0, #1
 8000e08:	2d00      	cmp	r5, #0
 8000e0a:	d0e6      	beq.n	8000dda <__udivmoddi4+0xa6>
 8000e0c:	e9c5 6300 	strd	r6, r3, [r5]
 8000e10:	e7e3      	b.n	8000dda <__udivmoddi4+0xa6>
 8000e12:	2a00      	cmp	r2, #0
 8000e14:	f040 8090 	bne.w	8000f38 <__udivmoddi4+0x204>
 8000e18:	eba1 040c 	sub.w	r4, r1, ip
 8000e1c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e20:	fa1f f78c 	uxth.w	r7, ip
 8000e24:	2101      	movs	r1, #1
 8000e26:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e2a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e2e:	fb08 4416 	mls	r4, r8, r6, r4
 8000e32:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e36:	fb07 f006 	mul.w	r0, r7, r6
 8000e3a:	4298      	cmp	r0, r3
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x11c>
 8000e3e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e42:	f106 34ff 	add.w	r4, r6, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x11a>
 8000e48:	4298      	cmp	r0, r3
 8000e4a:	f200 80cd 	bhi.w	8000fe8 <__udivmoddi4+0x2b4>
 8000e4e:	4626      	mov	r6, r4
 8000e50:	1a1c      	subs	r4, r3, r0
 8000e52:	fa1f f38e 	uxth.w	r3, lr
 8000e56:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e5a:	fb08 4410 	mls	r4, r8, r0, r4
 8000e5e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e62:	fb00 f707 	mul.w	r7, r0, r7
 8000e66:	429f      	cmp	r7, r3
 8000e68:	d908      	bls.n	8000e7c <__udivmoddi4+0x148>
 8000e6a:	eb1c 0303 	adds.w	r3, ip, r3
 8000e6e:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e72:	d202      	bcs.n	8000e7a <__udivmoddi4+0x146>
 8000e74:	429f      	cmp	r7, r3
 8000e76:	f200 80b0 	bhi.w	8000fda <__udivmoddi4+0x2a6>
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	1bdb      	subs	r3, r3, r7
 8000e7e:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e82:	e7a5      	b.n	8000dd0 <__udivmoddi4+0x9c>
 8000e84:	f1c1 0620 	rsb	r6, r1, #32
 8000e88:	408b      	lsls	r3, r1
 8000e8a:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8e:	431f      	orrs	r7, r3
 8000e90:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e94:	fa04 f301 	lsl.w	r3, r4, r1
 8000e98:	ea43 030c 	orr.w	r3, r3, ip
 8000e9c:	40f4      	lsrs	r4, r6
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	0c38      	lsrs	r0, r7, #16
 8000ea4:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000ea8:	fbb4 fef0 	udiv	lr, r4, r0
 8000eac:	fa1f fc87 	uxth.w	ip, r7
 8000eb0:	fb00 441e 	mls	r4, r0, lr, r4
 8000eb4:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eb8:	fb0e f90c 	mul.w	r9, lr, ip
 8000ebc:	45a1      	cmp	r9, r4
 8000ebe:	fa02 f201 	lsl.w	r2, r2, r1
 8000ec2:	d90a      	bls.n	8000eda <__udivmoddi4+0x1a6>
 8000ec4:	193c      	adds	r4, r7, r4
 8000ec6:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000eca:	f080 8084 	bcs.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ece:	45a1      	cmp	r9, r4
 8000ed0:	f240 8081 	bls.w	8000fd6 <__udivmoddi4+0x2a2>
 8000ed4:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ed8:	443c      	add	r4, r7
 8000eda:	eba4 0409 	sub.w	r4, r4, r9
 8000ede:	fa1f f983 	uxth.w	r9, r3
 8000ee2:	fbb4 f3f0 	udiv	r3, r4, r0
 8000ee6:	fb00 4413 	mls	r4, r0, r3, r4
 8000eea:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000eee:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ef2:	45a4      	cmp	ip, r4
 8000ef4:	d907      	bls.n	8000f06 <__udivmoddi4+0x1d2>
 8000ef6:	193c      	adds	r4, r7, r4
 8000ef8:	f103 30ff 	add.w	r0, r3, #4294967295
 8000efc:	d267      	bcs.n	8000fce <__udivmoddi4+0x29a>
 8000efe:	45a4      	cmp	ip, r4
 8000f00:	d965      	bls.n	8000fce <__udivmoddi4+0x29a>
 8000f02:	3b02      	subs	r3, #2
 8000f04:	443c      	add	r4, r7
 8000f06:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000f0a:	fba0 9302 	umull	r9, r3, r0, r2
 8000f0e:	eba4 040c 	sub.w	r4, r4, ip
 8000f12:	429c      	cmp	r4, r3
 8000f14:	46ce      	mov	lr, r9
 8000f16:	469c      	mov	ip, r3
 8000f18:	d351      	bcc.n	8000fbe <__udivmoddi4+0x28a>
 8000f1a:	d04e      	beq.n	8000fba <__udivmoddi4+0x286>
 8000f1c:	b155      	cbz	r5, 8000f34 <__udivmoddi4+0x200>
 8000f1e:	ebb8 030e 	subs.w	r3, r8, lr
 8000f22:	eb64 040c 	sbc.w	r4, r4, ip
 8000f26:	fa04 f606 	lsl.w	r6, r4, r6
 8000f2a:	40cb      	lsrs	r3, r1
 8000f2c:	431e      	orrs	r6, r3
 8000f2e:	40cc      	lsrs	r4, r1
 8000f30:	e9c5 6400 	strd	r6, r4, [r5]
 8000f34:	2100      	movs	r1, #0
 8000f36:	e750      	b.n	8000dda <__udivmoddi4+0xa6>
 8000f38:	f1c2 0320 	rsb	r3, r2, #32
 8000f3c:	fa20 f103 	lsr.w	r1, r0, r3
 8000f40:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f44:	fa24 f303 	lsr.w	r3, r4, r3
 8000f48:	4094      	lsls	r4, r2
 8000f4a:	430c      	orrs	r4, r1
 8000f4c:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f50:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f54:	fa1f f78c 	uxth.w	r7, ip
 8000f58:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f5c:	fb08 3110 	mls	r1, r8, r0, r3
 8000f60:	0c23      	lsrs	r3, r4, #16
 8000f62:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f66:	fb00 f107 	mul.w	r1, r0, r7
 8000f6a:	4299      	cmp	r1, r3
 8000f6c:	d908      	bls.n	8000f80 <__udivmoddi4+0x24c>
 8000f6e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f72:	f100 36ff 	add.w	r6, r0, #4294967295
 8000f76:	d22c      	bcs.n	8000fd2 <__udivmoddi4+0x29e>
 8000f78:	4299      	cmp	r1, r3
 8000f7a:	d92a      	bls.n	8000fd2 <__udivmoddi4+0x29e>
 8000f7c:	3802      	subs	r0, #2
 8000f7e:	4463      	add	r3, ip
 8000f80:	1a5b      	subs	r3, r3, r1
 8000f82:	b2a4      	uxth	r4, r4
 8000f84:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f88:	fb08 3311 	mls	r3, r8, r1, r3
 8000f8c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f90:	fb01 f307 	mul.w	r3, r1, r7
 8000f94:	42a3      	cmp	r3, r4
 8000f96:	d908      	bls.n	8000faa <__udivmoddi4+0x276>
 8000f98:	eb1c 0404 	adds.w	r4, ip, r4
 8000f9c:	f101 36ff 	add.w	r6, r1, #4294967295
 8000fa0:	d213      	bcs.n	8000fca <__udivmoddi4+0x296>
 8000fa2:	42a3      	cmp	r3, r4
 8000fa4:	d911      	bls.n	8000fca <__udivmoddi4+0x296>
 8000fa6:	3902      	subs	r1, #2
 8000fa8:	4464      	add	r4, ip
 8000faa:	1ae4      	subs	r4, r4, r3
 8000fac:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000fb0:	e739      	b.n	8000e26 <__udivmoddi4+0xf2>
 8000fb2:	4604      	mov	r4, r0
 8000fb4:	e6f0      	b.n	8000d98 <__udivmoddi4+0x64>
 8000fb6:	4608      	mov	r0, r1
 8000fb8:	e706      	b.n	8000dc8 <__udivmoddi4+0x94>
 8000fba:	45c8      	cmp	r8, r9
 8000fbc:	d2ae      	bcs.n	8000f1c <__udivmoddi4+0x1e8>
 8000fbe:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fc2:	eb63 0c07 	sbc.w	ip, r3, r7
 8000fc6:	3801      	subs	r0, #1
 8000fc8:	e7a8      	b.n	8000f1c <__udivmoddi4+0x1e8>
 8000fca:	4631      	mov	r1, r6
 8000fcc:	e7ed      	b.n	8000faa <__udivmoddi4+0x276>
 8000fce:	4603      	mov	r3, r0
 8000fd0:	e799      	b.n	8000f06 <__udivmoddi4+0x1d2>
 8000fd2:	4630      	mov	r0, r6
 8000fd4:	e7d4      	b.n	8000f80 <__udivmoddi4+0x24c>
 8000fd6:	46d6      	mov	lr, sl
 8000fd8:	e77f      	b.n	8000eda <__udivmoddi4+0x1a6>
 8000fda:	4463      	add	r3, ip
 8000fdc:	3802      	subs	r0, #2
 8000fde:	e74d      	b.n	8000e7c <__udivmoddi4+0x148>
 8000fe0:	4606      	mov	r6, r0
 8000fe2:	4623      	mov	r3, r4
 8000fe4:	4608      	mov	r0, r1
 8000fe6:	e70f      	b.n	8000e08 <__udivmoddi4+0xd4>
 8000fe8:	3e02      	subs	r6, #2
 8000fea:	4463      	add	r3, ip
 8000fec:	e730      	b.n	8000e50 <__udivmoddi4+0x11c>
 8000fee:	bf00      	nop

08000ff0 <__aeabi_idiv0>:
 8000ff0:	4770      	bx	lr
 8000ff2:	bf00      	nop

08000ff4 <MX_ADC1_Init>:

ADC_HandleTypeDef hadc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ffa:	463b      	mov	r3, r7
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
 8001002:	609a      	str	r2, [r3, #8]
 8001004:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8001006:	4b22      	ldr	r3, [pc, #136]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001008:	4a22      	ldr	r2, [pc, #136]	@ (8001094 <MX_ADC1_Init+0xa0>)
 800100a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 800100c:	4b20      	ldr	r3, [pc, #128]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800100e:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8001012:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 8001014:	4b1e      	ldr	r3, [pc, #120]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001016:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800101a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800101c:	4b1c      	ldr	r3, [pc, #112]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8001022:	4b1b      	ldr	r3, [pc, #108]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001024:	2201      	movs	r2, #1
 8001026:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001028:	4b19      	ldr	r3, [pc, #100]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800102a:	2200      	movs	r2, #0
 800102c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001030:	4b17      	ldr	r3, [pc, #92]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001032:	2200      	movs	r2, #0
 8001034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001036:	4b16      	ldr	r3, [pc, #88]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001038:	4a17      	ldr	r2, [pc, #92]	@ (8001098 <MX_ADC1_Init+0xa4>)
 800103a:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800103c:	4b14      	ldr	r3, [pc, #80]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800103e:	2200      	movs	r2, #0
 8001040:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001044:	2201      	movs	r2, #1
 8001046:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8001048:	4b11      	ldr	r3, [pc, #68]	@ (8001090 <MX_ADC1_Init+0x9c>)
 800104a:	2200      	movs	r2, #0
 800104c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001052:	2201      	movs	r2, #1
 8001054:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001056:	480e      	ldr	r0, [pc, #56]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001058:	f001 fb68 	bl	800272c <HAL_ADC_Init>
 800105c:	4603      	mov	r3, r0
 800105e:	2b00      	cmp	r3, #0
 8001060:	d001      	beq.n	8001066 <MX_ADC1_Init+0x72>
  {
    Error_Handler();
 8001062:	f000 ff39 	bl	8001ed8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001066:	2300      	movs	r3, #0
 8001068:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 800106a:	2301      	movs	r3, #1
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800106e:	2300      	movs	r3, #0
 8001070:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001072:	463b      	mov	r3, r7
 8001074:	4619      	mov	r1, r3
 8001076:	4806      	ldr	r0, [pc, #24]	@ (8001090 <MX_ADC1_Init+0x9c>)
 8001078:	f001 fb9c 	bl	80027b4 <HAL_ADC_ConfigChannel>
 800107c:	4603      	mov	r3, r0
 800107e:	2b00      	cmp	r3, #0
 8001080:	d001      	beq.n	8001086 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8001082:	f000 ff29 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001086:	bf00      	nop
 8001088:	3710      	adds	r7, #16
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}
 800108e:	bf00      	nop
 8001090:	20000244 	.word	0x20000244
 8001094:	40012000 	.word	0x40012000
 8001098:	0f000001 	.word	0x0f000001

0800109c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800109c:	b580      	push	{r7, lr}
 800109e:	b08a      	sub	sp, #40	@ 0x28
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010a4:	f107 0314 	add.w	r3, r7, #20
 80010a8:	2200      	movs	r2, #0
 80010aa:	601a      	str	r2, [r3, #0]
 80010ac:	605a      	str	r2, [r3, #4]
 80010ae:	609a      	str	r2, [r3, #8]
 80010b0:	60da      	str	r2, [r3, #12]
 80010b2:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	4a17      	ldr	r2, [pc, #92]	@ (8001118 <HAL_ADC_MspInit+0x7c>)
 80010ba:	4293      	cmp	r3, r2
 80010bc:	d127      	bne.n	800110e <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010be:	2300      	movs	r3, #0
 80010c0:	613b      	str	r3, [r7, #16]
 80010c2:	4b16      	ldr	r3, [pc, #88]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010c6:	4a15      	ldr	r2, [pc, #84]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80010ce:	4b13      	ldr	r3, [pc, #76]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80010d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010d6:	613b      	str	r3, [r7, #16]
 80010d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010da:	2300      	movs	r3, #0
 80010dc:	60fb      	str	r3, [r7, #12]
 80010de:	4b0f      	ldr	r3, [pc, #60]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010e2:	4a0e      	ldr	r2, [pc, #56]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010e4:	f043 0301 	orr.w	r3, r3, #1
 80010e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80010ea:	4b0c      	ldr	r3, [pc, #48]	@ (800111c <HAL_ADC_MspInit+0x80>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80010ee:	f003 0301 	and.w	r3, r3, #1
 80010f2:	60fb      	str	r3, [r7, #12]
 80010f4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80010f6:	2301      	movs	r3, #1
 80010f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010fa:	2303      	movs	r3, #3
 80010fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001102:	f107 0314 	add.w	r3, r7, #20
 8001106:	4619      	mov	r1, r3
 8001108:	4805      	ldr	r0, [pc, #20]	@ (8001120 <HAL_ADC_MspInit+0x84>)
 800110a:	f001 ff15 	bl	8002f38 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 800110e:	bf00      	nop
 8001110:	3728      	adds	r7, #40	@ 0x28
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40012000 	.word	0x40012000
 800111c:	40023800 	.word	0x40023800
 8001120:	40020000 	.word	0x40020000

08001124 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001124:	b580      	push	{r7, lr}
 8001126:	b08a      	sub	sp, #40	@ 0x28
 8001128:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800112a:	f107 0314 	add.w	r3, r7, #20
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]
 8001136:	60da      	str	r2, [r3, #12]
 8001138:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800113a:	2300      	movs	r3, #0
 800113c:	613b      	str	r3, [r7, #16]
 800113e:	4b31      	ldr	r3, [pc, #196]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001140:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001142:	4a30      	ldr	r2, [pc, #192]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001144:	f043 0304 	orr.w	r3, r3, #4
 8001148:	6313      	str	r3, [r2, #48]	@ 0x30
 800114a:	4b2e      	ldr	r3, [pc, #184]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800114c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800114e:	f003 0304 	and.w	r3, r3, #4
 8001152:	613b      	str	r3, [r7, #16]
 8001154:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001156:	2300      	movs	r3, #0
 8001158:	60fb      	str	r3, [r7, #12]
 800115a:	4b2a      	ldr	r3, [pc, #168]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800115c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800115e:	4a29      	ldr	r2, [pc, #164]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001160:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001164:	6313      	str	r3, [r2, #48]	@ 0x30
 8001166:	4b27      	ldr	r3, [pc, #156]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800116a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
 8001176:	4b23      	ldr	r3, [pc, #140]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001178:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800117a:	4a22      	ldr	r2, [pc, #136]	@ (8001204 <MX_GPIO_Init+0xe0>)
 800117c:	f043 0301 	orr.w	r3, r3, #1
 8001180:	6313      	str	r3, [r2, #48]	@ 0x30
 8001182:	4b20      	ldr	r3, [pc, #128]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001184:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001186:	f003 0301 	and.w	r3, r3, #1
 800118a:	60bb      	str	r3, [r7, #8]
 800118c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800118e:	2300      	movs	r3, #0
 8001190:	607b      	str	r3, [r7, #4]
 8001192:	4b1c      	ldr	r3, [pc, #112]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001196:	4a1b      	ldr	r2, [pc, #108]	@ (8001204 <MX_GPIO_Init+0xe0>)
 8001198:	f043 0302 	orr.w	r3, r3, #2
 800119c:	6313      	str	r3, [r2, #48]	@ 0x30
 800119e:	4b19      	ldr	r3, [pc, #100]	@ (8001204 <MX_GPIO_Init+0xe0>)
 80011a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80011a2:	f003 0302 	and.w	r3, r3, #2
 80011a6:	607b      	str	r3, [r7, #4]
 80011a8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80011aa:	2200      	movs	r2, #0
 80011ac:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011b0:	4815      	ldr	r0, [pc, #84]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011b2:	f002 f845 	bl	8003240 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011b6:	2200      	movs	r2, #0
 80011b8:	213b      	movs	r1, #59	@ 0x3b
 80011ba:	4814      	ldr	r0, [pc, #80]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011bc:	f002 f840 	bl	8003240 <HAL_GPIO_WritePin>
                          |GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80011c0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80011c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011c6:	2301      	movs	r3, #1
 80011c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	2300      	movs	r3, #0
 80011d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011d2:	f107 0314 	add.w	r3, r7, #20
 80011d6:	4619      	mov	r1, r3
 80011d8:	480b      	ldr	r0, [pc, #44]	@ (8001208 <MX_GPIO_Init+0xe4>)
 80011da:	f001 fead 	bl	8002f38 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB3 PB4
                           PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_3|GPIO_PIN_4
 80011de:	233b      	movs	r3, #59	@ 0x3b
 80011e0:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80011ee:	f107 0314 	add.w	r3, r7, #20
 80011f2:	4619      	mov	r1, r3
 80011f4:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_GPIO_Init+0xe8>)
 80011f6:	f001 fe9f 	bl	8002f38 <HAL_GPIO_Init>

}
 80011fa:	bf00      	nop
 80011fc:	3728      	adds	r7, #40	@ 0x28
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}
 8001202:	bf00      	nop
 8001204:	40023800 	.word	0x40023800
 8001208:	40020800 	.word	0x40020800
 800120c:	40020400 	.word	0x40020400

08001210 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001214:	4b12      	ldr	r3, [pc, #72]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001216:	4a13      	ldr	r2, [pc, #76]	@ (8001264 <MX_I2C1_Init+0x54>)
 8001218:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 800121a:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <MX_I2C1_Init+0x50>)
 800121c:	4a12      	ldr	r2, [pc, #72]	@ (8001268 <MX_I2C1_Init+0x58>)
 800121e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001220:	4b0f      	ldr	r3, [pc, #60]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001222:	2200      	movs	r2, #0
 8001224:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001226:	4b0e      	ldr	r3, [pc, #56]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800122c:	4b0c      	ldr	r3, [pc, #48]	@ (8001260 <MX_I2C1_Init+0x50>)
 800122e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001232:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001234:	4b0a      	ldr	r3, [pc, #40]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800123a:	4b09      	ldr	r3, [pc, #36]	@ (8001260 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001240:	4b07      	ldr	r3, [pc, #28]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001246:	4b06      	ldr	r3, [pc, #24]	@ (8001260 <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800124c:	4804      	ldr	r0, [pc, #16]	@ (8001260 <MX_I2C1_Init+0x50>)
 800124e:	f002 f811 	bl	8003274 <HAL_I2C_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001258:	f000 fe3e 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800125c:	bf00      	nop
 800125e:	bd80      	pop	{r7, pc}
 8001260:	2000028c 	.word	0x2000028c
 8001264:	40005400 	.word	0x40005400
 8001268:	00061a80 	.word	0x00061a80

0800126c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 800126c:	b580      	push	{r7, lr}
 800126e:	b08a      	sub	sp, #40	@ 0x28
 8001270:	af00      	add	r7, sp, #0
 8001272:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001274:	f107 0314 	add.w	r3, r7, #20
 8001278:	2200      	movs	r2, #0
 800127a:	601a      	str	r2, [r3, #0]
 800127c:	605a      	str	r2, [r3, #4]
 800127e:	609a      	str	r2, [r3, #8]
 8001280:	60da      	str	r2, [r3, #12]
 8001282:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	4a19      	ldr	r2, [pc, #100]	@ (80012f0 <HAL_I2C_MspInit+0x84>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d12c      	bne.n	80012e8 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800128e:	2300      	movs	r3, #0
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	4b18      	ldr	r3, [pc, #96]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001294:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001296:	4a17      	ldr	r2, [pc, #92]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 8001298:	f043 0302 	orr.w	r3, r3, #2
 800129c:	6313      	str	r3, [r2, #48]	@ 0x30
 800129e:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a2:	f003 0302 	and.w	r3, r3, #2
 80012a6:	613b      	str	r3, [r7, #16]
 80012a8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80012aa:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80012ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	2312      	movs	r3, #18
 80012b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b4:	2300      	movs	r3, #0
 80012b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012b8:	2303      	movs	r3, #3
 80012ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80012bc:	2304      	movs	r3, #4
 80012be:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012c0:	f107 0314 	add.w	r3, r7, #20
 80012c4:	4619      	mov	r1, r3
 80012c6:	480c      	ldr	r0, [pc, #48]	@ (80012f8 <HAL_I2C_MspInit+0x8c>)
 80012c8:	f001 fe36 	bl	8002f38 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
 80012d0:	4b08      	ldr	r3, [pc, #32]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012d4:	4a07      	ldr	r2, [pc, #28]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012d6:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80012da:	6413      	str	r3, [r2, #64]	@ 0x40
 80012dc:	4b05      	ldr	r3, [pc, #20]	@ (80012f4 <HAL_I2C_MspInit+0x88>)
 80012de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80012e8:	bf00      	nop
 80012ea:	3728      	adds	r7, #40	@ 0x28
 80012ec:	46bd      	mov	sp, r7
 80012ee:	bd80      	pop	{r7, pc}
 80012f0:	40005400 	.word	0x40005400
 80012f4:	40023800 	.word	0x40023800
 80012f8:	40020400 	.word	0x40020400

080012fc <HAL_UART_RxCpltCallback>:

/**
 * @brief UART Receive Complete Callback.
 * @param huart Pointer to UART handle.
 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
 8001302:	6078      	str	r0, [r7, #4]
	if (huart->Instance == USART1) {
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	4a13      	ldr	r2, [pc, #76]	@ (8001358 <HAL_UART_RxCpltCallback+0x5c>)
 800130a:	4293      	cmp	r3, r2
 800130c:	d120      	bne.n	8001350 <HAL_UART_RxCpltCallback+0x54>
		if (UART1_rxBuffer[0] == '\n') { // Assuming commands are newline terminated
 800130e:	4b13      	ldr	r3, [pc, #76]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b0a      	cmp	r3, #10
 8001314:	d10c      	bne.n	8001330 <HAL_UART_RxCpltCallback+0x34>
			rx_buffer[rx_index] = '\0'; // Null terminate the string
 8001316:	4b12      	ldr	r3, [pc, #72]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	461a      	mov	r2, r3
 800131c:	4b11      	ldr	r3, [pc, #68]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 800131e:	2100      	movs	r1, #0
 8001320:	5499      	strb	r1, [r3, r2]
			rx_complete = 1; // Set flag for command complete
 8001322:	4b11      	ldr	r3, [pc, #68]	@ (8001368 <HAL_UART_RxCpltCallback+0x6c>)
 8001324:	2201      	movs	r2, #1
 8001326:	601a      	str	r2, [r3, #0]
			rx_index = 0; // Reset index
 8001328:	4b0d      	ldr	r3, [pc, #52]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800132a:	2200      	movs	r2, #0
 800132c:	701a      	strb	r2, [r3, #0]
 800132e:	e00a      	b.n	8001346 <HAL_UART_RxCpltCallback+0x4a>
		} else {
			rx_buffer[rx_index++] = UART1_rxBuffer[0]; // Store character in buffer
 8001330:	4b0b      	ldr	r3, [pc, #44]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 8001332:	781b      	ldrb	r3, [r3, #0]
 8001334:	1c5a      	adds	r2, r3, #1
 8001336:	b2d1      	uxtb	r1, r2
 8001338:	4a09      	ldr	r2, [pc, #36]	@ (8001360 <HAL_UART_RxCpltCallback+0x64>)
 800133a:	7011      	strb	r1, [r2, #0]
 800133c:	461a      	mov	r2, r3
 800133e:	4b07      	ldr	r3, [pc, #28]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 8001340:	7819      	ldrb	r1, [r3, #0]
 8001342:	4b08      	ldr	r3, [pc, #32]	@ (8001364 <HAL_UART_RxCpltCallback+0x68>)
 8001344:	5499      	strb	r1, [r3, r2]
		}
		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1); // Listen for next character
 8001346:	2201      	movs	r2, #1
 8001348:	4904      	ldr	r1, [pc, #16]	@ (800135c <HAL_UART_RxCpltCallback+0x60>)
 800134a:	4808      	ldr	r0, [pc, #32]	@ (800136c <HAL_UART_RxCpltCallback+0x70>)
 800134c:	f003 fc20 	bl	8004b90 <HAL_UART_Receive_IT>
	}
}
 8001350:	bf00      	nop
 8001352:	3708      	adds	r7, #8
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40011000 	.word	0x40011000
 800135c:	200003ec 	.word	0x200003ec
 8001360:	200003e4 	.word	0x200003e4
 8001364:	200002e4 	.word	0x200002e4
 8001368:	200003e8 	.word	0x200003e8
 800136c:	200007c4 	.word	0x200007c4

08001370 <pid_controller>:
 * @param pid Pointer to PIDController structure.
 * @param setpoint Desired setpoint.
 * @param measured_value Current measured value.
 * @return Control output.
 */
float pid_controller(PIDController *pid, float setpoint, float measured_value) {
 8001370:	b480      	push	{r7}
 8001372:	b089      	sub	sp, #36	@ 0x24
 8001374:	af00      	add	r7, sp, #0
 8001376:	60f8      	str	r0, [r7, #12]
 8001378:	ed87 0a02 	vstr	s0, [r7, #8]
 800137c:	edc7 0a01 	vstr	s1, [r7, #4]
	float error = setpoint - measured_value;
 8001380:	ed97 7a02 	vldr	s14, [r7, #8]
 8001384:	edd7 7a01 	vldr	s15, [r7, #4]
 8001388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800138c:	edc7 7a07 	vstr	s15, [r7, #28]
	pid->integral += error;
 8001390:	68fb      	ldr	r3, [r7, #12]
 8001392:	ed93 7a00 	vldr	s14, [r3]
 8001396:	edd7 7a07 	vldr	s15, [r7, #28]
 800139a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800139e:	68fb      	ldr	r3, [r7, #12]
 80013a0:	edc3 7a00 	vstr	s15, [r3]
	float derivative = error - pid->previous_error;
 80013a4:	68fb      	ldr	r3, [r7, #12]
 80013a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80013aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80013ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013b2:	edc7 7a06 	vstr	s15, [r7, #24]
	pid->previous_error = error;
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	69fa      	ldr	r2, [r7, #28]
 80013ba:	605a      	str	r2, [r3, #4]

	float output = pid->kp * error + pid->ki * pid->integral
 80013bc:	68fb      	ldr	r3, [r7, #12]
 80013be:	ed93 7a02 	vldr	s14, [r3, #8]
 80013c2:	edd7 7a07 	vldr	s15, [r7, #28]
 80013c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80013ca:	68fb      	ldr	r3, [r7, #12]
 80013cc:	edd3 6a03 	vldr	s13, [r3, #12]
 80013d0:	68fb      	ldr	r3, [r7, #12]
 80013d2:	edd3 7a00 	vldr	s15, [r3]
 80013d6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80013da:	ee37 7a27 	vadd.f32	s14, s14, s15
			+ pid->kd * derivative;
 80013de:	68fb      	ldr	r3, [r7, #12]
 80013e0:	edd3 6a04 	vldr	s13, [r3, #16]
 80013e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80013e8:	ee66 7aa7 	vmul.f32	s15, s13, s15
	float output = pid->kp * error + pid->ki * pid->integral
 80013ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80013f0:	edc7 7a05 	vstr	s15, [r7, #20]
	return output;
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	ee07 3a90 	vmov	s15, r3
}
 80013fa:	eeb0 0a67 	vmov.f32	s0, s15
 80013fe:	3724      	adds	r7, #36	@ 0x24
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <handle_rotation>:

/**
 * @brief Handle the rotation of the robot towards the target angle.
 */
void handle_rotation() {
 8001408:	b580      	push	{r7, lr}
 800140a:	b086      	sub	sp, #24
 800140c:	af00      	add	r7, sp, #0
	float target_angle = calculate_angle(current_x, current_y, target_x,
 800140e:	4b5b      	ldr	r3, [pc, #364]	@ (800157c <handle_rotation+0x174>)
 8001410:	edd3 7a00 	vldr	s15, [r3]
 8001414:	4b5a      	ldr	r3, [pc, #360]	@ (8001580 <handle_rotation+0x178>)
 8001416:	ed93 7a00 	vldr	s14, [r3]
 800141a:	4b5a      	ldr	r3, [pc, #360]	@ (8001584 <handle_rotation+0x17c>)
 800141c:	edd3 6a00 	vldr	s13, [r3]
 8001420:	4b59      	ldr	r3, [pc, #356]	@ (8001588 <handle_rotation+0x180>)
 8001422:	ed93 6a00 	vldr	s12, [r3]
 8001426:	eef0 1a46 	vmov.f32	s3, s12
 800142a:	eeb0 1a66 	vmov.f32	s2, s13
 800142e:	eef0 0a47 	vmov.f32	s1, s14
 8001432:	eeb0 0a67 	vmov.f32	s0, s15
 8001436:	f000 f9eb 	bl	8001810 <calculate_angle>
 800143a:	ed87 0a02 	vstr	s0, [r7, #8]
			target_y);
	float angle_error = target_angle - current_yaw;
 800143e:	4b53      	ldr	r3, [pc, #332]	@ (800158c <handle_rotation+0x184>)
 8001440:	edd3 7a00 	vldr	s15, [r3]
 8001444:	ed97 7a02 	vldr	s14, [r7, #8]
 8001448:	ee77 7a67 	vsub.f32	s15, s14, s15
 800144c:	edc7 7a05 	vstr	s15, [r7, #20]

	// Normalize the angle error to always choose the shortest rotation path
	if (angle_error > 180) {
 8001450:	edd7 7a05 	vldr	s15, [r7, #20]
 8001454:	ed9f 7a4e 	vldr	s14, [pc, #312]	@ 8001590 <handle_rotation+0x188>
 8001458:	eef4 7ac7 	vcmpe.f32	s15, s14
 800145c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001460:	dd08      	ble.n	8001474 <handle_rotation+0x6c>
		angle_error -= 360;
 8001462:	edd7 7a05 	vldr	s15, [r7, #20]
 8001466:	ed9f 7a4b 	vldr	s14, [pc, #300]	@ 8001594 <handle_rotation+0x18c>
 800146a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800146e:	edc7 7a05 	vstr	s15, [r7, #20]
 8001472:	e010      	b.n	8001496 <handle_rotation+0x8e>
	} else if (angle_error < -180) {
 8001474:	edd7 7a05 	vldr	s15, [r7, #20]
 8001478:	ed9f 7a47 	vldr	s14, [pc, #284]	@ 8001598 <handle_rotation+0x190>
 800147c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001480:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001484:	d507      	bpl.n	8001496 <handle_rotation+0x8e>
		angle_error += 360;
 8001486:	edd7 7a05 	vldr	s15, [r7, #20]
 800148a:	ed9f 7a42 	vldr	s14, [pc, #264]	@ 8001594 <handle_rotation+0x18c>
 800148e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001492:	edc7 7a05 	vstr	s15, [r7, #20]
	}

	if (fabsf(angle_error) > ANGLE_THRESHOLD_ROTATE_TO_MOVE) {
 8001496:	edd7 7a05 	vldr	s15, [r7, #20]
 800149a:	eef0 7ae7 	vabs.f32	s15, s15
 800149e:	eeb0 7a08 	vmov.f32	s14, #8	@ 0x40400000  3.0
 80014a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80014a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014aa:	dd56      	ble.n	800155a <handle_rotation+0x152>
		// PID-based correction for rotation
		float rotation_correction = pid_controller(&rotation_pid, 0.0f,
 80014ac:	edd7 0a05 	vldr	s1, [r7, #20]
 80014b0:	ed9f 0a3a 	vldr	s0, [pc, #232]	@ 800159c <handle_rotation+0x194>
 80014b4:	483a      	ldr	r0, [pc, #232]	@ (80015a0 <handle_rotation+0x198>)
 80014b6:	f7ff ff5b 	bl	8001370 <pid_controller>
 80014ba:	ed87 0a01 	vstr	s0, [r7, #4]
				angle_error);

		uint32_t pwm_adjustment = (uint32_t) (fabsf(rotation_correction));
 80014be:	edd7 7a01 	vldr	s15, [r7, #4]
 80014c2:	eef0 7ae7 	vabs.f32	s15, s15
 80014c6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80014ca:	ee17 3a90 	vmov	r3, s15
 80014ce:	613b      	str	r3, [r7, #16]
		uint32_t left_right_pwm;

		if (angle_error > 0) {
 80014d0:	edd7 7a05 	vldr	s15, [r7, #20]
 80014d4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80014d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80014dc:	dd1c      	ble.n	8001518 <handle_rotation+0x110>
			if (pwm_adjustment > (FORWARD_MAX - FORWARD_SLOW)) {
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	f240 723a 	movw	r2, #1850	@ 0x73a
 80014e4:	4293      	cmp	r3, r2
 80014e6:	d902      	bls.n	80014ee <handle_rotation+0xe6>
				pwm_adjustment = FORWARD_MAX - FORWARD_SLOW;
 80014e8:	f240 733a 	movw	r3, #1850	@ 0x73a
 80014ec:	613b      	str	r3, [r7, #16]
			}
			// Rotate right: Both motors move forward speed
			left_right_pwm = FORWARD_SLOW + pwm_adjustment;
 80014ee:	693b      	ldr	r3, [r7, #16]
 80014f0:	f603 43b2 	addw	r3, r3, #3250	@ 0xcb2
 80014f4:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm > FORWARD_MAX)
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 80014fc:	4293      	cmp	r3, r2
 80014fe:	d902      	bls.n	8001506 <handle_rotation+0xfe>
				left_right_pwm = FORWARD_MAX;
 8001500:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001504:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm < FORWARD_SLOW)
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 800150c:	4293      	cmp	r3, r2
 800150e:	d81b      	bhi.n	8001548 <handle_rotation+0x140>
				left_right_pwm = FORWARD_SLOW;
 8001510:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	e017      	b.n	8001548 <handle_rotation+0x140>
		} else {
			if (pwm_adjustment > (BACKWARD_MAX - BACKWARD_SLOW)) {
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	f513 6ffa 	cmn.w	r3, #2000	@ 0x7d0
 800151e:	d901      	bls.n	8001524 <handle_rotation+0x11c>
				pwm_adjustment = BACKWARD_MAX - BACKWARD_SLOW;
 8001520:	4b20      	ldr	r3, [pc, #128]	@ (80015a4 <handle_rotation+0x19c>)
 8001522:	613b      	str	r3, [r7, #16]
			}
			// Rotate left: Both motors move backward speed
			left_right_pwm = BACKWARD_SLOW - pwm_adjustment;
 8001524:	693b      	ldr	r3, [r7, #16]
 8001526:	f5c3 632f 	rsb	r3, r3, #2800	@ 0xaf0
 800152a:	60fb      	str	r3, [r7, #12]

			// Ensure PWM values are within valid ranges
			if (left_right_pwm < BACKWARD_MAX)
 800152c:	68fb      	ldr	r3, [r7, #12]
 800152e:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001532:	d202      	bcs.n	800153a <handle_rotation+0x132>
				left_right_pwm = BACKWARD_MAX;
 8001534:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001538:	60fb      	str	r3, [r7, #12]
			if (left_right_pwm > BACKWARD_SLOW)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 8001540:	d902      	bls.n	8001548 <handle_rotation+0x140>
				left_right_pwm = BACKWARD_SLOW;
 8001542:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001546:	60fb      	str	r3, [r7, #12]
		}

		set_servo_pwm(&servo_left, left_right_pwm);
 8001548:	68f9      	ldr	r1, [r7, #12]
 800154a:	4817      	ldr	r0, [pc, #92]	@ (80015a8 <handle_rotation+0x1a0>)
 800154c:	f000 fbba 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, left_right_pwm);
 8001550:	68f9      	ldr	r1, [r7, #12]
 8001552:	4816      	ldr	r0, [pc, #88]	@ (80015ac <handle_rotation+0x1a4>)
 8001554:	f000 fbb6 	bl	8001cc4 <set_servo_pwm>
		// Stop rotating and switch to moving state
		set_servo_pwm(&servo_left, SERVO_STOP);
		set_servo_pwm(&servo_right, SERVO_STOP);
		current_state = MOVING;
	}
}
 8001558:	e00c      	b.n	8001574 <handle_rotation+0x16c>
		set_servo_pwm(&servo_left, SERVO_STOP);
 800155a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800155e:	4812      	ldr	r0, [pc, #72]	@ (80015a8 <handle_rotation+0x1a0>)
 8001560:	f000 fbb0 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001564:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001568:	4810      	ldr	r0, [pc, #64]	@ (80015ac <handle_rotation+0x1a4>)
 800156a:	f000 fbab 	bl	8001cc4 <set_servo_pwm>
		current_state = MOVING;
 800156e:	4b10      	ldr	r3, [pc, #64]	@ (80015b0 <handle_rotation+0x1a8>)
 8001570:	2202      	movs	r2, #2
 8001572:	701a      	strb	r2, [r3, #0]
}
 8001574:	bf00      	nop
 8001576:	3718      	adds	r7, #24
 8001578:	46bd      	mov	sp, r7
 800157a:	bd80      	pop	{r7, pc}
 800157c:	200003f0 	.word	0x200003f0
 8001580:	200003f4 	.word	0x200003f4
 8001584:	200003fc 	.word	0x200003fc
 8001588:	20000400 	.word	0x20000400
 800158c:	200003f8 	.word	0x200003f8
 8001590:	43340000 	.word	0x43340000
 8001594:	43b40000 	.word	0x43b40000
 8001598:	c3340000 	.word	0xc3340000
 800159c:	00000000 	.word	0x00000000
 80015a0:	20000018 	.word	0x20000018
 80015a4:	fffff830 	.word	0xfffff830
 80015a8:	20000000 	.word	0x20000000
 80015ac:	2000000c 	.word	0x2000000c
 80015b0:	200002e0 	.word	0x200002e0

080015b4 <handle_movement>:

/**
 * @brief Handle the movement of the robot towards the target position.
 */
void handle_movement() {
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b088      	sub	sp, #32
 80015b8:	af00      	add	r7, sp, #0
	float distance = distance_to_target(current_x, current_y, target_x,
 80015ba:	4b81      	ldr	r3, [pc, #516]	@ (80017c0 <handle_movement+0x20c>)
 80015bc:	edd3 7a00 	vldr	s15, [r3]
 80015c0:	4b80      	ldr	r3, [pc, #512]	@ (80017c4 <handle_movement+0x210>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b80      	ldr	r3, [pc, #512]	@ (80017c8 <handle_movement+0x214>)
 80015c8:	edd3 6a00 	vldr	s13, [r3]
 80015cc:	4b7f      	ldr	r3, [pc, #508]	@ (80017cc <handle_movement+0x218>)
 80015ce:	ed93 6a00 	vldr	s12, [r3]
 80015d2:	eef0 1a46 	vmov.f32	s3, s12
 80015d6:	eeb0 1a66 	vmov.f32	s2, s13
 80015da:	eef0 0a47 	vmov.f32	s1, s14
 80015de:	eeb0 0a67 	vmov.f32	s0, s15
 80015e2:	f000 f9d7 	bl	8001994 <distance_to_target>
 80015e6:	ed87 0a03 	vstr	s0, [r7, #12]
			target_y);
	float target_angle = calculate_angle(current_x, current_y, target_x,
 80015ea:	4b75      	ldr	r3, [pc, #468]	@ (80017c0 <handle_movement+0x20c>)
 80015ec:	edd3 7a00 	vldr	s15, [r3]
 80015f0:	4b74      	ldr	r3, [pc, #464]	@ (80017c4 <handle_movement+0x210>)
 80015f2:	ed93 7a00 	vldr	s14, [r3]
 80015f6:	4b74      	ldr	r3, [pc, #464]	@ (80017c8 <handle_movement+0x214>)
 80015f8:	edd3 6a00 	vldr	s13, [r3]
 80015fc:	4b73      	ldr	r3, [pc, #460]	@ (80017cc <handle_movement+0x218>)
 80015fe:	ed93 6a00 	vldr	s12, [r3]
 8001602:	eef0 1a46 	vmov.f32	s3, s12
 8001606:	eeb0 1a66 	vmov.f32	s2, s13
 800160a:	eef0 0a47 	vmov.f32	s1, s14
 800160e:	eeb0 0a67 	vmov.f32	s0, s15
 8001612:	f000 f8fd 	bl	8001810 <calculate_angle>
 8001616:	ed87 0a02 	vstr	s0, [r7, #8]
			target_y);
	float angle_error = target_angle - current_yaw;
 800161a:	4b6d      	ldr	r3, [pc, #436]	@ (80017d0 <handle_movement+0x21c>)
 800161c:	edd3 7a00 	vldr	s15, [r3]
 8001620:	ed97 7a02 	vldr	s14, [r7, #8]
 8001624:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001628:	edc7 7a07 	vstr	s15, [r7, #28]

	// Normalize the angle error to [-180, 180]
	if (angle_error > 180.0f) {
 800162c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001630:	ed9f 7a68 	vldr	s14, [pc, #416]	@ 80017d4 <handle_movement+0x220>
 8001634:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001638:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800163c:	dd08      	ble.n	8001650 <handle_movement+0x9c>
		angle_error -= 360.0f;
 800163e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001642:	ed9f 7a65 	vldr	s14, [pc, #404]	@ 80017d8 <handle_movement+0x224>
 8001646:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800164a:	edc7 7a07 	vstr	s15, [r7, #28]
 800164e:	e010      	b.n	8001672 <handle_movement+0xbe>
	} else if (angle_error < -180.0f) {
 8001650:	edd7 7a07 	vldr	s15, [r7, #28]
 8001654:	ed9f 7a61 	vldr	s14, [pc, #388]	@ 80017dc <handle_movement+0x228>
 8001658:	eef4 7ac7 	vcmpe.f32	s15, s14
 800165c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001660:	d507      	bpl.n	8001672 <handle_movement+0xbe>
		angle_error += 360.0f;
 8001662:	edd7 7a07 	vldr	s15, [r7, #28]
 8001666:	ed9f 7a5c 	vldr	s14, [pc, #368]	@ 80017d8 <handle_movement+0x224>
 800166a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800166e:	edc7 7a07 	vstr	s15, [r7, #28]
	}

	if (distance > DISTANCE_THRESHOLD_MOVE_TO_STOP) {
 8001672:	edd7 7a03 	vldr	s15, [r7, #12]
 8001676:	ed9f 7a5a 	vldr	s14, [pc, #360]	@ 80017e0 <handle_movement+0x22c>
 800167a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800167e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001682:	dd61      	ble.n	8001748 <handle_movement+0x194>
		if (fabsf(angle_error) > ANGLE_THRESHOLD_MOVE_TO_ROTATE) {
 8001684:	edd7 7a07 	vldr	s15, [r7, #28]
 8001688:	eef0 7ae7 	vabs.f32	s15, s15
 800168c:	eeb3 7a09 	vmov.f32	s14, #57	@ 0x41c80000  25.0
 8001690:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001694:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001698:	dd0d      	ble.n	80016b6 <handle_movement+0x102>
			set_servo_pwm(&servo_left, SERVO_STOP);
 800169a:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800169e:	4851      	ldr	r0, [pc, #324]	@ (80017e4 <handle_movement+0x230>)
 80016a0:	f000 fb10 	bl	8001cc4 <set_servo_pwm>
			set_servo_pwm(&servo_right, SERVO_STOP);
 80016a4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 80016a8:	484f      	ldr	r0, [pc, #316]	@ (80017e8 <handle_movement+0x234>)
 80016aa:	f000 fb0b 	bl	8001cc4 <set_servo_pwm>
			current_state = ROTATING;
 80016ae:	4b4f      	ldr	r3, [pc, #316]	@ (80017ec <handle_movement+0x238>)
 80016b0:	2201      	movs	r2, #1
 80016b2:	701a      	strb	r2, [r3, #0]
			return;
 80016b4:	e080      	b.n	80017b8 <handle_movement+0x204>
		}

		// PID-based correction for forward movement
		float movement_correction = pid_controller(&movement_pid, 0.0f,
 80016b6:	edd7 0a07 	vldr	s1, [r7, #28]
 80016ba:	ed9f 0a4d 	vldr	s0, [pc, #308]	@ 80017f0 <handle_movement+0x23c>
 80016be:	484d      	ldr	r0, [pc, #308]	@ (80017f4 <handle_movement+0x240>)
 80016c0:	f7ff fe56 	bl	8001370 <pid_controller>
 80016c4:	ed87 0a01 	vstr	s0, [r7, #4]
				angle_error);

		int32_t pwm_adjustment = (int32_t) (fabsf(movement_correction));
 80016c8:	edd7 7a01 	vldr	s15, [r7, #4]
 80016cc:	eef0 7ae7 	vabs.f32	s15, s15
 80016d0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80016d4:	ee17 3a90 	vmov	r3, s15
 80016d8:	61bb      	str	r3, [r7, #24]

		if (pwm_adjustment > (FORWARD_MAX - FORWARD_SLOW)) {
 80016da:	69bb      	ldr	r3, [r7, #24]
 80016dc:	f240 723a 	movw	r2, #1850	@ 0x73a
 80016e0:	4293      	cmp	r3, r2
 80016e2:	dd02      	ble.n	80016ea <handle_movement+0x136>
			pwm_adjustment = FORWARD_MAX - FORWARD_SLOW;
 80016e4:	f240 733a 	movw	r3, #1850	@ 0x73a
 80016e8:	61bb      	str	r3, [r7, #24]
		}

		// Move forward with one motor forward, one backward
		uint32_t left_pwm = FORWARD_SLOW + pwm_adjustment; // Left motor forward
 80016ea:	69bb      	ldr	r3, [r7, #24]
 80016ec:	f603 43b2 	addw	r3, r3, #3250	@ 0xcb2
 80016f0:	617b      	str	r3, [r7, #20]
		uint32_t right_pwm = BACKWARD_SLOW - pwm_adjustment; // Right motor backward
 80016f2:	69bb      	ldr	r3, [r7, #24]
 80016f4:	f5c3 632f 	rsb	r3, r3, #2800	@ 0xaf0
 80016f8:	613b      	str	r3, [r7, #16]

		// Ensure PWM values are within valid ranges
		if (left_pwm > FORWARD_MAX)
 80016fa:	697b      	ldr	r3, [r7, #20]
 80016fc:	f241 32ec 	movw	r2, #5100	@ 0x13ec
 8001700:	4293      	cmp	r3, r2
 8001702:	d902      	bls.n	800170a <handle_movement+0x156>
			left_pwm = FORWARD_MAX;
 8001704:	f241 33ec 	movw	r3, #5100	@ 0x13ec
 8001708:	617b      	str	r3, [r7, #20]
		if (left_pwm < FORWARD_SLOW)
 800170a:	697b      	ldr	r3, [r7, #20]
 800170c:	f640 42b1 	movw	r2, #3249	@ 0xcb1
 8001710:	4293      	cmp	r3, r2
 8001712:	d802      	bhi.n	800171a <handle_movement+0x166>
			left_pwm = FORWARD_SLOW;
 8001714:	f640 43b2 	movw	r3, #3250	@ 0xcb2
 8001718:	617b      	str	r3, [r7, #20]
		if (right_pwm < BACKWARD_MAX)
 800171a:	693b      	ldr	r3, [r7, #16]
 800171c:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8001720:	d202      	bcs.n	8001728 <handle_movement+0x174>
			right_pwm = BACKWARD_MAX;
 8001722:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8001726:	613b      	str	r3, [r7, #16]
		if (right_pwm > BACKWARD_SLOW)
 8001728:	693b      	ldr	r3, [r7, #16]
 800172a:	f5b3 6f2f 	cmp.w	r3, #2800	@ 0xaf0
 800172e:	d902      	bls.n	8001736 <handle_movement+0x182>
			right_pwm = BACKWARD_SLOW;
 8001730:	f44f 632f 	mov.w	r3, #2800	@ 0xaf0
 8001734:	613b      	str	r3, [r7, #16]

		set_servo_pwm(&servo_left, left_pwm);
 8001736:	6979      	ldr	r1, [r7, #20]
 8001738:	482a      	ldr	r0, [pc, #168]	@ (80017e4 <handle_movement+0x230>)
 800173a:	f000 fac3 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, right_pwm);
 800173e:	6939      	ldr	r1, [r7, #16]
 8001740:	4829      	ldr	r0, [pc, #164]	@ (80017e8 <handle_movement+0x234>)
 8001742:	f000 fabf 	bl	8001cc4 <set_servo_pwm>
 8001746:	e037      	b.n	80017b8 <handle_movement+0x204>
	} else {
		// Stop the robot when it reaches the target
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001748:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 800174c:	4825      	ldr	r0, [pc, #148]	@ (80017e4 <handle_movement+0x230>)
 800174e:	f000 fab9 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001752:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001756:	4824      	ldr	r0, [pc, #144]	@ (80017e8 <handle_movement+0x234>)
 8001758:	f000 fab4 	bl	8001cc4 <set_servo_pwm>

		// Hysteresis for distance threshold
		if (distance < DISTANCE_THRESHOLD_STOP_TO_MOVE) {
 800175c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001760:	ed9f 7a25 	vldr	s14, [pc, #148]	@ 80017f8 <handle_movement+0x244>
 8001764:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001768:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800176c:	d524      	bpl.n	80017b8 <handle_movement+0x204>
			currentTargetIndex++;
 800176e:	4b23      	ldr	r3, [pc, #140]	@ (80017fc <handle_movement+0x248>)
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	3301      	adds	r3, #1
 8001774:	4a21      	ldr	r2, [pc, #132]	@ (80017fc <handle_movement+0x248>)
 8001776:	6013      	str	r3, [r2, #0]
			if (currentTargetIndex < totalCoords) {
 8001778:	4b20      	ldr	r3, [pc, #128]	@ (80017fc <handle_movement+0x248>)
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	4b20      	ldr	r3, [pc, #128]	@ (8001800 <handle_movement+0x24c>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	429a      	cmp	r2, r3
 8001782:	da13      	bge.n	80017ac <handle_movement+0x1f8>
				target_x = xCoords[currentTargetIndex];
 8001784:	4b1d      	ldr	r3, [pc, #116]	@ (80017fc <handle_movement+0x248>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4a1e      	ldr	r2, [pc, #120]	@ (8001804 <handle_movement+0x250>)
 800178a:	009b      	lsls	r3, r3, #2
 800178c:	4413      	add	r3, r2
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4a0d      	ldr	r2, [pc, #52]	@ (80017c8 <handle_movement+0x214>)
 8001792:	6013      	str	r3, [r2, #0]
				target_y = yCoords[currentTargetIndex];
 8001794:	4b19      	ldr	r3, [pc, #100]	@ (80017fc <handle_movement+0x248>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1b      	ldr	r2, [pc, #108]	@ (8001808 <handle_movement+0x254>)
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	4a0a      	ldr	r2, [pc, #40]	@ (80017cc <handle_movement+0x218>)
 80017a2:	6013      	str	r3, [r2, #0]
				current_state = ROTATING;
 80017a4:	4b11      	ldr	r3, [pc, #68]	@ (80017ec <handle_movement+0x238>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
 80017aa:	e005      	b.n	80017b8 <handle_movement+0x204>
			} else {
				current_state = IDLE;
 80017ac:	4b0f      	ldr	r3, [pc, #60]	@ (80017ec <handle_movement+0x238>)
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
				path_set = 0;
 80017b2:	4b16      	ldr	r3, [pc, #88]	@ (800180c <handle_movement+0x258>)
 80017b4:	2200      	movs	r2, #0
 80017b6:	601a      	str	r2, [r3, #0]
			}
		}
	}
}
 80017b8:	3720      	adds	r7, #32
 80017ba:	46bd      	mov	sp, r7
 80017bc:	bd80      	pop	{r7, pc}
 80017be:	bf00      	nop
 80017c0:	200003f0 	.word	0x200003f0
 80017c4:	200003f4 	.word	0x200003f4
 80017c8:	200003fc 	.word	0x200003fc
 80017cc:	20000400 	.word	0x20000400
 80017d0:	200003f8 	.word	0x200003f8
 80017d4:	43340000 	.word	0x43340000
 80017d8:	43b40000 	.word	0x43b40000
 80017dc:	c3340000 	.word	0xc3340000
 80017e0:	3da3d70a 	.word	0x3da3d70a
 80017e4:	20000000 	.word	0x20000000
 80017e8:	2000000c 	.word	0x2000000c
 80017ec:	200002e0 	.word	0x200002e0
 80017f0:	00000000 	.word	0x00000000
 80017f4:	2000002c 	.word	0x2000002c
 80017f8:	3de147ae 	.word	0x3de147ae
 80017fc:	20000728 	.word	0x20000728
 8001800:	20000724 	.word	0x20000724
 8001804:	20000404 	.word	0x20000404
 8001808:	20000594 	.word	0x20000594
 800180c:	2000072c 	.word	0x2000072c

08001810 <calculate_angle>:
 * @param y Current y position.
 * @param x_next Target x position.
 * @param y_next Target y position.
 * @return Angle in degrees.
 */
float calculate_angle(float x, float y, float x_next, float y_next) {
 8001810:	b5b0      	push	{r4, r5, r7, lr}
 8001812:	b08a      	sub	sp, #40	@ 0x28
 8001814:	af00      	add	r7, sp, #0
 8001816:	ed87 0a03 	vstr	s0, [r7, #12]
 800181a:	edc7 0a02 	vstr	s1, [r7, #8]
 800181e:	ed87 1a01 	vstr	s2, [r7, #4]
 8001822:	edc7 1a00 	vstr	s3, [r7]
	// Calculation of the scalar product
	float dot_product = -y * (y_next - y);
 8001826:	edd7 7a02 	vldr	s15, [r7, #8]
 800182a:	eeb1 7a67 	vneg.f32	s14, s15
 800182e:	edd7 6a00 	vldr	s13, [r7]
 8001832:	edd7 7a02 	vldr	s15, [r7, #8]
 8001836:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800183a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800183e:	edc7 7a07 	vstr	s15, [r7, #28]

	// Length of vectors
	float length_v1 = fabsf(y); // Since v1 is the length of (0, -y), the length corresponds to |y|
 8001842:	edd7 7a02 	vldr	s15, [r7, #8]
 8001846:	eef0 7ae7 	vabs.f32	s15, s15
 800184a:	edc7 7a06 	vstr	s15, [r7, #24]
	float length_v2 = (float) sqrt(pow(x_next - x, 2) + pow(y_next - y, 2));
 800184e:	ed97 7a01 	vldr	s14, [r7, #4]
 8001852:	edd7 7a03 	vldr	s15, [r7, #12]
 8001856:	ee77 7a67 	vsub.f32	s15, s14, s15
 800185a:	ee17 0a90 	vmov	r0, s15
 800185e:	f7fe fe7b 	bl	8000558 <__aeabi_f2d>
 8001862:	4602      	mov	r2, r0
 8001864:	460b      	mov	r3, r1
 8001866:	ed9f 1b46 	vldr	d1, [pc, #280]	@ 8001980 <calculate_angle+0x170>
 800186a:	ec43 2b10 	vmov	d0, r2, r3
 800186e:	f009 f8e7 	bl	800aa40 <pow>
 8001872:	ec55 4b10 	vmov	r4, r5, d0
 8001876:	ed97 7a00 	vldr	s14, [r7]
 800187a:	edd7 7a02 	vldr	s15, [r7, #8]
 800187e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001882:	ee17 0a90 	vmov	r0, s15
 8001886:	f7fe fe67 	bl	8000558 <__aeabi_f2d>
 800188a:	4602      	mov	r2, r0
 800188c:	460b      	mov	r3, r1
 800188e:	ed9f 1b3c 	vldr	d1, [pc, #240]	@ 8001980 <calculate_angle+0x170>
 8001892:	ec43 2b10 	vmov	d0, r2, r3
 8001896:	f009 f8d3 	bl	800aa40 <pow>
 800189a:	ec53 2b10 	vmov	r2, r3, d0
 800189e:	4620      	mov	r0, r4
 80018a0:	4629      	mov	r1, r5
 80018a2:	f7fe fcfb 	bl	800029c <__adddf3>
 80018a6:	4602      	mov	r2, r0
 80018a8:	460b      	mov	r3, r1
 80018aa:	ec43 2b17 	vmov	d7, r2, r3
 80018ae:	eeb0 0a47 	vmov.f32	s0, s14
 80018b2:	eef0 0a67 	vmov.f32	s1, s15
 80018b6:	f009 f933 	bl	800ab20 <sqrt>
 80018ba:	ec53 2b10 	vmov	r2, r3, d0
 80018be:	4610      	mov	r0, r2
 80018c0:	4619      	mov	r1, r3
 80018c2:	f7ff f999 	bl	8000bf8 <__aeabi_d2f>
 80018c6:	4603      	mov	r3, r0
 80018c8:	617b      	str	r3, [r7, #20]

	// Calculating the cosine of the angle
	float cos_theta = dot_product / (length_v1 * length_v2);
 80018ca:	ed97 7a06 	vldr	s14, [r7, #24]
 80018ce:	edd7 7a05 	vldr	s15, [r7, #20]
 80018d2:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018d6:	edd7 6a07 	vldr	s13, [r7, #28]
 80018da:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80018de:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

	// Clamp cos_theta to [-1, 1] to avoid NaNs due to floating point errors
	if (cos_theta > 1.0f)
 80018e2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80018ea:	eef4 7ac7 	vcmpe.f32	s15, s14
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	dd02      	ble.n	80018fa <calculate_angle+0xea>
		cos_theta = 1.0f;
 80018f4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80018f8:	627b      	str	r3, [r7, #36]	@ 0x24
	if (cos_theta < -1.0f)
 80018fa:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80018fe:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8001902:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001906:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800190a:	d501      	bpl.n	8001910 <calculate_angle+0x100>
		cos_theta = -1.0f;
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <calculate_angle+0x180>)
 800190e:	627b      	str	r3, [r7, #36]	@ 0x24

	// Calculation of the angle in radians and conversion to degrees
	float theta_rad = (float) acos(cos_theta);
 8001910:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8001912:	f7fe fe21 	bl	8000558 <__aeabi_f2d>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	ec43 2b10 	vmov	d0, r2, r3
 800191e:	f009 f85b 	bl	800a9d8 <acos>
 8001922:	ec53 2b10 	vmov	r2, r3, d0
 8001926:	4610      	mov	r0, r2
 8001928:	4619      	mov	r1, r3
 800192a:	f7ff f965 	bl	8000bf8 <__aeabi_d2f>
 800192e:	4603      	mov	r3, r0
 8001930:	613b      	str	r3, [r7, #16]
	float theta_deg = (float) (theta_rad * (180.0 / M_PI));
 8001932:	6938      	ldr	r0, [r7, #16]
 8001934:	f7fe fe10 	bl	8000558 <__aeabi_f2d>
 8001938:	a313      	add	r3, pc, #76	@ (adr r3, 8001988 <calculate_angle+0x178>)
 800193a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800193e:	f7fe fe63 	bl	8000608 <__aeabi_dmul>
 8001942:	4602      	mov	r2, r0
 8001944:	460b      	mov	r3, r1
 8001946:	4610      	mov	r0, r2
 8001948:	4619      	mov	r1, r3
 800194a:	f7ff f955 	bl	8000bf8 <__aeabi_d2f>
 800194e:	4603      	mov	r3, r0
 8001950:	623b      	str	r3, [r7, #32]

	// Determining the direction
	if (x_next < x) {
 8001952:	ed97 7a01 	vldr	s14, [r7, #4]
 8001956:	edd7 7a03 	vldr	s15, [r7, #12]
 800195a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001962:	d505      	bpl.n	8001970 <calculate_angle+0x160>
		theta_deg = -theta_deg; // Negative angle if x_next is to the left of x
 8001964:	edd7 7a08 	vldr	s15, [r7, #32]
 8001968:	eef1 7a67 	vneg.f32	s15, s15
 800196c:	edc7 7a08 	vstr	s15, [r7, #32]
	}

	return theta_deg;
 8001970:	6a3b      	ldr	r3, [r7, #32]
 8001972:	ee07 3a90 	vmov	s15, r3
}
 8001976:	eeb0 0a67 	vmov.f32	s0, s15
 800197a:	3728      	adds	r7, #40	@ 0x28
 800197c:	46bd      	mov	sp, r7
 800197e:	bdb0      	pop	{r4, r5, r7, pc}
 8001980:	00000000 	.word	0x00000000
 8001984:	40000000 	.word	0x40000000
 8001988:	1a63c1f8 	.word	0x1a63c1f8
 800198c:	404ca5dc 	.word	0x404ca5dc
 8001990:	bf800000 	.word	0xbf800000

08001994 <distance_to_target>:
 * @param target_x Target x position.
 * @param target_y Target y position.
 * @return Distance to target.
 */
float distance_to_target(float current_x, float current_y, float target_x,
		float target_y) {
 8001994:	b580      	push	{r7, lr}
 8001996:	ed2d 8b02 	vpush	{d8}
 800199a:	b084      	sub	sp, #16
 800199c:	af00      	add	r7, sp, #0
 800199e:	ed87 0a03 	vstr	s0, [r7, #12]
 80019a2:	edc7 0a02 	vstr	s1, [r7, #8]
 80019a6:	ed87 1a01 	vstr	s2, [r7, #4]
 80019aa:	edc7 1a00 	vstr	s3, [r7]
	return sqrtf(
			powf(target_x - current_x, 2.0f) + powf(target_y - current_y, 2.0f));
 80019ae:	ed97 7a01 	vldr	s14, [r7, #4]
 80019b2:	edd7 7a03 	vldr	s15, [r7, #12]
 80019b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ba:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80019be:	eeb0 0a67 	vmov.f32	s0, s15
 80019c2:	f009 f8e1 	bl	800ab88 <powf>
 80019c6:	eeb0 8a40 	vmov.f32	s16, s0
 80019ca:	ed97 7a00 	vldr	s14, [r7]
 80019ce:	edd7 7a02 	vldr	s15, [r7, #8]
 80019d2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019d6:	eef0 0a00 	vmov.f32	s1, #0	@ 0x40000000  2.0
 80019da:	eeb0 0a67 	vmov.f32	s0, s15
 80019de:	f009 f8d3 	bl	800ab88 <powf>
 80019e2:	eef0 7a40 	vmov.f32	s15, s0
	return sqrtf(
 80019e6:	ee78 7a27 	vadd.f32	s15, s16, s15
 80019ea:	eeb0 0a67 	vmov.f32	s0, s15
 80019ee:	f009 f923 	bl	800ac38 <sqrtf>
 80019f2:	eef0 7a40 	vmov.f32	s15, s0
}
 80019f6:	eeb0 0a67 	vmov.f32	s0, s15
 80019fa:	3710      	adds	r7, #16
 80019fc:	46bd      	mov	sp, r7
 80019fe:	ecbd 8b02 	vpop	{d8}
 8001a02:	bd80      	pop	{r7, pc}

08001a04 <execute_command>:

/**
 * @brief Execute received command from ESP8266.
 * @param cmd The command string.
 */
void execute_command(const char *cmd) {
 8001a04:	b590      	push	{r4, r7, lr}
 8001a06:	f5ad 7d09 	sub.w	sp, sp, #548	@ 0x224
 8001a0a:	af02      	add	r7, sp, #8
 8001a0c:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a10:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a14:	6018      	str	r0, [r3, #0]
	if (strncmp(cmd, "STOP", 4) == 0) {
 8001a16:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a1a:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a1e:	2204      	movs	r2, #4
 8001a20:	4994      	ldr	r1, [pc, #592]	@ (8001c74 <execute_command+0x270>)
 8001a22:	6818      	ldr	r0, [r3, #0]
 8001a24:	f005 fdb7 	bl	8007596 <strncmp>
 8001a28:	4603      	mov	r3, r0
 8001a2a:	2b00      	cmp	r3, #0
 8001a2c:	d110      	bne.n	8001a50 <execute_command+0x4c>
		set_servo_pwm(&servo_left, SERVO_STOP);
 8001a2e:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001a32:	4891      	ldr	r0, [pc, #580]	@ (8001c78 <execute_command+0x274>)
 8001a34:	f000 f946 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, SERVO_STOP);
 8001a38:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8001a3c:	488f      	ldr	r0, [pc, #572]	@ (8001c7c <execute_command+0x278>)
 8001a3e:	f000 f941 	bl	8001cc4 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001a42:	4b8f      	ldr	r3, [pc, #572]	@ (8001c80 <execute_command+0x27c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	601a      	str	r2, [r3, #0]
		current_state = IDLE;
 8001a48:	4b8e      	ldr	r3, [pc, #568]	@ (8001c84 <execute_command+0x280>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	701a      	strb	r2, [r3, #0]
 8001a4e:	e10c      	b.n	8001c6a <execute_command+0x266>
	} else if (strncmp(cmd, "START_SPINNING", 14) == 0) {
 8001a50:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a54:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a58:	220e      	movs	r2, #14
 8001a5a:	498b      	ldr	r1, [pc, #556]	@ (8001c88 <execute_command+0x284>)
 8001a5c:	6818      	ldr	r0, [r3, #0]
 8001a5e:	f005 fd9a 	bl	8007596 <strncmp>
 8001a62:	4603      	mov	r3, r0
 8001a64:	2b00      	cmp	r3, #0
 8001a66:	d110      	bne.n	8001a8a <execute_command+0x86>
		set_servo_pwm(&servo_left, FORWARD_MAX);
 8001a68:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001a6c:	4882      	ldr	r0, [pc, #520]	@ (8001c78 <execute_command+0x274>)
 8001a6e:	f000 f929 	bl	8001cc4 <set_servo_pwm>
		set_servo_pwm(&servo_right, FORWARD_MAX);
 8001a72:	f241 31ec 	movw	r1, #5100	@ 0x13ec
 8001a76:	4881      	ldr	r0, [pc, #516]	@ (8001c7c <execute_command+0x278>)
 8001a78:	f000 f924 	bl	8001cc4 <set_servo_pwm>
		path_set = 0; 								// Set the path flag
 8001a7c:	4b80      	ldr	r3, [pc, #512]	@ (8001c80 <execute_command+0x27c>)
 8001a7e:	2200      	movs	r2, #0
 8001a80:	601a      	str	r2, [r3, #0]
		current_state = SPINNING;
 8001a82:	4b80      	ldr	r3, [pc, #512]	@ (8001c84 <execute_command+0x280>)
 8001a84:	2203      	movs	r2, #3
 8001a86:	701a      	strb	r2, [r3, #0]
 8001a88:	e0ef      	b.n	8001c6a <execute_command+0x266>
	} else if (strncmp(cmd, "LOCATION_UPDATE", 15) == 0) {
 8001a8a:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001a8e:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001a92:	220f      	movs	r2, #15
 8001a94:	497d      	ldr	r1, [pc, #500]	@ (8001c8c <execute_command+0x288>)
 8001a96:	6818      	ldr	r0, [r3, #0]
 8001a98:	f005 fd7d 	bl	8007596 <strncmp>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d12c      	bne.n	8001afc <execute_command+0xf8>
		sscanf(cmd + 16, "%f;%f;%f", &current_x, &current_y, &current_yaw);
 8001aa2:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001aa6:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f103 0010 	add.w	r0, r3, #16
 8001ab0:	4b77      	ldr	r3, [pc, #476]	@ (8001c90 <execute_command+0x28c>)
 8001ab2:	9300      	str	r3, [sp, #0]
 8001ab4:	4b77      	ldr	r3, [pc, #476]	@ (8001c94 <execute_command+0x290>)
 8001ab6:	4a78      	ldr	r2, [pc, #480]	@ (8001c98 <execute_command+0x294>)
 8001ab8:	4978      	ldr	r1, [pc, #480]	@ (8001c9c <execute_command+0x298>)
 8001aba:	f005 fcf5 	bl	80074a8 <siscanf>

		if (path_set && current_state == IDLE) {
 8001abe:	4b70      	ldr	r3, [pc, #448]	@ (8001c80 <execute_command+0x27c>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 80d1 	beq.w	8001c6a <execute_command+0x266>
 8001ac8:	4b6e      	ldr	r3, [pc, #440]	@ (8001c84 <execute_command+0x280>)
 8001aca:	781b      	ldrb	r3, [r3, #0]
 8001acc:	b2db      	uxtb	r3, r3
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	f040 80cb 	bne.w	8001c6a <execute_command+0x266>
			target_x = xCoords[currentTargetIndex];
 8001ad4:	4b72      	ldr	r3, [pc, #456]	@ (8001ca0 <execute_command+0x29c>)
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	4a72      	ldr	r2, [pc, #456]	@ (8001ca4 <execute_command+0x2a0>)
 8001ada:	009b      	lsls	r3, r3, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	681b      	ldr	r3, [r3, #0]
 8001ae0:	4a71      	ldr	r2, [pc, #452]	@ (8001ca8 <execute_command+0x2a4>)
 8001ae2:	6013      	str	r3, [r2, #0]
			target_y = yCoords[currentTargetIndex];
 8001ae4:	4b6e      	ldr	r3, [pc, #440]	@ (8001ca0 <execute_command+0x29c>)
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	4a70      	ldr	r2, [pc, #448]	@ (8001cac <execute_command+0x2a8>)
 8001aea:	009b      	lsls	r3, r3, #2
 8001aec:	4413      	add	r3, r2
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	4a6f      	ldr	r2, [pc, #444]	@ (8001cb0 <execute_command+0x2ac>)
 8001af2:	6013      	str	r3, [r2, #0]
			current_state = ROTATING;
 8001af4:	4b63      	ldr	r3, [pc, #396]	@ (8001c84 <execute_command+0x280>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
 8001afa:	e0b6      	b.n	8001c6a <execute_command+0x266>
		}
	} else if (strncmp(cmd, "PATH_UPDATE", 11) == 0) {
 8001afc:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b00:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b04:	220b      	movs	r2, #11
 8001b06:	496b      	ldr	r1, [pc, #428]	@ (8001cb4 <execute_command+0x2b0>)
 8001b08:	6818      	ldr	r0, [r3, #0]
 8001b0a:	f005 fd44 	bl	8007596 <strncmp>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	f040 80aa 	bne.w	8001c6a <execute_command+0x266>
		memset(xCoords, 0, sizeof(xCoords));
 8001b16:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b1a:	2100      	movs	r1, #0
 8001b1c:	4861      	ldr	r0, [pc, #388]	@ (8001ca4 <execute_command+0x2a0>)
 8001b1e:	f005 fd32 	bl	8007586 <memset>
		memset(yCoords, 0, sizeof(yCoords));
 8001b22:	f44f 72c8 	mov.w	r2, #400	@ 0x190
 8001b26:	2100      	movs	r1, #0
 8001b28:	4860      	ldr	r0, [pc, #384]	@ (8001cac <execute_command+0x2a8>)
 8001b2a:	f005 fd2c 	bl	8007586 <memset>
		totalCoords = 0;
 8001b2e:	4b62      	ldr	r3, [pc, #392]	@ (8001cb8 <execute_command+0x2b4>)
 8001b30:	2200      	movs	r2, #0
 8001b32:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001b34:	4b5a      	ldr	r3, [pc, #360]	@ (8001ca0 <execute_command+0x29c>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]

		// Extract x and y coordinates and the amount of coordinates
		char x_values[256];  // Buffer for x values
		char y_values[256];  // Buffer for y values
		int amount_of_coordinates = 0;
 8001b3a:	2300      	movs	r3, #0
 8001b3c:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Extract the x values, y values, and the number of coordinates
		sscanf(cmd + 12, "%[^;];%[^;];%d", x_values, y_values,
 8001b40:	f507 7306 	add.w	r3, r7, #536	@ 0x218
 8001b44:	f5a3 7305 	sub.w	r3, r3, #532	@ 0x214
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f103 000c 	add.w	r0, r3, #12
 8001b4e:	f507 7186 	add.w	r1, r7, #268	@ 0x10c
 8001b52:	f107 020c 	add.w	r2, r7, #12
 8001b56:	f507 7303 	add.w	r3, r7, #524	@ 0x20c
 8001b5a:	9300      	str	r3, [sp, #0]
 8001b5c:	460b      	mov	r3, r1
 8001b5e:	4957      	ldr	r1, [pc, #348]	@ (8001cbc <execute_command+0x2b8>)
 8001b60:	f005 fca2 	bl	80074a8 <siscanf>
				&amount_of_coordinates);

		amount_of_coordinates = amount_of_coordinates / 2;
 8001b64:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001b68:	0fda      	lsrs	r2, r3, #31
 8001b6a:	4413      	add	r3, r2
 8001b6c:	105b      	asrs	r3, r3, #1
 8001b6e:	f8c7 320c 	str.w	r3, [r7, #524]	@ 0x20c

		// Now, x_values contains "x0:x1:x2:...", y_values contains "y0:y1:y2:...", and amount_of_coordinates is an integer
		// Ensure that the number of coordinates does not exceed MAX_COORDS
		totalCoords =
				(amount_of_coordinates > MAX_COORDS) ?
				MAX_COORDS :
 8001b72:	f8d7 320c 	ldr.w	r3, [r7, #524]	@ 0x20c
 8001b76:	2b64      	cmp	r3, #100	@ 0x64
 8001b78:	bfa8      	it	ge
 8001b7a:	2364      	movge	r3, #100	@ 0x64
		totalCoords =
 8001b7c:	4a4e      	ldr	r2, [pc, #312]	@ (8001cb8 <execute_command+0x2b4>)
 8001b7e:	6013      	str	r3, [r2, #0]
														amount_of_coordinates;

		char *token;
		int index = 0;
 8001b80:	2300      	movs	r3, #0
 8001b82:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210

		// Split x values by ':' and store them in an array
		token = strtok(x_values, ":");
 8001b86:	f107 030c 	add.w	r3, r7, #12
 8001b8a:	494d      	ldr	r1, [pc, #308]	@ (8001cc0 <execute_command+0x2bc>)
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f005 fd15 	bl	80075bc <strtok>
 8001b92:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001b96:	e017      	b.n	8001bc8 <execute_command+0x1c4>
			xCoords[index++] = atof(token);
 8001b98:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001b9c:	f003 ff1c 	bl	80059d8 <atof>
 8001ba0:	ec51 0b10 	vmov	r0, r1, d0
 8001ba4:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001ba8:	1c63      	adds	r3, r4, #1
 8001baa:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001bae:	f7ff f823 	bl	8000bf8 <__aeabi_d2f>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	493b      	ldr	r1, [pc, #236]	@ (8001ca4 <execute_command+0x2a0>)
 8001bb6:	00a3      	lsls	r3, r4, #2
 8001bb8:	440b      	add	r3, r1
 8001bba:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001bbc:	4940      	ldr	r1, [pc, #256]	@ (8001cc0 <execute_command+0x2bc>)
 8001bbe:	2000      	movs	r0, #0
 8001bc0:	f005 fcfc 	bl	80075bc <strtok>
 8001bc4:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001bc8:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d005      	beq.n	8001bdc <execute_command+0x1d8>
 8001bd0:	4b39      	ldr	r3, [pc, #228]	@ (8001cb8 <execute_command+0x2b4>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	dbdd      	blt.n	8001b98 <execute_command+0x194>
		}
		if (index != totalCoords) {
 8001bdc:	4b36      	ldr	r3, [pc, #216]	@ (8001cb8 <execute_command+0x2b4>)
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001be4:	429a      	cmp	r2, r3
 8001be6:	d13d      	bne.n	8001c64 <execute_command+0x260>
			return;
		}

		// Split y values by ':' and store them in an array
		index = 0;
 8001be8:	2300      	movs	r3, #0
 8001bea:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
		token = strtok(y_values, ":");
 8001bee:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001bf2:	4933      	ldr	r1, [pc, #204]	@ (8001cc0 <execute_command+0x2bc>)
 8001bf4:	4618      	mov	r0, r3
 8001bf6:	f005 fce1 	bl	80075bc <strtok>
 8001bfa:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001bfe:	e017      	b.n	8001c30 <execute_command+0x22c>
			yCoords[index++] = atof(token);
 8001c00:	f8d7 0214 	ldr.w	r0, [r7, #532]	@ 0x214
 8001c04:	f003 fee8 	bl	80059d8 <atof>
 8001c08:	ec51 0b10 	vmov	r0, r1, d0
 8001c0c:	f8d7 4210 	ldr.w	r4, [r7, #528]	@ 0x210
 8001c10:	1c63      	adds	r3, r4, #1
 8001c12:	f8c7 3210 	str.w	r3, [r7, #528]	@ 0x210
 8001c16:	f7fe ffef 	bl	8000bf8 <__aeabi_d2f>
 8001c1a:	4602      	mov	r2, r0
 8001c1c:	4923      	ldr	r1, [pc, #140]	@ (8001cac <execute_command+0x2a8>)
 8001c1e:	00a3      	lsls	r3, r4, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	601a      	str	r2, [r3, #0]
			token = strtok(NULL, ":");
 8001c24:	4926      	ldr	r1, [pc, #152]	@ (8001cc0 <execute_command+0x2bc>)
 8001c26:	2000      	movs	r0, #0
 8001c28:	f005 fcc8 	bl	80075bc <strtok>
 8001c2c:	f8c7 0214 	str.w	r0, [r7, #532]	@ 0x214
		while (token != NULL && index < totalCoords) {
 8001c30:	f8d7 3214 	ldr.w	r3, [r7, #532]	@ 0x214
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d005      	beq.n	8001c44 <execute_command+0x240>
 8001c38:	4b1f      	ldr	r3, [pc, #124]	@ (8001cb8 <execute_command+0x2b4>)
 8001c3a:	681b      	ldr	r3, [r3, #0]
 8001c3c:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001c40:	429a      	cmp	r2, r3
 8001c42:	dbdd      	blt.n	8001c00 <execute_command+0x1fc>
		}
		if (index != totalCoords) {
 8001c44:	4b1c      	ldr	r3, [pc, #112]	@ (8001cb8 <execute_command+0x2b4>)
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	f8d7 2210 	ldr.w	r2, [r7, #528]	@ 0x210
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	d10b      	bne.n	8001c68 <execute_command+0x264>
			return;
		}

		path_set = 1; // Set the target flag
 8001c50:	4b0b      	ldr	r3, [pc, #44]	@ (8001c80 <execute_command+0x27c>)
 8001c52:	2201      	movs	r2, #1
 8001c54:	601a      	str	r2, [r3, #0]
		currentTargetIndex = 0;
 8001c56:	4b12      	ldr	r3, [pc, #72]	@ (8001ca0 <execute_command+0x29c>)
 8001c58:	2200      	movs	r2, #0
 8001c5a:	601a      	str	r2, [r3, #0]
		current_state = ROTATING;  // Start with rotating to face the target
 8001c5c:	4b09      	ldr	r3, [pc, #36]	@ (8001c84 <execute_command+0x280>)
 8001c5e:	2201      	movs	r2, #1
 8001c60:	701a      	strb	r2, [r3, #0]
 8001c62:	e002      	b.n	8001c6a <execute_command+0x266>
			return;
 8001c64:	bf00      	nop
 8001c66:	e000      	b.n	8001c6a <execute_command+0x266>
			return;
 8001c68:	bf00      	nop
	}
}
 8001c6a:	f507 7707 	add.w	r7, r7, #540	@ 0x21c
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	bd90      	pop	{r4, r7, pc}
 8001c72:	bf00      	nop
 8001c74:	0800c5f8 	.word	0x0800c5f8
 8001c78:	20000000 	.word	0x20000000
 8001c7c:	2000000c 	.word	0x2000000c
 8001c80:	2000072c 	.word	0x2000072c
 8001c84:	200002e0 	.word	0x200002e0
 8001c88:	0800c600 	.word	0x0800c600
 8001c8c:	0800c610 	.word	0x0800c610
 8001c90:	200003f8 	.word	0x200003f8
 8001c94:	200003f4 	.word	0x200003f4
 8001c98:	200003f0 	.word	0x200003f0
 8001c9c:	0800c620 	.word	0x0800c620
 8001ca0:	20000728 	.word	0x20000728
 8001ca4:	20000404 	.word	0x20000404
 8001ca8:	200003fc 	.word	0x200003fc
 8001cac:	20000594 	.word	0x20000594
 8001cb0:	20000400 	.word	0x20000400
 8001cb4:	0800c62c 	.word	0x0800c62c
 8001cb8:	20000724 	.word	0x20000724
 8001cbc:	0800c638 	.word	0x0800c638
 8001cc0:	0800c648 	.word	0x0800c648

08001cc4 <set_servo_pwm>:
/**
 * @brief Set the PWM value for a servo motor.
 * @param servo Pointer to the Servo structure.
 * @param pulse PWM value to set.
 */
void set_servo_pwm(Servo *servo, uint32_t pulse) {
 8001cc4:	b480      	push	{r7}
 8001cc6:	b083      	sub	sp, #12
 8001cc8:	af00      	add	r7, sp, #0
 8001cca:	6078      	str	r0, [r7, #4]
 8001ccc:	6039      	str	r1, [r7, #0]
	servo->current_pwm = pulse;
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	683a      	ldr	r2, [r7, #0]
 8001cd2:	609a      	str	r2, [r3, #8]
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	685b      	ldr	r3, [r3, #4]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d105      	bne.n	8001ce8 <set_servo_pwm+0x24>
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	681b      	ldr	r3, [r3, #0]
 8001ce2:	683a      	ldr	r2, [r7, #0]
 8001ce4:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8001ce6:	e018      	b.n	8001d1a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	2b04      	cmp	r3, #4
 8001cee:	d105      	bne.n	8001cfc <set_servo_pwm+0x38>
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	681b      	ldr	r3, [r3, #0]
 8001cf4:	681a      	ldr	r2, [r3, #0]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	6393      	str	r3, [r2, #56]	@ 0x38
}
 8001cfa:	e00e      	b.n	8001d1a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	2b08      	cmp	r3, #8
 8001d02:	d105      	bne.n	8001d10 <set_servo_pwm+0x4c>
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	681a      	ldr	r2, [r3, #0]
 8001d0a:	683b      	ldr	r3, [r7, #0]
 8001d0c:	63d3      	str	r3, [r2, #60]	@ 0x3c
}
 8001d0e:	e004      	b.n	8001d1a <set_servo_pwm+0x56>
	__HAL_TIM_SET_COMPARE(servo->htim, servo->channel, pulse);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	681a      	ldr	r2, [r3, #0]
 8001d16:	683b      	ldr	r3, [r7, #0]
 8001d18:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8001d1a:	bf00      	nop
 8001d1c:	370c      	adds	r7, #12
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
	...

08001d28 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001d2c:	f000 fc68 	bl	8002600 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001d30:	f000 f866 	bl	8001e00 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001d34:	f7ff f9f6 	bl	8001124 <MX_GPIO_Init>
	MX_TIM1_Init();
 8001d38:	f000 fa10 	bl	800215c <MX_TIM1_Init>
	MX_TIM2_Init();
 8001d3c:	f000 faae 	bl	800229c <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001d40:	f000 fbba 	bl	80024b8 <MX_USART1_UART_Init>
	MX_I2C1_Init();
 8001d44:	f7ff fa64 	bl	8001210 <MX_I2C1_Init>
	MX_ADC1_Init();
 8001d48:	f7ff f954 	bl	8000ff4 <MX_ADC1_Init>
	/* USER CODE BEGIN 2 */

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_SET);
 8001d4c:	2201      	movs	r2, #1
 8001d4e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d52:	4822      	ldr	r0, [pc, #136]	@ (8001ddc <main+0xb4>)
 8001d54:	f001 fa74 	bl	8003240 <HAL_GPIO_WritePin>
	HAL_Delay(2000);
 8001d58:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d5c:	f000 fcc2 	bl	80026e4 <HAL_Delay>
	 }
	 Gz_mean /= CALIB;
	 Ax_mean /= CALIB;
	 Ay_mean /= CALIB;*/

	HAL_TIM_PWM_Init(&htim1);
 8001d60:	481f      	ldr	r0, [pc, #124]	@ (8001de0 <main+0xb8>)
 8001d62:	f002 f899 	bl	8003e98 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Init(&htim2);
 8001d66:	481f      	ldr	r0, [pc, #124]	@ (8001de4 <main+0xbc>)
 8001d68:	f002 f896 	bl	8003e98 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8001d6c:	2100      	movs	r1, #0
 8001d6e:	481c      	ldr	r0, [pc, #112]	@ (8001de0 <main+0xb8>)
 8001d70:	f002 f8ec 	bl	8003f4c <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8001d74:	2108      	movs	r1, #8
 8001d76:	481b      	ldr	r0, [pc, #108]	@ (8001de4 <main+0xbc>)
 8001d78:	f002 f8e8 	bl	8003f4c <HAL_TIM_PWM_Start>
	TIM1->CR1 = 0x01;
 8001d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8001de8 <main+0xc0>)
 8001d7e:	2201      	movs	r2, #1
 8001d80:	601a      	str	r2, [r3, #0]
	TIM2->CR1 = 0x01;
 8001d82:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001d86:	2201      	movs	r2, #1
 8001d88:	601a      	str	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, sizeof(UART1_rxBuffer)); // interrupt based
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	4917      	ldr	r1, [pc, #92]	@ (8001dec <main+0xc4>)
 8001d8e:	4818      	ldr	r0, [pc, #96]	@ (8001df0 <main+0xc8>)
 8001d90:	f002 fefe 	bl	8004b90 <HAL_UART_Receive_IT>

	HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8001d94:	2200      	movs	r2, #0
 8001d96:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001d9a:	4810      	ldr	r0, [pc, #64]	@ (8001ddc <main+0xb4>)
 8001d9c:	f001 fa50 	bl	8003240 <HAL_GPIO_WritePin>
	/* USER CODE END 2 */

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (rx_complete) {
 8001da0:	4b14      	ldr	r3, [pc, #80]	@ (8001df4 <main+0xcc>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d005      	beq.n	8001db4 <main+0x8c>
			execute_command(rx_buffer); // Process the command
 8001da8:	4813      	ldr	r0, [pc, #76]	@ (8001df8 <main+0xd0>)
 8001daa:	f7ff fe2b 	bl	8001a04 <execute_command>
			rx_complete = 0; // Reset the completion flag
 8001dae:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <main+0xcc>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	601a      	str	r2, [r3, #0]
		}
		switch (current_state) {
 8001db4:	4b11      	ldr	r3, [pc, #68]	@ (8001dfc <main+0xd4>)
 8001db6:	781b      	ldrb	r3, [r3, #0]
 8001db8:	b2db      	uxtb	r3, r3
 8001dba:	2b03      	cmp	r3, #3
 8001dbc:	d00c      	beq.n	8001dd8 <main+0xb0>
 8001dbe:	2b03      	cmp	r3, #3
 8001dc0:	dcee      	bgt.n	8001da0 <main+0x78>
 8001dc2:	2b01      	cmp	r3, #1
 8001dc4:	d002      	beq.n	8001dcc <main+0xa4>
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d003      	beq.n	8001dd2 <main+0xaa>
 8001dca:	e006      	b.n	8001dda <main+0xb2>
		case ROTATING:
			handle_rotation();
 8001dcc:	f7ff fb1c 	bl	8001408 <handle_rotation>
			break;
 8001dd0:	e003      	b.n	8001dda <main+0xb2>
		case MOVING:
			handle_movement();
 8001dd2:	f7ff fbef 	bl	80015b4 <handle_movement>
			break;
 8001dd6:	e000      	b.n	8001dda <main+0xb2>
		case SPINNING:
			// Spinning is already handled in execute_command
			break;
 8001dd8:	bf00      	nop
		if (rx_complete) {
 8001dda:	e7e1      	b.n	8001da0 <main+0x78>
 8001ddc:	40020800 	.word	0x40020800
 8001de0:	20000734 	.word	0x20000734
 8001de4:	2000077c 	.word	0x2000077c
 8001de8:	40010000 	.word	0x40010000
 8001dec:	200003ec 	.word	0x200003ec
 8001df0:	200007c4 	.word	0x200007c4
 8001df4:	200003e8 	.word	0x200003e8
 8001df8:	200002e4 	.word	0x200002e4
 8001dfc:	200002e0 	.word	0x200002e0

08001e00 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001e00:	b580      	push	{r7, lr}
 8001e02:	b094      	sub	sp, #80	@ 0x50
 8001e04:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001e06:	f107 0320 	add.w	r3, r7, #32
 8001e0a:	2230      	movs	r2, #48	@ 0x30
 8001e0c:	2100      	movs	r1, #0
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f005 fbb9 	bl	8007586 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001e14:	f107 030c 	add.w	r3, r7, #12
 8001e18:	2200      	movs	r2, #0
 8001e1a:	601a      	str	r2, [r3, #0]
 8001e1c:	605a      	str	r2, [r3, #4]
 8001e1e:	609a      	str	r2, [r3, #8]
 8001e20:	60da      	str	r2, [r3, #12]
 8001e22:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001e24:	2300      	movs	r3, #0
 8001e26:	60bb      	str	r3, [r7, #8]
 8001e28:	4b29      	ldr	r3, [pc, #164]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e2c:	4a28      	ldr	r2, [pc, #160]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e2e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001e32:	6413      	str	r3, [r2, #64]	@ 0x40
 8001e34:	4b26      	ldr	r3, [pc, #152]	@ (8001ed0 <SystemClock_Config+0xd0>)
 8001e36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001e38:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e3c:	60bb      	str	r3, [r7, #8]
 8001e3e:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001e40:	2300      	movs	r3, #0
 8001e42:	607b      	str	r3, [r7, #4]
 8001e44:	4b23      	ldr	r3, [pc, #140]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8001e4c:	4a21      	ldr	r2, [pc, #132]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e4e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8001e52:	6013      	str	r3, [r2, #0]
 8001e54:	4b1f      	ldr	r3, [pc, #124]	@ (8001ed4 <SystemClock_Config+0xd4>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001e5c:	607b      	str	r3, [r7, #4]
 8001e5e:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001e60:	2301      	movs	r3, #1
 8001e62:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001e64:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001e68:	627b      	str	r3, [r7, #36]	@ 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001e6e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
	RCC_OscInitStruct.PLL.PLLM = 20;
 8001e74:	2314      	movs	r3, #20
 8001e76:	643b      	str	r3, [r7, #64]	@ 0x40
	RCC_OscInitStruct.PLL.PLLN = 128;
 8001e78:	2380      	movs	r3, #128	@ 0x80
 8001e7a:	647b      	str	r3, [r7, #68]	@ 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	64bb      	str	r3, [r7, #72]	@ 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001e80:	2304      	movs	r3, #4
 8001e82:	64fb      	str	r3, [r7, #76]	@ 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001e84:	f107 0320 	add.w	r3, r7, #32
 8001e88:	4618      	mov	r0, r3
 8001e8a:	f001 fb37 	bl	80034fc <HAL_RCC_OscConfig>
 8001e8e:	4603      	mov	r3, r0
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d001      	beq.n	8001e98 <SystemClock_Config+0x98>
		Error_Handler();
 8001e94:	f000 f820 	bl	8001ed8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001e98:	230f      	movs	r3, #15
 8001e9a:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9c:	2302      	movs	r3, #2
 8001e9e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001ea4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ea8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001eae:	f107 030c 	add.w	r3, r7, #12
 8001eb2:	2102      	movs	r1, #2
 8001eb4:	4618      	mov	r0, r3
 8001eb6:	f001 fd99 	bl	80039ec <HAL_RCC_ClockConfig>
 8001eba:	4603      	mov	r3, r0
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d001      	beq.n	8001ec4 <SystemClock_Config+0xc4>
		Error_Handler();
 8001ec0:	f000 f80a 	bl	8001ed8 <Error_Handler>
	}

	/** Enables the Clock Security System
	 */
	HAL_RCC_EnableCSS();
 8001ec4:	f001 fe78 	bl	8003bb8 <HAL_RCC_EnableCSS>
}
 8001ec8:	bf00      	nop
 8001eca:	3750      	adds	r7, #80	@ 0x50
 8001ecc:	46bd      	mov	sp, r7
 8001ece:	bd80      	pop	{r7, pc}
 8001ed0:	40023800 	.word	0x40023800
 8001ed4:	40007000 	.word	0x40007000

08001ed8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001ed8:	b480      	push	{r7}
 8001eda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001edc:	b672      	cpsid	i
}
 8001ede:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001ee0:	bf00      	nop
 8001ee2:	e7fd      	b.n	8001ee0 <Error_Handler+0x8>

08001ee4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ee4:	b480      	push	{r7}
 8001ee6:	b083      	sub	sp, #12
 8001ee8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eea:	2300      	movs	r3, #0
 8001eec:	607b      	str	r3, [r7, #4]
 8001eee:	4b10      	ldr	r3, [pc, #64]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001ef0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ef2:	4a0f      	ldr	r2, [pc, #60]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001ef4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001ef8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001efa:	4b0d      	ldr	r3, [pc, #52]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001efc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001efe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001f02:	607b      	str	r3, [r7, #4]
 8001f04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	603b      	str	r3, [r7, #0]
 8001f0a:	4b09      	ldr	r3, [pc, #36]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f0e:	4a08      	ldr	r2, [pc, #32]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f14:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f16:	4b06      	ldr	r3, [pc, #24]	@ (8001f30 <HAL_MspInit+0x4c>)
 8001f18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f1e:	603b      	str	r3, [r7, #0]
 8001f20:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f22:	bf00      	nop
 8001f24:	370c      	adds	r7, #12
 8001f26:	46bd      	mov	sp, r7
 8001f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f2c:	4770      	bx	lr
 8001f2e:	bf00      	nop
 8001f30:	40023800 	.word	0x40023800

08001f34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  HAL_RCC_NMI_IRQHandler();
 8001f38:	f001 ff44 	bl	8003dc4 <HAL_RCC_NMI_IRQHandler>
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
	while (1) {
 8001f3c:	bf00      	nop
 8001f3e:	e7fd      	b.n	8001f3c <NMI_Handler+0x8>

08001f40 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f40:	b480      	push	{r7}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f44:	bf00      	nop
 8001f46:	e7fd      	b.n	8001f44 <HardFault_Handler+0x4>

08001f48 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f4c:	bf00      	nop
 8001f4e:	e7fd      	b.n	8001f4c <MemManage_Handler+0x4>

08001f50 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f54:	bf00      	nop
 8001f56:	e7fd      	b.n	8001f54 <BusFault_Handler+0x4>

08001f58 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f5c:	bf00      	nop
 8001f5e:	e7fd      	b.n	8001f5c <UsageFault_Handler+0x4>

08001f60 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001f60:	b480      	push	{r7}
 8001f62:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001f64:	bf00      	nop
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr

08001f6e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f6e:	b480      	push	{r7}
 8001f70:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	46bd      	mov	sp, r7
 8001f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7a:	4770      	bx	lr

08001f7c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001f7c:	b480      	push	{r7}
 8001f7e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001f80:	bf00      	nop
 8001f82:	46bd      	mov	sp, r7
 8001f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f88:	4770      	bx	lr

08001f8a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001f8a:	b580      	push	{r7, lr}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001f8e:	f000 fb89 	bl	80026a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001f92:	bf00      	nop
 8001f94:	bd80      	pop	{r7, pc}
	...

08001f98 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001f9c:	4802      	ldr	r0, [pc, #8]	@ (8001fa8 <USART1_IRQHandler+0x10>)
 8001f9e:	f002 fe1d 	bl	8004bdc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001fa2:	bf00      	nop
 8001fa4:	bd80      	pop	{r7, pc}
 8001fa6:	bf00      	nop
 8001fa8:	200007c4 	.word	0x200007c4

08001fac <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001fac:	b480      	push	{r7}
 8001fae:	af00      	add	r7, sp, #0
  return 1;
 8001fb0:	2301      	movs	r3, #1
}
 8001fb2:	4618      	mov	r0, r3
 8001fb4:	46bd      	mov	sp, r7
 8001fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fba:	4770      	bx	lr

08001fbc <_kill>:

int _kill(int pid, int sig)
{
 8001fbc:	b580      	push	{r7, lr}
 8001fbe:	b082      	sub	sp, #8
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001fc6:	f005 fb9f 	bl	8007708 <__errno>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	2216      	movs	r2, #22
 8001fce:	601a      	str	r2, [r3, #0]
  return -1;
 8001fd0:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001fd4:	4618      	mov	r0, r3
 8001fd6:	3708      	adds	r7, #8
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}

08001fdc <_exit>:

void _exit (int status)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b082      	sub	sp, #8
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001fe4:	f04f 31ff 	mov.w	r1, #4294967295
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f7ff ffe7 	bl	8001fbc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001fee:	bf00      	nop
 8001ff0:	e7fd      	b.n	8001fee <_exit+0x12>

08001ff2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ff2:	b580      	push	{r7, lr}
 8001ff4:	b086      	sub	sp, #24
 8001ff6:	af00      	add	r7, sp, #0
 8001ff8:	60f8      	str	r0, [r7, #12]
 8001ffa:	60b9      	str	r1, [r7, #8]
 8001ffc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ffe:	2300      	movs	r3, #0
 8002000:	617b      	str	r3, [r7, #20]
 8002002:	e00a      	b.n	800201a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002004:	f3af 8000 	nop.w
 8002008:	4601      	mov	r1, r0
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	1c5a      	adds	r2, r3, #1
 800200e:	60ba      	str	r2, [r7, #8]
 8002010:	b2ca      	uxtb	r2, r1
 8002012:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	3301      	adds	r3, #1
 8002018:	617b      	str	r3, [r7, #20]
 800201a:	697a      	ldr	r2, [r7, #20]
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	429a      	cmp	r2, r3
 8002020:	dbf0      	blt.n	8002004 <_read+0x12>
  }

  return len;
 8002022:	687b      	ldr	r3, [r7, #4]
}
 8002024:	4618      	mov	r0, r3
 8002026:	3718      	adds	r7, #24
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}

0800202c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800202c:	b580      	push	{r7, lr}
 800202e:	b086      	sub	sp, #24
 8002030:	af00      	add	r7, sp, #0
 8002032:	60f8      	str	r0, [r7, #12]
 8002034:	60b9      	str	r1, [r7, #8]
 8002036:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002038:	2300      	movs	r3, #0
 800203a:	617b      	str	r3, [r7, #20]
 800203c:	e009      	b.n	8002052 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	1c5a      	adds	r2, r3, #1
 8002042:	60ba      	str	r2, [r7, #8]
 8002044:	781b      	ldrb	r3, [r3, #0]
 8002046:	4618      	mov	r0, r3
 8002048:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800204c:	697b      	ldr	r3, [r7, #20]
 800204e:	3301      	adds	r3, #1
 8002050:	617b      	str	r3, [r7, #20]
 8002052:	697a      	ldr	r2, [r7, #20]
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	429a      	cmp	r2, r3
 8002058:	dbf1      	blt.n	800203e <_write+0x12>
  }
  return len;
 800205a:	687b      	ldr	r3, [r7, #4]
}
 800205c:	4618      	mov	r0, r3
 800205e:	3718      	adds	r7, #24
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_close>:

int _close(int file)
{
 8002064:	b480      	push	{r7}
 8002066:	b083      	sub	sp, #12
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800206c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002070:	4618      	mov	r0, r3
 8002072:	370c      	adds	r7, #12
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002086:	683b      	ldr	r3, [r7, #0]
 8002088:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800208c:	605a      	str	r2, [r3, #4]
  return 0;
 800208e:	2300      	movs	r3, #0
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr

0800209c <_isatty>:

int _isatty(int file)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80020a4:	2301      	movs	r3, #1
}
 80020a6:	4618      	mov	r0, r3
 80020a8:	370c      	adds	r7, #12
 80020aa:	46bd      	mov	sp, r7
 80020ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020b0:	4770      	bx	lr

080020b2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80020b2:	b480      	push	{r7}
 80020b4:	b085      	sub	sp, #20
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80020be:	2300      	movs	r3, #0
}
 80020c0:	4618      	mov	r0, r3
 80020c2:	3714      	adds	r7, #20
 80020c4:	46bd      	mov	sp, r7
 80020c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ca:	4770      	bx	lr

080020cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b086      	sub	sp, #24
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80020d4:	4a14      	ldr	r2, [pc, #80]	@ (8002128 <_sbrk+0x5c>)
 80020d6:	4b15      	ldr	r3, [pc, #84]	@ (800212c <_sbrk+0x60>)
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80020dc:	697b      	ldr	r3, [r7, #20]
 80020de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80020e0:	4b13      	ldr	r3, [pc, #76]	@ (8002130 <_sbrk+0x64>)
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	2b00      	cmp	r3, #0
 80020e6:	d102      	bne.n	80020ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80020e8:	4b11      	ldr	r3, [pc, #68]	@ (8002130 <_sbrk+0x64>)
 80020ea:	4a12      	ldr	r2, [pc, #72]	@ (8002134 <_sbrk+0x68>)
 80020ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80020ee:	4b10      	ldr	r3, [pc, #64]	@ (8002130 <_sbrk+0x64>)
 80020f0:	681a      	ldr	r2, [r3, #0]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	4413      	add	r3, r2
 80020f6:	693a      	ldr	r2, [r7, #16]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d207      	bcs.n	800210c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80020fc:	f005 fb04 	bl	8007708 <__errno>
 8002100:	4603      	mov	r3, r0
 8002102:	220c      	movs	r2, #12
 8002104:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002106:	f04f 33ff 	mov.w	r3, #4294967295
 800210a:	e009      	b.n	8002120 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800210c:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <_sbrk+0x64>)
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002112:	4b07      	ldr	r3, [pc, #28]	@ (8002130 <_sbrk+0x64>)
 8002114:	681a      	ldr	r2, [r3, #0]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	4413      	add	r3, r2
 800211a:	4a05      	ldr	r2, [pc, #20]	@ (8002130 <_sbrk+0x64>)
 800211c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	4618      	mov	r0, r3
 8002122:	3718      	adds	r7, #24
 8002124:	46bd      	mov	sp, r7
 8002126:	bd80      	pop	{r7, pc}
 8002128:	20010000 	.word	0x20010000
 800212c:	00000400 	.word	0x00000400
 8002130:	20000730 	.word	0x20000730
 8002134:	20000960 	.word	0x20000960

08002138 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002138:	b480      	push	{r7}
 800213a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800213c:	4b06      	ldr	r3, [pc, #24]	@ (8002158 <SystemInit+0x20>)
 800213e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002142:	4a05      	ldr	r2, [pc, #20]	@ (8002158 <SystemInit+0x20>)
 8002144:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002148:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800214c:	bf00      	nop
 800214e:	46bd      	mov	sp, r7
 8002150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002154:	4770      	bx	lr
 8002156:	bf00      	nop
 8002158:	e000ed00 	.word	0xe000ed00

0800215c <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 800215c:	b580      	push	{r7, lr}
 800215e:	b096      	sub	sp, #88	@ 0x58
 8002160:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002162:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8002166:	2200      	movs	r2, #0
 8002168:	601a      	str	r2, [r3, #0]
 800216a:	605a      	str	r2, [r3, #4]
 800216c:	609a      	str	r2, [r3, #8]
 800216e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002170:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002174:	2200      	movs	r2, #0
 8002176:	601a      	str	r2, [r3, #0]
 8002178:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800217a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800217e:	2200      	movs	r2, #0
 8002180:	601a      	str	r2, [r3, #0]
 8002182:	605a      	str	r2, [r3, #4]
 8002184:	609a      	str	r2, [r3, #8]
 8002186:	60da      	str	r2, [r3, #12]
 8002188:	611a      	str	r2, [r3, #16]
 800218a:	615a      	str	r2, [r3, #20]
 800218c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800218e:	1d3b      	adds	r3, r7, #4
 8002190:	2220      	movs	r2, #32
 8002192:	2100      	movs	r1, #0
 8002194:	4618      	mov	r0, r3
 8002196:	f005 f9f6 	bl	8007586 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800219a:	4b3e      	ldr	r3, [pc, #248]	@ (8002294 <MX_TIM1_Init+0x138>)
 800219c:	4a3e      	ldr	r2, [pc, #248]	@ (8002298 <MX_TIM1_Init+0x13c>)
 800219e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 39;
 80021a0:	4b3c      	ldr	r3, [pc, #240]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021a2:	2227      	movs	r2, #39	@ 0x27
 80021a4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80021a6:	4b3b      	ldr	r3, [pc, #236]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 39999;
 80021ac:	4b39      	ldr	r3, [pc, #228]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021ae:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80021b2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80021b4:	4b37      	ldr	r3, [pc, #220]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021b6:	2200      	movs	r2, #0
 80021b8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80021ba:	4b36      	ldr	r3, [pc, #216]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021bc:	2200      	movs	r2, #0
 80021be:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80021c0:	4b34      	ldr	r3, [pc, #208]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021c2:	2200      	movs	r2, #0
 80021c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80021c6:	4833      	ldr	r0, [pc, #204]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021c8:	f001 fe17 	bl	8003dfa <HAL_TIM_Base_Init>
 80021cc:	4603      	mov	r3, r0
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d001      	beq.n	80021d6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80021d2:	f7ff fe81 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80021d6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80021da:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80021dc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80021e0:	4619      	mov	r1, r3
 80021e2:	482c      	ldr	r0, [pc, #176]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021e4:	f002 f824 	bl	8004230 <HAL_TIM_ConfigClockSource>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d001      	beq.n	80021f2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80021ee:	f7ff fe73 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80021f2:	4828      	ldr	r0, [pc, #160]	@ (8002294 <MX_TIM1_Init+0x138>)
 80021f4:	f001 fe50 	bl	8003e98 <HAL_TIM_PWM_Init>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80021fe:	f7ff fe6b 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002202:	2300      	movs	r3, #0
 8002204:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002206:	2300      	movs	r3, #0
 8002208:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800220a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800220e:	4619      	mov	r1, r3
 8002210:	4820      	ldr	r0, [pc, #128]	@ (8002294 <MX_TIM1_Init+0x138>)
 8002212:	f002 fbad 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 8002216:	4603      	mov	r3, r0
 8002218:	2b00      	cmp	r3, #0
 800221a:	d001      	beq.n	8002220 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800221c:	f7ff fe5c 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8002220:	2360      	movs	r3, #96	@ 0x60
 8002222:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8002224:	2300      	movs	r3, #0
 8002226:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002228:	2300      	movs	r3, #0
 800222a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800222c:	2300      	movs	r3, #0
 800222e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8002230:	2300      	movs	r3, #0
 8002232:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8002234:	2300      	movs	r3, #0
 8002236:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8002238:	2300      	movs	r3, #0
 800223a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800223c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8002240:	2200      	movs	r2, #0
 8002242:	4619      	mov	r1, r3
 8002244:	4813      	ldr	r0, [pc, #76]	@ (8002294 <MX_TIM1_Init+0x138>)
 8002246:	f001 ff31 	bl	80040ac <HAL_TIM_PWM_ConfigChannel>
 800224a:	4603      	mov	r3, r0
 800224c:	2b00      	cmp	r3, #0
 800224e:	d001      	beq.n	8002254 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8002250:	f7ff fe42 	bl	8001ed8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8002254:	2300      	movs	r3, #0
 8002256:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8002258:	2300      	movs	r3, #0
 800225a:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8002260:	2300      	movs	r3, #0
 8002262:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8002264:	2300      	movs	r3, #0
 8002266:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8002268:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800226c:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800226e:	2300      	movs	r3, #0
 8002270:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8002272:	1d3b      	adds	r3, r7, #4
 8002274:	4619      	mov	r1, r3
 8002276:	4807      	ldr	r0, [pc, #28]	@ (8002294 <MX_TIM1_Init+0x138>)
 8002278:	f002 fbe8 	bl	8004a4c <HAL_TIMEx_ConfigBreakDeadTime>
 800227c:	4603      	mov	r3, r0
 800227e:	2b00      	cmp	r3, #0
 8002280:	d001      	beq.n	8002286 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8002282:	f7ff fe29 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8002286:	4803      	ldr	r0, [pc, #12]	@ (8002294 <MX_TIM1_Init+0x138>)
 8002288:	f000 f8b4 	bl	80023f4 <HAL_TIM_MspPostInit>

}
 800228c:	bf00      	nop
 800228e:	3758      	adds	r7, #88	@ 0x58
 8002290:	46bd      	mov	sp, r7
 8002292:	bd80      	pop	{r7, pc}
 8002294:	20000734 	.word	0x20000734
 8002298:	40010000 	.word	0x40010000

0800229c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800229c:	b580      	push	{r7, lr}
 800229e:	b08e      	sub	sp, #56	@ 0x38
 80022a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80022a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80022a6:	2200      	movs	r2, #0
 80022a8:	601a      	str	r2, [r3, #0]
 80022aa:	605a      	str	r2, [r3, #4]
 80022ac:	609a      	str	r2, [r3, #8]
 80022ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80022b0:	f107 0320 	add.w	r3, r7, #32
 80022b4:	2200      	movs	r2, #0
 80022b6:	601a      	str	r2, [r3, #0]
 80022b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80022ba:	1d3b      	adds	r3, r7, #4
 80022bc:	2200      	movs	r2, #0
 80022be:	601a      	str	r2, [r3, #0]
 80022c0:	605a      	str	r2, [r3, #4]
 80022c2:	609a      	str	r2, [r3, #8]
 80022c4:	60da      	str	r2, [r3, #12]
 80022c6:	611a      	str	r2, [r3, #16]
 80022c8:	615a      	str	r2, [r3, #20]
 80022ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80022cc:	4b2d      	ldr	r3, [pc, #180]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022ce:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80022d2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 39;
 80022d4:	4b2b      	ldr	r3, [pc, #172]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022d6:	2227      	movs	r2, #39	@ 0x27
 80022d8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80022da:	4b2a      	ldr	r3, [pc, #168]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022dc:	2200      	movs	r2, #0
 80022de:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 39999;
 80022e0:	4b28      	ldr	r3, [pc, #160]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022e2:	f649 423f 	movw	r2, #39999	@ 0x9c3f
 80022e6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022e8:	4b26      	ldr	r3, [pc, #152]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022ea:	2200      	movs	r2, #0
 80022ec:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022ee:	4b25      	ldr	r3, [pc, #148]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022f4:	4823      	ldr	r0, [pc, #140]	@ (8002384 <MX_TIM2_Init+0xe8>)
 80022f6:	f001 fd80 	bl	8003dfa <HAL_TIM_Base_Init>
 80022fa:	4603      	mov	r3, r0
 80022fc:	2b00      	cmp	r3, #0
 80022fe:	d001      	beq.n	8002304 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8002300:	f7ff fdea 	bl	8001ed8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002304:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002308:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800230a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800230e:	4619      	mov	r1, r3
 8002310:	481c      	ldr	r0, [pc, #112]	@ (8002384 <MX_TIM2_Init+0xe8>)
 8002312:	f001 ff8d 	bl	8004230 <HAL_TIM_ConfigClockSource>
 8002316:	4603      	mov	r3, r0
 8002318:	2b00      	cmp	r3, #0
 800231a:	d001      	beq.n	8002320 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 800231c:	f7ff fddc 	bl	8001ed8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002320:	4818      	ldr	r0, [pc, #96]	@ (8002384 <MX_TIM2_Init+0xe8>)
 8002322:	f001 fdb9 	bl	8003e98 <HAL_TIM_PWM_Init>
 8002326:	4603      	mov	r3, r0
 8002328:	2b00      	cmp	r3, #0
 800232a:	d001      	beq.n	8002330 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 800232c:	f7ff fdd4 	bl	8001ed8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002330:	2300      	movs	r3, #0
 8002332:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002334:	2300      	movs	r3, #0
 8002336:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8002338:	f107 0320 	add.w	r3, r7, #32
 800233c:	4619      	mov	r1, r3
 800233e:	4811      	ldr	r0, [pc, #68]	@ (8002384 <MX_TIM2_Init+0xe8>)
 8002340:	f002 fb16 	bl	8004970 <HAL_TIMEx_MasterConfigSynchronization>
 8002344:	4603      	mov	r3, r0
 8002346:	2b00      	cmp	r3, #0
 8002348:	d001      	beq.n	800234e <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800234a:	f7ff fdc5 	bl	8001ed8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800234e:	2360      	movs	r3, #96	@ 0x60
 8002350:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8002352:	2300      	movs	r3, #0
 8002354:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800235a:	2300      	movs	r3, #0
 800235c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800235e:	1d3b      	adds	r3, r7, #4
 8002360:	2208      	movs	r2, #8
 8002362:	4619      	mov	r1, r3
 8002364:	4807      	ldr	r0, [pc, #28]	@ (8002384 <MX_TIM2_Init+0xe8>)
 8002366:	f001 fea1 	bl	80040ac <HAL_TIM_PWM_ConfigChannel>
 800236a:	4603      	mov	r3, r0
 800236c:	2b00      	cmp	r3, #0
 800236e:	d001      	beq.n	8002374 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8002370:	f7ff fdb2 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8002374:	4803      	ldr	r0, [pc, #12]	@ (8002384 <MX_TIM2_Init+0xe8>)
 8002376:	f000 f83d 	bl	80023f4 <HAL_TIM_MspPostInit>

}
 800237a:	bf00      	nop
 800237c:	3738      	adds	r7, #56	@ 0x38
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
 8002382:	bf00      	nop
 8002384:	2000077c 	.word	0x2000077c

08002388 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8002388:	b480      	push	{r7}
 800238a:	b085      	sub	sp, #20
 800238c:	af00      	add	r7, sp, #0
 800238e:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a15      	ldr	r2, [pc, #84]	@ (80023ec <HAL_TIM_Base_MspInit+0x64>)
 8002396:	4293      	cmp	r3, r2
 8002398:	d10e      	bne.n	80023b8 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	60fb      	str	r3, [r7, #12]
 800239e:	4b14      	ldr	r3, [pc, #80]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a13      	ldr	r2, [pc, #76]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023a4:	f043 0301 	orr.w	r3, r3, #1
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b11      	ldr	r3, [pc, #68]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f003 0301 	and.w	r3, r3, #1
 80023b2:	60fb      	str	r3, [r7, #12]
 80023b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 80023b6:	e012      	b.n	80023de <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023c0:	d10d      	bne.n	80023de <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	60bb      	str	r3, [r7, #8]
 80023c6:	4b0a      	ldr	r3, [pc, #40]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	4a09      	ldr	r2, [pc, #36]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023d2:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_TIM_Base_MspInit+0x68>)
 80023d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	60bb      	str	r3, [r7, #8]
 80023dc:	68bb      	ldr	r3, [r7, #8]
}
 80023de:	bf00      	nop
 80023e0:	3714      	adds	r7, #20
 80023e2:	46bd      	mov	sp, r7
 80023e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e8:	4770      	bx	lr
 80023ea:	bf00      	nop
 80023ec:	40010000 	.word	0x40010000
 80023f0:	40023800 	.word	0x40023800

080023f4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80023f4:	b580      	push	{r7, lr}
 80023f6:	b08a      	sub	sp, #40	@ 0x28
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023fc:	f107 0314 	add.w	r3, r7, #20
 8002400:	2200      	movs	r2, #0
 8002402:	601a      	str	r2, [r3, #0]
 8002404:	605a      	str	r2, [r3, #4]
 8002406:	609a      	str	r2, [r3, #8]
 8002408:	60da      	str	r2, [r3, #12]
 800240a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a25      	ldr	r2, [pc, #148]	@ (80024a8 <HAL_TIM_MspPostInit+0xb4>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d11f      	bne.n	8002456 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002416:	2300      	movs	r3, #0
 8002418:	613b      	str	r3, [r7, #16]
 800241a:	4b24      	ldr	r3, [pc, #144]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 800241c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800241e:	4a23      	ldr	r2, [pc, #140]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 8002420:	f043 0301 	orr.w	r3, r3, #1
 8002424:	6313      	str	r3, [r2, #48]	@ 0x30
 8002426:	4b21      	ldr	r3, [pc, #132]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 8002428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800242a:	f003 0301 	and.w	r3, r3, #1
 800242e:	613b      	str	r3, [r7, #16]
 8002430:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002436:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002438:	2302      	movs	r3, #2
 800243a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800243c:	2300      	movs	r3, #0
 800243e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002440:	2300      	movs	r3, #0
 8002442:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002444:	2301      	movs	r3, #1
 8002446:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002448:	f107 0314 	add.w	r3, r7, #20
 800244c:	4619      	mov	r1, r3
 800244e:	4818      	ldr	r0, [pc, #96]	@ (80024b0 <HAL_TIM_MspPostInit+0xbc>)
 8002450:	f000 fd72 	bl	8002f38 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8002454:	e023      	b.n	800249e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800245e:	d11e      	bne.n	800249e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002460:	2300      	movs	r3, #0
 8002462:	60fb      	str	r3, [r7, #12]
 8002464:	4b11      	ldr	r3, [pc, #68]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 8002466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002468:	4a10      	ldr	r2, [pc, #64]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 800246a:	f043 0302 	orr.w	r3, r3, #2
 800246e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002470:	4b0e      	ldr	r3, [pc, #56]	@ (80024ac <HAL_TIM_MspPostInit+0xb8>)
 8002472:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002474:	f003 0302 	and.w	r3, r3, #2
 8002478:	60fb      	str	r3, [r7, #12]
 800247a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800247c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002480:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800248e:	2301      	movs	r3, #1
 8002490:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002492:	f107 0314 	add.w	r3, r7, #20
 8002496:	4619      	mov	r1, r3
 8002498:	4806      	ldr	r0, [pc, #24]	@ (80024b4 <HAL_TIM_MspPostInit+0xc0>)
 800249a:	f000 fd4d 	bl	8002f38 <HAL_GPIO_Init>
}
 800249e:	bf00      	nop
 80024a0:	3728      	adds	r7, #40	@ 0x28
 80024a2:	46bd      	mov	sp, r7
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	40010000 	.word	0x40010000
 80024ac:	40023800 	.word	0x40023800
 80024b0:	40020000 	.word	0x40020000
 80024b4:	40020400 	.word	0x40020400

080024b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80024bc:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024be:	4a12      	ldr	r2, [pc, #72]	@ (8002508 <MX_USART1_UART_Init+0x50>)
 80024c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80024c2:	4b10      	ldr	r3, [pc, #64]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024c4:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80024c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80024d0:	4b0c      	ldr	r3, [pc, #48]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d2:	2200      	movs	r2, #0
 80024d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80024d6:	4b0b      	ldr	r3, [pc, #44]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024d8:	2200      	movs	r2, #0
 80024da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80024dc:	4b09      	ldr	r3, [pc, #36]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024de:	220c      	movs	r2, #12
 80024e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024e2:	4b08      	ldr	r3, [pc, #32]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80024e8:	4b06      	ldr	r3, [pc, #24]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024ea:	2200      	movs	r2, #0
 80024ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80024ee:	4805      	ldr	r0, [pc, #20]	@ (8002504 <MX_USART1_UART_Init+0x4c>)
 80024f0:	f002 fafe 	bl	8004af0 <HAL_UART_Init>
 80024f4:	4603      	mov	r3, r0
 80024f6:	2b00      	cmp	r3, #0
 80024f8:	d001      	beq.n	80024fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80024fa:	f7ff fced 	bl	8001ed8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80024fe:	bf00      	nop
 8002500:	bd80      	pop	{r7, pc}
 8002502:	bf00      	nop
 8002504:	200007c4 	.word	0x200007c4
 8002508:	40011000 	.word	0x40011000

0800250c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08a      	sub	sp, #40	@ 0x28
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002514:	f107 0314 	add.w	r3, r7, #20
 8002518:	2200      	movs	r2, #0
 800251a:	601a      	str	r2, [r3, #0]
 800251c:	605a      	str	r2, [r3, #4]
 800251e:	609a      	str	r2, [r3, #8]
 8002520:	60da      	str	r2, [r3, #12]
 8002522:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	4a1d      	ldr	r2, [pc, #116]	@ (80025a0 <HAL_UART_MspInit+0x94>)
 800252a:	4293      	cmp	r3, r2
 800252c:	d134      	bne.n	8002598 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800252e:	2300      	movs	r3, #0
 8002530:	613b      	str	r3, [r7, #16]
 8002532:	4b1c      	ldr	r3, [pc, #112]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 8002534:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002536:	4a1b      	ldr	r2, [pc, #108]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 8002538:	f043 0310 	orr.w	r3, r3, #16
 800253c:	6453      	str	r3, [r2, #68]	@ 0x44
 800253e:	4b19      	ldr	r3, [pc, #100]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 8002540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002542:	f003 0310 	and.w	r3, r3, #16
 8002546:	613b      	str	r3, [r7, #16]
 8002548:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	60fb      	str	r3, [r7, #12]
 800254e:	4b15      	ldr	r3, [pc, #84]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 8002550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002552:	4a14      	ldr	r2, [pc, #80]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6313      	str	r3, [r2, #48]	@ 0x30
 800255a:	4b12      	ldr	r3, [pc, #72]	@ (80025a4 <HAL_UART_MspInit+0x98>)
 800255c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	60fb      	str	r3, [r7, #12]
 8002564:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002566:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800256a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800256c:	2302      	movs	r3, #2
 800256e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002570:	2300      	movs	r3, #0
 8002572:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002574:	2303      	movs	r3, #3
 8002576:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002578:	2307      	movs	r3, #7
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800257c:	f107 0314 	add.w	r3, r7, #20
 8002580:	4619      	mov	r1, r3
 8002582:	4809      	ldr	r0, [pc, #36]	@ (80025a8 <HAL_UART_MspInit+0x9c>)
 8002584:	f000 fcd8 	bl	8002f38 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002588:	2200      	movs	r2, #0
 800258a:	2100      	movs	r1, #0
 800258c:	2025      	movs	r0, #37	@ 0x25
 800258e:	f000 fc0a 	bl	8002da6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002592:	2025      	movs	r0, #37	@ 0x25
 8002594:	f000 fc23 	bl	8002dde <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002598:	bf00      	nop
 800259a:	3728      	adds	r7, #40	@ 0x28
 800259c:	46bd      	mov	sp, r7
 800259e:	bd80      	pop	{r7, pc}
 80025a0:	40011000 	.word	0x40011000
 80025a4:	40023800 	.word	0x40023800
 80025a8:	40020000 	.word	0x40020000

080025ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80025ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80025e4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80025b0:	480d      	ldr	r0, [pc, #52]	@ (80025e8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80025b2:	490e      	ldr	r1, [pc, #56]	@ (80025ec <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80025b4:	4a0e      	ldr	r2, [pc, #56]	@ (80025f0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80025b6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80025b8:	e002      	b.n	80025c0 <LoopCopyDataInit>

080025ba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80025ba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80025bc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80025be:	3304      	adds	r3, #4

080025c0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80025c0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80025c2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80025c4:	d3f9      	bcc.n	80025ba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80025c6:	4a0b      	ldr	r2, [pc, #44]	@ (80025f4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80025c8:	4c0b      	ldr	r4, [pc, #44]	@ (80025f8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80025ca:	2300      	movs	r3, #0
  b LoopFillZerobss
 80025cc:	e001      	b.n	80025d2 <LoopFillZerobss>

080025ce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80025ce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80025d0:	3204      	adds	r2, #4

080025d2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80025d2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80025d4:	d3fb      	bcc.n	80025ce <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80025d6:	f7ff fdaf 	bl	8002138 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80025da:	f005 f89b 	bl	8007714 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80025de:	f7ff fba3 	bl	8001d28 <main>
  bx  lr    
 80025e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80025e4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80025e8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80025ec:	20000228 	.word	0x20000228
  ldr r2, =_sidata
 80025f0:	0800cbb8 	.word	0x0800cbb8
  ldr r2, =_sbss
 80025f4:	20000228 	.word	0x20000228
  ldr r4, =_ebss
 80025f8:	2000095c 	.word	0x2000095c

080025fc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80025fc:	e7fe      	b.n	80025fc <ADC_IRQHandler>
	...

08002600 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002604:	4b0e      	ldr	r3, [pc, #56]	@ (8002640 <HAL_Init+0x40>)
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4a0d      	ldr	r2, [pc, #52]	@ (8002640 <HAL_Init+0x40>)
 800260a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800260e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002610:	4b0b      	ldr	r3, [pc, #44]	@ (8002640 <HAL_Init+0x40>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a0a      	ldr	r2, [pc, #40]	@ (8002640 <HAL_Init+0x40>)
 8002616:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800261a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800261c:	4b08      	ldr	r3, [pc, #32]	@ (8002640 <HAL_Init+0x40>)
 800261e:	681b      	ldr	r3, [r3, #0]
 8002620:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <HAL_Init+0x40>)
 8002622:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002626:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002628:	2003      	movs	r0, #3
 800262a:	f000 fbb1 	bl	8002d90 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800262e:	200f      	movs	r0, #15
 8002630:	f000 f808 	bl	8002644 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002634:	f7ff fc56 	bl	8001ee4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002638:	2300      	movs	r3, #0
}
 800263a:	4618      	mov	r0, r3
 800263c:	bd80      	pop	{r7, pc}
 800263e:	bf00      	nop
 8002640:	40023c00 	.word	0x40023c00

08002644 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	b082      	sub	sp, #8
 8002648:	af00      	add	r7, sp, #0
 800264a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800264c:	4b12      	ldr	r3, [pc, #72]	@ (8002698 <HAL_InitTick+0x54>)
 800264e:	681a      	ldr	r2, [r3, #0]
 8002650:	4b12      	ldr	r3, [pc, #72]	@ (800269c <HAL_InitTick+0x58>)
 8002652:	781b      	ldrb	r3, [r3, #0]
 8002654:	4619      	mov	r1, r3
 8002656:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800265a:	fbb3 f3f1 	udiv	r3, r3, r1
 800265e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002662:	4618      	mov	r0, r3
 8002664:	f000 fbc9 	bl	8002dfa <HAL_SYSTICK_Config>
 8002668:	4603      	mov	r3, r0
 800266a:	2b00      	cmp	r3, #0
 800266c:	d001      	beq.n	8002672 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800266e:	2301      	movs	r3, #1
 8002670:	e00e      	b.n	8002690 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2b0f      	cmp	r3, #15
 8002676:	d80a      	bhi.n	800268e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002678:	2200      	movs	r2, #0
 800267a:	6879      	ldr	r1, [r7, #4]
 800267c:	f04f 30ff 	mov.w	r0, #4294967295
 8002680:	f000 fb91 	bl	8002da6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002684:	4a06      	ldr	r2, [pc, #24]	@ (80026a0 <HAL_InitTick+0x5c>)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800268a:	2300      	movs	r3, #0
 800268c:	e000      	b.n	8002690 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
}
 8002690:	4618      	mov	r0, r3
 8002692:	3708      	adds	r7, #8
 8002694:	46bd      	mov	sp, r7
 8002696:	bd80      	pop	{r7, pc}
 8002698:	20000040 	.word	0x20000040
 800269c:	20000048 	.word	0x20000048
 80026a0:	20000044 	.word	0x20000044

080026a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026a8:	4b06      	ldr	r3, [pc, #24]	@ (80026c4 <HAL_IncTick+0x20>)
 80026aa:	781b      	ldrb	r3, [r3, #0]
 80026ac:	461a      	mov	r2, r3
 80026ae:	4b06      	ldr	r3, [pc, #24]	@ (80026c8 <HAL_IncTick+0x24>)
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	4413      	add	r3, r2
 80026b4:	4a04      	ldr	r2, [pc, #16]	@ (80026c8 <HAL_IncTick+0x24>)
 80026b6:	6013      	str	r3, [r2, #0]
}
 80026b8:	bf00      	nop
 80026ba:	46bd      	mov	sp, r7
 80026bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c0:	4770      	bx	lr
 80026c2:	bf00      	nop
 80026c4:	20000048 	.word	0x20000048
 80026c8:	2000080c 	.word	0x2000080c

080026cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  return uwTick;
 80026d0:	4b03      	ldr	r3, [pc, #12]	@ (80026e0 <HAL_GetTick+0x14>)
 80026d2:	681b      	ldr	r3, [r3, #0]
}
 80026d4:	4618      	mov	r0, r3
 80026d6:	46bd      	mov	sp, r7
 80026d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026dc:	4770      	bx	lr
 80026de:	bf00      	nop
 80026e0:	2000080c 	.word	0x2000080c

080026e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026e4:	b580      	push	{r7, lr}
 80026e6:	b084      	sub	sp, #16
 80026e8:	af00      	add	r7, sp, #0
 80026ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026ec:	f7ff ffee 	bl	80026cc <HAL_GetTick>
 80026f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80026fc:	d005      	beq.n	800270a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80026fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002728 <HAL_Delay+0x44>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	461a      	mov	r2, r3
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	4413      	add	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800270a:	bf00      	nop
 800270c:	f7ff ffde 	bl	80026cc <HAL_GetTick>
 8002710:	4602      	mov	r2, r0
 8002712:	68bb      	ldr	r3, [r7, #8]
 8002714:	1ad3      	subs	r3, r2, r3
 8002716:	68fa      	ldr	r2, [r7, #12]
 8002718:	429a      	cmp	r2, r3
 800271a:	d8f7      	bhi.n	800270c <HAL_Delay+0x28>
  {
  }
}
 800271c:	bf00      	nop
 800271e:	bf00      	nop
 8002720:	3710      	adds	r7, #16
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	20000048 	.word	0x20000048

0800272c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800272c:	b580      	push	{r7, lr}
 800272e:	b084      	sub	sp, #16
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002734:	2300      	movs	r3, #0
 8002736:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d101      	bne.n	8002742 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800273e:	2301      	movs	r3, #1
 8002740:	e033      	b.n	80027aa <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002746:	2b00      	cmp	r3, #0
 8002748:	d109      	bne.n	800275e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800274a:	6878      	ldr	r0, [r7, #4]
 800274c:	f7fe fca6 	bl	800109c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2200      	movs	r2, #0
 8002754:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	2200      	movs	r2, #0
 800275a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002762:	f003 0310 	and.w	r3, r3, #16
 8002766:	2b00      	cmp	r3, #0
 8002768:	d118      	bne.n	800279c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800276e:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002772:	f023 0302 	bic.w	r3, r3, #2
 8002776:	f043 0202 	orr.w	r2, r3, #2
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 800277e:	6878      	ldr	r0, [r7, #4]
 8002780:	f000 f93a 	bl	80029f8 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	2200      	movs	r2, #0
 8002788:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800278e:	f023 0303 	bic.w	r3, r3, #3
 8002792:	f043 0201 	orr.w	r2, r3, #1
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	641a      	str	r2, [r3, #64]	@ 0x40
 800279a:	e001      	b.n	80027a0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800279c:	2301      	movs	r3, #1
 800279e:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2200      	movs	r2, #0
 80027a4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80027aa:	4618      	mov	r0, r3
 80027ac:	3710      	adds	r7, #16
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
	...

080027b4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80027b4:	b480      	push	{r7}
 80027b6:	b085      	sub	sp, #20
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
 80027bc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80027be:	2300      	movs	r3, #0
 80027c0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80027c8:	2b01      	cmp	r3, #1
 80027ca:	d101      	bne.n	80027d0 <HAL_ADC_ConfigChannel+0x1c>
 80027cc:	2302      	movs	r3, #2
 80027ce:	e105      	b.n	80029dc <HAL_ADC_ConfigChannel+0x228>
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	2b09      	cmp	r3, #9
 80027de:	d925      	bls.n	800282c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	68d9      	ldr	r1, [r3, #12]
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	b29b      	uxth	r3, r3
 80027ec:	461a      	mov	r2, r3
 80027ee:	4613      	mov	r3, r2
 80027f0:	005b      	lsls	r3, r3, #1
 80027f2:	4413      	add	r3, r2
 80027f4:	3b1e      	subs	r3, #30
 80027f6:	2207      	movs	r2, #7
 80027f8:	fa02 f303 	lsl.w	r3, r2, r3
 80027fc:	43da      	mvns	r2, r3
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	400a      	ands	r2, r1
 8002804:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	683b      	ldr	r3, [r7, #0]
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	b29b      	uxth	r3, r3
 8002816:	4618      	mov	r0, r3
 8002818:	4603      	mov	r3, r0
 800281a:	005b      	lsls	r3, r3, #1
 800281c:	4403      	add	r3, r0
 800281e:	3b1e      	subs	r3, #30
 8002820:	409a      	lsls	r2, r3
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	430a      	orrs	r2, r1
 8002828:	60da      	str	r2, [r3, #12]
 800282a:	e022      	b.n	8002872 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	6919      	ldr	r1, [r3, #16]
 8002832:	683b      	ldr	r3, [r7, #0]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	b29b      	uxth	r3, r3
 8002838:	461a      	mov	r2, r3
 800283a:	4613      	mov	r3, r2
 800283c:	005b      	lsls	r3, r3, #1
 800283e:	4413      	add	r3, r2
 8002840:	2207      	movs	r2, #7
 8002842:	fa02 f303 	lsl.w	r3, r2, r3
 8002846:	43da      	mvns	r2, r3
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	400a      	ands	r2, r1
 800284e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	681b      	ldr	r3, [r3, #0]
 8002854:	6919      	ldr	r1, [r3, #16]
 8002856:	683b      	ldr	r3, [r7, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	683b      	ldr	r3, [r7, #0]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	b29b      	uxth	r3, r3
 8002860:	4618      	mov	r0, r3
 8002862:	4603      	mov	r3, r0
 8002864:	005b      	lsls	r3, r3, #1
 8002866:	4403      	add	r3, r0
 8002868:	409a      	lsls	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	681b      	ldr	r3, [r3, #0]
 800286e:	430a      	orrs	r2, r1
 8002870:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002872:	683b      	ldr	r3, [r7, #0]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b06      	cmp	r3, #6
 8002878:	d824      	bhi.n	80028c4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002880:	683b      	ldr	r3, [r7, #0]
 8002882:	685a      	ldr	r2, [r3, #4]
 8002884:	4613      	mov	r3, r2
 8002886:	009b      	lsls	r3, r3, #2
 8002888:	4413      	add	r3, r2
 800288a:	3b05      	subs	r3, #5
 800288c:	221f      	movs	r2, #31
 800288e:	fa02 f303 	lsl.w	r3, r2, r3
 8002892:	43da      	mvns	r2, r3
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	400a      	ands	r2, r1
 800289a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	b29b      	uxth	r3, r3
 80028a8:	4618      	mov	r0, r3
 80028aa:	683b      	ldr	r3, [r7, #0]
 80028ac:	685a      	ldr	r2, [r3, #4]
 80028ae:	4613      	mov	r3, r2
 80028b0:	009b      	lsls	r3, r3, #2
 80028b2:	4413      	add	r3, r2
 80028b4:	3b05      	subs	r3, #5
 80028b6:	fa00 f203 	lsl.w	r2, r0, r3
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	430a      	orrs	r2, r1
 80028c0:	635a      	str	r2, [r3, #52]	@ 0x34
 80028c2:	e04c      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80028c4:	683b      	ldr	r3, [r7, #0]
 80028c6:	685b      	ldr	r3, [r3, #4]
 80028c8:	2b0c      	cmp	r3, #12
 80028ca:	d824      	bhi.n	8002916 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028d2:	683b      	ldr	r3, [r7, #0]
 80028d4:	685a      	ldr	r2, [r3, #4]
 80028d6:	4613      	mov	r3, r2
 80028d8:	009b      	lsls	r3, r3, #2
 80028da:	4413      	add	r3, r2
 80028dc:	3b23      	subs	r3, #35	@ 0x23
 80028de:	221f      	movs	r2, #31
 80028e0:	fa02 f303 	lsl.w	r3, r2, r3
 80028e4:	43da      	mvns	r2, r3
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	681b      	ldr	r3, [r3, #0]
 80028ea:	400a      	ands	r2, r1
 80028ec:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 80028f4:	683b      	ldr	r3, [r7, #0]
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	b29b      	uxth	r3, r3
 80028fa:	4618      	mov	r0, r3
 80028fc:	683b      	ldr	r3, [r7, #0]
 80028fe:	685a      	ldr	r2, [r3, #4]
 8002900:	4613      	mov	r3, r2
 8002902:	009b      	lsls	r3, r3, #2
 8002904:	4413      	add	r3, r2
 8002906:	3b23      	subs	r3, #35	@ 0x23
 8002908:	fa00 f203 	lsl.w	r2, r0, r3
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	430a      	orrs	r2, r1
 8002912:	631a      	str	r2, [r3, #48]	@ 0x30
 8002914:	e023      	b.n	800295e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800291c:	683b      	ldr	r3, [r7, #0]
 800291e:	685a      	ldr	r2, [r3, #4]
 8002920:	4613      	mov	r3, r2
 8002922:	009b      	lsls	r3, r3, #2
 8002924:	4413      	add	r3, r2
 8002926:	3b41      	subs	r3, #65	@ 0x41
 8002928:	221f      	movs	r2, #31
 800292a:	fa02 f303 	lsl.w	r3, r2, r3
 800292e:	43da      	mvns	r2, r3
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	400a      	ands	r2, r1
 8002936:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800293e:	683b      	ldr	r3, [r7, #0]
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	b29b      	uxth	r3, r3
 8002944:	4618      	mov	r0, r3
 8002946:	683b      	ldr	r3, [r7, #0]
 8002948:	685a      	ldr	r2, [r3, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	009b      	lsls	r3, r3, #2
 800294e:	4413      	add	r3, r2
 8002950:	3b41      	subs	r3, #65	@ 0x41
 8002952:	fa00 f203 	lsl.w	r2, r0, r3
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	430a      	orrs	r2, r1
 800295c:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800295e:	4b22      	ldr	r3, [pc, #136]	@ (80029e8 <HAL_ADC_ConfigChannel+0x234>)
 8002960:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002962:	687b      	ldr	r3, [r7, #4]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	4a21      	ldr	r2, [pc, #132]	@ (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002968:	4293      	cmp	r3, r2
 800296a:	d109      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
 800296c:	683b      	ldr	r3, [r7, #0]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	2b12      	cmp	r3, #18
 8002972:	d105      	bne.n	8002980 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	685b      	ldr	r3, [r3, #4]
 8002978:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a19      	ldr	r2, [pc, #100]	@ (80029ec <HAL_ADC_ConfigChannel+0x238>)
 8002986:	4293      	cmp	r3, r2
 8002988:	d123      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	2b10      	cmp	r3, #16
 8002990:	d003      	beq.n	800299a <HAL_ADC_ConfigChannel+0x1e6>
 8002992:	683b      	ldr	r3, [r7, #0]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2b11      	cmp	r3, #17
 8002998:	d11b      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800299a:	68fb      	ldr	r3, [r7, #12]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	2b10      	cmp	r3, #16
 80029ac:	d111      	bne.n	80029d2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80029ae:	4b10      	ldr	r3, [pc, #64]	@ (80029f0 <HAL_ADC_ConfigChannel+0x23c>)
 80029b0:	681b      	ldr	r3, [r3, #0]
 80029b2:	4a10      	ldr	r2, [pc, #64]	@ (80029f4 <HAL_ADC_ConfigChannel+0x240>)
 80029b4:	fba2 2303 	umull	r2, r3, r2, r3
 80029b8:	0c9a      	lsrs	r2, r3, #18
 80029ba:	4613      	mov	r3, r2
 80029bc:	009b      	lsls	r3, r3, #2
 80029be:	4413      	add	r3, r2
 80029c0:	005b      	lsls	r3, r3, #1
 80029c2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029c4:	e002      	b.n	80029cc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	3b01      	subs	r3, #1
 80029ca:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 80029cc:	68bb      	ldr	r3, [r7, #8]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f9      	bne.n	80029c6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2200      	movs	r2, #0
 80029d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 80029da:	2300      	movs	r3, #0
}
 80029dc:	4618      	mov	r0, r3
 80029de:	3714      	adds	r7, #20
 80029e0:	46bd      	mov	sp, r7
 80029e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e6:	4770      	bx	lr
 80029e8:	40012300 	.word	0x40012300
 80029ec:	40012000 	.word	0x40012000
 80029f0:	20000040 	.word	0x20000040
 80029f4:	431bde83 	.word	0x431bde83

080029f8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b085      	sub	sp, #20
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a00:	4b79      	ldr	r3, [pc, #484]	@ (8002be8 <ADC_Init+0x1f0>)
 8002a02:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002a04:	68fb      	ldr	r3, [r7, #12]
 8002a06:	685b      	ldr	r3, [r3, #4]
 8002a08:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	685a      	ldr	r2, [r3, #4]
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	431a      	orrs	r2, r3
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	685a      	ldr	r2, [r3, #4]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002a2c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	6859      	ldr	r1, [r3, #4]
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	691b      	ldr	r3, [r3, #16]
 8002a38:	021a      	lsls	r2, r3, #8
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	430a      	orrs	r2, r1
 8002a40:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	685a      	ldr	r2, [r3, #4]
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8002a50:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	6859      	ldr	r1, [r3, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	689a      	ldr	r2, [r3, #8]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	430a      	orrs	r2, r1
 8002a62:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689a      	ldr	r2, [r3, #8]
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002a72:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	6899      	ldr	r1, [r3, #8]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	68da      	ldr	r2, [r3, #12]
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	430a      	orrs	r2, r1
 8002a84:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a8a:	4a58      	ldr	r2, [pc, #352]	@ (8002bec <ADC_Init+0x1f4>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d022      	beq.n	8002ad6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	681b      	ldr	r3, [r3, #0]
 8002a94:	689a      	ldr	r2, [r3, #8]
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002a9e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	6899      	ldr	r1, [r3, #8]
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	430a      	orrs	r2, r1
 8002ab0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002ac0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	6899      	ldr	r1, [r3, #8]
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	430a      	orrs	r2, r1
 8002ad2:	609a      	str	r2, [r3, #8]
 8002ad4:	e00f      	b.n	8002af6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689a      	ldr	r2, [r3, #8]
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8002ae4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689a      	ldr	r2, [r3, #8]
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8002af4:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	689a      	ldr	r2, [r3, #8]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f022 0202 	bic.w	r2, r2, #2
 8002b04:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	6899      	ldr	r1, [r3, #8]
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	7e1b      	ldrb	r3, [r3, #24]
 8002b10:	005a      	lsls	r2, r3, #1
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	430a      	orrs	r2, r1
 8002b18:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d01b      	beq.n	8002b5c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	685a      	ldr	r2, [r3, #4]
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	681b      	ldr	r3, [r3, #0]
 8002b2e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002b32:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	685a      	ldr	r2, [r3, #4]
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 8002b42:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	681b      	ldr	r3, [r3, #0]
 8002b48:	6859      	ldr	r1, [r3, #4]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4e:	3b01      	subs	r3, #1
 8002b50:	035a      	lsls	r2, r3, #13
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	430a      	orrs	r2, r1
 8002b58:	605a      	str	r2, [r3, #4]
 8002b5a:	e007      	b.n	8002b6c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	685a      	ldr	r2, [r3, #4]
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002b6a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8002b7a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	69db      	ldr	r3, [r3, #28]
 8002b86:	3b01      	subs	r3, #1
 8002b88:	051a      	lsls	r2, r3, #20
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	430a      	orrs	r2, r1
 8002b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	689a      	ldr	r2, [r3, #8]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8002ba0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	6899      	ldr	r1, [r3, #8]
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8002bae:	025a      	lsls	r2, r3, #9
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	430a      	orrs	r2, r1
 8002bb6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	689a      	ldr	r2, [r3, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	6899      	ldr	r1, [r3, #8]
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	695b      	ldr	r3, [r3, #20]
 8002bd2:	029a      	lsls	r2, r3, #10
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
}
 8002bdc:	bf00      	nop
 8002bde:	3714      	adds	r7, #20
 8002be0:	46bd      	mov	sp, r7
 8002be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be6:	4770      	bx	lr
 8002be8:	40012300 	.word	0x40012300
 8002bec:	0f000001 	.word	0x0f000001

08002bf0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bf0:	b480      	push	{r7}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af00      	add	r7, sp, #0
 8002bf6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	f003 0307 	and.w	r3, r3, #7
 8002bfe:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c00:	4b0c      	ldr	r3, [pc, #48]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c02:	68db      	ldr	r3, [r3, #12]
 8002c04:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c06:	68ba      	ldr	r2, [r7, #8]
 8002c08:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c14:	68bb      	ldr	r3, [r7, #8]
 8002c16:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c18:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c1c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c20:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c22:	4a04      	ldr	r2, [pc, #16]	@ (8002c34 <__NVIC_SetPriorityGrouping+0x44>)
 8002c24:	68bb      	ldr	r3, [r7, #8]
 8002c26:	60d3      	str	r3, [r2, #12]
}
 8002c28:	bf00      	nop
 8002c2a:	3714      	adds	r7, #20
 8002c2c:	46bd      	mov	sp, r7
 8002c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c32:	4770      	bx	lr
 8002c34:	e000ed00 	.word	0xe000ed00

08002c38 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c3c:	4b04      	ldr	r3, [pc, #16]	@ (8002c50 <__NVIC_GetPriorityGrouping+0x18>)
 8002c3e:	68db      	ldr	r3, [r3, #12]
 8002c40:	0a1b      	lsrs	r3, r3, #8
 8002c42:	f003 0307 	and.w	r3, r3, #7
}
 8002c46:	4618      	mov	r0, r3
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4e:	4770      	bx	lr
 8002c50:	e000ed00 	.word	0xe000ed00

08002c54 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c54:	b480      	push	{r7}
 8002c56:	b083      	sub	sp, #12
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	db0b      	blt.n	8002c7e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002c66:	79fb      	ldrb	r3, [r7, #7]
 8002c68:	f003 021f 	and.w	r2, r3, #31
 8002c6c:	4907      	ldr	r1, [pc, #28]	@ (8002c8c <__NVIC_EnableIRQ+0x38>)
 8002c6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c72:	095b      	lsrs	r3, r3, #5
 8002c74:	2001      	movs	r0, #1
 8002c76:	fa00 f202 	lsl.w	r2, r0, r2
 8002c7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002c7e:	bf00      	nop
 8002c80:	370c      	adds	r7, #12
 8002c82:	46bd      	mov	sp, r7
 8002c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c88:	4770      	bx	lr
 8002c8a:	bf00      	nop
 8002c8c:	e000e100 	.word	0xe000e100

08002c90 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	4603      	mov	r3, r0
 8002c98:	6039      	str	r1, [r7, #0]
 8002c9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	db0a      	blt.n	8002cba <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ca4:	683b      	ldr	r3, [r7, #0]
 8002ca6:	b2da      	uxtb	r2, r3
 8002ca8:	490c      	ldr	r1, [pc, #48]	@ (8002cdc <__NVIC_SetPriority+0x4c>)
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	0112      	lsls	r2, r2, #4
 8002cb0:	b2d2      	uxtb	r2, r2
 8002cb2:	440b      	add	r3, r1
 8002cb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002cb8:	e00a      	b.n	8002cd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	b2da      	uxtb	r2, r3
 8002cbe:	4908      	ldr	r1, [pc, #32]	@ (8002ce0 <__NVIC_SetPriority+0x50>)
 8002cc0:	79fb      	ldrb	r3, [r7, #7]
 8002cc2:	f003 030f 	and.w	r3, r3, #15
 8002cc6:	3b04      	subs	r3, #4
 8002cc8:	0112      	lsls	r2, r2, #4
 8002cca:	b2d2      	uxtb	r2, r2
 8002ccc:	440b      	add	r3, r1
 8002cce:	761a      	strb	r2, [r3, #24]
}
 8002cd0:	bf00      	nop
 8002cd2:	370c      	adds	r7, #12
 8002cd4:	46bd      	mov	sp, r7
 8002cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cda:	4770      	bx	lr
 8002cdc:	e000e100 	.word	0xe000e100
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b089      	sub	sp, #36	@ 0x24
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	f003 0307 	and.w	r3, r3, #7
 8002cf6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f1c3 0307 	rsb	r3, r3, #7
 8002cfe:	2b04      	cmp	r3, #4
 8002d00:	bf28      	it	cs
 8002d02:	2304      	movcs	r3, #4
 8002d04:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d06:	69fb      	ldr	r3, [r7, #28]
 8002d08:	3304      	adds	r3, #4
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d902      	bls.n	8002d14 <NVIC_EncodePriority+0x30>
 8002d0e:	69fb      	ldr	r3, [r7, #28]
 8002d10:	3b03      	subs	r3, #3
 8002d12:	e000      	b.n	8002d16 <NVIC_EncodePriority+0x32>
 8002d14:	2300      	movs	r3, #0
 8002d16:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d18:	f04f 32ff 	mov.w	r2, #4294967295
 8002d1c:	69bb      	ldr	r3, [r7, #24]
 8002d1e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d22:	43da      	mvns	r2, r3
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	401a      	ands	r2, r3
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d2c:	f04f 31ff 	mov.w	r1, #4294967295
 8002d30:	697b      	ldr	r3, [r7, #20]
 8002d32:	fa01 f303 	lsl.w	r3, r1, r3
 8002d36:	43d9      	mvns	r1, r3
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d3c:	4313      	orrs	r3, r2
         );
}
 8002d3e:	4618      	mov	r0, r3
 8002d40:	3724      	adds	r7, #36	@ 0x24
 8002d42:	46bd      	mov	sp, r7
 8002d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d48:	4770      	bx	lr
	...

08002d4c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d4c:	b580      	push	{r7, lr}
 8002d4e:	b082      	sub	sp, #8
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	3b01      	subs	r3, #1
 8002d58:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002d5c:	d301      	bcc.n	8002d62 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002d5e:	2301      	movs	r3, #1
 8002d60:	e00f      	b.n	8002d82 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002d62:	4a0a      	ldr	r2, [pc, #40]	@ (8002d8c <SysTick_Config+0x40>)
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	3b01      	subs	r3, #1
 8002d68:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002d6a:	210f      	movs	r1, #15
 8002d6c:	f04f 30ff 	mov.w	r0, #4294967295
 8002d70:	f7ff ff8e 	bl	8002c90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002d74:	4b05      	ldr	r3, [pc, #20]	@ (8002d8c <SysTick_Config+0x40>)
 8002d76:	2200      	movs	r2, #0
 8002d78:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002d7a:	4b04      	ldr	r3, [pc, #16]	@ (8002d8c <SysTick_Config+0x40>)
 8002d7c:	2207      	movs	r2, #7
 8002d7e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002d80:	2300      	movs	r3, #0
}
 8002d82:	4618      	mov	r0, r3
 8002d84:	3708      	adds	r7, #8
 8002d86:	46bd      	mov	sp, r7
 8002d88:	bd80      	pop	{r7, pc}
 8002d8a:	bf00      	nop
 8002d8c:	e000e010 	.word	0xe000e010

08002d90 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d90:	b580      	push	{r7, lr}
 8002d92:	b082      	sub	sp, #8
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002d98:	6878      	ldr	r0, [r7, #4]
 8002d9a:	f7ff ff29 	bl	8002bf0 <__NVIC_SetPriorityGrouping>
}
 8002d9e:	bf00      	nop
 8002da0:	3708      	adds	r7, #8
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bd80      	pop	{r7, pc}

08002da6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002da6:	b580      	push	{r7, lr}
 8002da8:	b086      	sub	sp, #24
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	4603      	mov	r3, r0
 8002dae:	60b9      	str	r1, [r7, #8]
 8002db0:	607a      	str	r2, [r7, #4]
 8002db2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002db4:	2300      	movs	r3, #0
 8002db6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002db8:	f7ff ff3e 	bl	8002c38 <__NVIC_GetPriorityGrouping>
 8002dbc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002dbe:	687a      	ldr	r2, [r7, #4]
 8002dc0:	68b9      	ldr	r1, [r7, #8]
 8002dc2:	6978      	ldr	r0, [r7, #20]
 8002dc4:	f7ff ff8e 	bl	8002ce4 <NVIC_EncodePriority>
 8002dc8:	4602      	mov	r2, r0
 8002dca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002dce:	4611      	mov	r1, r2
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	f7ff ff5d 	bl	8002c90 <__NVIC_SetPriority>
}
 8002dd6:	bf00      	nop
 8002dd8:	3718      	adds	r7, #24
 8002dda:	46bd      	mov	sp, r7
 8002ddc:	bd80      	pop	{r7, pc}

08002dde <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002dde:	b580      	push	{r7, lr}
 8002de0:	b082      	sub	sp, #8
 8002de2:	af00      	add	r7, sp, #0
 8002de4:	4603      	mov	r3, r0
 8002de6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002de8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f7ff ff31 	bl	8002c54 <__NVIC_EnableIRQ>
}
 8002df2:	bf00      	nop
 8002df4:	3708      	adds	r7, #8
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bd80      	pop	{r7, pc}

08002dfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002dfa:	b580      	push	{r7, lr}
 8002dfc:	b082      	sub	sp, #8
 8002dfe:	af00      	add	r7, sp, #0
 8002e00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e02:	6878      	ldr	r0, [r7, #4]
 8002e04:	f7ff ffa2 	bl	8002d4c <SysTick_Config>
 8002e08:	4603      	mov	r3, r0
}
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	3708      	adds	r7, #8
 8002e0e:	46bd      	mov	sp, r7
 8002e10:	bd80      	pop	{r7, pc}

08002e12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e12:	b580      	push	{r7, lr}
 8002e14:	b084      	sub	sp, #16
 8002e16:	af00      	add	r7, sp, #0
 8002e18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002e20:	f7ff fc54 	bl	80026cc <HAL_GetTick>
 8002e24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002e2c:	b2db      	uxtb	r3, r3
 8002e2e:	2b02      	cmp	r3, #2
 8002e30:	d008      	beq.n	8002e44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	2280      	movs	r2, #128	@ 0x80
 8002e36:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002e40:	2301      	movs	r3, #1
 8002e42:	e052      	b.n	8002eea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	f022 0216 	bic.w	r2, r2, #22
 8002e52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002e62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d103      	bne.n	8002e74 <HAL_DMA_Abort+0x62>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d007      	beq.n	8002e84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	681a      	ldr	r2, [r3, #0]
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	f022 0208 	bic.w	r2, r2, #8
 8002e82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 0201 	bic.w	r2, r2, #1
 8002e92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002e94:	e013      	b.n	8002ebe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002e96:	f7ff fc19 	bl	80026cc <HAL_GetTick>
 8002e9a:	4602      	mov	r2, r0
 8002e9c:	68bb      	ldr	r3, [r7, #8]
 8002e9e:	1ad3      	subs	r3, r2, r3
 8002ea0:	2b05      	cmp	r3, #5
 8002ea2:	d90c      	bls.n	8002ebe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2220      	movs	r2, #32
 8002ea8:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	2203      	movs	r2, #3
 8002eae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002eba:	2303      	movs	r3, #3
 8002ebc:	e015      	b.n	8002eea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0301 	and.w	r3, r3, #1
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d1e4      	bne.n	8002e96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002ed0:	223f      	movs	r2, #63	@ 0x3f
 8002ed2:	409a      	lsls	r2, r3
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	2201      	movs	r2, #1
 8002edc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
}
 8002eea:	4618      	mov	r0, r3
 8002eec:	3710      	adds	r7, #16
 8002eee:	46bd      	mov	sp, r7
 8002ef0:	bd80      	pop	{r7, pc}

08002ef2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002ef2:	b480      	push	{r7}
 8002ef4:	b083      	sub	sp, #12
 8002ef6:	af00      	add	r7, sp, #0
 8002ef8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002f00:	b2db      	uxtb	r3, r3
 8002f02:	2b02      	cmp	r3, #2
 8002f04:	d004      	beq.n	8002f10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	2280      	movs	r2, #128	@ 0x80
 8002f0a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002f0c:	2301      	movs	r3, #1
 8002f0e:	e00c      	b.n	8002f2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2205      	movs	r2, #5
 8002f14:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	681a      	ldr	r2, [r3, #0]
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f022 0201 	bic.w	r2, r2, #1
 8002f26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f28:	2300      	movs	r3, #0
}
 8002f2a:	4618      	mov	r0, r3
 8002f2c:	370c      	adds	r7, #12
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f34:	4770      	bx	lr
	...

08002f38 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f38:	b480      	push	{r7}
 8002f3a:	b089      	sub	sp, #36	@ 0x24
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
 8002f40:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f42:	2300      	movs	r3, #0
 8002f44:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f46:	2300      	movs	r3, #0
 8002f48:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f4a:	2300      	movs	r3, #0
 8002f4c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f4e:	2300      	movs	r3, #0
 8002f50:	61fb      	str	r3, [r7, #28]
 8002f52:	e159      	b.n	8003208 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f54:	2201      	movs	r2, #1
 8002f56:	69fb      	ldr	r3, [r7, #28]
 8002f58:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	697a      	ldr	r2, [r7, #20]
 8002f64:	4013      	ands	r3, r2
 8002f66:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f68:	693a      	ldr	r2, [r7, #16]
 8002f6a:	697b      	ldr	r3, [r7, #20]
 8002f6c:	429a      	cmp	r2, r3
 8002f6e:	f040 8148 	bne.w	8003202 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f003 0303 	and.w	r3, r3, #3
 8002f7a:	2b01      	cmp	r3, #1
 8002f7c:	d005      	beq.n	8002f8a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	685b      	ldr	r3, [r3, #4]
 8002f82:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f86:	2b02      	cmp	r3, #2
 8002f88:	d130      	bne.n	8002fec <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	689b      	ldr	r3, [r3, #8]
 8002f8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	005b      	lsls	r3, r3, #1
 8002f94:	2203      	movs	r2, #3
 8002f96:	fa02 f303 	lsl.w	r3, r2, r3
 8002f9a:	43db      	mvns	r3, r3
 8002f9c:	69ba      	ldr	r2, [r7, #24]
 8002f9e:	4013      	ands	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	68da      	ldr	r2, [r3, #12]
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	005b      	lsls	r3, r3, #1
 8002faa:	fa02 f303 	lsl.w	r3, r2, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4313      	orrs	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	69ba      	ldr	r2, [r7, #24]
 8002fb8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	685b      	ldr	r3, [r3, #4]
 8002fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fc0:	2201      	movs	r2, #1
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc8:	43db      	mvns	r3, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4013      	ands	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	091b      	lsrs	r3, r3, #4
 8002fd6:	f003 0201 	and.w	r2, r3, #1
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe0:	69ba      	ldr	r2, [r7, #24]
 8002fe2:	4313      	orrs	r3, r2
 8002fe4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f003 0303 	and.w	r3, r3, #3
 8002ff4:	2b03      	cmp	r3, #3
 8002ff6:	d017      	beq.n	8003028 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ffe:	69fb      	ldr	r3, [r7, #28]
 8003000:	005b      	lsls	r3, r3, #1
 8003002:	2203      	movs	r2, #3
 8003004:	fa02 f303 	lsl.w	r3, r2, r3
 8003008:	43db      	mvns	r3, r3
 800300a:	69ba      	ldr	r2, [r7, #24]
 800300c:	4013      	ands	r3, r2
 800300e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003010:	683b      	ldr	r3, [r7, #0]
 8003012:	689a      	ldr	r2, [r3, #8]
 8003014:	69fb      	ldr	r3, [r7, #28]
 8003016:	005b      	lsls	r3, r3, #1
 8003018:	fa02 f303 	lsl.w	r3, r2, r3
 800301c:	69ba      	ldr	r2, [r7, #24]
 800301e:	4313      	orrs	r3, r2
 8003020:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003028:	683b      	ldr	r3, [r7, #0]
 800302a:	685b      	ldr	r3, [r3, #4]
 800302c:	f003 0303 	and.w	r3, r3, #3
 8003030:	2b02      	cmp	r3, #2
 8003032:	d123      	bne.n	800307c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	08da      	lsrs	r2, r3, #3
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	3208      	adds	r2, #8
 800303c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003040:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003042:	69fb      	ldr	r3, [r7, #28]
 8003044:	f003 0307 	and.w	r3, r3, #7
 8003048:	009b      	lsls	r3, r3, #2
 800304a:	220f      	movs	r2, #15
 800304c:	fa02 f303 	lsl.w	r3, r2, r3
 8003050:	43db      	mvns	r3, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4013      	ands	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	691a      	ldr	r2, [r3, #16]
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	f003 0307 	and.w	r3, r3, #7
 8003062:	009b      	lsls	r3, r3, #2
 8003064:	fa02 f303 	lsl.w	r3, r2, r3
 8003068:	69ba      	ldr	r2, [r7, #24]
 800306a:	4313      	orrs	r3, r2
 800306c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	08da      	lsrs	r2, r3, #3
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	3208      	adds	r2, #8
 8003076:	69b9      	ldr	r1, [r7, #24]
 8003078:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	005b      	lsls	r3, r3, #1
 8003086:	2203      	movs	r2, #3
 8003088:	fa02 f303 	lsl.w	r3, r2, r3
 800308c:	43db      	mvns	r3, r3
 800308e:	69ba      	ldr	r2, [r7, #24]
 8003090:	4013      	ands	r3, r2
 8003092:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f003 0203 	and.w	r2, r3, #3
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	005b      	lsls	r3, r3, #1
 80030a0:	fa02 f303 	lsl.w	r3, r2, r3
 80030a4:	69ba      	ldr	r2, [r7, #24]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	69ba      	ldr	r2, [r7, #24]
 80030ae:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	685b      	ldr	r3, [r3, #4]
 80030b4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	f000 80a2 	beq.w	8003202 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030be:	2300      	movs	r3, #0
 80030c0:	60fb      	str	r3, [r7, #12]
 80030c2:	4b57      	ldr	r3, [pc, #348]	@ (8003220 <HAL_GPIO_Init+0x2e8>)
 80030c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030c6:	4a56      	ldr	r2, [pc, #344]	@ (8003220 <HAL_GPIO_Init+0x2e8>)
 80030c8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80030cc:	6453      	str	r3, [r2, #68]	@ 0x44
 80030ce:	4b54      	ldr	r3, [pc, #336]	@ (8003220 <HAL_GPIO_Init+0x2e8>)
 80030d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80030d2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80030d6:	60fb      	str	r3, [r7, #12]
 80030d8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030da:	4a52      	ldr	r2, [pc, #328]	@ (8003224 <HAL_GPIO_Init+0x2ec>)
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	089b      	lsrs	r3, r3, #2
 80030e0:	3302      	adds	r3, #2
 80030e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030e6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030e8:	69fb      	ldr	r3, [r7, #28]
 80030ea:	f003 0303 	and.w	r3, r3, #3
 80030ee:	009b      	lsls	r3, r3, #2
 80030f0:	220f      	movs	r2, #15
 80030f2:	fa02 f303 	lsl.w	r3, r2, r3
 80030f6:	43db      	mvns	r3, r3
 80030f8:	69ba      	ldr	r2, [r7, #24]
 80030fa:	4013      	ands	r3, r2
 80030fc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	4a49      	ldr	r2, [pc, #292]	@ (8003228 <HAL_GPIO_Init+0x2f0>)
 8003102:	4293      	cmp	r3, r2
 8003104:	d019      	beq.n	800313a <HAL_GPIO_Init+0x202>
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	4a48      	ldr	r2, [pc, #288]	@ (800322c <HAL_GPIO_Init+0x2f4>)
 800310a:	4293      	cmp	r3, r2
 800310c:	d013      	beq.n	8003136 <HAL_GPIO_Init+0x1fe>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	4a47      	ldr	r2, [pc, #284]	@ (8003230 <HAL_GPIO_Init+0x2f8>)
 8003112:	4293      	cmp	r3, r2
 8003114:	d00d      	beq.n	8003132 <HAL_GPIO_Init+0x1fa>
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	4a46      	ldr	r2, [pc, #280]	@ (8003234 <HAL_GPIO_Init+0x2fc>)
 800311a:	4293      	cmp	r3, r2
 800311c:	d007      	beq.n	800312e <HAL_GPIO_Init+0x1f6>
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	4a45      	ldr	r2, [pc, #276]	@ (8003238 <HAL_GPIO_Init+0x300>)
 8003122:	4293      	cmp	r3, r2
 8003124:	d101      	bne.n	800312a <HAL_GPIO_Init+0x1f2>
 8003126:	2304      	movs	r3, #4
 8003128:	e008      	b.n	800313c <HAL_GPIO_Init+0x204>
 800312a:	2307      	movs	r3, #7
 800312c:	e006      	b.n	800313c <HAL_GPIO_Init+0x204>
 800312e:	2303      	movs	r3, #3
 8003130:	e004      	b.n	800313c <HAL_GPIO_Init+0x204>
 8003132:	2302      	movs	r3, #2
 8003134:	e002      	b.n	800313c <HAL_GPIO_Init+0x204>
 8003136:	2301      	movs	r3, #1
 8003138:	e000      	b.n	800313c <HAL_GPIO_Init+0x204>
 800313a:	2300      	movs	r3, #0
 800313c:	69fa      	ldr	r2, [r7, #28]
 800313e:	f002 0203 	and.w	r2, r2, #3
 8003142:	0092      	lsls	r2, r2, #2
 8003144:	4093      	lsls	r3, r2
 8003146:	69ba      	ldr	r2, [r7, #24]
 8003148:	4313      	orrs	r3, r2
 800314a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800314c:	4935      	ldr	r1, [pc, #212]	@ (8003224 <HAL_GPIO_Init+0x2ec>)
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	089b      	lsrs	r3, r3, #2
 8003152:	3302      	adds	r3, #2
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800315a:	4b38      	ldr	r3, [pc, #224]	@ (800323c <HAL_GPIO_Init+0x304>)
 800315c:	689b      	ldr	r3, [r3, #8]
 800315e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003160:	693b      	ldr	r3, [r7, #16]
 8003162:	43db      	mvns	r3, r3
 8003164:	69ba      	ldr	r2, [r7, #24]
 8003166:	4013      	ands	r3, r2
 8003168:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800316a:	683b      	ldr	r3, [r7, #0]
 800316c:	685b      	ldr	r3, [r3, #4]
 800316e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003172:	2b00      	cmp	r3, #0
 8003174:	d003      	beq.n	800317e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	693b      	ldr	r3, [r7, #16]
 800317a:	4313      	orrs	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800317e:	4a2f      	ldr	r2, [pc, #188]	@ (800323c <HAL_GPIO_Init+0x304>)
 8003180:	69bb      	ldr	r3, [r7, #24]
 8003182:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003184:	4b2d      	ldr	r3, [pc, #180]	@ (800323c <HAL_GPIO_Init+0x304>)
 8003186:	68db      	ldr	r3, [r3, #12]
 8003188:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800318a:	693b      	ldr	r3, [r7, #16]
 800318c:	43db      	mvns	r3, r3
 800318e:	69ba      	ldr	r2, [r7, #24]
 8003190:	4013      	ands	r3, r2
 8003192:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003194:	683b      	ldr	r3, [r7, #0]
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800319c:	2b00      	cmp	r3, #0
 800319e:	d003      	beq.n	80031a8 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	693b      	ldr	r3, [r7, #16]
 80031a4:	4313      	orrs	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80031a8:	4a24      	ldr	r2, [pc, #144]	@ (800323c <HAL_GPIO_Init+0x304>)
 80031aa:	69bb      	ldr	r3, [r7, #24]
 80031ac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80031ae:	4b23      	ldr	r3, [pc, #140]	@ (800323c <HAL_GPIO_Init+0x304>)
 80031b0:	685b      	ldr	r3, [r3, #4]
 80031b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031b4:	693b      	ldr	r3, [r7, #16]
 80031b6:	43db      	mvns	r3, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4013      	ands	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031be:	683b      	ldr	r3, [r7, #0]
 80031c0:	685b      	ldr	r3, [r3, #4]
 80031c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d003      	beq.n	80031d2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	693b      	ldr	r3, [r7, #16]
 80031ce:	4313      	orrs	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031d2:	4a1a      	ldr	r2, [pc, #104]	@ (800323c <HAL_GPIO_Init+0x304>)
 80031d4:	69bb      	ldr	r3, [r7, #24]
 80031d6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031d8:	4b18      	ldr	r3, [pc, #96]	@ (800323c <HAL_GPIO_Init+0x304>)
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031de:	693b      	ldr	r3, [r7, #16]
 80031e0:	43db      	mvns	r3, r3
 80031e2:	69ba      	ldr	r2, [r7, #24]
 80031e4:	4013      	ands	r3, r2
 80031e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d003      	beq.n	80031fc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031f4:	69ba      	ldr	r2, [r7, #24]
 80031f6:	693b      	ldr	r3, [r7, #16]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031fc:	4a0f      	ldr	r2, [pc, #60]	@ (800323c <HAL_GPIO_Init+0x304>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	3301      	adds	r3, #1
 8003206:	61fb      	str	r3, [r7, #28]
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	2b0f      	cmp	r3, #15
 800320c:	f67f aea2 	bls.w	8002f54 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003210:	bf00      	nop
 8003212:	bf00      	nop
 8003214:	3724      	adds	r7, #36	@ 0x24
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	40023800 	.word	0x40023800
 8003224:	40013800 	.word	0x40013800
 8003228:	40020000 	.word	0x40020000
 800322c:	40020400 	.word	0x40020400
 8003230:	40020800 	.word	0x40020800
 8003234:	40020c00 	.word	0x40020c00
 8003238:	40021000 	.word	0x40021000
 800323c:	40013c00 	.word	0x40013c00

08003240 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	6078      	str	r0, [r7, #4]
 8003248:	460b      	mov	r3, r1
 800324a:	807b      	strh	r3, [r7, #2]
 800324c:	4613      	mov	r3, r2
 800324e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003250:	787b      	ldrb	r3, [r7, #1]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d003      	beq.n	800325e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003256:	887a      	ldrh	r2, [r7, #2]
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800325c:	e003      	b.n	8003266 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800325e:	887b      	ldrh	r3, [r7, #2]
 8003260:	041a      	lsls	r2, r3, #16
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	619a      	str	r2, [r3, #24]
}
 8003266:	bf00      	nop
 8003268:	370c      	adds	r7, #12
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
	...

08003274 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b084      	sub	sp, #16
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e12b      	b.n	80034de <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fd ffe6 	bl	800126c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2224      	movs	r2, #36	@ 0x24
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	681a      	ldr	r2, [r3, #0]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f022 0201 	bic.w	r2, r2, #1
 80032b6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80032c6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80032d6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032d8:	f000 fd4c 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 80032dc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	4a81      	ldr	r2, [pc, #516]	@ (80034e8 <HAL_I2C_Init+0x274>)
 80032e4:	4293      	cmp	r3, r2
 80032e6:	d807      	bhi.n	80032f8 <HAL_I2C_Init+0x84>
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	4a80      	ldr	r2, [pc, #512]	@ (80034ec <HAL_I2C_Init+0x278>)
 80032ec:	4293      	cmp	r3, r2
 80032ee:	bf94      	ite	ls
 80032f0:	2301      	movls	r3, #1
 80032f2:	2300      	movhi	r3, #0
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	e006      	b.n	8003306 <HAL_I2C_Init+0x92>
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	4a7d      	ldr	r2, [pc, #500]	@ (80034f0 <HAL_I2C_Init+0x27c>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	bf94      	ite	ls
 8003300:	2301      	movls	r3, #1
 8003302:	2300      	movhi	r3, #0
 8003304:	b2db      	uxtb	r3, r3
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e0e7      	b.n	80034de <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	4a78      	ldr	r2, [pc, #480]	@ (80034f4 <HAL_I2C_Init+0x280>)
 8003312:	fba2 2303 	umull	r2, r3, r2, r3
 8003316:	0c9b      	lsrs	r3, r3, #18
 8003318:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	685b      	ldr	r3, [r3, #4]
 8003320:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	68ba      	ldr	r2, [r7, #8]
 800332a:	430a      	orrs	r2, r1
 800332c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	6a1b      	ldr	r3, [r3, #32]
 8003334:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	4a6a      	ldr	r2, [pc, #424]	@ (80034e8 <HAL_I2C_Init+0x274>)
 800333e:	4293      	cmp	r3, r2
 8003340:	d802      	bhi.n	8003348 <HAL_I2C_Init+0xd4>
 8003342:	68bb      	ldr	r3, [r7, #8]
 8003344:	3301      	adds	r3, #1
 8003346:	e009      	b.n	800335c <HAL_I2C_Init+0xe8>
 8003348:	68bb      	ldr	r3, [r7, #8]
 800334a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800334e:	fb02 f303 	mul.w	r3, r2, r3
 8003352:	4a69      	ldr	r2, [pc, #420]	@ (80034f8 <HAL_I2C_Init+0x284>)
 8003354:	fba2 2303 	umull	r2, r3, r2, r3
 8003358:	099b      	lsrs	r3, r3, #6
 800335a:	3301      	adds	r3, #1
 800335c:	687a      	ldr	r2, [r7, #4]
 800335e:	6812      	ldr	r2, [r2, #0]
 8003360:	430b      	orrs	r3, r1
 8003362:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	69db      	ldr	r3, [r3, #28]
 800336a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800336e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	495c      	ldr	r1, [pc, #368]	@ (80034e8 <HAL_I2C_Init+0x274>)
 8003378:	428b      	cmp	r3, r1
 800337a:	d819      	bhi.n	80033b0 <HAL_I2C_Init+0x13c>
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	1e59      	subs	r1, r3, #1
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	005b      	lsls	r3, r3, #1
 8003386:	fbb1 f3f3 	udiv	r3, r1, r3
 800338a:	1c59      	adds	r1, r3, #1
 800338c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003390:	400b      	ands	r3, r1
 8003392:	2b00      	cmp	r3, #0
 8003394:	d00a      	beq.n	80033ac <HAL_I2C_Init+0x138>
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	1e59      	subs	r1, r3, #1
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	005b      	lsls	r3, r3, #1
 80033a0:	fbb1 f3f3 	udiv	r3, r1, r3
 80033a4:	3301      	adds	r3, #1
 80033a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033aa:	e051      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033ac:	2304      	movs	r3, #4
 80033ae:	e04f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	689b      	ldr	r3, [r3, #8]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d111      	bne.n	80033dc <HAL_I2C_Init+0x168>
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	1e58      	subs	r0, r3, #1
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6859      	ldr	r1, [r3, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	005b      	lsls	r3, r3, #1
 80033c4:	440b      	add	r3, r1
 80033c6:	fbb0 f3f3 	udiv	r3, r0, r3
 80033ca:	3301      	adds	r3, #1
 80033cc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033d0:	2b00      	cmp	r3, #0
 80033d2:	bf0c      	ite	eq
 80033d4:	2301      	moveq	r3, #1
 80033d6:	2300      	movne	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	e012      	b.n	8003402 <HAL_I2C_Init+0x18e>
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	1e58      	subs	r0, r3, #1
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	6859      	ldr	r1, [r3, #4]
 80033e4:	460b      	mov	r3, r1
 80033e6:	009b      	lsls	r3, r3, #2
 80033e8:	440b      	add	r3, r1
 80033ea:	0099      	lsls	r1, r3, #2
 80033ec:	440b      	add	r3, r1
 80033ee:	fbb0 f3f3 	udiv	r3, r0, r3
 80033f2:	3301      	adds	r3, #1
 80033f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	bf0c      	ite	eq
 80033fc:	2301      	moveq	r3, #1
 80033fe:	2300      	movne	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x196>
 8003406:	2301      	movs	r3, #1
 8003408:	e022      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	2b00      	cmp	r3, #0
 8003410:	d10e      	bne.n	8003430 <HAL_I2C_Init+0x1bc>
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	1e58      	subs	r0, r3, #1
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	460b      	mov	r3, r1
 800341c:	005b      	lsls	r3, r3, #1
 800341e:	440b      	add	r3, r1
 8003420:	fbb0 f3f3 	udiv	r3, r0, r3
 8003424:	3301      	adds	r3, #1
 8003426:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800342e:	e00f      	b.n	8003450 <HAL_I2C_Init+0x1dc>
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	1e58      	subs	r0, r3, #1
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	6859      	ldr	r1, [r3, #4]
 8003438:	460b      	mov	r3, r1
 800343a:	009b      	lsls	r3, r3, #2
 800343c:	440b      	add	r3, r1
 800343e:	0099      	lsls	r1, r3, #2
 8003440:	440b      	add	r3, r1
 8003442:	fbb0 f3f3 	udiv	r3, r0, r3
 8003446:	3301      	adds	r3, #1
 8003448:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800344c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003450:	6879      	ldr	r1, [r7, #4]
 8003452:	6809      	ldr	r1, [r1, #0]
 8003454:	4313      	orrs	r3, r2
 8003456:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	69da      	ldr	r2, [r3, #28]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	6a1b      	ldr	r3, [r3, #32]
 800346a:	431a      	orrs	r2, r3
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	430a      	orrs	r2, r1
 8003472:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	689b      	ldr	r3, [r3, #8]
 800347a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800347e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003482:	687a      	ldr	r2, [r7, #4]
 8003484:	6911      	ldr	r1, [r2, #16]
 8003486:	687a      	ldr	r2, [r7, #4]
 8003488:	68d2      	ldr	r2, [r2, #12]
 800348a:	4311      	orrs	r1, r2
 800348c:	687a      	ldr	r2, [r7, #4]
 800348e:	6812      	ldr	r2, [r2, #0]
 8003490:	430b      	orrs	r3, r1
 8003492:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	68db      	ldr	r3, [r3, #12]
 800349a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	695a      	ldr	r2, [r3, #20]
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	699b      	ldr	r3, [r3, #24]
 80034a6:	431a      	orrs	r2, r3
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	430a      	orrs	r2, r1
 80034ae:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f042 0201 	orr.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	2200      	movs	r2, #0
 80034c4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2220      	movs	r2, #32
 80034ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	2200      	movs	r2, #0
 80034d2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80034dc:	2300      	movs	r3, #0
}
 80034de:	4618      	mov	r0, r3
 80034e0:	3710      	adds	r7, #16
 80034e2:	46bd      	mov	sp, r7
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	bf00      	nop
 80034e8:	000186a0 	.word	0x000186a0
 80034ec:	001e847f 	.word	0x001e847f
 80034f0:	003d08ff 	.word	0x003d08ff
 80034f4:	431bde83 	.word	0x431bde83
 80034f8:	10624dd3 	.word	0x10624dd3

080034fc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b086      	sub	sp, #24
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2b00      	cmp	r3, #0
 8003508:	d101      	bne.n	800350e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800350a:	2301      	movs	r3, #1
 800350c:	e267      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0301 	and.w	r3, r3, #1
 8003516:	2b00      	cmp	r3, #0
 8003518:	d075      	beq.n	8003606 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800351a:	4b88      	ldr	r3, [pc, #544]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
 8003522:	2b04      	cmp	r3, #4
 8003524:	d00c      	beq.n	8003540 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b85      	ldr	r3, [pc, #532]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800352e:	2b08      	cmp	r3, #8
 8003530:	d112      	bne.n	8003558 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003532:	4b82      	ldr	r3, [pc, #520]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800353a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800353e:	d10b      	bne.n	8003558 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003540:	4b7e      	ldr	r3, [pc, #504]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003548:	2b00      	cmp	r3, #0
 800354a:	d05b      	beq.n	8003604 <HAL_RCC_OscConfig+0x108>
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	2b00      	cmp	r3, #0
 8003552:	d157      	bne.n	8003604 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003554:	2301      	movs	r3, #1
 8003556:	e242      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003560:	d106      	bne.n	8003570 <HAL_RCC_OscConfig+0x74>
 8003562:	4b76      	ldr	r3, [pc, #472]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a75      	ldr	r2, [pc, #468]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003568:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800356c:	6013      	str	r3, [r2, #0]
 800356e:	e01d      	b.n	80035ac <HAL_RCC_OscConfig+0xb0>
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	685b      	ldr	r3, [r3, #4]
 8003574:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003578:	d10c      	bne.n	8003594 <HAL_RCC_OscConfig+0x98>
 800357a:	4b70      	ldr	r3, [pc, #448]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6f      	ldr	r2, [pc, #444]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	4b6d      	ldr	r3, [pc, #436]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	4a6c      	ldr	r2, [pc, #432]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800358c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003590:	6013      	str	r3, [r2, #0]
 8003592:	e00b      	b.n	80035ac <HAL_RCC_OscConfig+0xb0>
 8003594:	4b69      	ldr	r3, [pc, #420]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a68      	ldr	r2, [pc, #416]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800359a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800359e:	6013      	str	r3, [r2, #0]
 80035a0:	4b66      	ldr	r3, [pc, #408]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4a65      	ldr	r2, [pc, #404]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80035a6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80035aa:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d013      	beq.n	80035dc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035b4:	f7ff f88a 	bl	80026cc <HAL_GetTick>
 80035b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ba:	e008      	b.n	80035ce <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035bc:	f7ff f886 	bl	80026cc <HAL_GetTick>
 80035c0:	4602      	mov	r2, r0
 80035c2:	693b      	ldr	r3, [r7, #16]
 80035c4:	1ad3      	subs	r3, r2, r3
 80035c6:	2b64      	cmp	r3, #100	@ 0x64
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e207      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ce:	4b5b      	ldr	r3, [pc, #364]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d0f0      	beq.n	80035bc <HAL_RCC_OscConfig+0xc0>
 80035da:	e014      	b.n	8003606 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035dc:	f7ff f876 	bl	80026cc <HAL_GetTick>
 80035e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035e2:	e008      	b.n	80035f6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80035e4:	f7ff f872 	bl	80026cc <HAL_GetTick>
 80035e8:	4602      	mov	r2, r0
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	1ad3      	subs	r3, r2, r3
 80035ee:	2b64      	cmp	r3, #100	@ 0x64
 80035f0:	d901      	bls.n	80035f6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e1f3      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035f6:	4b51      	ldr	r3, [pc, #324]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d1f0      	bne.n	80035e4 <HAL_RCC_OscConfig+0xe8>
 8003602:	e000      	b.n	8003606 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003604:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d063      	beq.n	80036da <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003612:	4b4a      	ldr	r3, [pc, #296]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
 800361a:	2b00      	cmp	r3, #0
 800361c:	d00b      	beq.n	8003636 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b47      	ldr	r3, [pc, #284]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003620:	689b      	ldr	r3, [r3, #8]
 8003622:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003626:	2b08      	cmp	r3, #8
 8003628:	d11c      	bne.n	8003664 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800362a:	4b44      	ldr	r3, [pc, #272]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d116      	bne.n	8003664 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003636:	4b41      	ldr	r3, [pc, #260]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d005      	beq.n	800364e <HAL_RCC_OscConfig+0x152>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b01      	cmp	r3, #1
 8003648:	d001      	beq.n	800364e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800364a:	2301      	movs	r3, #1
 800364c:	e1c7      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800364e:	4b3b      	ldr	r3, [pc, #236]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	691b      	ldr	r3, [r3, #16]
 800365a:	00db      	lsls	r3, r3, #3
 800365c:	4937      	ldr	r1, [pc, #220]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800365e:	4313      	orrs	r3, r2
 8003660:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003662:	e03a      	b.n	80036da <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b00      	cmp	r3, #0
 800366a:	d020      	beq.n	80036ae <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800366c:	4b34      	ldr	r3, [pc, #208]	@ (8003740 <HAL_RCC_OscConfig+0x244>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003672:	f7ff f82b 	bl	80026cc <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800367a:	f7ff f827 	bl	80026cc <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e1a8      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800368c:	4b2b      	ldr	r3, [pc, #172]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003698:	4b28      	ldr	r3, [pc, #160]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	691b      	ldr	r3, [r3, #16]
 80036a4:	00db      	lsls	r3, r3, #3
 80036a6:	4925      	ldr	r1, [pc, #148]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80036a8:	4313      	orrs	r3, r2
 80036aa:	600b      	str	r3, [r1, #0]
 80036ac:	e015      	b.n	80036da <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036ae:	4b24      	ldr	r3, [pc, #144]	@ (8003740 <HAL_RCC_OscConfig+0x244>)
 80036b0:	2200      	movs	r2, #0
 80036b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b4:	f7ff f80a 	bl	80026cc <HAL_GetTick>
 80036b8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80036bc:	f7ff f806 	bl	80026cc <HAL_GetTick>
 80036c0:	4602      	mov	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e187      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ce:	4b1b      	ldr	r3, [pc, #108]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0302 	and.w	r3, r3, #2
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0308 	and.w	r3, r3, #8
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d036      	beq.n	8003754 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	695b      	ldr	r3, [r3, #20]
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d016      	beq.n	800371c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036ee:	4b15      	ldr	r3, [pc, #84]	@ (8003744 <HAL_RCC_OscConfig+0x248>)
 80036f0:	2201      	movs	r2, #1
 80036f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036f4:	f7fe ffea 	bl	80026cc <HAL_GetTick>
 80036f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036fa:	e008      	b.n	800370e <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80036fc:	f7fe ffe6 	bl	80026cc <HAL_GetTick>
 8003700:	4602      	mov	r2, r0
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	1ad3      	subs	r3, r2, r3
 8003706:	2b02      	cmp	r3, #2
 8003708:	d901      	bls.n	800370e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800370a:	2303      	movs	r3, #3
 800370c:	e167      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800370e:	4b0b      	ldr	r3, [pc, #44]	@ (800373c <HAL_RCC_OscConfig+0x240>)
 8003710:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003712:	f003 0302 	and.w	r3, r3, #2
 8003716:	2b00      	cmp	r3, #0
 8003718:	d0f0      	beq.n	80036fc <HAL_RCC_OscConfig+0x200>
 800371a:	e01b      	b.n	8003754 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800371c:	4b09      	ldr	r3, [pc, #36]	@ (8003744 <HAL_RCC_OscConfig+0x248>)
 800371e:	2200      	movs	r2, #0
 8003720:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003722:	f7fe ffd3 	bl	80026cc <HAL_GetTick>
 8003726:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003728:	e00e      	b.n	8003748 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800372a:	f7fe ffcf 	bl	80026cc <HAL_GetTick>
 800372e:	4602      	mov	r2, r0
 8003730:	693b      	ldr	r3, [r7, #16]
 8003732:	1ad3      	subs	r3, r2, r3
 8003734:	2b02      	cmp	r3, #2
 8003736:	d907      	bls.n	8003748 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003738:	2303      	movs	r3, #3
 800373a:	e150      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
 800373c:	40023800 	.word	0x40023800
 8003740:	42470000 	.word	0x42470000
 8003744:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003748:	4b88      	ldr	r3, [pc, #544]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800374a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800374c:	f003 0302 	and.w	r3, r3, #2
 8003750:	2b00      	cmp	r3, #0
 8003752:	d1ea      	bne.n	800372a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f003 0304 	and.w	r3, r3, #4
 800375c:	2b00      	cmp	r3, #0
 800375e:	f000 8097 	beq.w	8003890 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003762:	2300      	movs	r3, #0
 8003764:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003766:	4b81      	ldr	r3, [pc, #516]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800376a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800376e:	2b00      	cmp	r3, #0
 8003770:	d10f      	bne.n	8003792 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003772:	2300      	movs	r3, #0
 8003774:	60bb      	str	r3, [r7, #8]
 8003776:	4b7d      	ldr	r3, [pc, #500]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	4a7c      	ldr	r2, [pc, #496]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800377c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003780:	6413      	str	r3, [r2, #64]	@ 0x40
 8003782:	4b7a      	ldr	r3, [pc, #488]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003786:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800378a:	60bb      	str	r3, [r7, #8]
 800378c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800378e:	2301      	movs	r3, #1
 8003790:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003792:	4b77      	ldr	r3, [pc, #476]	@ (8003970 <HAL_RCC_OscConfig+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800379a:	2b00      	cmp	r3, #0
 800379c:	d118      	bne.n	80037d0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800379e:	4b74      	ldr	r3, [pc, #464]	@ (8003970 <HAL_RCC_OscConfig+0x474>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4a73      	ldr	r2, [pc, #460]	@ (8003970 <HAL_RCC_OscConfig+0x474>)
 80037a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80037a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80037aa:	f7fe ff8f 	bl	80026cc <HAL_GetTick>
 80037ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b0:	e008      	b.n	80037c4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037b2:	f7fe ff8b 	bl	80026cc <HAL_GetTick>
 80037b6:	4602      	mov	r2, r0
 80037b8:	693b      	ldr	r3, [r7, #16]
 80037ba:	1ad3      	subs	r3, r2, r3
 80037bc:	2b02      	cmp	r3, #2
 80037be:	d901      	bls.n	80037c4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037c0:	2303      	movs	r3, #3
 80037c2:	e10c      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037c4:	4b6a      	ldr	r3, [pc, #424]	@ (8003970 <HAL_RCC_OscConfig+0x474>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d0f0      	beq.n	80037b2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	689b      	ldr	r3, [r3, #8]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d106      	bne.n	80037e6 <HAL_RCC_OscConfig+0x2ea>
 80037d8:	4b64      	ldr	r3, [pc, #400]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80037da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037dc:	4a63      	ldr	r2, [pc, #396]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80037de:	f043 0301 	orr.w	r3, r3, #1
 80037e2:	6713      	str	r3, [r2, #112]	@ 0x70
 80037e4:	e01c      	b.n	8003820 <HAL_RCC_OscConfig+0x324>
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	689b      	ldr	r3, [r3, #8]
 80037ea:	2b05      	cmp	r3, #5
 80037ec:	d10c      	bne.n	8003808 <HAL_RCC_OscConfig+0x30c>
 80037ee:	4b5f      	ldr	r3, [pc, #380]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037f2:	4a5e      	ldr	r2, [pc, #376]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 0304 	orr.w	r3, r3, #4
 80037f8:	6713      	str	r3, [r2, #112]	@ 0x70
 80037fa:	4b5c      	ldr	r3, [pc, #368]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80037fc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037fe:	4a5b      	ldr	r2, [pc, #364]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003800:	f043 0301 	orr.w	r3, r3, #1
 8003804:	6713      	str	r3, [r2, #112]	@ 0x70
 8003806:	e00b      	b.n	8003820 <HAL_RCC_OscConfig+0x324>
 8003808:	4b58      	ldr	r3, [pc, #352]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800380c:	4a57      	ldr	r2, [pc, #348]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 0301 	bic.w	r3, r3, #1
 8003812:	6713      	str	r3, [r2, #112]	@ 0x70
 8003814:	4b55      	ldr	r3, [pc, #340]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003816:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003818:	4a54      	ldr	r2, [pc, #336]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800381a:	f023 0304 	bic.w	r3, r3, #4
 800381e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	689b      	ldr	r3, [r3, #8]
 8003824:	2b00      	cmp	r3, #0
 8003826:	d015      	beq.n	8003854 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003828:	f7fe ff50 	bl	80026cc <HAL_GetTick>
 800382c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800382e:	e00a      	b.n	8003846 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003830:	f7fe ff4c 	bl	80026cc <HAL_GetTick>
 8003834:	4602      	mov	r2, r0
 8003836:	693b      	ldr	r3, [r7, #16]
 8003838:	1ad3      	subs	r3, r2, r3
 800383a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800383e:	4293      	cmp	r3, r2
 8003840:	d901      	bls.n	8003846 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003842:	2303      	movs	r3, #3
 8003844:	e0cb      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003846:	4b49      	ldr	r3, [pc, #292]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003848:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800384a:	f003 0302 	and.w	r3, r3, #2
 800384e:	2b00      	cmp	r3, #0
 8003850:	d0ee      	beq.n	8003830 <HAL_RCC_OscConfig+0x334>
 8003852:	e014      	b.n	800387e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003854:	f7fe ff3a 	bl	80026cc <HAL_GetTick>
 8003858:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800385a:	e00a      	b.n	8003872 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800385c:	f7fe ff36 	bl	80026cc <HAL_GetTick>
 8003860:	4602      	mov	r2, r0
 8003862:	693b      	ldr	r3, [r7, #16]
 8003864:	1ad3      	subs	r3, r2, r3
 8003866:	f241 3288 	movw	r2, #5000	@ 0x1388
 800386a:	4293      	cmp	r3, r2
 800386c:	d901      	bls.n	8003872 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800386e:	2303      	movs	r3, #3
 8003870:	e0b5      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003872:	4b3e      	ldr	r3, [pc, #248]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003874:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003876:	f003 0302 	and.w	r3, r3, #2
 800387a:	2b00      	cmp	r3, #0
 800387c:	d1ee      	bne.n	800385c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800387e:	7dfb      	ldrb	r3, [r7, #23]
 8003880:	2b01      	cmp	r3, #1
 8003882:	d105      	bne.n	8003890 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003884:	4b39      	ldr	r3, [pc, #228]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003886:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003888:	4a38      	ldr	r2, [pc, #224]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800388a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800388e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	699b      	ldr	r3, [r3, #24]
 8003894:	2b00      	cmp	r3, #0
 8003896:	f000 80a1 	beq.w	80039dc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800389a:	4b34      	ldr	r3, [pc, #208]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 800389c:	689b      	ldr	r3, [r3, #8]
 800389e:	f003 030c 	and.w	r3, r3, #12
 80038a2:	2b08      	cmp	r3, #8
 80038a4:	d05c      	beq.n	8003960 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	699b      	ldr	r3, [r3, #24]
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d141      	bne.n	8003932 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038ae:	4b31      	ldr	r3, [pc, #196]	@ (8003974 <HAL_RCC_OscConfig+0x478>)
 80038b0:	2200      	movs	r2, #0
 80038b2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038b4:	f7fe ff0a 	bl	80026cc <HAL_GetTick>
 80038b8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ba:	e008      	b.n	80038ce <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038bc:	f7fe ff06 	bl	80026cc <HAL_GetTick>
 80038c0:	4602      	mov	r2, r0
 80038c2:	693b      	ldr	r3, [r7, #16]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	2b02      	cmp	r3, #2
 80038c8:	d901      	bls.n	80038ce <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038ca:	2303      	movs	r3, #3
 80038cc:	e087      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ce:	4b27      	ldr	r3, [pc, #156]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d1f0      	bne.n	80038bc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	69da      	ldr	r2, [r3, #28]
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6a1b      	ldr	r3, [r3, #32]
 80038e2:	431a      	orrs	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038e8:	019b      	lsls	r3, r3, #6
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f0:	085b      	lsrs	r3, r3, #1
 80038f2:	3b01      	subs	r3, #1
 80038f4:	041b      	lsls	r3, r3, #16
 80038f6:	431a      	orrs	r2, r3
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038fc:	061b      	lsls	r3, r3, #24
 80038fe:	491b      	ldr	r1, [pc, #108]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003900:	4313      	orrs	r3, r2
 8003902:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003904:	4b1b      	ldr	r3, [pc, #108]	@ (8003974 <HAL_RCC_OscConfig+0x478>)
 8003906:	2201      	movs	r2, #1
 8003908:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800390a:	f7fe fedf 	bl	80026cc <HAL_GetTick>
 800390e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003910:	e008      	b.n	8003924 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003912:	f7fe fedb 	bl	80026cc <HAL_GetTick>
 8003916:	4602      	mov	r2, r0
 8003918:	693b      	ldr	r3, [r7, #16]
 800391a:	1ad3      	subs	r3, r2, r3
 800391c:	2b02      	cmp	r3, #2
 800391e:	d901      	bls.n	8003924 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003920:	2303      	movs	r3, #3
 8003922:	e05c      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003924:	4b11      	ldr	r3, [pc, #68]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d0f0      	beq.n	8003912 <HAL_RCC_OscConfig+0x416>
 8003930:	e054      	b.n	80039dc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003932:	4b10      	ldr	r3, [pc, #64]	@ (8003974 <HAL_RCC_OscConfig+0x478>)
 8003934:	2200      	movs	r2, #0
 8003936:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003938:	f7fe fec8 	bl	80026cc <HAL_GetTick>
 800393c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800393e:	e008      	b.n	8003952 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003940:	f7fe fec4 	bl	80026cc <HAL_GetTick>
 8003944:	4602      	mov	r2, r0
 8003946:	693b      	ldr	r3, [r7, #16]
 8003948:	1ad3      	subs	r3, r2, r3
 800394a:	2b02      	cmp	r3, #2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e045      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003952:	4b06      	ldr	r3, [pc, #24]	@ (800396c <HAL_RCC_OscConfig+0x470>)
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800395a:	2b00      	cmp	r3, #0
 800395c:	d1f0      	bne.n	8003940 <HAL_RCC_OscConfig+0x444>
 800395e:	e03d      	b.n	80039dc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	699b      	ldr	r3, [r3, #24]
 8003964:	2b01      	cmp	r3, #1
 8003966:	d107      	bne.n	8003978 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e038      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
 800396c:	40023800 	.word	0x40023800
 8003970:	40007000 	.word	0x40007000
 8003974:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003978:	4b1b      	ldr	r3, [pc, #108]	@ (80039e8 <HAL_RCC_OscConfig+0x4ec>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	699b      	ldr	r3, [r3, #24]
 8003982:	2b01      	cmp	r3, #1
 8003984:	d028      	beq.n	80039d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003990:	429a      	cmp	r2, r3
 8003992:	d121      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800399e:	429a      	cmp	r2, r3
 80039a0:	d11a      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039a2:	68fa      	ldr	r2, [r7, #12]
 80039a4:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80039a8:	4013      	ands	r3, r2
 80039aa:	687a      	ldr	r2, [r7, #4]
 80039ac:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80039ae:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039b0:	4293      	cmp	r3, r2
 80039b2:	d111      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80039be:	085b      	lsrs	r3, r3, #1
 80039c0:	3b01      	subs	r3, #1
 80039c2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d107      	bne.n	80039d8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039d2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039d4:	429a      	cmp	r2, r3
 80039d6:	d001      	beq.n	80039dc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	e000      	b.n	80039de <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039dc:	2300      	movs	r3, #0
}
 80039de:	4618      	mov	r0, r3
 80039e0:	3718      	adds	r7, #24
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bd80      	pop	{r7, pc}
 80039e6:	bf00      	nop
 80039e8:	40023800 	.word	0x40023800

080039ec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039ec:	b580      	push	{r7, lr}
 80039ee:	b084      	sub	sp, #16
 80039f0:	af00      	add	r7, sp, #0
 80039f2:	6078      	str	r0, [r7, #4]
 80039f4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2b00      	cmp	r3, #0
 80039fa:	d101      	bne.n	8003a00 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039fc:	2301      	movs	r3, #1
 80039fe:	e0cc      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a00:	4b68      	ldr	r3, [pc, #416]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	f003 0307 	and.w	r3, r3, #7
 8003a08:	683a      	ldr	r2, [r7, #0]
 8003a0a:	429a      	cmp	r2, r3
 8003a0c:	d90c      	bls.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a0e:	4b65      	ldr	r3, [pc, #404]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a10:	683a      	ldr	r2, [r7, #0]
 8003a12:	b2d2      	uxtb	r2, r2
 8003a14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a16:	4b63      	ldr	r3, [pc, #396]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003a18:	681b      	ldr	r3, [r3, #0]
 8003a1a:	f003 0307 	and.w	r3, r3, #7
 8003a1e:	683a      	ldr	r2, [r7, #0]
 8003a20:	429a      	cmp	r2, r3
 8003a22:	d001      	beq.n	8003a28 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e0b8      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0302 	and.w	r3, r3, #2
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d020      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f003 0304 	and.w	r3, r3, #4
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d005      	beq.n	8003a4c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a40:	4b59      	ldr	r3, [pc, #356]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a42:	689b      	ldr	r3, [r3, #8]
 8003a44:	4a58      	ldr	r2, [pc, #352]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003a4a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	f003 0308 	and.w	r3, r3, #8
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d005      	beq.n	8003a64 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a58:	4b53      	ldr	r3, [pc, #332]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	4a52      	ldr	r2, [pc, #328]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a5e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003a62:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a64:	4b50      	ldr	r3, [pc, #320]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	689b      	ldr	r3, [r3, #8]
 8003a68:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	494d      	ldr	r1, [pc, #308]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f003 0301 	and.w	r3, r3, #1
 8003a7e:	2b00      	cmp	r3, #0
 8003a80:	d044      	beq.n	8003b0c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	685b      	ldr	r3, [r3, #4]
 8003a86:	2b01      	cmp	r3, #1
 8003a88:	d107      	bne.n	8003a9a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a8a:	4b47      	ldr	r3, [pc, #284]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d119      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a96:	2301      	movs	r3, #1
 8003a98:	e07f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	685b      	ldr	r3, [r3, #4]
 8003a9e:	2b02      	cmp	r3, #2
 8003aa0:	d003      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003aa6:	2b03      	cmp	r3, #3
 8003aa8:	d107      	bne.n	8003aba <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003aaa:	4b3f      	ldr	r3, [pc, #252]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d109      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e06f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aba:	4b3b      	ldr	r3, [pc, #236]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0302 	and.w	r3, r3, #2
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d101      	bne.n	8003aca <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003ac6:	2301      	movs	r3, #1
 8003ac8:	e067      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003aca:	4b37      	ldr	r3, [pc, #220]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	689b      	ldr	r3, [r3, #8]
 8003ace:	f023 0203 	bic.w	r2, r3, #3
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	685b      	ldr	r3, [r3, #4]
 8003ad6:	4934      	ldr	r1, [pc, #208]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003adc:	f7fe fdf6 	bl	80026cc <HAL_GetTick>
 8003ae0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ae2:	e00a      	b.n	8003afa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ae4:	f7fe fdf2 	bl	80026cc <HAL_GetTick>
 8003ae8:	4602      	mov	r2, r0
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	1ad3      	subs	r3, r2, r3
 8003aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003af2:	4293      	cmp	r3, r2
 8003af4:	d901      	bls.n	8003afa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003af6:	2303      	movs	r3, #3
 8003af8:	e04f      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003afa:	4b2b      	ldr	r3, [pc, #172]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003afc:	689b      	ldr	r3, [r3, #8]
 8003afe:	f003 020c 	and.w	r2, r3, #12
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	009b      	lsls	r3, r3, #2
 8003b08:	429a      	cmp	r2, r3
 8003b0a:	d1eb      	bne.n	8003ae4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b0c:	4b25      	ldr	r3, [pc, #148]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f003 0307 	and.w	r3, r3, #7
 8003b14:	683a      	ldr	r2, [r7, #0]
 8003b16:	429a      	cmp	r2, r3
 8003b18:	d20c      	bcs.n	8003b34 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b1a:	4b22      	ldr	r3, [pc, #136]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b1c:	683a      	ldr	r2, [r7, #0]
 8003b1e:	b2d2      	uxtb	r2, r2
 8003b20:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b22:	4b20      	ldr	r3, [pc, #128]	@ (8003ba4 <HAL_RCC_ClockConfig+0x1b8>)
 8003b24:	681b      	ldr	r3, [r3, #0]
 8003b26:	f003 0307 	and.w	r3, r3, #7
 8003b2a:	683a      	ldr	r2, [r7, #0]
 8003b2c:	429a      	cmp	r2, r3
 8003b2e:	d001      	beq.n	8003b34 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b30:	2301      	movs	r3, #1
 8003b32:	e032      	b.n	8003b9a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f003 0304 	and.w	r3, r3, #4
 8003b3c:	2b00      	cmp	r3, #0
 8003b3e:	d008      	beq.n	8003b52 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b40:	4b19      	ldr	r3, [pc, #100]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	4916      	ldr	r1, [pc, #88]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d009      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b5e:	4b12      	ldr	r3, [pc, #72]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	689b      	ldr	r3, [r3, #8]
 8003b62:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	691b      	ldr	r3, [r3, #16]
 8003b6a:	00db      	lsls	r3, r3, #3
 8003b6c:	490e      	ldr	r1, [pc, #56]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003b72:	f000 f82d 	bl	8003bd0 <HAL_RCC_GetSysClockFreq>
 8003b76:	4602      	mov	r2, r0
 8003b78:	4b0b      	ldr	r3, [pc, #44]	@ (8003ba8 <HAL_RCC_ClockConfig+0x1bc>)
 8003b7a:	689b      	ldr	r3, [r3, #8]
 8003b7c:	091b      	lsrs	r3, r3, #4
 8003b7e:	f003 030f 	and.w	r3, r3, #15
 8003b82:	490a      	ldr	r1, [pc, #40]	@ (8003bac <HAL_RCC_ClockConfig+0x1c0>)
 8003b84:	5ccb      	ldrb	r3, [r1, r3]
 8003b86:	fa22 f303 	lsr.w	r3, r2, r3
 8003b8a:	4a09      	ldr	r2, [pc, #36]	@ (8003bb0 <HAL_RCC_ClockConfig+0x1c4>)
 8003b8c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003b8e:	4b09      	ldr	r3, [pc, #36]	@ (8003bb4 <HAL_RCC_ClockConfig+0x1c8>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	4618      	mov	r0, r3
 8003b94:	f7fe fd56 	bl	8002644 <HAL_InitTick>

  return HAL_OK;
 8003b98:	2300      	movs	r3, #0
}
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	3710      	adds	r7, #16
 8003b9e:	46bd      	mov	sp, r7
 8003ba0:	bd80      	pop	{r7, pc}
 8003ba2:	bf00      	nop
 8003ba4:	40023c00 	.word	0x40023c00
 8003ba8:	40023800 	.word	0x40023800
 8003bac:	0800c6ac 	.word	0x0800c6ac
 8003bb0:	20000040 	.word	0x20000040
 8003bb4:	20000044 	.word	0x20000044

08003bb8 <HAL_RCC_EnableCSS>:
  *         allowing the MCU to perform rescue operations. The CSSI is linked to
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	af00      	add	r7, sp, #0
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <HAL_RCC_EnableCSS+0x14>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	601a      	str	r2, [r3, #0]
}
 8003bc2:	bf00      	nop
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr
 8003bcc:	4247004c 	.word	0x4247004c

08003bd0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bd4:	b090      	sub	sp, #64	@ 0x40
 8003bd6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003bd8:	2300      	movs	r3, #0
 8003bda:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8003bdc:	2300      	movs	r3, #0
 8003bde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8003be0:	2300      	movs	r3, #0
 8003be2:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 8003be4:	2300      	movs	r3, #0
 8003be6:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003be8:	4b59      	ldr	r3, [pc, #356]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	f003 030c 	and.w	r3, r3, #12
 8003bf0:	2b08      	cmp	r3, #8
 8003bf2:	d00d      	beq.n	8003c10 <HAL_RCC_GetSysClockFreq+0x40>
 8003bf4:	2b08      	cmp	r3, #8
 8003bf6:	f200 80a1 	bhi.w	8003d3c <HAL_RCC_GetSysClockFreq+0x16c>
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d002      	beq.n	8003c04 <HAL_RCC_GetSysClockFreq+0x34>
 8003bfe:	2b04      	cmp	r3, #4
 8003c00:	d003      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x3a>
 8003c02:	e09b      	b.n	8003d3c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c04:	4b53      	ldr	r3, [pc, #332]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c06:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c08:	e09b      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c0a:	4b53      	ldr	r3, [pc, #332]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c0c:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003c0e:	e098      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c10:	4b4f      	ldr	r3, [pc, #316]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c12:	685b      	ldr	r3, [r3, #4]
 8003c14:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003c18:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003c1a:	4b4d      	ldr	r3, [pc, #308]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c1c:	685b      	ldr	r3, [r3, #4]
 8003c1e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d028      	beq.n	8003c78 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c26:	4b4a      	ldr	r3, [pc, #296]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	099b      	lsrs	r3, r3, #6
 8003c2c:	2200      	movs	r2, #0
 8003c2e:	623b      	str	r3, [r7, #32]
 8003c30:	627a      	str	r2, [r7, #36]	@ 0x24
 8003c32:	6a3b      	ldr	r3, [r7, #32]
 8003c34:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c38:	2100      	movs	r1, #0
 8003c3a:	4b47      	ldr	r3, [pc, #284]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c3c:	fb03 f201 	mul.w	r2, r3, r1
 8003c40:	2300      	movs	r3, #0
 8003c42:	fb00 f303 	mul.w	r3, r0, r3
 8003c46:	4413      	add	r3, r2
 8003c48:	4a43      	ldr	r2, [pc, #268]	@ (8003d58 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c4a:	fba0 1202 	umull	r1, r2, r0, r2
 8003c4e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003c50:	460a      	mov	r2, r1
 8003c52:	62ba      	str	r2, [r7, #40]	@ 0x28
 8003c54:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003c56:	4413      	add	r3, r2
 8003c58:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003c5a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003c5c:	2200      	movs	r2, #0
 8003c5e:	61bb      	str	r3, [r7, #24]
 8003c60:	61fa      	str	r2, [r7, #28]
 8003c62:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c66:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003c6a:	f7fd f815 	bl	8000c98 <__aeabi_uldivmod>
 8003c6e:	4602      	mov	r2, r0
 8003c70:	460b      	mov	r3, r1
 8003c72:	4613      	mov	r3, r2
 8003c74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003c76:	e053      	b.n	8003d20 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c78:	4b35      	ldr	r3, [pc, #212]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003c7a:	685b      	ldr	r3, [r3, #4]
 8003c7c:	099b      	lsrs	r3, r3, #6
 8003c7e:	2200      	movs	r2, #0
 8003c80:	613b      	str	r3, [r7, #16]
 8003c82:	617a      	str	r2, [r7, #20]
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c8a:	f04f 0b00 	mov.w	fp, #0
 8003c8e:	4652      	mov	r2, sl
 8003c90:	465b      	mov	r3, fp
 8003c92:	f04f 0000 	mov.w	r0, #0
 8003c96:	f04f 0100 	mov.w	r1, #0
 8003c9a:	0159      	lsls	r1, r3, #5
 8003c9c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ca0:	0150      	lsls	r0, r2, #5
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	460b      	mov	r3, r1
 8003ca6:	ebb2 080a 	subs.w	r8, r2, sl
 8003caa:	eb63 090b 	sbc.w	r9, r3, fp
 8003cae:	f04f 0200 	mov.w	r2, #0
 8003cb2:	f04f 0300 	mov.w	r3, #0
 8003cb6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003cba:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003cbe:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003cc2:	ebb2 0408 	subs.w	r4, r2, r8
 8003cc6:	eb63 0509 	sbc.w	r5, r3, r9
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	f04f 0300 	mov.w	r3, #0
 8003cd2:	00eb      	lsls	r3, r5, #3
 8003cd4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cd8:	00e2      	lsls	r2, r4, #3
 8003cda:	4614      	mov	r4, r2
 8003cdc:	461d      	mov	r5, r3
 8003cde:	eb14 030a 	adds.w	r3, r4, sl
 8003ce2:	603b      	str	r3, [r7, #0]
 8003ce4:	eb45 030b 	adc.w	r3, r5, fp
 8003ce8:	607b      	str	r3, [r7, #4]
 8003cea:	f04f 0200 	mov.w	r2, #0
 8003cee:	f04f 0300 	mov.w	r3, #0
 8003cf2:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cf6:	4629      	mov	r1, r5
 8003cf8:	028b      	lsls	r3, r1, #10
 8003cfa:	4621      	mov	r1, r4
 8003cfc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d00:	4621      	mov	r1, r4
 8003d02:	028a      	lsls	r2, r1, #10
 8003d04:	4610      	mov	r0, r2
 8003d06:	4619      	mov	r1, r3
 8003d08:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	60bb      	str	r3, [r7, #8]
 8003d0e:	60fa      	str	r2, [r7, #12]
 8003d10:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003d14:	f7fc ffc0 	bl	8000c98 <__aeabi_uldivmod>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4613      	mov	r3, r2
 8003d1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003d20:	4b0b      	ldr	r3, [pc, #44]	@ (8003d50 <HAL_RCC_GetSysClockFreq+0x180>)
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	0c1b      	lsrs	r3, r3, #16
 8003d26:	f003 0303 	and.w	r3, r3, #3
 8003d2a:	3301      	adds	r3, #1
 8003d2c:	005b      	lsls	r3, r3, #1
 8003d2e:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8003d30:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8003d32:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d34:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d38:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d3a:	e002      	b.n	8003d42 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d3c:	4b05      	ldr	r3, [pc, #20]	@ (8003d54 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d3e:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8003d40:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8003d44:	4618      	mov	r0, r3
 8003d46:	3740      	adds	r7, #64	@ 0x40
 8003d48:	46bd      	mov	sp, r7
 8003d4a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d4e:	bf00      	nop
 8003d50:	40023800 	.word	0x40023800
 8003d54:	00f42400 	.word	0x00f42400
 8003d58:	017d7840 	.word	0x017d7840

08003d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d60:	4b03      	ldr	r3, [pc, #12]	@ (8003d70 <HAL_RCC_GetHCLKFreq+0x14>)
 8003d62:	681b      	ldr	r3, [r3, #0]
}
 8003d64:	4618      	mov	r0, r3
 8003d66:	46bd      	mov	sp, r7
 8003d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6c:	4770      	bx	lr
 8003d6e:	bf00      	nop
 8003d70:	20000040 	.word	0x20000040

08003d74 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d74:	b580      	push	{r7, lr}
 8003d76:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d78:	f7ff fff0 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	4b05      	ldr	r3, [pc, #20]	@ (8003d94 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	0a9b      	lsrs	r3, r3, #10
 8003d84:	f003 0307 	and.w	r3, r3, #7
 8003d88:	4903      	ldr	r1, [pc, #12]	@ (8003d98 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d8a:	5ccb      	ldrb	r3, [r1, r3]
 8003d8c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d90:	4618      	mov	r0, r3
 8003d92:	bd80      	pop	{r7, pc}
 8003d94:	40023800 	.word	0x40023800
 8003d98:	0800c6bc 	.word	0x0800c6bc

08003d9c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d9c:	b580      	push	{r7, lr}
 8003d9e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003da0:	f7ff ffdc 	bl	8003d5c <HAL_RCC_GetHCLKFreq>
 8003da4:	4602      	mov	r2, r0
 8003da6:	4b05      	ldr	r3, [pc, #20]	@ (8003dbc <HAL_RCC_GetPCLK2Freq+0x20>)
 8003da8:	689b      	ldr	r3, [r3, #8]
 8003daa:	0b5b      	lsrs	r3, r3, #13
 8003dac:	f003 0307 	and.w	r3, r3, #7
 8003db0:	4903      	ldr	r1, [pc, #12]	@ (8003dc0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003db2:	5ccb      	ldrb	r3, [r1, r3]
 8003db4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003db8:	4618      	mov	r0, r3
 8003dba:	bd80      	pop	{r7, pc}
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	0800c6bc 	.word	0x0800c6bc

08003dc4 <HAL_RCC_NMI_IRQHandler>:
  * @brief This function handles the RCC CSS interrupt request.
  * @note This API should be called under the NMI_Handler().
  * @retval None
  */
void HAL_RCC_NMI_IRQHandler(void)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	af00      	add	r7, sp, #0
  /* Check RCC CSSF flag  */
  if (__HAL_RCC_GET_IT(RCC_IT_CSS))
 8003dc8:	4b06      	ldr	r3, [pc, #24]	@ (8003de4 <HAL_RCC_NMI_IRQHandler+0x20>)
 8003dca:	68db      	ldr	r3, [r3, #12]
 8003dcc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dd0:	2b80      	cmp	r3, #128	@ 0x80
 8003dd2:	d104      	bne.n	8003dde <HAL_RCC_NMI_IRQHandler+0x1a>
  {
    /* RCC Clock Security System interrupt user callback */
    HAL_RCC_CSSCallback();
 8003dd4:	f000 f80a 	bl	8003dec <HAL_RCC_CSSCallback>

    /* Clear RCC CSS pending bit */
    __HAL_RCC_CLEAR_IT(RCC_IT_CSS);
 8003dd8:	4b03      	ldr	r3, [pc, #12]	@ (8003de8 <HAL_RCC_NMI_IRQHandler+0x24>)
 8003dda:	2280      	movs	r2, #128	@ 0x80
 8003ddc:	701a      	strb	r2, [r3, #0]
  }
}
 8003dde:	bf00      	nop
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	40023800 	.word	0x40023800
 8003de8:	4002380e 	.word	0x4002380e

08003dec <HAL_RCC_CSSCallback>:
/**
  * @brief  RCC Clock Security System interrupt callback
  * @retval None
  */
__weak void HAL_RCC_CSSCallback(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_RCC_CSSCallback could be implemented in the user file
   */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003dfa:	b580      	push	{r7, lr}
 8003dfc:	b082      	sub	sp, #8
 8003dfe:	af00      	add	r7, sp, #0
 8003e00:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d101      	bne.n	8003e0c <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e041      	b.n	8003e90 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d106      	bne.n	8003e26 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e20:	6878      	ldr	r0, [r7, #4]
 8003e22:	f7fe fab1 	bl	8002388 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2202      	movs	r2, #2
 8003e2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681a      	ldr	r2, [r3, #0]
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	3304      	adds	r3, #4
 8003e36:	4619      	mov	r1, r3
 8003e38:	4610      	mov	r0, r2
 8003e3a:	f000 fac1 	bl	80043c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2201      	movs	r2, #1
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2201      	movs	r2, #1
 8003e52:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	2201      	movs	r2, #1
 8003e5a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2201      	movs	r2, #1
 8003e62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	2201      	movs	r2, #1
 8003e6a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	2201      	movs	r2, #1
 8003e72:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2201      	movs	r2, #1
 8003e82:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2201      	movs	r2, #1
 8003e8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e8e:	2300      	movs	r3, #0
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	3708      	adds	r7, #8
 8003e94:	46bd      	mov	sp, r7
 8003e96:	bd80      	pop	{r7, pc}

08003e98 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003e98:	b580      	push	{r7, lr}
 8003e9a:	b082      	sub	sp, #8
 8003e9c:	af00      	add	r7, sp, #0
 8003e9e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d101      	bne.n	8003eaa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e041      	b.n	8003f2e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eb0:	b2db      	uxtb	r3, r3
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d106      	bne.n	8003ec4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f839 	bl	8003f36 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2202      	movs	r2, #2
 8003ec8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681a      	ldr	r2, [r3, #0]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	3304      	adds	r3, #4
 8003ed4:	4619      	mov	r1, r3
 8003ed6:	4610      	mov	r0, r2
 8003ed8:	f000 fa72 	bl	80043c0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	2201      	movs	r2, #1
 8003ee0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2201      	movs	r2, #1
 8003ef0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	2201      	movs	r2, #1
 8003ef8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2201      	movs	r2, #1
 8003f08:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	2201      	movs	r2, #1
 8003f10:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2201      	movs	r2, #1
 8003f20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	2201      	movs	r2, #1
 8003f28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003f2c:	2300      	movs	r3, #0
}
 8003f2e:	4618      	mov	r0, r3
 8003f30:	3708      	adds	r7, #8
 8003f32:	46bd      	mov	sp, r7
 8003f34:	bd80      	pop	{r7, pc}

08003f36 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003f36:	b480      	push	{r7}
 8003f38:	b083      	sub	sp, #12
 8003f3a:	af00      	add	r7, sp, #0
 8003f3c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr
	...

08003f4c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003f4c:	b580      	push	{r7, lr}
 8003f4e:	b084      	sub	sp, #16
 8003f50:	af00      	add	r7, sp, #0
 8003f52:	6078      	str	r0, [r7, #4]
 8003f54:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d109      	bne.n	8003f70 <HAL_TIM_PWM_Start+0x24>
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003f62:	b2db      	uxtb	r3, r3
 8003f64:	2b01      	cmp	r3, #1
 8003f66:	bf14      	ite	ne
 8003f68:	2301      	movne	r3, #1
 8003f6a:	2300      	moveq	r3, #0
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	e022      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003f70:	683b      	ldr	r3, [r7, #0]
 8003f72:	2b04      	cmp	r3, #4
 8003f74:	d109      	bne.n	8003f8a <HAL_TIM_PWM_Start+0x3e>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003f7c:	b2db      	uxtb	r3, r3
 8003f7e:	2b01      	cmp	r3, #1
 8003f80:	bf14      	ite	ne
 8003f82:	2301      	movne	r3, #1
 8003f84:	2300      	moveq	r3, #0
 8003f86:	b2db      	uxtb	r3, r3
 8003f88:	e015      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	2b08      	cmp	r3, #8
 8003f8e:	d109      	bne.n	8003fa4 <HAL_TIM_PWM_Start+0x58>
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003f96:	b2db      	uxtb	r3, r3
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	bf14      	ite	ne
 8003f9c:	2301      	movne	r3, #1
 8003f9e:	2300      	moveq	r3, #0
 8003fa0:	b2db      	uxtb	r3, r3
 8003fa2:	e008      	b.n	8003fb6 <HAL_TIM_PWM_Start+0x6a>
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b01      	cmp	r3, #1
 8003fae:	bf14      	ite	ne
 8003fb0:	2301      	movne	r3, #1
 8003fb2:	2300      	moveq	r3, #0
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d001      	beq.n	8003fbe <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e068      	b.n	8004090 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003fbe:	683b      	ldr	r3, [r7, #0]
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	d104      	bne.n	8003fce <HAL_TIM_PWM_Start+0x82>
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2202      	movs	r2, #2
 8003fc8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003fcc:	e013      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	2b04      	cmp	r3, #4
 8003fd2:	d104      	bne.n	8003fde <HAL_TIM_PWM_Start+0x92>
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	2202      	movs	r2, #2
 8003fd8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003fdc:	e00b      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	2b08      	cmp	r3, #8
 8003fe2:	d104      	bne.n	8003fee <HAL_TIM_PWM_Start+0xa2>
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2202      	movs	r2, #2
 8003fe8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003fec:	e003      	b.n	8003ff6 <HAL_TIM_PWM_Start+0xaa>
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2202      	movs	r2, #2
 8003ff2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	2201      	movs	r2, #1
 8003ffc:	6839      	ldr	r1, [r7, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f000 fc90 	bl	8004924 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4a23      	ldr	r2, [pc, #140]	@ (8004098 <HAL_TIM_PWM_Start+0x14c>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d107      	bne.n	800401e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800401c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a1d      	ldr	r2, [pc, #116]	@ (8004098 <HAL_TIM_PWM_Start+0x14c>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d018      	beq.n	800405a <HAL_TIM_PWM_Start+0x10e>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004030:	d013      	beq.n	800405a <HAL_TIM_PWM_Start+0x10e>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a19      	ldr	r2, [pc, #100]	@ (800409c <HAL_TIM_PWM_Start+0x150>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d00e      	beq.n	800405a <HAL_TIM_PWM_Start+0x10e>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a17      	ldr	r2, [pc, #92]	@ (80040a0 <HAL_TIM_PWM_Start+0x154>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d009      	beq.n	800405a <HAL_TIM_PWM_Start+0x10e>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a16      	ldr	r2, [pc, #88]	@ (80040a4 <HAL_TIM_PWM_Start+0x158>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d004      	beq.n	800405a <HAL_TIM_PWM_Start+0x10e>
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	4a14      	ldr	r2, [pc, #80]	@ (80040a8 <HAL_TIM_PWM_Start+0x15c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d111      	bne.n	800407e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	f003 0307 	and.w	r3, r3, #7
 8004064:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	2b06      	cmp	r3, #6
 800406a:	d010      	beq.n	800408e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681a      	ldr	r2, [r3, #0]
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f042 0201 	orr.w	r2, r2, #1
 800407a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800407c:	e007      	b.n	800408e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f042 0201 	orr.w	r2, r2, #1
 800408c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800408e:	2300      	movs	r3, #0
}
 8004090:	4618      	mov	r0, r3
 8004092:	3710      	adds	r7, #16
 8004094:	46bd      	mov	sp, r7
 8004096:	bd80      	pop	{r7, pc}
 8004098:	40010000 	.word	0x40010000
 800409c:	40000400 	.word	0x40000400
 80040a0:	40000800 	.word	0x40000800
 80040a4:	40000c00 	.word	0x40000c00
 80040a8:	40014000 	.word	0x40014000

080040ac <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b086      	sub	sp, #24
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	60f8      	str	r0, [r7, #12]
 80040b4:	60b9      	str	r1, [r7, #8]
 80040b6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040b8:	2300      	movs	r3, #0
 80040ba:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040c2:	2b01      	cmp	r3, #1
 80040c4:	d101      	bne.n	80040ca <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040c6:	2302      	movs	r3, #2
 80040c8:	e0ae      	b.n	8004228 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2201      	movs	r2, #1
 80040ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2b0c      	cmp	r3, #12
 80040d6:	f200 809f 	bhi.w	8004218 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040da:	a201      	add	r2, pc, #4	@ (adr r2, 80040e0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040e0:	08004115 	.word	0x08004115
 80040e4:	08004219 	.word	0x08004219
 80040e8:	08004219 	.word	0x08004219
 80040ec:	08004219 	.word	0x08004219
 80040f0:	08004155 	.word	0x08004155
 80040f4:	08004219 	.word	0x08004219
 80040f8:	08004219 	.word	0x08004219
 80040fc:	08004219 	.word	0x08004219
 8004100:	08004197 	.word	0x08004197
 8004104:	08004219 	.word	0x08004219
 8004108:	08004219 	.word	0x08004219
 800410c:	08004219 	.word	0x08004219
 8004110:	080041d7 	.word	0x080041d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	68b9      	ldr	r1, [r7, #8]
 800411a:	4618      	mov	r0, r3
 800411c:	f000 f9dc 	bl	80044d8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	699a      	ldr	r2, [r3, #24]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0208 	orr.w	r2, r2, #8
 800412e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	699a      	ldr	r2, [r3, #24]
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	f022 0204 	bic.w	r2, r2, #4
 800413e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	681b      	ldr	r3, [r3, #0]
 8004144:	6999      	ldr	r1, [r3, #24]
 8004146:	68bb      	ldr	r3, [r7, #8]
 8004148:	691a      	ldr	r2, [r3, #16]
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	430a      	orrs	r2, r1
 8004150:	619a      	str	r2, [r3, #24]
      break;
 8004152:	e064      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68b9      	ldr	r1, [r7, #8]
 800415a:	4618      	mov	r0, r3
 800415c:	f000 fa22 	bl	80045a4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800416e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	699a      	ldr	r2, [r3, #24]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800417e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	6999      	ldr	r1, [r3, #24]
 8004186:	68bb      	ldr	r3, [r7, #8]
 8004188:	691b      	ldr	r3, [r3, #16]
 800418a:	021a      	lsls	r2, r3, #8
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	430a      	orrs	r2, r1
 8004192:	619a      	str	r2, [r3, #24]
      break;
 8004194:	e043      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	68b9      	ldr	r1, [r7, #8]
 800419c:	4618      	mov	r0, r3
 800419e:	f000 fa6d 	bl	800467c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	69da      	ldr	r2, [r3, #28]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f042 0208 	orr.w	r2, r2, #8
 80041b0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	69da      	ldr	r2, [r3, #28]
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f022 0204 	bic.w	r2, r2, #4
 80041c0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	69d9      	ldr	r1, [r3, #28]
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	691a      	ldr	r2, [r3, #16]
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	430a      	orrs	r2, r1
 80041d2:	61da      	str	r2, [r3, #28]
      break;
 80041d4:	e023      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	68b9      	ldr	r1, [r7, #8]
 80041dc:	4618      	mov	r0, r3
 80041de:	f000 fab7 	bl	8004750 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041f0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69da      	ldr	r2, [r3, #28]
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004200:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	69d9      	ldr	r1, [r3, #28]
 8004208:	68bb      	ldr	r3, [r7, #8]
 800420a:	691b      	ldr	r3, [r3, #16]
 800420c:	021a      	lsls	r2, r3, #8
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	430a      	orrs	r2, r1
 8004214:	61da      	str	r2, [r3, #28]
      break;
 8004216:	e002      	b.n	800421e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	75fb      	strb	r3, [r7, #23]
      break;
 800421c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2200      	movs	r2, #0
 8004222:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004226:	7dfb      	ldrb	r3, [r7, #23]
}
 8004228:	4618      	mov	r0, r3
 800422a:	3718      	adds	r7, #24
 800422c:	46bd      	mov	sp, r7
 800422e:	bd80      	pop	{r7, pc}

08004230 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b084      	sub	sp, #16
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
 8004238:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800423a:	2300      	movs	r3, #0
 800423c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004244:	2b01      	cmp	r3, #1
 8004246:	d101      	bne.n	800424c <HAL_TIM_ConfigClockSource+0x1c>
 8004248:	2302      	movs	r3, #2
 800424a:	e0b4      	b.n	80043b6 <HAL_TIM_ConfigClockSource+0x186>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2201      	movs	r2, #1
 8004250:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	2202      	movs	r2, #2
 8004258:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	689b      	ldr	r3, [r3, #8]
 8004262:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004264:	68bb      	ldr	r3, [r7, #8]
 8004266:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800426a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004272:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68ba      	ldr	r2, [r7, #8]
 800427a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004284:	d03e      	beq.n	8004304 <HAL_TIM_ConfigClockSource+0xd4>
 8004286:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800428a:	f200 8087 	bhi.w	800439c <HAL_TIM_ConfigClockSource+0x16c>
 800428e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004292:	f000 8086 	beq.w	80043a2 <HAL_TIM_ConfigClockSource+0x172>
 8004296:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800429a:	d87f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 800429c:	2b70      	cmp	r3, #112	@ 0x70
 800429e:	d01a      	beq.n	80042d6 <HAL_TIM_ConfigClockSource+0xa6>
 80042a0:	2b70      	cmp	r3, #112	@ 0x70
 80042a2:	d87b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042a4:	2b60      	cmp	r3, #96	@ 0x60
 80042a6:	d050      	beq.n	800434a <HAL_TIM_ConfigClockSource+0x11a>
 80042a8:	2b60      	cmp	r3, #96	@ 0x60
 80042aa:	d877      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042ac:	2b50      	cmp	r3, #80	@ 0x50
 80042ae:	d03c      	beq.n	800432a <HAL_TIM_ConfigClockSource+0xfa>
 80042b0:	2b50      	cmp	r3, #80	@ 0x50
 80042b2:	d873      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042b4:	2b40      	cmp	r3, #64	@ 0x40
 80042b6:	d058      	beq.n	800436a <HAL_TIM_ConfigClockSource+0x13a>
 80042b8:	2b40      	cmp	r3, #64	@ 0x40
 80042ba:	d86f      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042bc:	2b30      	cmp	r3, #48	@ 0x30
 80042be:	d064      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15a>
 80042c0:	2b30      	cmp	r3, #48	@ 0x30
 80042c2:	d86b      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042c4:	2b20      	cmp	r3, #32
 80042c6:	d060      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15a>
 80042c8:	2b20      	cmp	r3, #32
 80042ca:	d867      	bhi.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d05c      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15a>
 80042d0:	2b10      	cmp	r3, #16
 80042d2:	d05a      	beq.n	800438a <HAL_TIM_ConfigClockSource+0x15a>
 80042d4:	e062      	b.n	800439c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80042da:	683b      	ldr	r3, [r7, #0]
 80042dc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80042de:	683b      	ldr	r3, [r7, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80042e6:	f000 fafd 	bl	80048e4 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	689b      	ldr	r3, [r3, #8]
 80042f0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80042f2:	68bb      	ldr	r3, [r7, #8]
 80042f4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80042f8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	609a      	str	r2, [r3, #8]
      break;
 8004302:	e04f      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004308:	683b      	ldr	r3, [r7, #0]
 800430a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004310:	683b      	ldr	r3, [r7, #0]
 8004312:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004314:	f000 fae6 	bl	80048e4 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	689a      	ldr	r2, [r3, #8]
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004326:	609a      	str	r2, [r3, #8]
      break;
 8004328:	e03c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004336:	461a      	mov	r2, r3
 8004338:	f000 fa5a 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2150      	movs	r1, #80	@ 0x50
 8004342:	4618      	mov	r0, r3
 8004344:	f000 fab3 	bl	80048ae <TIM_ITRx_SetConfig>
      break;
 8004348:	e02c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004356:	461a      	mov	r2, r3
 8004358:	f000 fa79 	bl	800484e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	2160      	movs	r1, #96	@ 0x60
 8004362:	4618      	mov	r0, r3
 8004364:	f000 faa3 	bl	80048ae <TIM_ITRx_SetConfig>
      break;
 8004368:	e01c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004376:	461a      	mov	r2, r3
 8004378:	f000 fa3a 	bl	80047f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	2140      	movs	r1, #64	@ 0x40
 8004382:	4618      	mov	r0, r3
 8004384:	f000 fa93 	bl	80048ae <TIM_ITRx_SetConfig>
      break;
 8004388:	e00c      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681a      	ldr	r2, [r3, #0]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4619      	mov	r1, r3
 8004394:	4610      	mov	r0, r2
 8004396:	f000 fa8a 	bl	80048ae <TIM_ITRx_SetConfig>
      break;
 800439a:	e003      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800439c:	2301      	movs	r3, #1
 800439e:	73fb      	strb	r3, [r7, #15]
      break;
 80043a0:	e000      	b.n	80043a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2201      	movs	r2, #1
 80043a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	2200      	movs	r2, #0
 80043b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3710      	adds	r7, #16
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
	...

080043c0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80043c0:	b480      	push	{r7}
 80043c2:	b085      	sub	sp, #20
 80043c4:	af00      	add	r7, sp, #0
 80043c6:	6078      	str	r0, [r7, #4]
 80043c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	4a3a      	ldr	r2, [pc, #232]	@ (80044bc <TIM_Base_SetConfig+0xfc>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d00f      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80043de:	d00b      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	4a37      	ldr	r2, [pc, #220]	@ (80044c0 <TIM_Base_SetConfig+0x100>)
 80043e4:	4293      	cmp	r3, r2
 80043e6:	d007      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a36      	ldr	r2, [pc, #216]	@ (80044c4 <TIM_Base_SetConfig+0x104>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d003      	beq.n	80043f8 <TIM_Base_SetConfig+0x38>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	4a35      	ldr	r2, [pc, #212]	@ (80044c8 <TIM_Base_SetConfig+0x108>)
 80043f4:	4293      	cmp	r3, r2
 80043f6:	d108      	bne.n	800440a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80043fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004400:	683b      	ldr	r3, [r7, #0]
 8004402:	685b      	ldr	r3, [r3, #4]
 8004404:	68fa      	ldr	r2, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	4a2b      	ldr	r2, [pc, #172]	@ (80044bc <TIM_Base_SetConfig+0xfc>)
 800440e:	4293      	cmp	r3, r2
 8004410:	d01b      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004418:	d017      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	4a28      	ldr	r2, [pc, #160]	@ (80044c0 <TIM_Base_SetConfig+0x100>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d013      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	4a27      	ldr	r2, [pc, #156]	@ (80044c4 <TIM_Base_SetConfig+0x104>)
 8004426:	4293      	cmp	r3, r2
 8004428:	d00f      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	4a26      	ldr	r2, [pc, #152]	@ (80044c8 <TIM_Base_SetConfig+0x108>)
 800442e:	4293      	cmp	r3, r2
 8004430:	d00b      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a25      	ldr	r2, [pc, #148]	@ (80044cc <TIM_Base_SetConfig+0x10c>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d007      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4a24      	ldr	r2, [pc, #144]	@ (80044d0 <TIM_Base_SetConfig+0x110>)
 800443e:	4293      	cmp	r3, r2
 8004440:	d003      	beq.n	800444a <TIM_Base_SetConfig+0x8a>
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	4a23      	ldr	r2, [pc, #140]	@ (80044d4 <TIM_Base_SetConfig+0x114>)
 8004446:	4293      	cmp	r3, r2
 8004448:	d108      	bne.n	800445c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004450:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	68db      	ldr	r3, [r3, #12]
 8004456:	68fa      	ldr	r2, [r7, #12]
 8004458:	4313      	orrs	r3, r2
 800445a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004462:	683b      	ldr	r3, [r7, #0]
 8004464:	695b      	ldr	r3, [r3, #20]
 8004466:	4313      	orrs	r3, r2
 8004468:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	689a      	ldr	r2, [r3, #8]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004478:	683b      	ldr	r3, [r7, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	4a0e      	ldr	r2, [pc, #56]	@ (80044bc <TIM_Base_SetConfig+0xfc>)
 8004484:	4293      	cmp	r3, r2
 8004486:	d103      	bne.n	8004490 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004488:	683b      	ldr	r3, [r7, #0]
 800448a:	691a      	ldr	r2, [r3, #16]
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	f003 0301 	and.w	r3, r3, #1
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d105      	bne.n	80044ae <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	691b      	ldr	r3, [r3, #16]
 80044a6:	f023 0201 	bic.w	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	611a      	str	r2, [r3, #16]
  }
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044b8:	4770      	bx	lr
 80044ba:	bf00      	nop
 80044bc:	40010000 	.word	0x40010000
 80044c0:	40000400 	.word	0x40000400
 80044c4:	40000800 	.word	0x40000800
 80044c8:	40000c00 	.word	0x40000c00
 80044cc:	40014000 	.word	0x40014000
 80044d0:	40014400 	.word	0x40014400
 80044d4:	40014800 	.word	0x40014800

080044d8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044d8:	b480      	push	{r7}
 80044da:	b087      	sub	sp, #28
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6a1b      	ldr	r3, [r3, #32]
 80044e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6a1b      	ldr	r3, [r3, #32]
 80044ec:	f023 0201 	bic.w	r2, r3, #1
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	685b      	ldr	r3, [r3, #4]
 80044f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	699b      	ldr	r3, [r3, #24]
 80044fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004506:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	f023 0303 	bic.w	r3, r3, #3
 800450e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004510:	683b      	ldr	r3, [r7, #0]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	4313      	orrs	r3, r2
 8004518:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800451a:	697b      	ldr	r3, [r7, #20]
 800451c:	f023 0302 	bic.w	r3, r3, #2
 8004520:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	689b      	ldr	r3, [r3, #8]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	4313      	orrs	r3, r2
 800452a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	4a1c      	ldr	r2, [pc, #112]	@ (80045a0 <TIM_OC1_SetConfig+0xc8>)
 8004530:	4293      	cmp	r3, r2
 8004532:	d10c      	bne.n	800454e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	f023 0308 	bic.w	r3, r3, #8
 800453a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	697a      	ldr	r2, [r7, #20]
 8004542:	4313      	orrs	r3, r2
 8004544:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004546:	697b      	ldr	r3, [r7, #20]
 8004548:	f023 0304 	bic.w	r3, r3, #4
 800454c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	4a13      	ldr	r2, [pc, #76]	@ (80045a0 <TIM_OC1_SetConfig+0xc8>)
 8004552:	4293      	cmp	r3, r2
 8004554:	d111      	bne.n	800457a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004556:	693b      	ldr	r3, [r7, #16]
 8004558:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800455c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800455e:	693b      	ldr	r3, [r7, #16]
 8004560:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004564:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004566:	683b      	ldr	r3, [r7, #0]
 8004568:	695b      	ldr	r3, [r3, #20]
 800456a:	693a      	ldr	r2, [r7, #16]
 800456c:	4313      	orrs	r3, r2
 800456e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	699b      	ldr	r3, [r3, #24]
 8004574:	693a      	ldr	r2, [r7, #16]
 8004576:	4313      	orrs	r3, r2
 8004578:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68fa      	ldr	r2, [r7, #12]
 8004584:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004586:	683b      	ldr	r3, [r7, #0]
 8004588:	685a      	ldr	r2, [r3, #4]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	697a      	ldr	r2, [r7, #20]
 8004592:	621a      	str	r2, [r3, #32]
}
 8004594:	bf00      	nop
 8004596:	371c      	adds	r7, #28
 8004598:	46bd      	mov	sp, r7
 800459a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459e:	4770      	bx	lr
 80045a0:	40010000 	.word	0x40010000

080045a4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b087      	sub	sp, #28
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
 80045ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a1b      	ldr	r3, [r3, #32]
 80045b2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	f023 0210 	bic.w	r2, r3, #16
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80045d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80045da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	021b      	lsls	r3, r3, #8
 80045e2:	68fa      	ldr	r2, [r7, #12]
 80045e4:	4313      	orrs	r3, r2
 80045e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80045e8:	697b      	ldr	r3, [r7, #20]
 80045ea:	f023 0320 	bic.w	r3, r3, #32
 80045ee:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	689b      	ldr	r3, [r3, #8]
 80045f4:	011b      	lsls	r3, r3, #4
 80045f6:	697a      	ldr	r2, [r7, #20]
 80045f8:	4313      	orrs	r3, r2
 80045fa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	4a1e      	ldr	r2, [pc, #120]	@ (8004678 <TIM_OC2_SetConfig+0xd4>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d10d      	bne.n	8004620 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004604:	697b      	ldr	r3, [r7, #20]
 8004606:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800460a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800460c:	683b      	ldr	r3, [r7, #0]
 800460e:	68db      	ldr	r3, [r3, #12]
 8004610:	011b      	lsls	r3, r3, #4
 8004612:	697a      	ldr	r2, [r7, #20]
 8004614:	4313      	orrs	r3, r2
 8004616:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004618:	697b      	ldr	r3, [r7, #20]
 800461a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800461e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	4a15      	ldr	r2, [pc, #84]	@ (8004678 <TIM_OC2_SetConfig+0xd4>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d113      	bne.n	8004650 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800462e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004630:	693b      	ldr	r3, [r7, #16]
 8004632:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004636:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	695b      	ldr	r3, [r3, #20]
 800463c:	009b      	lsls	r3, r3, #2
 800463e:	693a      	ldr	r2, [r7, #16]
 8004640:	4313      	orrs	r3, r2
 8004642:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	699b      	ldr	r3, [r3, #24]
 8004648:	009b      	lsls	r3, r3, #2
 800464a:	693a      	ldr	r2, [r7, #16]
 800464c:	4313      	orrs	r3, r2
 800464e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	693a      	ldr	r2, [r7, #16]
 8004654:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	68fa      	ldr	r2, [r7, #12]
 800465a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685a      	ldr	r2, [r3, #4]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	621a      	str	r2, [r3, #32]
}
 800466a:	bf00      	nop
 800466c:	371c      	adds	r7, #28
 800466e:	46bd      	mov	sp, r7
 8004670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004674:	4770      	bx	lr
 8004676:	bf00      	nop
 8004678:	40010000 	.word	0x40010000

0800467c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800467c:	b480      	push	{r7}
 800467e:	b087      	sub	sp, #28
 8004680:	af00      	add	r7, sp, #0
 8004682:	6078      	str	r0, [r7, #4]
 8004684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	6a1b      	ldr	r3, [r3, #32]
 800468a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	6a1b      	ldr	r3, [r3, #32]
 8004690:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
 80046a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f023 0303 	bic.w	r3, r3, #3
 80046b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	68fa      	ldr	r2, [r7, #12]
 80046ba:	4313      	orrs	r3, r2
 80046bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046be:	697b      	ldr	r3, [r7, #20]
 80046c0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046c6:	683b      	ldr	r3, [r7, #0]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	021b      	lsls	r3, r3, #8
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	4313      	orrs	r3, r2
 80046d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	4a1d      	ldr	r2, [pc, #116]	@ (800474c <TIM_OC3_SetConfig+0xd0>)
 80046d6:	4293      	cmp	r3, r2
 80046d8:	d10d      	bne.n	80046f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80046e2:	683b      	ldr	r3, [r7, #0]
 80046e4:	68db      	ldr	r3, [r3, #12]
 80046e6:	021b      	lsls	r3, r3, #8
 80046e8:	697a      	ldr	r2, [r7, #20]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	4a14      	ldr	r2, [pc, #80]	@ (800474c <TIM_OC3_SetConfig+0xd0>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d113      	bne.n	8004726 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004704:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800470c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	695b      	ldr	r3, [r3, #20]
 8004712:	011b      	lsls	r3, r3, #4
 8004714:	693a      	ldr	r2, [r7, #16]
 8004716:	4313      	orrs	r3, r2
 8004718:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	699b      	ldr	r3, [r3, #24]
 800471e:	011b      	lsls	r3, r3, #4
 8004720:	693a      	ldr	r2, [r7, #16]
 8004722:	4313      	orrs	r3, r2
 8004724:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	693a      	ldr	r2, [r7, #16]
 800472a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	68fa      	ldr	r2, [r7, #12]
 8004730:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004732:	683b      	ldr	r3, [r7, #0]
 8004734:	685a      	ldr	r2, [r3, #4]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	621a      	str	r2, [r3, #32]
}
 8004740:	bf00      	nop
 8004742:	371c      	adds	r7, #28
 8004744:	46bd      	mov	sp, r7
 8004746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474a:	4770      	bx	lr
 800474c:	40010000 	.word	0x40010000

08004750 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004750:	b480      	push	{r7}
 8004752:	b087      	sub	sp, #28
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	6a1b      	ldr	r3, [r3, #32]
 800475e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	6a1b      	ldr	r3, [r3, #32]
 8004764:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004772:	687b      	ldr	r3, [r7, #4]
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800477e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004786:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004788:	683b      	ldr	r3, [r7, #0]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	021b      	lsls	r3, r3, #8
 800478e:	68fa      	ldr	r2, [r7, #12]
 8004790:	4313      	orrs	r3, r2
 8004792:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004794:	693b      	ldr	r3, [r7, #16]
 8004796:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800479a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800479c:	683b      	ldr	r3, [r7, #0]
 800479e:	689b      	ldr	r3, [r3, #8]
 80047a0:	031b      	lsls	r3, r3, #12
 80047a2:	693a      	ldr	r2, [r7, #16]
 80047a4:	4313      	orrs	r3, r2
 80047a6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	4a10      	ldr	r2, [pc, #64]	@ (80047ec <TIM_OC4_SetConfig+0x9c>)
 80047ac:	4293      	cmp	r3, r2
 80047ae:	d109      	bne.n	80047c4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047b0:	697b      	ldr	r3, [r7, #20]
 80047b2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047b6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	019b      	lsls	r3, r3, #6
 80047be:	697a      	ldr	r2, [r7, #20]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	697a      	ldr	r2, [r7, #20]
 80047c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	68fa      	ldr	r2, [r7, #12]
 80047ce:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80047d0:	683b      	ldr	r3, [r7, #0]
 80047d2:	685a      	ldr	r2, [r3, #4]
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	693a      	ldr	r2, [r7, #16]
 80047dc:	621a      	str	r2, [r3, #32]
}
 80047de:	bf00      	nop
 80047e0:	371c      	adds	r7, #28
 80047e2:	46bd      	mov	sp, r7
 80047e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e8:	4770      	bx	lr
 80047ea:	bf00      	nop
 80047ec:	40010000 	.word	0x40010000

080047f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80047f0:	b480      	push	{r7}
 80047f2:	b087      	sub	sp, #28
 80047f4:	af00      	add	r7, sp, #0
 80047f6:	60f8      	str	r0, [r7, #12]
 80047f8:	60b9      	str	r1, [r7, #8]
 80047fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	6a1b      	ldr	r3, [r3, #32]
 8004800:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	f023 0201 	bic.w	r2, r3, #1
 800480a:	68fb      	ldr	r3, [r7, #12]
 800480c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	699b      	ldr	r3, [r3, #24]
 8004812:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004814:	693b      	ldr	r3, [r7, #16]
 8004816:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800481a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	011b      	lsls	r3, r3, #4
 8004820:	693a      	ldr	r2, [r7, #16]
 8004822:	4313      	orrs	r3, r2
 8004824:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	f023 030a 	bic.w	r3, r3, #10
 800482c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	68bb      	ldr	r3, [r7, #8]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	693a      	ldr	r2, [r7, #16]
 800483a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	621a      	str	r2, [r3, #32]
}
 8004842:	bf00      	nop
 8004844:	371c      	adds	r7, #28
 8004846:	46bd      	mov	sp, r7
 8004848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484c:	4770      	bx	lr

0800484e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800484e:	b480      	push	{r7}
 8004850:	b087      	sub	sp, #28
 8004852:	af00      	add	r7, sp, #0
 8004854:	60f8      	str	r0, [r7, #12]
 8004856:	60b9      	str	r1, [r7, #8]
 8004858:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	6a1b      	ldr	r3, [r3, #32]
 800485e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6a1b      	ldr	r3, [r3, #32]
 8004864:	f023 0210 	bic.w	r2, r3, #16
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	699b      	ldr	r3, [r3, #24]
 8004870:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004878:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	031b      	lsls	r3, r3, #12
 800487e:	693a      	ldr	r2, [r7, #16]
 8004880:	4313      	orrs	r3, r2
 8004882:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004884:	697b      	ldr	r3, [r7, #20]
 8004886:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800488a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	011b      	lsls	r3, r3, #4
 8004890:	697a      	ldr	r2, [r7, #20]
 8004892:	4313      	orrs	r3, r2
 8004894:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	693a      	ldr	r2, [r7, #16]
 800489a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	697a      	ldr	r2, [r7, #20]
 80048a0:	621a      	str	r2, [r3, #32]
}
 80048a2:	bf00      	nop
 80048a4:	371c      	adds	r7, #28
 80048a6:	46bd      	mov	sp, r7
 80048a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ac:	4770      	bx	lr

080048ae <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048ae:	b480      	push	{r7}
 80048b0:	b085      	sub	sp, #20
 80048b2:	af00      	add	r7, sp, #0
 80048b4:	6078      	str	r0, [r7, #4]
 80048b6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	689b      	ldr	r3, [r3, #8]
 80048bc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048c4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048c6:	683a      	ldr	r2, [r7, #0]
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	f043 0307 	orr.w	r3, r3, #7
 80048d0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	68fa      	ldr	r2, [r7, #12]
 80048d6:	609a      	str	r2, [r3, #8]
}
 80048d8:	bf00      	nop
 80048da:	3714      	adds	r7, #20
 80048dc:	46bd      	mov	sp, r7
 80048de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e2:	4770      	bx	lr

080048e4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80048e4:	b480      	push	{r7}
 80048e6:	b087      	sub	sp, #28
 80048e8:	af00      	add	r7, sp, #0
 80048ea:	60f8      	str	r0, [r7, #12]
 80048ec:	60b9      	str	r1, [r7, #8]
 80048ee:	607a      	str	r2, [r7, #4]
 80048f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80048f8:	697b      	ldr	r3, [r7, #20]
 80048fa:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80048fe:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004900:	683b      	ldr	r3, [r7, #0]
 8004902:	021a      	lsls	r2, r3, #8
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	431a      	orrs	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4313      	orrs	r3, r2
 800490c:	697a      	ldr	r2, [r7, #20]
 800490e:	4313      	orrs	r3, r2
 8004910:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	697a      	ldr	r2, [r7, #20]
 8004916:	609a      	str	r2, [r3, #8]
}
 8004918:	bf00      	nop
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004924:	b480      	push	{r7}
 8004926:	b087      	sub	sp, #28
 8004928:	af00      	add	r7, sp, #0
 800492a:	60f8      	str	r0, [r7, #12]
 800492c:	60b9      	str	r1, [r7, #8]
 800492e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004930:	68bb      	ldr	r3, [r7, #8]
 8004932:	f003 031f 	and.w	r3, r3, #31
 8004936:	2201      	movs	r2, #1
 8004938:	fa02 f303 	lsl.w	r3, r2, r3
 800493c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	6a1a      	ldr	r2, [r3, #32]
 8004942:	697b      	ldr	r3, [r7, #20]
 8004944:	43db      	mvns	r3, r3
 8004946:	401a      	ands	r2, r3
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	6a1a      	ldr	r2, [r3, #32]
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	f003 031f 	and.w	r3, r3, #31
 8004956:	6879      	ldr	r1, [r7, #4]
 8004958:	fa01 f303 	lsl.w	r3, r1, r3
 800495c:	431a      	orrs	r2, r3
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	621a      	str	r2, [r3, #32]
}
 8004962:	bf00      	nop
 8004964:	371c      	adds	r7, #28
 8004966:	46bd      	mov	sp, r7
 8004968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496c:	4770      	bx	lr
	...

08004970 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004970:	b480      	push	{r7}
 8004972:	b085      	sub	sp, #20
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
 8004978:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004980:	2b01      	cmp	r3, #1
 8004982:	d101      	bne.n	8004988 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004984:	2302      	movs	r3, #2
 8004986:	e050      	b.n	8004a2a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2201      	movs	r2, #1
 800498c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2202      	movs	r2, #2
 8004994:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	689b      	ldr	r3, [r3, #8]
 80049a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049b0:	683b      	ldr	r3, [r7, #0]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68fa      	ldr	r2, [r7, #12]
 80049b6:	4313      	orrs	r3, r2
 80049b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	68fa      	ldr	r2, [r7, #12]
 80049c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	4a1c      	ldr	r2, [pc, #112]	@ (8004a38 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80049c8:	4293      	cmp	r3, r2
 80049ca:	d018      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049d4:	d013      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	4a18      	ldr	r2, [pc, #96]	@ (8004a3c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80049dc:	4293      	cmp	r3, r2
 80049de:	d00e      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d009      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a15      	ldr	r2, [pc, #84]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d004      	beq.n	80049fe <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	4a13      	ldr	r2, [pc, #76]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d10c      	bne.n	8004a18 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80049fe:	68bb      	ldr	r3, [r7, #8]
 8004a00:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a04:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	685b      	ldr	r3, [r3, #4]
 8004a0a:	68ba      	ldr	r2, [r7, #8]
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	68ba      	ldr	r2, [r7, #8]
 8004a16:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	2201      	movs	r2, #1
 8004a1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a28:	2300      	movs	r3, #0
}
 8004a2a:	4618      	mov	r0, r3
 8004a2c:	3714      	adds	r7, #20
 8004a2e:	46bd      	mov	sp, r7
 8004a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a34:	4770      	bx	lr
 8004a36:	bf00      	nop
 8004a38:	40010000 	.word	0x40010000
 8004a3c:	40000400 	.word	0x40000400
 8004a40:	40000800 	.word	0x40000800
 8004a44:	40000c00 	.word	0x40000c00
 8004a48:	40014000 	.word	0x40014000

08004a4c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b085      	sub	sp, #20
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
 8004a54:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004a56:	2300      	movs	r3, #0
 8004a58:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d101      	bne.n	8004a68 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004a64:	2302      	movs	r3, #2
 8004a66:	e03d      	b.n	8004ae4 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2201      	movs	r2, #1
 8004a6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8004a76:	683b      	ldr	r3, [r7, #0]
 8004a78:	68db      	ldr	r3, [r3, #12]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004a84:	683b      	ldr	r3, [r7, #0]
 8004a86:	689b      	ldr	r3, [r3, #8]
 8004a88:	4313      	orrs	r3, r2
 8004a8a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8004a92:	683b      	ldr	r3, [r7, #0]
 8004a94:	685b      	ldr	r3, [r3, #4]
 8004a96:	4313      	orrs	r3, r2
 8004a98:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8004aa0:	683b      	ldr	r3, [r7, #0]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004aae:	683b      	ldr	r3, [r7, #0]
 8004ab0:	691b      	ldr	r3, [r3, #16]
 8004ab2:	4313      	orrs	r3, r2
 8004ab4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	695b      	ldr	r3, [r3, #20]
 8004ac0:	4313      	orrs	r3, r2
 8004ac2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8004aca:	683b      	ldr	r3, [r7, #0]
 8004acc:	69db      	ldr	r3, [r3, #28]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	68fa      	ldr	r2, [r7, #12]
 8004ad8:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2200      	movs	r2, #0
 8004ade:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004ae2:	2300      	movs	r3, #0
}
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	3714      	adds	r7, #20
 8004ae8:	46bd      	mov	sp, r7
 8004aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aee:	4770      	bx	lr

08004af0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004af0:	b580      	push	{r7, lr}
 8004af2:	b082      	sub	sp, #8
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d101      	bne.n	8004b02 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004afe:	2301      	movs	r3, #1
 8004b00:	e042      	b.n	8004b88 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b08:	b2db      	uxtb	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d106      	bne.n	8004b1c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	2200      	movs	r2, #0
 8004b12:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004b16:	6878      	ldr	r0, [r7, #4]
 8004b18:	f7fd fcf8 	bl	800250c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	2224      	movs	r2, #36	@ 0x24
 8004b20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	68da      	ldr	r2, [r3, #12]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004b32:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b34:	6878      	ldr	r0, [r7, #4]
 8004b36:	f000 fcdb 	bl	80054f0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	691a      	ldr	r2, [r3, #16]
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004b48:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	695a      	ldr	r2, [r3, #20]
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b58:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	68da      	ldr	r2, [r3, #12]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b68:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	2200      	movs	r2, #0
 8004b6e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	2220      	movs	r2, #32
 8004b74:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2220      	movs	r2, #32
 8004b7c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	2200      	movs	r2, #0
 8004b84:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3708      	adds	r7, #8
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}

08004b90 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004b90:	b580      	push	{r7, lr}
 8004b92:	b084      	sub	sp, #16
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	60f8      	str	r0, [r7, #12]
 8004b98:	60b9      	str	r1, [r7, #8]
 8004b9a:	4613      	mov	r3, r2
 8004b9c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b20      	cmp	r3, #32
 8004ba8:	d112      	bne.n	8004bd0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d002      	beq.n	8004bb6 <HAL_UART_Receive_IT+0x26>
 8004bb0:	88fb      	ldrh	r3, [r7, #6]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d101      	bne.n	8004bba <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e00b      	b.n	8004bd2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004bc0:	88fb      	ldrh	r3, [r7, #6]
 8004bc2:	461a      	mov	r2, r3
 8004bc4:	68b9      	ldr	r1, [r7, #8]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 faba 	bl	8005140 <UART_Start_Receive_IT>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	e000      	b.n	8004bd2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004bd0:	2302      	movs	r3, #2
  }
}
 8004bd2:	4618      	mov	r0, r3
 8004bd4:	3710      	adds	r7, #16
 8004bd6:	46bd      	mov	sp, r7
 8004bd8:	bd80      	pop	{r7, pc}
	...

08004bdc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b0ba      	sub	sp, #232	@ 0xe8
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	68db      	ldr	r3, [r3, #12]
 8004bf4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	695b      	ldr	r3, [r3, #20]
 8004bfe:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004c02:	2300      	movs	r3, #0
 8004c04:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004c08:	2300      	movs	r3, #0
 8004c0a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004c0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c12:	f003 030f 	and.w	r3, r3, #15
 8004c16:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004c1a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004c22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c26:	f003 0320 	and.w	r3, r3, #32
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d009      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
 8004c2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c32:	f003 0320 	and.w	r3, r3, #32
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d003      	beq.n	8004c42 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004c3a:	6878      	ldr	r0, [r7, #4]
 8004c3c:	f000 fb99 	bl	8005372 <UART_Receive_IT>
      return;
 8004c40:	e25b      	b.n	80050fa <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004c42:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	f000 80de 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
 8004c4c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c50:	f003 0301 	and.w	r3, r3, #1
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d106      	bne.n	8004c66 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004c58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c5c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f000 80d1 	beq.w	8004e08 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c6a:	f003 0301 	and.w	r3, r3, #1
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
 8004c72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7a:	2b00      	cmp	r3, #0
 8004c7c:	d005      	beq.n	8004c8a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004c82:	f043 0201 	orr.w	r2, r3, #1
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004c8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c8e:	f003 0304 	and.w	r3, r3, #4
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d00b      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
 8004c96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004c9a:	f003 0301 	and.w	r3, r3, #1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d005      	beq.n	8004cae <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ca6:	f043 0202 	orr.w	r2, r3, #2
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cb2:	f003 0302 	and.w	r3, r3, #2
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d00b      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
 8004cba:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d005      	beq.n	8004cd2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cca:	f043 0204 	orr.w	r2, r3, #4
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004cd2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004cd6:	f003 0308 	and.w	r3, r3, #8
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d011      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
 8004cde:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ce2:	f003 0320 	and.w	r3, r3, #32
 8004ce6:	2b00      	cmp	r3, #0
 8004ce8:	d105      	bne.n	8004cf6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004cea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004cee:	f003 0301 	and.w	r3, r3, #1
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d005      	beq.n	8004d02 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004cfa:	f043 0208 	orr.w	r2, r3, #8
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	f000 81f2 	beq.w	80050f0 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004d0c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d10:	f003 0320 	and.w	r3, r3, #32
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d008      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
 8004d18:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d1c:	f003 0320 	and.w	r3, r3, #32
 8004d20:	2b00      	cmp	r3, #0
 8004d22:	d002      	beq.n	8004d2a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004d24:	6878      	ldr	r0, [r7, #4]
 8004d26:	f000 fb24 	bl	8005372 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	695b      	ldr	r3, [r3, #20]
 8004d30:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d34:	2b40      	cmp	r3, #64	@ 0x40
 8004d36:	bf0c      	ite	eq
 8004d38:	2301      	moveq	r3, #1
 8004d3a:	2300      	movne	r3, #0
 8004d3c:	b2db      	uxtb	r3, r3
 8004d3e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004d46:	f003 0308 	and.w	r3, r3, #8
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d103      	bne.n	8004d56 <HAL_UART_IRQHandler+0x17a>
 8004d4e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d04f      	beq.n	8004df6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004d56:	6878      	ldr	r0, [r7, #4]
 8004d58:	f000 fa2c 	bl	80051b4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d66:	2b40      	cmp	r3, #64	@ 0x40
 8004d68:	d141      	bne.n	8004dee <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	3314      	adds	r3, #20
 8004d70:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d74:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004d78:	e853 3f00 	ldrex	r3, [r3]
 8004d7c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004d80:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004d84:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d88:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	681b      	ldr	r3, [r3, #0]
 8004d90:	3314      	adds	r3, #20
 8004d92:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004d96:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004d9a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d9e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004da2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004da6:	e841 2300 	strex	r3, r2, [r1]
 8004daa:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004dae:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d1d9      	bne.n	8004d6a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dba:	2b00      	cmp	r3, #0
 8004dbc:	d013      	beq.n	8004de6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dc2:	4a7e      	ldr	r2, [pc, #504]	@ (8004fbc <HAL_UART_IRQHandler+0x3e0>)
 8004dc4:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dca:	4618      	mov	r0, r3
 8004dcc:	f7fe f891 	bl	8002ef2 <HAL_DMA_Abort_IT>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d016      	beq.n	8004e04 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dda:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004ddc:	687a      	ldr	r2, [r7, #4]
 8004dde:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004de0:	4610      	mov	r0, r2
 8004de2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004de4:	e00e      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004de6:	6878      	ldr	r0, [r7, #4]
 8004de8:	f000 f994 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004dec:	e00a      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004dee:	6878      	ldr	r0, [r7, #4]
 8004df0:	f000 f990 	bl	8005114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004df4:	e006      	b.n	8004e04 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f000 f98c 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2200      	movs	r2, #0
 8004e00:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004e02:	e175      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e04:	bf00      	nop
    return;
 8004e06:	e173      	b.n	80050f0 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004e0c:	2b01      	cmp	r3, #1
 8004e0e:	f040 814f 	bne.w	80050b0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004e16:	f003 0310 	and.w	r3, r3, #16
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8148 	beq.w	80050b0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004e20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004e24:	f003 0310 	and.w	r3, r3, #16
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	f000 8141 	beq.w	80050b0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004e2e:	2300      	movs	r3, #0
 8004e30:	60bb      	str	r3, [r7, #8]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	60bb      	str	r3, [r7, #8]
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	60bb      	str	r3, [r7, #8]
 8004e42:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	695b      	ldr	r3, [r3, #20]
 8004e4a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004e4e:	2b40      	cmp	r3, #64	@ 0x40
 8004e50:	f040 80b6 	bne.w	8004fc0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004e60:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8145 	beq.w	80050f4 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004e6e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e72:	429a      	cmp	r2, r3
 8004e74:	f080 813e 	bcs.w	80050f4 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004e7e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e84:	69db      	ldr	r3, [r3, #28]
 8004e86:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004e8a:	f000 8088 	beq.w	8004f9e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	330c      	adds	r3, #12
 8004e94:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e98:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004e9c:	e853 3f00 	ldrex	r3, [r3]
 8004ea0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ea4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ea8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004eac:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	330c      	adds	r3, #12
 8004eb6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004eba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ebe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004ec6:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004eca:	e841 2300 	strex	r3, r2, [r1]
 8004ece:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004ed2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d1d9      	bne.n	8004e8e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	3314      	adds	r3, #20
 8004ee0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ee2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004ee4:	e853 3f00 	ldrex	r3, [r3]
 8004ee8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004eea:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004eec:	f023 0301 	bic.w	r3, r3, #1
 8004ef0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	3314      	adds	r3, #20
 8004efa:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004efe:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004f02:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f04:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004f06:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004f0a:	e841 2300 	strex	r3, r2, [r1]
 8004f0e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004f10:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d1e1      	bne.n	8004eda <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	3314      	adds	r3, #20
 8004f1c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f1e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004f20:	e853 3f00 	ldrex	r3, [r3]
 8004f24:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004f26:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004f28:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004f2c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	3314      	adds	r3, #20
 8004f36:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004f3a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004f3c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f3e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004f40:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004f42:	e841 2300 	strex	r3, r2, [r1]
 8004f46:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004f48:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004f4a:	2b00      	cmp	r3, #0
 8004f4c:	d1e3      	bne.n	8004f16 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	2220      	movs	r2, #32
 8004f52:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	330c      	adds	r3, #12
 8004f62:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f64:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004f66:	e853 3f00 	ldrex	r3, [r3]
 8004f6a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004f6c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004f6e:	f023 0310 	bic.w	r3, r3, #16
 8004f72:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	330c      	adds	r3, #12
 8004f7c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004f80:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004f82:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f84:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004f86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004f88:	e841 2300 	strex	r3, r2, [r1]
 8004f8c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004f8e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d1e3      	bne.n	8004f5c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004f98:	4618      	mov	r0, r3
 8004f9a:	f7fd ff3a 	bl	8002e12 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2202      	movs	r2, #2
 8004fa2:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004fa4:	687b      	ldr	r3, [r7, #4]
 8004fa6:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fac:	b29b      	uxth	r3, r3
 8004fae:	1ad3      	subs	r3, r2, r3
 8004fb0:	b29b      	uxth	r3, r3
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	6878      	ldr	r0, [r7, #4]
 8004fb6:	f000 f8b7 	bl	8005128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004fba:	e09b      	b.n	80050f4 <HAL_UART_IRQHandler+0x518>
 8004fbc:	0800527b 	.word	0x0800527b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fc8:	b29b      	uxth	r3, r3
 8004fca:	1ad3      	subs	r3, r2, r3
 8004fcc:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	f000 808e 	beq.w	80050f8 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004fdc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	f000 8089 	beq.w	80050f8 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	330c      	adds	r3, #12
 8004fec:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004fee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ff0:	e853 3f00 	ldrex	r3, [r3]
 8004ff4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004ff6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004ff8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004ffc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	330c      	adds	r3, #12
 8005006:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800500a:	647a      	str	r2, [r7, #68]	@ 0x44
 800500c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800500e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005010:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005012:	e841 2300 	strex	r3, r2, [r1]
 8005016:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005018:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800501a:	2b00      	cmp	r3, #0
 800501c:	d1e3      	bne.n	8004fe6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	3314      	adds	r3, #20
 8005024:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005028:	e853 3f00 	ldrex	r3, [r3]
 800502c:	623b      	str	r3, [r7, #32]
   return(result);
 800502e:	6a3b      	ldr	r3, [r7, #32]
 8005030:	f023 0301 	bic.w	r3, r3, #1
 8005034:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	3314      	adds	r3, #20
 800503e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005042:	633a      	str	r2, [r7, #48]	@ 0x30
 8005044:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005046:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005048:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800504a:	e841 2300 	strex	r3, r2, [r1]
 800504e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005052:	2b00      	cmp	r3, #0
 8005054:	d1e3      	bne.n	800501e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	2220      	movs	r2, #32
 800505a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	2200      	movs	r2, #0
 8005062:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	330c      	adds	r3, #12
 800506a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800506c:	693b      	ldr	r3, [r7, #16]
 800506e:	e853 3f00 	ldrex	r3, [r3]
 8005072:	60fb      	str	r3, [r7, #12]
   return(result);
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	f023 0310 	bic.w	r3, r3, #16
 800507a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	330c      	adds	r3, #12
 8005084:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005088:	61fa      	str	r2, [r7, #28]
 800508a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800508c:	69b9      	ldr	r1, [r7, #24]
 800508e:	69fa      	ldr	r2, [r7, #28]
 8005090:	e841 2300 	strex	r3, r2, [r1]
 8005094:	617b      	str	r3, [r7, #20]
   return(result);
 8005096:	697b      	ldr	r3, [r7, #20]
 8005098:	2b00      	cmp	r3, #0
 800509a:	d1e3      	bne.n	8005064 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	2202      	movs	r2, #2
 80050a0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80050a2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80050a6:	4619      	mov	r1, r3
 80050a8:	6878      	ldr	r0, [r7, #4]
 80050aa:	f000 f83d 	bl	8005128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80050ae:	e023      	b.n	80050f8 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80050b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <HAL_UART_IRQHandler+0x4f4>
 80050bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050c0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d003      	beq.n	80050d0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 f8ea 	bl	80052a2 <UART_Transmit_IT>
    return;
 80050ce:	e014      	b.n	80050fa <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80050d0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80050d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d00e      	beq.n	80050fa <HAL_UART_IRQHandler+0x51e>
 80050dc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80050e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d008      	beq.n	80050fa <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80050e8:	6878      	ldr	r0, [r7, #4]
 80050ea:	f000 f92a 	bl	8005342 <UART_EndTransmit_IT>
    return;
 80050ee:	e004      	b.n	80050fa <HAL_UART_IRQHandler+0x51e>
    return;
 80050f0:	bf00      	nop
 80050f2:	e002      	b.n	80050fa <HAL_UART_IRQHandler+0x51e>
      return;
 80050f4:	bf00      	nop
 80050f6:	e000      	b.n	80050fa <HAL_UART_IRQHandler+0x51e>
      return;
 80050f8:	bf00      	nop
  }
}
 80050fa:	37e8      	adds	r7, #232	@ 0xe8
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005100:	b480      	push	{r7}
 8005102:	b083      	sub	sp, #12
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005108:	bf00      	nop
 800510a:	370c      	adds	r7, #12
 800510c:	46bd      	mov	sp, r7
 800510e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005112:	4770      	bx	lr

08005114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005114:	b480      	push	{r7}
 8005116:	b083      	sub	sp, #12
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800511c:	bf00      	nop
 800511e:	370c      	adds	r7, #12
 8005120:	46bd      	mov	sp, r7
 8005122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005126:	4770      	bx	lr

08005128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005128:	b480      	push	{r7}
 800512a:	b083      	sub	sp, #12
 800512c:	af00      	add	r7, sp, #0
 800512e:	6078      	str	r0, [r7, #4]
 8005130:	460b      	mov	r3, r1
 8005132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005134:	bf00      	nop
 8005136:	370c      	adds	r7, #12
 8005138:	46bd      	mov	sp, r7
 800513a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800513e:	4770      	bx	lr

08005140 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005140:	b480      	push	{r7}
 8005142:	b085      	sub	sp, #20
 8005144:	af00      	add	r7, sp, #0
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	60b9      	str	r1, [r7, #8]
 800514a:	4613      	mov	r3, r2
 800514c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800514e:	68fb      	ldr	r3, [r7, #12]
 8005150:	68ba      	ldr	r2, [r7, #8]
 8005152:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	88fa      	ldrh	r2, [r7, #6]
 8005158:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	88fa      	ldrh	r2, [r7, #6]
 800515e:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	2200      	movs	r2, #0
 8005164:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2222      	movs	r2, #34	@ 0x22
 800516a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	2b00      	cmp	r3, #0
 8005174:	d007      	beq.n	8005186 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	68da      	ldr	r2, [r3, #12]
 800517c:	68fb      	ldr	r3, [r7, #12]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005184:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	695a      	ldr	r2, [r3, #20]
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f042 0201 	orr.w	r2, r2, #1
 8005194:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	68da      	ldr	r2, [r3, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f042 0220 	orr.w	r2, r2, #32
 80051a4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80051a6:	2300      	movs	r3, #0
}
 80051a8:	4618      	mov	r0, r3
 80051aa:	3714      	adds	r7, #20
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b095      	sub	sp, #84	@ 0x54
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	330c      	adds	r3, #12
 80051c2:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051c6:	e853 3f00 	ldrex	r3, [r3]
 80051ca:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80051cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ce:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80051d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	330c      	adds	r3, #12
 80051da:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80051dc:	643a      	str	r2, [r7, #64]	@ 0x40
 80051de:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051e0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80051e2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80051e4:	e841 2300 	strex	r3, r2, [r1]
 80051e8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80051ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80051ec:	2b00      	cmp	r3, #0
 80051ee:	d1e5      	bne.n	80051bc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	3314      	adds	r3, #20
 80051f6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80051f8:	6a3b      	ldr	r3, [r7, #32]
 80051fa:	e853 3f00 	ldrex	r3, [r3]
 80051fe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005200:	69fb      	ldr	r3, [r7, #28]
 8005202:	f023 0301 	bic.w	r3, r3, #1
 8005206:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	3314      	adds	r3, #20
 800520e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005210:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005212:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005214:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005216:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005218:	e841 2300 	strex	r3, r2, [r1]
 800521c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800521e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005220:	2b00      	cmp	r3, #0
 8005222:	d1e5      	bne.n	80051f0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005228:	2b01      	cmp	r3, #1
 800522a:	d119      	bne.n	8005260 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	330c      	adds	r3, #12
 8005232:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	e853 3f00 	ldrex	r3, [r3]
 800523a:	60bb      	str	r3, [r7, #8]
   return(result);
 800523c:	68bb      	ldr	r3, [r7, #8]
 800523e:	f023 0310 	bic.w	r3, r3, #16
 8005242:	647b      	str	r3, [r7, #68]	@ 0x44
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	330c      	adds	r3, #12
 800524a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800524c:	61ba      	str	r2, [r7, #24]
 800524e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005250:	6979      	ldr	r1, [r7, #20]
 8005252:	69ba      	ldr	r2, [r7, #24]
 8005254:	e841 2300 	strex	r3, r2, [r1]
 8005258:	613b      	str	r3, [r7, #16]
   return(result);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	2b00      	cmp	r3, #0
 800525e:	d1e5      	bne.n	800522c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2220      	movs	r2, #32
 8005264:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2200      	movs	r2, #0
 800526c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800526e:	bf00      	nop
 8005270:	3754      	adds	r7, #84	@ 0x54
 8005272:	46bd      	mov	sp, r7
 8005274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005278:	4770      	bx	lr

0800527a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800527a:	b580      	push	{r7, lr}
 800527c:	b084      	sub	sp, #16
 800527e:	af00      	add	r7, sp, #0
 8005280:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005286:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005288:	68fb      	ldr	r3, [r7, #12]
 800528a:	2200      	movs	r2, #0
 800528c:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	2200      	movs	r2, #0
 8005292:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005294:	68f8      	ldr	r0, [r7, #12]
 8005296:	f7ff ff3d 	bl	8005114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800529a:	bf00      	nop
 800529c:	3710      	adds	r7, #16
 800529e:	46bd      	mov	sp, r7
 80052a0:	bd80      	pop	{r7, pc}

080052a2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80052a2:	b480      	push	{r7}
 80052a4:	b085      	sub	sp, #20
 80052a6:	af00      	add	r7, sp, #0
 80052a8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80052aa:	687b      	ldr	r3, [r7, #4]
 80052ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052b0:	b2db      	uxtb	r3, r3
 80052b2:	2b21      	cmp	r3, #33	@ 0x21
 80052b4:	d13e      	bne.n	8005334 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052be:	d114      	bne.n	80052ea <UART_Transmit_IT+0x48>
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	691b      	ldr	r3, [r3, #16]
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d110      	bne.n	80052ea <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	6a1b      	ldr	r3, [r3, #32]
 80052cc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	881b      	ldrh	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80052dc:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	6a1b      	ldr	r3, [r3, #32]
 80052e2:	1c9a      	adds	r2, r3, #2
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	621a      	str	r2, [r3, #32]
 80052e8:	e008      	b.n	80052fc <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	1c59      	adds	r1, r3, #1
 80052f0:	687a      	ldr	r2, [r7, #4]
 80052f2:	6211      	str	r1, [r2, #32]
 80052f4:	781a      	ldrb	r2, [r3, #0]
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005300:	b29b      	uxth	r3, r3
 8005302:	3b01      	subs	r3, #1
 8005304:	b29b      	uxth	r3, r3
 8005306:	687a      	ldr	r2, [r7, #4]
 8005308:	4619      	mov	r1, r3
 800530a:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800530c:	2b00      	cmp	r3, #0
 800530e:	d10f      	bne.n	8005330 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800531e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	68da      	ldr	r2, [r3, #12]
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800532e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005330:	2300      	movs	r3, #0
 8005332:	e000      	b.n	8005336 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005334:	2302      	movs	r3, #2
  }
}
 8005336:	4618      	mov	r0, r3
 8005338:	3714      	adds	r7, #20
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr

08005342 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005342:	b580      	push	{r7, lr}
 8005344:	b082      	sub	sp, #8
 8005346:	af00      	add	r7, sp, #0
 8005348:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	68da      	ldr	r2, [r3, #12]
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005358:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	2220      	movs	r2, #32
 800535e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005362:	6878      	ldr	r0, [r7, #4]
 8005364:	f7ff fecc 	bl	8005100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005368:	2300      	movs	r3, #0
}
 800536a:	4618      	mov	r0, r3
 800536c:	3708      	adds	r7, #8
 800536e:	46bd      	mov	sp, r7
 8005370:	bd80      	pop	{r7, pc}

08005372 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005372:	b580      	push	{r7, lr}
 8005374:	b08c      	sub	sp, #48	@ 0x30
 8005376:	af00      	add	r7, sp, #0
 8005378:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005380:	b2db      	uxtb	r3, r3
 8005382:	2b22      	cmp	r3, #34	@ 0x22
 8005384:	f040 80ae 	bne.w	80054e4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005390:	d117      	bne.n	80053c2 <UART_Receive_IT+0x50>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	2b00      	cmp	r3, #0
 8005398:	d113      	bne.n	80053c2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053a2:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	b29b      	uxth	r3, r3
 80053ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80053b0:	b29a      	uxth	r2, r3
 80053b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053b4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053ba:	1c9a      	adds	r2, r3, #2
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	629a      	str	r2, [r3, #40]	@ 0x28
 80053c0:	e026      	b.n	8005410 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80053c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80053c8:	2300      	movs	r3, #0
 80053ca:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	689b      	ldr	r3, [r3, #8]
 80053d0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053d4:	d007      	beq.n	80053e6 <UART_Receive_IT+0x74>
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	689b      	ldr	r3, [r3, #8]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d10a      	bne.n	80053f4 <UART_Receive_IT+0x82>
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d106      	bne.n	80053f4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	b2da      	uxtb	r2, r3
 80053ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80053f0:	701a      	strb	r2, [r3, #0]
 80053f2:	e008      	b.n	8005406 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	b2db      	uxtb	r3, r3
 80053fc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005400:	b2da      	uxtb	r2, r3
 8005402:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005404:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800540a:	1c5a      	adds	r2, r3, #1
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005414:	b29b      	uxth	r3, r3
 8005416:	3b01      	subs	r3, #1
 8005418:	b29b      	uxth	r3, r3
 800541a:	687a      	ldr	r2, [r7, #4]
 800541c:	4619      	mov	r1, r3
 800541e:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005420:	2b00      	cmp	r3, #0
 8005422:	d15d      	bne.n	80054e0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	68da      	ldr	r2, [r3, #12]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	f022 0220 	bic.w	r2, r2, #32
 8005432:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	68da      	ldr	r2, [r3, #12]
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005442:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	695a      	ldr	r2, [r3, #20]
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	f022 0201 	bic.w	r2, r2, #1
 8005452:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2220      	movs	r2, #32
 8005458:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	2200      	movs	r2, #0
 8005460:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005466:	2b01      	cmp	r3, #1
 8005468:	d135      	bne.n	80054d6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	2200      	movs	r2, #0
 800546e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	330c      	adds	r3, #12
 8005476:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	e853 3f00 	ldrex	r3, [r3]
 800547e:	613b      	str	r3, [r7, #16]
   return(result);
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	f023 0310 	bic.w	r3, r3, #16
 8005486:	627b      	str	r3, [r7, #36]	@ 0x24
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	330c      	adds	r3, #12
 800548e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005490:	623a      	str	r2, [r7, #32]
 8005492:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005494:	69f9      	ldr	r1, [r7, #28]
 8005496:	6a3a      	ldr	r2, [r7, #32]
 8005498:	e841 2300 	strex	r3, r2, [r1]
 800549c:	61bb      	str	r3, [r7, #24]
   return(result);
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d1e5      	bne.n	8005470 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f003 0310 	and.w	r3, r3, #16
 80054ae:	2b10      	cmp	r3, #16
 80054b0:	d10a      	bne.n	80054c8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80054b2:	2300      	movs	r3, #0
 80054b4:	60fb      	str	r3, [r7, #12]
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	60fb      	str	r3, [r7, #12]
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	60fb      	str	r3, [r7, #12]
 80054c6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80054cc:	4619      	mov	r1, r3
 80054ce:	6878      	ldr	r0, [r7, #4]
 80054d0:	f7ff fe2a 	bl	8005128 <HAL_UARTEx_RxEventCallback>
 80054d4:	e002      	b.n	80054dc <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80054d6:	6878      	ldr	r0, [r7, #4]
 80054d8:	f7fb ff10 	bl	80012fc <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80054dc:	2300      	movs	r3, #0
 80054de:	e002      	b.n	80054e6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80054e0:	2300      	movs	r3, #0
 80054e2:	e000      	b.n	80054e6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80054e4:	2302      	movs	r3, #2
  }
}
 80054e6:	4618      	mov	r0, r3
 80054e8:	3730      	adds	r7, #48	@ 0x30
 80054ea:	46bd      	mov	sp, r7
 80054ec:	bd80      	pop	{r7, pc}
	...

080054f0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80054f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80054f4:	b0c0      	sub	sp, #256	@ 0x100
 80054f6:	af00      	add	r7, sp, #0
 80054f8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80054fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	691b      	ldr	r3, [r3, #16]
 8005504:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005508:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800550c:	68d9      	ldr	r1, [r3, #12]
 800550e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005512:	681a      	ldr	r2, [r3, #0]
 8005514:	ea40 0301 	orr.w	r3, r0, r1
 8005518:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800551a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800551e:	689a      	ldr	r2, [r3, #8]
 8005520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005524:	691b      	ldr	r3, [r3, #16]
 8005526:	431a      	orrs	r2, r3
 8005528:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800552c:	695b      	ldr	r3, [r3, #20]
 800552e:	431a      	orrs	r2, r3
 8005530:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005534:	69db      	ldr	r3, [r3, #28]
 8005536:	4313      	orrs	r3, r2
 8005538:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800553c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	68db      	ldr	r3, [r3, #12]
 8005544:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005548:	f021 010c 	bic.w	r1, r1, #12
 800554c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005556:	430b      	orrs	r3, r1
 8005558:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800555a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	695b      	ldr	r3, [r3, #20]
 8005562:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005566:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800556a:	6999      	ldr	r1, [r3, #24]
 800556c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005570:	681a      	ldr	r2, [r3, #0]
 8005572:	ea40 0301 	orr.w	r3, r0, r1
 8005576:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800557c:	681a      	ldr	r2, [r3, #0]
 800557e:	4b8f      	ldr	r3, [pc, #572]	@ (80057bc <UART_SetConfig+0x2cc>)
 8005580:	429a      	cmp	r2, r3
 8005582:	d005      	beq.n	8005590 <UART_SetConfig+0xa0>
 8005584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005588:	681a      	ldr	r2, [r3, #0]
 800558a:	4b8d      	ldr	r3, [pc, #564]	@ (80057c0 <UART_SetConfig+0x2d0>)
 800558c:	429a      	cmp	r2, r3
 800558e:	d104      	bne.n	800559a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005590:	f7fe fc04 	bl	8003d9c <HAL_RCC_GetPCLK2Freq>
 8005594:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005598:	e003      	b.n	80055a2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800559a:	f7fe fbeb 	bl	8003d74 <HAL_RCC_GetPCLK1Freq>
 800559e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80055a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055a6:	69db      	ldr	r3, [r3, #28]
 80055a8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80055ac:	f040 810c 	bne.w	80057c8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80055b0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055b4:	2200      	movs	r2, #0
 80055b6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80055ba:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80055be:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80055c2:	4622      	mov	r2, r4
 80055c4:	462b      	mov	r3, r5
 80055c6:	1891      	adds	r1, r2, r2
 80055c8:	65b9      	str	r1, [r7, #88]	@ 0x58
 80055ca:	415b      	adcs	r3, r3
 80055cc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80055ce:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80055d2:	4621      	mov	r1, r4
 80055d4:	eb12 0801 	adds.w	r8, r2, r1
 80055d8:	4629      	mov	r1, r5
 80055da:	eb43 0901 	adc.w	r9, r3, r1
 80055de:	f04f 0200 	mov.w	r2, #0
 80055e2:	f04f 0300 	mov.w	r3, #0
 80055e6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80055ea:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80055ee:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80055f2:	4690      	mov	r8, r2
 80055f4:	4699      	mov	r9, r3
 80055f6:	4623      	mov	r3, r4
 80055f8:	eb18 0303 	adds.w	r3, r8, r3
 80055fc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005600:	462b      	mov	r3, r5
 8005602:	eb49 0303 	adc.w	r3, r9, r3
 8005606:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800560a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	2200      	movs	r2, #0
 8005612:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005616:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800561a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800561e:	460b      	mov	r3, r1
 8005620:	18db      	adds	r3, r3, r3
 8005622:	653b      	str	r3, [r7, #80]	@ 0x50
 8005624:	4613      	mov	r3, r2
 8005626:	eb42 0303 	adc.w	r3, r2, r3
 800562a:	657b      	str	r3, [r7, #84]	@ 0x54
 800562c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005630:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005634:	f7fb fb30 	bl	8000c98 <__aeabi_uldivmod>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	4b61      	ldr	r3, [pc, #388]	@ (80057c4 <UART_SetConfig+0x2d4>)
 800563e:	fba3 2302 	umull	r2, r3, r3, r2
 8005642:	095b      	lsrs	r3, r3, #5
 8005644:	011c      	lsls	r4, r3, #4
 8005646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800564a:	2200      	movs	r2, #0
 800564c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005650:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005654:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005658:	4642      	mov	r2, r8
 800565a:	464b      	mov	r3, r9
 800565c:	1891      	adds	r1, r2, r2
 800565e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005660:	415b      	adcs	r3, r3
 8005662:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005664:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005668:	4641      	mov	r1, r8
 800566a:	eb12 0a01 	adds.w	sl, r2, r1
 800566e:	4649      	mov	r1, r9
 8005670:	eb43 0b01 	adc.w	fp, r3, r1
 8005674:	f04f 0200 	mov.w	r2, #0
 8005678:	f04f 0300 	mov.w	r3, #0
 800567c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005680:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005684:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005688:	4692      	mov	sl, r2
 800568a:	469b      	mov	fp, r3
 800568c:	4643      	mov	r3, r8
 800568e:	eb1a 0303 	adds.w	r3, sl, r3
 8005692:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005696:	464b      	mov	r3, r9
 8005698:	eb4b 0303 	adc.w	r3, fp, r3
 800569c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80056a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056a4:	685b      	ldr	r3, [r3, #4]
 80056a6:	2200      	movs	r2, #0
 80056a8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80056ac:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80056b0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80056b4:	460b      	mov	r3, r1
 80056b6:	18db      	adds	r3, r3, r3
 80056b8:	643b      	str	r3, [r7, #64]	@ 0x40
 80056ba:	4613      	mov	r3, r2
 80056bc:	eb42 0303 	adc.w	r3, r2, r3
 80056c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80056c2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80056c6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80056ca:	f7fb fae5 	bl	8000c98 <__aeabi_uldivmod>
 80056ce:	4602      	mov	r2, r0
 80056d0:	460b      	mov	r3, r1
 80056d2:	4611      	mov	r1, r2
 80056d4:	4b3b      	ldr	r3, [pc, #236]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056d6:	fba3 2301 	umull	r2, r3, r3, r1
 80056da:	095b      	lsrs	r3, r3, #5
 80056dc:	2264      	movs	r2, #100	@ 0x64
 80056de:	fb02 f303 	mul.w	r3, r2, r3
 80056e2:	1acb      	subs	r3, r1, r3
 80056e4:	00db      	lsls	r3, r3, #3
 80056e6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80056ea:	4b36      	ldr	r3, [pc, #216]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80056ec:	fba3 2302 	umull	r2, r3, r3, r2
 80056f0:	095b      	lsrs	r3, r3, #5
 80056f2:	005b      	lsls	r3, r3, #1
 80056f4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80056f8:	441c      	add	r4, r3
 80056fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80056fe:	2200      	movs	r2, #0
 8005700:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005704:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005708:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800570c:	4642      	mov	r2, r8
 800570e:	464b      	mov	r3, r9
 8005710:	1891      	adds	r1, r2, r2
 8005712:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005714:	415b      	adcs	r3, r3
 8005716:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005718:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800571c:	4641      	mov	r1, r8
 800571e:	1851      	adds	r1, r2, r1
 8005720:	6339      	str	r1, [r7, #48]	@ 0x30
 8005722:	4649      	mov	r1, r9
 8005724:	414b      	adcs	r3, r1
 8005726:	637b      	str	r3, [r7, #52]	@ 0x34
 8005728:	f04f 0200 	mov.w	r2, #0
 800572c:	f04f 0300 	mov.w	r3, #0
 8005730:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005734:	4659      	mov	r1, fp
 8005736:	00cb      	lsls	r3, r1, #3
 8005738:	4651      	mov	r1, sl
 800573a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800573e:	4651      	mov	r1, sl
 8005740:	00ca      	lsls	r2, r1, #3
 8005742:	4610      	mov	r0, r2
 8005744:	4619      	mov	r1, r3
 8005746:	4603      	mov	r3, r0
 8005748:	4642      	mov	r2, r8
 800574a:	189b      	adds	r3, r3, r2
 800574c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005750:	464b      	mov	r3, r9
 8005752:	460a      	mov	r2, r1
 8005754:	eb42 0303 	adc.w	r3, r2, r3
 8005758:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800575c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	2200      	movs	r2, #0
 8005764:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005768:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800576c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005770:	460b      	mov	r3, r1
 8005772:	18db      	adds	r3, r3, r3
 8005774:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005776:	4613      	mov	r3, r2
 8005778:	eb42 0303 	adc.w	r3, r2, r3
 800577c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800577e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005782:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005786:	f7fb fa87 	bl	8000c98 <__aeabi_uldivmod>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4b0d      	ldr	r3, [pc, #52]	@ (80057c4 <UART_SetConfig+0x2d4>)
 8005790:	fba3 1302 	umull	r1, r3, r3, r2
 8005794:	095b      	lsrs	r3, r3, #5
 8005796:	2164      	movs	r1, #100	@ 0x64
 8005798:	fb01 f303 	mul.w	r3, r1, r3
 800579c:	1ad3      	subs	r3, r2, r3
 800579e:	00db      	lsls	r3, r3, #3
 80057a0:	3332      	adds	r3, #50	@ 0x32
 80057a2:	4a08      	ldr	r2, [pc, #32]	@ (80057c4 <UART_SetConfig+0x2d4>)
 80057a4:	fba2 2303 	umull	r2, r3, r2, r3
 80057a8:	095b      	lsrs	r3, r3, #5
 80057aa:	f003 0207 	and.w	r2, r3, #7
 80057ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4422      	add	r2, r4
 80057b6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80057b8:	e106      	b.n	80059c8 <UART_SetConfig+0x4d8>
 80057ba:	bf00      	nop
 80057bc:	40011000 	.word	0x40011000
 80057c0:	40011400 	.word	0x40011400
 80057c4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80057c8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80057cc:	2200      	movs	r2, #0
 80057ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80057d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80057d6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80057da:	4642      	mov	r2, r8
 80057dc:	464b      	mov	r3, r9
 80057de:	1891      	adds	r1, r2, r2
 80057e0:	6239      	str	r1, [r7, #32]
 80057e2:	415b      	adcs	r3, r3
 80057e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80057e6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80057ea:	4641      	mov	r1, r8
 80057ec:	1854      	adds	r4, r2, r1
 80057ee:	4649      	mov	r1, r9
 80057f0:	eb43 0501 	adc.w	r5, r3, r1
 80057f4:	f04f 0200 	mov.w	r2, #0
 80057f8:	f04f 0300 	mov.w	r3, #0
 80057fc:	00eb      	lsls	r3, r5, #3
 80057fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005802:	00e2      	lsls	r2, r4, #3
 8005804:	4614      	mov	r4, r2
 8005806:	461d      	mov	r5, r3
 8005808:	4643      	mov	r3, r8
 800580a:	18e3      	adds	r3, r4, r3
 800580c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005810:	464b      	mov	r3, r9
 8005812:	eb45 0303 	adc.w	r3, r5, r3
 8005816:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800581a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	2200      	movs	r2, #0
 8005822:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005826:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800582a:	f04f 0200 	mov.w	r2, #0
 800582e:	f04f 0300 	mov.w	r3, #0
 8005832:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005836:	4629      	mov	r1, r5
 8005838:	008b      	lsls	r3, r1, #2
 800583a:	4621      	mov	r1, r4
 800583c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005840:	4621      	mov	r1, r4
 8005842:	008a      	lsls	r2, r1, #2
 8005844:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005848:	f7fb fa26 	bl	8000c98 <__aeabi_uldivmod>
 800584c:	4602      	mov	r2, r0
 800584e:	460b      	mov	r3, r1
 8005850:	4b60      	ldr	r3, [pc, #384]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005852:	fba3 2302 	umull	r2, r3, r3, r2
 8005856:	095b      	lsrs	r3, r3, #5
 8005858:	011c      	lsls	r4, r3, #4
 800585a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800585e:	2200      	movs	r2, #0
 8005860:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005864:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005868:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800586c:	4642      	mov	r2, r8
 800586e:	464b      	mov	r3, r9
 8005870:	1891      	adds	r1, r2, r2
 8005872:	61b9      	str	r1, [r7, #24]
 8005874:	415b      	adcs	r3, r3
 8005876:	61fb      	str	r3, [r7, #28]
 8005878:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800587c:	4641      	mov	r1, r8
 800587e:	1851      	adds	r1, r2, r1
 8005880:	6139      	str	r1, [r7, #16]
 8005882:	4649      	mov	r1, r9
 8005884:	414b      	adcs	r3, r1
 8005886:	617b      	str	r3, [r7, #20]
 8005888:	f04f 0200 	mov.w	r2, #0
 800588c:	f04f 0300 	mov.w	r3, #0
 8005890:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005894:	4659      	mov	r1, fp
 8005896:	00cb      	lsls	r3, r1, #3
 8005898:	4651      	mov	r1, sl
 800589a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800589e:	4651      	mov	r1, sl
 80058a0:	00ca      	lsls	r2, r1, #3
 80058a2:	4610      	mov	r0, r2
 80058a4:	4619      	mov	r1, r3
 80058a6:	4603      	mov	r3, r0
 80058a8:	4642      	mov	r2, r8
 80058aa:	189b      	adds	r3, r3, r2
 80058ac:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80058b0:	464b      	mov	r3, r9
 80058b2:	460a      	mov	r2, r1
 80058b4:	eb42 0303 	adc.w	r3, r2, r3
 80058b8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80058bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2200      	movs	r2, #0
 80058c4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80058c6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80058c8:	f04f 0200 	mov.w	r2, #0
 80058cc:	f04f 0300 	mov.w	r3, #0
 80058d0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80058d4:	4649      	mov	r1, r9
 80058d6:	008b      	lsls	r3, r1, #2
 80058d8:	4641      	mov	r1, r8
 80058da:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058de:	4641      	mov	r1, r8
 80058e0:	008a      	lsls	r2, r1, #2
 80058e2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80058e6:	f7fb f9d7 	bl	8000c98 <__aeabi_uldivmod>
 80058ea:	4602      	mov	r2, r0
 80058ec:	460b      	mov	r3, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	4b38      	ldr	r3, [pc, #224]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80058f2:	fba3 2301 	umull	r2, r3, r3, r1
 80058f6:	095b      	lsrs	r3, r3, #5
 80058f8:	2264      	movs	r2, #100	@ 0x64
 80058fa:	fb02 f303 	mul.w	r3, r2, r3
 80058fe:	1acb      	subs	r3, r1, r3
 8005900:	011b      	lsls	r3, r3, #4
 8005902:	3332      	adds	r3, #50	@ 0x32
 8005904:	4a33      	ldr	r2, [pc, #204]	@ (80059d4 <UART_SetConfig+0x4e4>)
 8005906:	fba2 2303 	umull	r2, r3, r2, r3
 800590a:	095b      	lsrs	r3, r3, #5
 800590c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005910:	441c      	add	r4, r3
 8005912:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005916:	2200      	movs	r2, #0
 8005918:	673b      	str	r3, [r7, #112]	@ 0x70
 800591a:	677a      	str	r2, [r7, #116]	@ 0x74
 800591c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005920:	4642      	mov	r2, r8
 8005922:	464b      	mov	r3, r9
 8005924:	1891      	adds	r1, r2, r2
 8005926:	60b9      	str	r1, [r7, #8]
 8005928:	415b      	adcs	r3, r3
 800592a:	60fb      	str	r3, [r7, #12]
 800592c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005930:	4641      	mov	r1, r8
 8005932:	1851      	adds	r1, r2, r1
 8005934:	6039      	str	r1, [r7, #0]
 8005936:	4649      	mov	r1, r9
 8005938:	414b      	adcs	r3, r1
 800593a:	607b      	str	r3, [r7, #4]
 800593c:	f04f 0200 	mov.w	r2, #0
 8005940:	f04f 0300 	mov.w	r3, #0
 8005944:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005948:	4659      	mov	r1, fp
 800594a:	00cb      	lsls	r3, r1, #3
 800594c:	4651      	mov	r1, sl
 800594e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005952:	4651      	mov	r1, sl
 8005954:	00ca      	lsls	r2, r1, #3
 8005956:	4610      	mov	r0, r2
 8005958:	4619      	mov	r1, r3
 800595a:	4603      	mov	r3, r0
 800595c:	4642      	mov	r2, r8
 800595e:	189b      	adds	r3, r3, r2
 8005960:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005962:	464b      	mov	r3, r9
 8005964:	460a      	mov	r2, r1
 8005966:	eb42 0303 	adc.w	r3, r2, r3
 800596a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800596c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005970:	685b      	ldr	r3, [r3, #4]
 8005972:	2200      	movs	r2, #0
 8005974:	663b      	str	r3, [r7, #96]	@ 0x60
 8005976:	667a      	str	r2, [r7, #100]	@ 0x64
 8005978:	f04f 0200 	mov.w	r2, #0
 800597c:	f04f 0300 	mov.w	r3, #0
 8005980:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005984:	4649      	mov	r1, r9
 8005986:	008b      	lsls	r3, r1, #2
 8005988:	4641      	mov	r1, r8
 800598a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800598e:	4641      	mov	r1, r8
 8005990:	008a      	lsls	r2, r1, #2
 8005992:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005996:	f7fb f97f 	bl	8000c98 <__aeabi_uldivmod>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4b0d      	ldr	r3, [pc, #52]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059a0:	fba3 1302 	umull	r1, r3, r3, r2
 80059a4:	095b      	lsrs	r3, r3, #5
 80059a6:	2164      	movs	r1, #100	@ 0x64
 80059a8:	fb01 f303 	mul.w	r3, r1, r3
 80059ac:	1ad3      	subs	r3, r2, r3
 80059ae:	011b      	lsls	r3, r3, #4
 80059b0:	3332      	adds	r3, #50	@ 0x32
 80059b2:	4a08      	ldr	r2, [pc, #32]	@ (80059d4 <UART_SetConfig+0x4e4>)
 80059b4:	fba2 2303 	umull	r2, r3, r2, r3
 80059b8:	095b      	lsrs	r3, r3, #5
 80059ba:	f003 020f 	and.w	r2, r3, #15
 80059be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	4422      	add	r2, r4
 80059c6:	609a      	str	r2, [r3, #8]
}
 80059c8:	bf00      	nop
 80059ca:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80059ce:	46bd      	mov	sp, r7
 80059d0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80059d4:	51eb851f 	.word	0x51eb851f

080059d8 <atof>:
 80059d8:	2100      	movs	r1, #0
 80059da:	f000 be0b 	b.w	80065f4 <strtod>

080059de <sulp>:
 80059de:	b570      	push	{r4, r5, r6, lr}
 80059e0:	4604      	mov	r4, r0
 80059e2:	460d      	mov	r5, r1
 80059e4:	ec45 4b10 	vmov	d0, r4, r5
 80059e8:	4616      	mov	r6, r2
 80059ea:	f003 fd01 	bl	80093f0 <__ulp>
 80059ee:	ec51 0b10 	vmov	r0, r1, d0
 80059f2:	b17e      	cbz	r6, 8005a14 <sulp+0x36>
 80059f4:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80059f8:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	dd09      	ble.n	8005a14 <sulp+0x36>
 8005a00:	051b      	lsls	r3, r3, #20
 8005a02:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8005a06:	2400      	movs	r4, #0
 8005a08:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8005a0c:	4622      	mov	r2, r4
 8005a0e:	462b      	mov	r3, r5
 8005a10:	f7fa fdfa 	bl	8000608 <__aeabi_dmul>
 8005a14:	ec41 0b10 	vmov	d0, r0, r1
 8005a18:	bd70      	pop	{r4, r5, r6, pc}
 8005a1a:	0000      	movs	r0, r0
 8005a1c:	0000      	movs	r0, r0
	...

08005a20 <_strtod_l>:
 8005a20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a24:	b09f      	sub	sp, #124	@ 0x7c
 8005a26:	460c      	mov	r4, r1
 8005a28:	9217      	str	r2, [sp, #92]	@ 0x5c
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	921a      	str	r2, [sp, #104]	@ 0x68
 8005a2e:	9005      	str	r0, [sp, #20]
 8005a30:	f04f 0a00 	mov.w	sl, #0
 8005a34:	f04f 0b00 	mov.w	fp, #0
 8005a38:	460a      	mov	r2, r1
 8005a3a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005a3c:	7811      	ldrb	r1, [r2, #0]
 8005a3e:	292b      	cmp	r1, #43	@ 0x2b
 8005a40:	d04a      	beq.n	8005ad8 <_strtod_l+0xb8>
 8005a42:	d838      	bhi.n	8005ab6 <_strtod_l+0x96>
 8005a44:	290d      	cmp	r1, #13
 8005a46:	d832      	bhi.n	8005aae <_strtod_l+0x8e>
 8005a48:	2908      	cmp	r1, #8
 8005a4a:	d832      	bhi.n	8005ab2 <_strtod_l+0x92>
 8005a4c:	2900      	cmp	r1, #0
 8005a4e:	d03b      	beq.n	8005ac8 <_strtod_l+0xa8>
 8005a50:	2200      	movs	r2, #0
 8005a52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005a54:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8005a56:	782a      	ldrb	r2, [r5, #0]
 8005a58:	2a30      	cmp	r2, #48	@ 0x30
 8005a5a:	f040 80b3 	bne.w	8005bc4 <_strtod_l+0x1a4>
 8005a5e:	786a      	ldrb	r2, [r5, #1]
 8005a60:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8005a64:	2a58      	cmp	r2, #88	@ 0x58
 8005a66:	d16e      	bne.n	8005b46 <_strtod_l+0x126>
 8005a68:	9302      	str	r3, [sp, #8]
 8005a6a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a6c:	9301      	str	r3, [sp, #4]
 8005a6e:	ab1a      	add	r3, sp, #104	@ 0x68
 8005a70:	9300      	str	r3, [sp, #0]
 8005a72:	4a8e      	ldr	r2, [pc, #568]	@ (8005cac <_strtod_l+0x28c>)
 8005a74:	9805      	ldr	r0, [sp, #20]
 8005a76:	ab1b      	add	r3, sp, #108	@ 0x6c
 8005a78:	a919      	add	r1, sp, #100	@ 0x64
 8005a7a:	f002 fdab 	bl	80085d4 <__gethex>
 8005a7e:	f010 060f 	ands.w	r6, r0, #15
 8005a82:	4604      	mov	r4, r0
 8005a84:	d005      	beq.n	8005a92 <_strtod_l+0x72>
 8005a86:	2e06      	cmp	r6, #6
 8005a88:	d128      	bne.n	8005adc <_strtod_l+0xbc>
 8005a8a:	3501      	adds	r5, #1
 8005a8c:	2300      	movs	r3, #0
 8005a8e:	9519      	str	r5, [sp, #100]	@ 0x64
 8005a90:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005a92:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	f040 858e 	bne.w	80065b6 <_strtod_l+0xb96>
 8005a9a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a9c:	b1cb      	cbz	r3, 8005ad2 <_strtod_l+0xb2>
 8005a9e:	4652      	mov	r2, sl
 8005aa0:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8005aa4:	ec43 2b10 	vmov	d0, r2, r3
 8005aa8:	b01f      	add	sp, #124	@ 0x7c
 8005aaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005aae:	2920      	cmp	r1, #32
 8005ab0:	d1ce      	bne.n	8005a50 <_strtod_l+0x30>
 8005ab2:	3201      	adds	r2, #1
 8005ab4:	e7c1      	b.n	8005a3a <_strtod_l+0x1a>
 8005ab6:	292d      	cmp	r1, #45	@ 0x2d
 8005ab8:	d1ca      	bne.n	8005a50 <_strtod_l+0x30>
 8005aba:	2101      	movs	r1, #1
 8005abc:	910b      	str	r1, [sp, #44]	@ 0x2c
 8005abe:	1c51      	adds	r1, r2, #1
 8005ac0:	9119      	str	r1, [sp, #100]	@ 0x64
 8005ac2:	7852      	ldrb	r2, [r2, #1]
 8005ac4:	2a00      	cmp	r2, #0
 8005ac6:	d1c5      	bne.n	8005a54 <_strtod_l+0x34>
 8005ac8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8005aca:	9419      	str	r4, [sp, #100]	@ 0x64
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f040 8570 	bne.w	80065b2 <_strtod_l+0xb92>
 8005ad2:	4652      	mov	r2, sl
 8005ad4:	465b      	mov	r3, fp
 8005ad6:	e7e5      	b.n	8005aa4 <_strtod_l+0x84>
 8005ad8:	2100      	movs	r1, #0
 8005ada:	e7ef      	b.n	8005abc <_strtod_l+0x9c>
 8005adc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8005ade:	b13a      	cbz	r2, 8005af0 <_strtod_l+0xd0>
 8005ae0:	2135      	movs	r1, #53	@ 0x35
 8005ae2:	a81c      	add	r0, sp, #112	@ 0x70
 8005ae4:	f003 fd7e 	bl	80095e4 <__copybits>
 8005ae8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005aea:	9805      	ldr	r0, [sp, #20]
 8005aec:	f003 f94c 	bl	8008d88 <_Bfree>
 8005af0:	3e01      	subs	r6, #1
 8005af2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8005af4:	2e04      	cmp	r6, #4
 8005af6:	d806      	bhi.n	8005b06 <_strtod_l+0xe6>
 8005af8:	e8df f006 	tbb	[pc, r6]
 8005afc:	201d0314 	.word	0x201d0314
 8005b00:	14          	.byte	0x14
 8005b01:	00          	.byte	0x00
 8005b02:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8005b06:	05e1      	lsls	r1, r4, #23
 8005b08:	bf48      	it	mi
 8005b0a:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8005b0e:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8005b12:	0d1b      	lsrs	r3, r3, #20
 8005b14:	051b      	lsls	r3, r3, #20
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d1bb      	bne.n	8005a92 <_strtod_l+0x72>
 8005b1a:	f001 fdf5 	bl	8007708 <__errno>
 8005b1e:	2322      	movs	r3, #34	@ 0x22
 8005b20:	6003      	str	r3, [r0, #0]
 8005b22:	e7b6      	b.n	8005a92 <_strtod_l+0x72>
 8005b24:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8005b28:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8005b2c:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8005b30:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8005b34:	e7e7      	b.n	8005b06 <_strtod_l+0xe6>
 8005b36:	f8df b17c 	ldr.w	fp, [pc, #380]	@ 8005cb4 <_strtod_l+0x294>
 8005b3a:	e7e4      	b.n	8005b06 <_strtod_l+0xe6>
 8005b3c:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8005b40:	f04f 3aff 	mov.w	sl, #4294967295
 8005b44:	e7df      	b.n	8005b06 <_strtod_l+0xe6>
 8005b46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b48:	1c5a      	adds	r2, r3, #1
 8005b4a:	9219      	str	r2, [sp, #100]	@ 0x64
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	2b30      	cmp	r3, #48	@ 0x30
 8005b50:	d0f9      	beq.n	8005b46 <_strtod_l+0x126>
 8005b52:	2b00      	cmp	r3, #0
 8005b54:	d09d      	beq.n	8005a92 <_strtod_l+0x72>
 8005b56:	2301      	movs	r3, #1
 8005b58:	9309      	str	r3, [sp, #36]	@ 0x24
 8005b5a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005b5c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005b5e:	2300      	movs	r3, #0
 8005b60:	9308      	str	r3, [sp, #32]
 8005b62:	930a      	str	r3, [sp, #40]	@ 0x28
 8005b64:	461f      	mov	r7, r3
 8005b66:	220a      	movs	r2, #10
 8005b68:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8005b6a:	7805      	ldrb	r5, [r0, #0]
 8005b6c:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8005b70:	b2d9      	uxtb	r1, r3
 8005b72:	2909      	cmp	r1, #9
 8005b74:	d928      	bls.n	8005bc8 <_strtod_l+0x1a8>
 8005b76:	494e      	ldr	r1, [pc, #312]	@ (8005cb0 <_strtod_l+0x290>)
 8005b78:	2201      	movs	r2, #1
 8005b7a:	f001 fd0c 	bl	8007596 <strncmp>
 8005b7e:	2800      	cmp	r0, #0
 8005b80:	d032      	beq.n	8005be8 <_strtod_l+0x1c8>
 8005b82:	2000      	movs	r0, #0
 8005b84:	462a      	mov	r2, r5
 8005b86:	4681      	mov	r9, r0
 8005b88:	463d      	mov	r5, r7
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2a65      	cmp	r2, #101	@ 0x65
 8005b8e:	d001      	beq.n	8005b94 <_strtod_l+0x174>
 8005b90:	2a45      	cmp	r2, #69	@ 0x45
 8005b92:	d114      	bne.n	8005bbe <_strtod_l+0x19e>
 8005b94:	b91d      	cbnz	r5, 8005b9e <_strtod_l+0x17e>
 8005b96:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005b98:	4302      	orrs	r2, r0
 8005b9a:	d095      	beq.n	8005ac8 <_strtod_l+0xa8>
 8005b9c:	2500      	movs	r5, #0
 8005b9e:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8005ba0:	1c62      	adds	r2, r4, #1
 8005ba2:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ba4:	7862      	ldrb	r2, [r4, #1]
 8005ba6:	2a2b      	cmp	r2, #43	@ 0x2b
 8005ba8:	d077      	beq.n	8005c9a <_strtod_l+0x27a>
 8005baa:	2a2d      	cmp	r2, #45	@ 0x2d
 8005bac:	d07b      	beq.n	8005ca6 <_strtod_l+0x286>
 8005bae:	f04f 0c00 	mov.w	ip, #0
 8005bb2:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8005bb6:	2909      	cmp	r1, #9
 8005bb8:	f240 8082 	bls.w	8005cc0 <_strtod_l+0x2a0>
 8005bbc:	9419      	str	r4, [sp, #100]	@ 0x64
 8005bbe:	f04f 0800 	mov.w	r8, #0
 8005bc2:	e0a2      	b.n	8005d0a <_strtod_l+0x2ea>
 8005bc4:	2300      	movs	r3, #0
 8005bc6:	e7c7      	b.n	8005b58 <_strtod_l+0x138>
 8005bc8:	2f08      	cmp	r7, #8
 8005bca:	bfd5      	itete	le
 8005bcc:	990a      	ldrle	r1, [sp, #40]	@ 0x28
 8005bce:	9908      	ldrgt	r1, [sp, #32]
 8005bd0:	fb02 3301 	mlale	r3, r2, r1, r3
 8005bd4:	fb02 3301 	mlagt	r3, r2, r1, r3
 8005bd8:	f100 0001 	add.w	r0, r0, #1
 8005bdc:	bfd4      	ite	le
 8005bde:	930a      	strle	r3, [sp, #40]	@ 0x28
 8005be0:	9308      	strgt	r3, [sp, #32]
 8005be2:	3701      	adds	r7, #1
 8005be4:	9019      	str	r0, [sp, #100]	@ 0x64
 8005be6:	e7bf      	b.n	8005b68 <_strtod_l+0x148>
 8005be8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	9219      	str	r2, [sp, #100]	@ 0x64
 8005bee:	785a      	ldrb	r2, [r3, #1]
 8005bf0:	b37f      	cbz	r7, 8005c52 <_strtod_l+0x232>
 8005bf2:	4681      	mov	r9, r0
 8005bf4:	463d      	mov	r5, r7
 8005bf6:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8005bfa:	2b09      	cmp	r3, #9
 8005bfc:	d912      	bls.n	8005c24 <_strtod_l+0x204>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e7c4      	b.n	8005b8c <_strtod_l+0x16c>
 8005c02:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c04:	1c5a      	adds	r2, r3, #1
 8005c06:	9219      	str	r2, [sp, #100]	@ 0x64
 8005c08:	785a      	ldrb	r2, [r3, #1]
 8005c0a:	3001      	adds	r0, #1
 8005c0c:	2a30      	cmp	r2, #48	@ 0x30
 8005c0e:	d0f8      	beq.n	8005c02 <_strtod_l+0x1e2>
 8005c10:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8005c14:	2b08      	cmp	r3, #8
 8005c16:	f200 84d3 	bhi.w	80065c0 <_strtod_l+0xba0>
 8005c1a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005c1c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005c1e:	4681      	mov	r9, r0
 8005c20:	2000      	movs	r0, #0
 8005c22:	4605      	mov	r5, r0
 8005c24:	3a30      	subs	r2, #48	@ 0x30
 8005c26:	f100 0301 	add.w	r3, r0, #1
 8005c2a:	d02a      	beq.n	8005c82 <_strtod_l+0x262>
 8005c2c:	4499      	add	r9, r3
 8005c2e:	eb00 0c05 	add.w	ip, r0, r5
 8005c32:	462b      	mov	r3, r5
 8005c34:	210a      	movs	r1, #10
 8005c36:	4563      	cmp	r3, ip
 8005c38:	d10d      	bne.n	8005c56 <_strtod_l+0x236>
 8005c3a:	1c69      	adds	r1, r5, #1
 8005c3c:	4401      	add	r1, r0
 8005c3e:	4428      	add	r0, r5
 8005c40:	2808      	cmp	r0, #8
 8005c42:	dc16      	bgt.n	8005c72 <_strtod_l+0x252>
 8005c44:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005c46:	230a      	movs	r3, #10
 8005c48:	fb03 2300 	mla	r3, r3, r0, r2
 8005c4c:	930a      	str	r3, [sp, #40]	@ 0x28
 8005c4e:	2300      	movs	r3, #0
 8005c50:	e018      	b.n	8005c84 <_strtod_l+0x264>
 8005c52:	4638      	mov	r0, r7
 8005c54:	e7da      	b.n	8005c0c <_strtod_l+0x1ec>
 8005c56:	2b08      	cmp	r3, #8
 8005c58:	f103 0301 	add.w	r3, r3, #1
 8005c5c:	dc03      	bgt.n	8005c66 <_strtod_l+0x246>
 8005c5e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8005c60:	434e      	muls	r6, r1
 8005c62:	960a      	str	r6, [sp, #40]	@ 0x28
 8005c64:	e7e7      	b.n	8005c36 <_strtod_l+0x216>
 8005c66:	2b10      	cmp	r3, #16
 8005c68:	bfde      	ittt	le
 8005c6a:	9e08      	ldrle	r6, [sp, #32]
 8005c6c:	434e      	mulle	r6, r1
 8005c6e:	9608      	strle	r6, [sp, #32]
 8005c70:	e7e1      	b.n	8005c36 <_strtod_l+0x216>
 8005c72:	280f      	cmp	r0, #15
 8005c74:	dceb      	bgt.n	8005c4e <_strtod_l+0x22e>
 8005c76:	9808      	ldr	r0, [sp, #32]
 8005c78:	230a      	movs	r3, #10
 8005c7a:	fb03 2300 	mla	r3, r3, r0, r2
 8005c7e:	9308      	str	r3, [sp, #32]
 8005c80:	e7e5      	b.n	8005c4e <_strtod_l+0x22e>
 8005c82:	4629      	mov	r1, r5
 8005c84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005c86:	1c50      	adds	r0, r2, #1
 8005c88:	9019      	str	r0, [sp, #100]	@ 0x64
 8005c8a:	7852      	ldrb	r2, [r2, #1]
 8005c8c:	4618      	mov	r0, r3
 8005c8e:	460d      	mov	r5, r1
 8005c90:	e7b1      	b.n	8005bf6 <_strtod_l+0x1d6>
 8005c92:	f04f 0900 	mov.w	r9, #0
 8005c96:	2301      	movs	r3, #1
 8005c98:	e77d      	b.n	8005b96 <_strtod_l+0x176>
 8005c9a:	f04f 0c00 	mov.w	ip, #0
 8005c9e:	1ca2      	adds	r2, r4, #2
 8005ca0:	9219      	str	r2, [sp, #100]	@ 0x64
 8005ca2:	78a2      	ldrb	r2, [r4, #2]
 8005ca4:	e785      	b.n	8005bb2 <_strtod_l+0x192>
 8005ca6:	f04f 0c01 	mov.w	ip, #1
 8005caa:	e7f8      	b.n	8005c9e <_strtod_l+0x27e>
 8005cac:	0800c6dc 	.word	0x0800c6dc
 8005cb0:	0800c6c4 	.word	0x0800c6c4
 8005cb4:	7ff00000 	.word	0x7ff00000
 8005cb8:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cba:	1c51      	adds	r1, r2, #1
 8005cbc:	9119      	str	r1, [sp, #100]	@ 0x64
 8005cbe:	7852      	ldrb	r2, [r2, #1]
 8005cc0:	2a30      	cmp	r2, #48	@ 0x30
 8005cc2:	d0f9      	beq.n	8005cb8 <_strtod_l+0x298>
 8005cc4:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8005cc8:	2908      	cmp	r1, #8
 8005cca:	f63f af78 	bhi.w	8005bbe <_strtod_l+0x19e>
 8005cce:	3a30      	subs	r2, #48	@ 0x30
 8005cd0:	920e      	str	r2, [sp, #56]	@ 0x38
 8005cd2:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cd4:	920f      	str	r2, [sp, #60]	@ 0x3c
 8005cd6:	f04f 080a 	mov.w	r8, #10
 8005cda:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8005cdc:	1c56      	adds	r6, r2, #1
 8005cde:	9619      	str	r6, [sp, #100]	@ 0x64
 8005ce0:	7852      	ldrb	r2, [r2, #1]
 8005ce2:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8005ce6:	f1be 0f09 	cmp.w	lr, #9
 8005cea:	d939      	bls.n	8005d60 <_strtod_l+0x340>
 8005cec:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8005cee:	1a76      	subs	r6, r6, r1
 8005cf0:	2e08      	cmp	r6, #8
 8005cf2:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8005cf6:	dc03      	bgt.n	8005d00 <_strtod_l+0x2e0>
 8005cf8:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005cfa:	4588      	cmp	r8, r1
 8005cfc:	bfa8      	it	ge
 8005cfe:	4688      	movge	r8, r1
 8005d00:	f1bc 0f00 	cmp.w	ip, #0
 8005d04:	d001      	beq.n	8005d0a <_strtod_l+0x2ea>
 8005d06:	f1c8 0800 	rsb	r8, r8, #0
 8005d0a:	2d00      	cmp	r5, #0
 8005d0c:	d14e      	bne.n	8005dac <_strtod_l+0x38c>
 8005d0e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005d10:	4308      	orrs	r0, r1
 8005d12:	f47f aebe 	bne.w	8005a92 <_strtod_l+0x72>
 8005d16:	2b00      	cmp	r3, #0
 8005d18:	f47f aed6 	bne.w	8005ac8 <_strtod_l+0xa8>
 8005d1c:	2a69      	cmp	r2, #105	@ 0x69
 8005d1e:	d028      	beq.n	8005d72 <_strtod_l+0x352>
 8005d20:	dc25      	bgt.n	8005d6e <_strtod_l+0x34e>
 8005d22:	2a49      	cmp	r2, #73	@ 0x49
 8005d24:	d025      	beq.n	8005d72 <_strtod_l+0x352>
 8005d26:	2a4e      	cmp	r2, #78	@ 0x4e
 8005d28:	f47f aece 	bne.w	8005ac8 <_strtod_l+0xa8>
 8005d2c:	499b      	ldr	r1, [pc, #620]	@ (8005f9c <_strtod_l+0x57c>)
 8005d2e:	a819      	add	r0, sp, #100	@ 0x64
 8005d30:	f002 fe72 	bl	8008a18 <__match>
 8005d34:	2800      	cmp	r0, #0
 8005d36:	f43f aec7 	beq.w	8005ac8 <_strtod_l+0xa8>
 8005d3a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d3c:	781b      	ldrb	r3, [r3, #0]
 8005d3e:	2b28      	cmp	r3, #40	@ 0x28
 8005d40:	d12e      	bne.n	8005da0 <_strtod_l+0x380>
 8005d42:	4997      	ldr	r1, [pc, #604]	@ (8005fa0 <_strtod_l+0x580>)
 8005d44:	aa1c      	add	r2, sp, #112	@ 0x70
 8005d46:	a819      	add	r0, sp, #100	@ 0x64
 8005d48:	f002 fe7a 	bl	8008a40 <__hexnan>
 8005d4c:	2805      	cmp	r0, #5
 8005d4e:	d127      	bne.n	8005da0 <_strtod_l+0x380>
 8005d50:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8005d52:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8005d56:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8005d5a:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8005d5e:	e698      	b.n	8005a92 <_strtod_l+0x72>
 8005d60:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8005d62:	fb08 2101 	mla	r1, r8, r1, r2
 8005d66:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8005d6a:	920e      	str	r2, [sp, #56]	@ 0x38
 8005d6c:	e7b5      	b.n	8005cda <_strtod_l+0x2ba>
 8005d6e:	2a6e      	cmp	r2, #110	@ 0x6e
 8005d70:	e7da      	b.n	8005d28 <_strtod_l+0x308>
 8005d72:	498c      	ldr	r1, [pc, #560]	@ (8005fa4 <_strtod_l+0x584>)
 8005d74:	a819      	add	r0, sp, #100	@ 0x64
 8005d76:	f002 fe4f 	bl	8008a18 <__match>
 8005d7a:	2800      	cmp	r0, #0
 8005d7c:	f43f aea4 	beq.w	8005ac8 <_strtod_l+0xa8>
 8005d80:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d82:	4989      	ldr	r1, [pc, #548]	@ (8005fa8 <_strtod_l+0x588>)
 8005d84:	3b01      	subs	r3, #1
 8005d86:	a819      	add	r0, sp, #100	@ 0x64
 8005d88:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d8a:	f002 fe45 	bl	8008a18 <__match>
 8005d8e:	b910      	cbnz	r0, 8005d96 <_strtod_l+0x376>
 8005d90:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8005d92:	3301      	adds	r3, #1
 8005d94:	9319      	str	r3, [sp, #100]	@ 0x64
 8005d96:	f8df b220 	ldr.w	fp, [pc, #544]	@ 8005fb8 <_strtod_l+0x598>
 8005d9a:	f04f 0a00 	mov.w	sl, #0
 8005d9e:	e678      	b.n	8005a92 <_strtod_l+0x72>
 8005da0:	4882      	ldr	r0, [pc, #520]	@ (8005fac <_strtod_l+0x58c>)
 8005da2:	f001 fced 	bl	8007780 <nan>
 8005da6:	ec5b ab10 	vmov	sl, fp, d0
 8005daa:	e672      	b.n	8005a92 <_strtod_l+0x72>
 8005dac:	eba8 0309 	sub.w	r3, r8, r9
 8005db0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005db2:	9309      	str	r3, [sp, #36]	@ 0x24
 8005db4:	2f00      	cmp	r7, #0
 8005db6:	bf08      	it	eq
 8005db8:	462f      	moveq	r7, r5
 8005dba:	2d10      	cmp	r5, #16
 8005dbc:	462c      	mov	r4, r5
 8005dbe:	bfa8      	it	ge
 8005dc0:	2410      	movge	r4, #16
 8005dc2:	f7fa fba7 	bl	8000514 <__aeabi_ui2d>
 8005dc6:	2d09      	cmp	r5, #9
 8005dc8:	4682      	mov	sl, r0
 8005dca:	468b      	mov	fp, r1
 8005dcc:	dc13      	bgt.n	8005df6 <_strtod_l+0x3d6>
 8005dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f43f ae5e 	beq.w	8005a92 <_strtod_l+0x72>
 8005dd6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dd8:	dd78      	ble.n	8005ecc <_strtod_l+0x4ac>
 8005dda:	2b16      	cmp	r3, #22
 8005ddc:	dc5f      	bgt.n	8005e9e <_strtod_l+0x47e>
 8005dde:	4974      	ldr	r1, [pc, #464]	@ (8005fb0 <_strtod_l+0x590>)
 8005de0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005de4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005de8:	4652      	mov	r2, sl
 8005dea:	465b      	mov	r3, fp
 8005dec:	f7fa fc0c 	bl	8000608 <__aeabi_dmul>
 8005df0:	4682      	mov	sl, r0
 8005df2:	468b      	mov	fp, r1
 8005df4:	e64d      	b.n	8005a92 <_strtod_l+0x72>
 8005df6:	4b6e      	ldr	r3, [pc, #440]	@ (8005fb0 <_strtod_l+0x590>)
 8005df8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005dfc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8005e00:	f7fa fc02 	bl	8000608 <__aeabi_dmul>
 8005e04:	4682      	mov	sl, r0
 8005e06:	9808      	ldr	r0, [sp, #32]
 8005e08:	468b      	mov	fp, r1
 8005e0a:	f7fa fb83 	bl	8000514 <__aeabi_ui2d>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4650      	mov	r0, sl
 8005e14:	4659      	mov	r1, fp
 8005e16:	f7fa fa41 	bl	800029c <__adddf3>
 8005e1a:	2d0f      	cmp	r5, #15
 8005e1c:	4682      	mov	sl, r0
 8005e1e:	468b      	mov	fp, r1
 8005e20:	ddd5      	ble.n	8005dce <_strtod_l+0x3ae>
 8005e22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005e24:	1b2c      	subs	r4, r5, r4
 8005e26:	441c      	add	r4, r3
 8005e28:	2c00      	cmp	r4, #0
 8005e2a:	f340 8096 	ble.w	8005f5a <_strtod_l+0x53a>
 8005e2e:	f014 030f 	ands.w	r3, r4, #15
 8005e32:	d00a      	beq.n	8005e4a <_strtod_l+0x42a>
 8005e34:	495e      	ldr	r1, [pc, #376]	@ (8005fb0 <_strtod_l+0x590>)
 8005e36:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8005e3a:	4652      	mov	r2, sl
 8005e3c:	465b      	mov	r3, fp
 8005e3e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005e42:	f7fa fbe1 	bl	8000608 <__aeabi_dmul>
 8005e46:	4682      	mov	sl, r0
 8005e48:	468b      	mov	fp, r1
 8005e4a:	f034 040f 	bics.w	r4, r4, #15
 8005e4e:	d073      	beq.n	8005f38 <_strtod_l+0x518>
 8005e50:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8005e54:	dd48      	ble.n	8005ee8 <_strtod_l+0x4c8>
 8005e56:	2400      	movs	r4, #0
 8005e58:	46a0      	mov	r8, r4
 8005e5a:	940a      	str	r4, [sp, #40]	@ 0x28
 8005e5c:	46a1      	mov	r9, r4
 8005e5e:	9a05      	ldr	r2, [sp, #20]
 8005e60:	f8df b154 	ldr.w	fp, [pc, #340]	@ 8005fb8 <_strtod_l+0x598>
 8005e64:	2322      	movs	r3, #34	@ 0x22
 8005e66:	6013      	str	r3, [r2, #0]
 8005e68:	f04f 0a00 	mov.w	sl, #0
 8005e6c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	f43f ae0f 	beq.w	8005a92 <_strtod_l+0x72>
 8005e74:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8005e76:	9805      	ldr	r0, [sp, #20]
 8005e78:	f002 ff86 	bl	8008d88 <_Bfree>
 8005e7c:	9805      	ldr	r0, [sp, #20]
 8005e7e:	4649      	mov	r1, r9
 8005e80:	f002 ff82 	bl	8008d88 <_Bfree>
 8005e84:	9805      	ldr	r0, [sp, #20]
 8005e86:	4641      	mov	r1, r8
 8005e88:	f002 ff7e 	bl	8008d88 <_Bfree>
 8005e8c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005e8e:	9805      	ldr	r0, [sp, #20]
 8005e90:	f002 ff7a 	bl	8008d88 <_Bfree>
 8005e94:	9805      	ldr	r0, [sp, #20]
 8005e96:	4621      	mov	r1, r4
 8005e98:	f002 ff76 	bl	8008d88 <_Bfree>
 8005e9c:	e5f9      	b.n	8005a92 <_strtod_l+0x72>
 8005e9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005ea0:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8005ea4:	4293      	cmp	r3, r2
 8005ea6:	dbbc      	blt.n	8005e22 <_strtod_l+0x402>
 8005ea8:	4c41      	ldr	r4, [pc, #260]	@ (8005fb0 <_strtod_l+0x590>)
 8005eaa:	f1c5 050f 	rsb	r5, r5, #15
 8005eae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8005eb2:	4652      	mov	r2, sl
 8005eb4:	465b      	mov	r3, fp
 8005eb6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005eba:	f7fa fba5 	bl	8000608 <__aeabi_dmul>
 8005ebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005ec0:	1b5d      	subs	r5, r3, r5
 8005ec2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8005ec6:	e9d4 2300 	ldrd	r2, r3, [r4]
 8005eca:	e78f      	b.n	8005dec <_strtod_l+0x3cc>
 8005ecc:	3316      	adds	r3, #22
 8005ece:	dba8      	blt.n	8005e22 <_strtod_l+0x402>
 8005ed0:	4b37      	ldr	r3, [pc, #220]	@ (8005fb0 <_strtod_l+0x590>)
 8005ed2:	eba9 0808 	sub.w	r8, r9, r8
 8005ed6:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8005eda:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005ede:	4650      	mov	r0, sl
 8005ee0:	4659      	mov	r1, fp
 8005ee2:	f7fa fcbb 	bl	800085c <__aeabi_ddiv>
 8005ee6:	e783      	b.n	8005df0 <_strtod_l+0x3d0>
 8005ee8:	4b32      	ldr	r3, [pc, #200]	@ (8005fb4 <_strtod_l+0x594>)
 8005eea:	9308      	str	r3, [sp, #32]
 8005eec:	2300      	movs	r3, #0
 8005eee:	1124      	asrs	r4, r4, #4
 8005ef0:	4650      	mov	r0, sl
 8005ef2:	4659      	mov	r1, fp
 8005ef4:	461e      	mov	r6, r3
 8005ef6:	2c01      	cmp	r4, #1
 8005ef8:	dc21      	bgt.n	8005f3e <_strtod_l+0x51e>
 8005efa:	b10b      	cbz	r3, 8005f00 <_strtod_l+0x4e0>
 8005efc:	4682      	mov	sl, r0
 8005efe:	468b      	mov	fp, r1
 8005f00:	492c      	ldr	r1, [pc, #176]	@ (8005fb4 <_strtod_l+0x594>)
 8005f02:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8005f06:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8005f0a:	4652      	mov	r2, sl
 8005f0c:	465b      	mov	r3, fp
 8005f0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f12:	f7fa fb79 	bl	8000608 <__aeabi_dmul>
 8005f16:	4b28      	ldr	r3, [pc, #160]	@ (8005fb8 <_strtod_l+0x598>)
 8005f18:	460a      	mov	r2, r1
 8005f1a:	400b      	ands	r3, r1
 8005f1c:	4927      	ldr	r1, [pc, #156]	@ (8005fbc <_strtod_l+0x59c>)
 8005f1e:	428b      	cmp	r3, r1
 8005f20:	4682      	mov	sl, r0
 8005f22:	d898      	bhi.n	8005e56 <_strtod_l+0x436>
 8005f24:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8005f28:	428b      	cmp	r3, r1
 8005f2a:	bf86      	itte	hi
 8005f2c:	f8df b090 	ldrhi.w	fp, [pc, #144]	@ 8005fc0 <_strtod_l+0x5a0>
 8005f30:	f04f 3aff 	movhi.w	sl, #4294967295
 8005f34:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8005f38:	2300      	movs	r3, #0
 8005f3a:	9308      	str	r3, [sp, #32]
 8005f3c:	e07a      	b.n	8006034 <_strtod_l+0x614>
 8005f3e:	07e2      	lsls	r2, r4, #31
 8005f40:	d505      	bpl.n	8005f4e <_strtod_l+0x52e>
 8005f42:	9b08      	ldr	r3, [sp, #32]
 8005f44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f48:	f7fa fb5e 	bl	8000608 <__aeabi_dmul>
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	9a08      	ldr	r2, [sp, #32]
 8005f50:	3208      	adds	r2, #8
 8005f52:	3601      	adds	r6, #1
 8005f54:	1064      	asrs	r4, r4, #1
 8005f56:	9208      	str	r2, [sp, #32]
 8005f58:	e7cd      	b.n	8005ef6 <_strtod_l+0x4d6>
 8005f5a:	d0ed      	beq.n	8005f38 <_strtod_l+0x518>
 8005f5c:	4264      	negs	r4, r4
 8005f5e:	f014 020f 	ands.w	r2, r4, #15
 8005f62:	d00a      	beq.n	8005f7a <_strtod_l+0x55a>
 8005f64:	4b12      	ldr	r3, [pc, #72]	@ (8005fb0 <_strtod_l+0x590>)
 8005f66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005f6a:	4650      	mov	r0, sl
 8005f6c:	4659      	mov	r1, fp
 8005f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f72:	f7fa fc73 	bl	800085c <__aeabi_ddiv>
 8005f76:	4682      	mov	sl, r0
 8005f78:	468b      	mov	fp, r1
 8005f7a:	1124      	asrs	r4, r4, #4
 8005f7c:	d0dc      	beq.n	8005f38 <_strtod_l+0x518>
 8005f7e:	2c1f      	cmp	r4, #31
 8005f80:	dd20      	ble.n	8005fc4 <_strtod_l+0x5a4>
 8005f82:	2400      	movs	r4, #0
 8005f84:	46a0      	mov	r8, r4
 8005f86:	940a      	str	r4, [sp, #40]	@ 0x28
 8005f88:	46a1      	mov	r9, r4
 8005f8a:	9a05      	ldr	r2, [sp, #20]
 8005f8c:	2322      	movs	r3, #34	@ 0x22
 8005f8e:	f04f 0a00 	mov.w	sl, #0
 8005f92:	f04f 0b00 	mov.w	fp, #0
 8005f96:	6013      	str	r3, [r2, #0]
 8005f98:	e768      	b.n	8005e6c <_strtod_l+0x44c>
 8005f9a:	bf00      	nop
 8005f9c:	0800c725 	.word	0x0800c725
 8005fa0:	0800c6c8 	.word	0x0800c6c8
 8005fa4:	0800c71d 	.word	0x0800c71d
 8005fa8:	0800c807 	.word	0x0800c807
 8005fac:	0800c803 	.word	0x0800c803
 8005fb0:	0800c968 	.word	0x0800c968
 8005fb4:	0800c940 	.word	0x0800c940
 8005fb8:	7ff00000 	.word	0x7ff00000
 8005fbc:	7ca00000 	.word	0x7ca00000
 8005fc0:	7fefffff 	.word	0x7fefffff
 8005fc4:	f014 0310 	ands.w	r3, r4, #16
 8005fc8:	bf18      	it	ne
 8005fca:	236a      	movne	r3, #106	@ 0x6a
 8005fcc:	4ea9      	ldr	r6, [pc, #676]	@ (8006274 <_strtod_l+0x854>)
 8005fce:	9308      	str	r3, [sp, #32]
 8005fd0:	4650      	mov	r0, sl
 8005fd2:	4659      	mov	r1, fp
 8005fd4:	2300      	movs	r3, #0
 8005fd6:	07e2      	lsls	r2, r4, #31
 8005fd8:	d504      	bpl.n	8005fe4 <_strtod_l+0x5c4>
 8005fda:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005fde:	f7fa fb13 	bl	8000608 <__aeabi_dmul>
 8005fe2:	2301      	movs	r3, #1
 8005fe4:	1064      	asrs	r4, r4, #1
 8005fe6:	f106 0608 	add.w	r6, r6, #8
 8005fea:	d1f4      	bne.n	8005fd6 <_strtod_l+0x5b6>
 8005fec:	b10b      	cbz	r3, 8005ff2 <_strtod_l+0x5d2>
 8005fee:	4682      	mov	sl, r0
 8005ff0:	468b      	mov	fp, r1
 8005ff2:	9b08      	ldr	r3, [sp, #32]
 8005ff4:	b1b3      	cbz	r3, 8006024 <_strtod_l+0x604>
 8005ff6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8005ffa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	4659      	mov	r1, fp
 8006002:	dd0f      	ble.n	8006024 <_strtod_l+0x604>
 8006004:	2b1f      	cmp	r3, #31
 8006006:	dd55      	ble.n	80060b4 <_strtod_l+0x694>
 8006008:	2b34      	cmp	r3, #52	@ 0x34
 800600a:	bfde      	ittt	le
 800600c:	f04f 33ff 	movle.w	r3, #4294967295
 8006010:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8006014:	4093      	lslle	r3, r2
 8006016:	f04f 0a00 	mov.w	sl, #0
 800601a:	bfcc      	ite	gt
 800601c:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8006020:	ea03 0b01 	andle.w	fp, r3, r1
 8006024:	2200      	movs	r2, #0
 8006026:	2300      	movs	r3, #0
 8006028:	4650      	mov	r0, sl
 800602a:	4659      	mov	r1, fp
 800602c:	f7fa fd54 	bl	8000ad8 <__aeabi_dcmpeq>
 8006030:	2800      	cmp	r0, #0
 8006032:	d1a6      	bne.n	8005f82 <_strtod_l+0x562>
 8006034:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006036:	9300      	str	r3, [sp, #0]
 8006038:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800603a:	9805      	ldr	r0, [sp, #20]
 800603c:	462b      	mov	r3, r5
 800603e:	463a      	mov	r2, r7
 8006040:	f002 ff0a 	bl	8008e58 <__s2b>
 8006044:	900a      	str	r0, [sp, #40]	@ 0x28
 8006046:	2800      	cmp	r0, #0
 8006048:	f43f af05 	beq.w	8005e56 <_strtod_l+0x436>
 800604c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800604e:	2a00      	cmp	r2, #0
 8006050:	eba9 0308 	sub.w	r3, r9, r8
 8006054:	bfa8      	it	ge
 8006056:	2300      	movge	r3, #0
 8006058:	9312      	str	r3, [sp, #72]	@ 0x48
 800605a:	2400      	movs	r4, #0
 800605c:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8006060:	9316      	str	r3, [sp, #88]	@ 0x58
 8006062:	46a0      	mov	r8, r4
 8006064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006066:	9805      	ldr	r0, [sp, #20]
 8006068:	6859      	ldr	r1, [r3, #4]
 800606a:	f002 fe4d 	bl	8008d08 <_Balloc>
 800606e:	4681      	mov	r9, r0
 8006070:	2800      	cmp	r0, #0
 8006072:	f43f aef4 	beq.w	8005e5e <_strtod_l+0x43e>
 8006076:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	3202      	adds	r2, #2
 800607c:	f103 010c 	add.w	r1, r3, #12
 8006080:	0092      	lsls	r2, r2, #2
 8006082:	300c      	adds	r0, #12
 8006084:	f001 fb6d 	bl	8007762 <memcpy>
 8006088:	ec4b ab10 	vmov	d0, sl, fp
 800608c:	9805      	ldr	r0, [sp, #20]
 800608e:	aa1c      	add	r2, sp, #112	@ 0x70
 8006090:	a91b      	add	r1, sp, #108	@ 0x6c
 8006092:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8006096:	f003 fa1b 	bl	80094d0 <__d2b>
 800609a:	901a      	str	r0, [sp, #104]	@ 0x68
 800609c:	2800      	cmp	r0, #0
 800609e:	f43f aede 	beq.w	8005e5e <_strtod_l+0x43e>
 80060a2:	9805      	ldr	r0, [sp, #20]
 80060a4:	2101      	movs	r1, #1
 80060a6:	f002 ff6d 	bl	8008f84 <__i2b>
 80060aa:	4680      	mov	r8, r0
 80060ac:	b948      	cbnz	r0, 80060c2 <_strtod_l+0x6a2>
 80060ae:	f04f 0800 	mov.w	r8, #0
 80060b2:	e6d4      	b.n	8005e5e <_strtod_l+0x43e>
 80060b4:	f04f 32ff 	mov.w	r2, #4294967295
 80060b8:	fa02 f303 	lsl.w	r3, r2, r3
 80060bc:	ea03 0a0a 	and.w	sl, r3, sl
 80060c0:	e7b0      	b.n	8006024 <_strtod_l+0x604>
 80060c2:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 80060c4:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 80060c6:	2d00      	cmp	r5, #0
 80060c8:	bfab      	itete	ge
 80060ca:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 80060cc:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 80060ce:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 80060d0:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 80060d2:	bfac      	ite	ge
 80060d4:	18ef      	addge	r7, r5, r3
 80060d6:	1b5e      	sublt	r6, r3, r5
 80060d8:	9b08      	ldr	r3, [sp, #32]
 80060da:	1aed      	subs	r5, r5, r3
 80060dc:	4415      	add	r5, r2
 80060de:	4b66      	ldr	r3, [pc, #408]	@ (8006278 <_strtod_l+0x858>)
 80060e0:	3d01      	subs	r5, #1
 80060e2:	429d      	cmp	r5, r3
 80060e4:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 80060e8:	da50      	bge.n	800618c <_strtod_l+0x76c>
 80060ea:	1b5b      	subs	r3, r3, r5
 80060ec:	2b1f      	cmp	r3, #31
 80060ee:	eba2 0203 	sub.w	r2, r2, r3
 80060f2:	f04f 0101 	mov.w	r1, #1
 80060f6:	dc3d      	bgt.n	8006174 <_strtod_l+0x754>
 80060f8:	fa01 f303 	lsl.w	r3, r1, r3
 80060fc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80060fe:	2300      	movs	r3, #0
 8006100:	9310      	str	r3, [sp, #64]	@ 0x40
 8006102:	18bd      	adds	r5, r7, r2
 8006104:	9b08      	ldr	r3, [sp, #32]
 8006106:	42af      	cmp	r7, r5
 8006108:	4416      	add	r6, r2
 800610a:	441e      	add	r6, r3
 800610c:	463b      	mov	r3, r7
 800610e:	bfa8      	it	ge
 8006110:	462b      	movge	r3, r5
 8006112:	42b3      	cmp	r3, r6
 8006114:	bfa8      	it	ge
 8006116:	4633      	movge	r3, r6
 8006118:	2b00      	cmp	r3, #0
 800611a:	bfc2      	ittt	gt
 800611c:	1aed      	subgt	r5, r5, r3
 800611e:	1af6      	subgt	r6, r6, r3
 8006120:	1aff      	subgt	r7, r7, r3
 8006122:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006124:	2b00      	cmp	r3, #0
 8006126:	dd16      	ble.n	8006156 <_strtod_l+0x736>
 8006128:	4641      	mov	r1, r8
 800612a:	9805      	ldr	r0, [sp, #20]
 800612c:	461a      	mov	r2, r3
 800612e:	f002 ffe9 	bl	8009104 <__pow5mult>
 8006132:	4680      	mov	r8, r0
 8006134:	2800      	cmp	r0, #0
 8006136:	d0ba      	beq.n	80060ae <_strtod_l+0x68e>
 8006138:	4601      	mov	r1, r0
 800613a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800613c:	9805      	ldr	r0, [sp, #20]
 800613e:	f002 ff37 	bl	8008fb0 <__multiply>
 8006142:	900e      	str	r0, [sp, #56]	@ 0x38
 8006144:	2800      	cmp	r0, #0
 8006146:	f43f ae8a 	beq.w	8005e5e <_strtod_l+0x43e>
 800614a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800614c:	9805      	ldr	r0, [sp, #20]
 800614e:	f002 fe1b 	bl	8008d88 <_Bfree>
 8006152:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006154:	931a      	str	r3, [sp, #104]	@ 0x68
 8006156:	2d00      	cmp	r5, #0
 8006158:	dc1d      	bgt.n	8006196 <_strtod_l+0x776>
 800615a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800615c:	2b00      	cmp	r3, #0
 800615e:	dd23      	ble.n	80061a8 <_strtod_l+0x788>
 8006160:	4649      	mov	r1, r9
 8006162:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8006164:	9805      	ldr	r0, [sp, #20]
 8006166:	f002 ffcd 	bl	8009104 <__pow5mult>
 800616a:	4681      	mov	r9, r0
 800616c:	b9e0      	cbnz	r0, 80061a8 <_strtod_l+0x788>
 800616e:	f04f 0900 	mov.w	r9, #0
 8006172:	e674      	b.n	8005e5e <_strtod_l+0x43e>
 8006174:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 8006178:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800617c:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8006180:	35e2      	adds	r5, #226	@ 0xe2
 8006182:	fa01 f305 	lsl.w	r3, r1, r5
 8006186:	9310      	str	r3, [sp, #64]	@ 0x40
 8006188:	9113      	str	r1, [sp, #76]	@ 0x4c
 800618a:	e7ba      	b.n	8006102 <_strtod_l+0x6e2>
 800618c:	2300      	movs	r3, #0
 800618e:	9310      	str	r3, [sp, #64]	@ 0x40
 8006190:	2301      	movs	r3, #1
 8006192:	9313      	str	r3, [sp, #76]	@ 0x4c
 8006194:	e7b5      	b.n	8006102 <_strtod_l+0x6e2>
 8006196:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006198:	9805      	ldr	r0, [sp, #20]
 800619a:	462a      	mov	r2, r5
 800619c:	f003 f80c 	bl	80091b8 <__lshift>
 80061a0:	901a      	str	r0, [sp, #104]	@ 0x68
 80061a2:	2800      	cmp	r0, #0
 80061a4:	d1d9      	bne.n	800615a <_strtod_l+0x73a>
 80061a6:	e65a      	b.n	8005e5e <_strtod_l+0x43e>
 80061a8:	2e00      	cmp	r6, #0
 80061aa:	dd07      	ble.n	80061bc <_strtod_l+0x79c>
 80061ac:	4649      	mov	r1, r9
 80061ae:	9805      	ldr	r0, [sp, #20]
 80061b0:	4632      	mov	r2, r6
 80061b2:	f003 f801 	bl	80091b8 <__lshift>
 80061b6:	4681      	mov	r9, r0
 80061b8:	2800      	cmp	r0, #0
 80061ba:	d0d8      	beq.n	800616e <_strtod_l+0x74e>
 80061bc:	2f00      	cmp	r7, #0
 80061be:	dd08      	ble.n	80061d2 <_strtod_l+0x7b2>
 80061c0:	4641      	mov	r1, r8
 80061c2:	9805      	ldr	r0, [sp, #20]
 80061c4:	463a      	mov	r2, r7
 80061c6:	f002 fff7 	bl	80091b8 <__lshift>
 80061ca:	4680      	mov	r8, r0
 80061cc:	2800      	cmp	r0, #0
 80061ce:	f43f ae46 	beq.w	8005e5e <_strtod_l+0x43e>
 80061d2:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80061d4:	9805      	ldr	r0, [sp, #20]
 80061d6:	464a      	mov	r2, r9
 80061d8:	f003 f876 	bl	80092c8 <__mdiff>
 80061dc:	4604      	mov	r4, r0
 80061de:	2800      	cmp	r0, #0
 80061e0:	f43f ae3d 	beq.w	8005e5e <_strtod_l+0x43e>
 80061e4:	68c3      	ldr	r3, [r0, #12]
 80061e6:	930f      	str	r3, [sp, #60]	@ 0x3c
 80061e8:	2300      	movs	r3, #0
 80061ea:	60c3      	str	r3, [r0, #12]
 80061ec:	4641      	mov	r1, r8
 80061ee:	f003 f84f 	bl	8009290 <__mcmp>
 80061f2:	2800      	cmp	r0, #0
 80061f4:	da46      	bge.n	8006284 <_strtod_l+0x864>
 80061f6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80061f8:	ea53 030a 	orrs.w	r3, r3, sl
 80061fc:	d16c      	bne.n	80062d8 <_strtod_l+0x8b8>
 80061fe:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006202:	2b00      	cmp	r3, #0
 8006204:	d168      	bne.n	80062d8 <_strtod_l+0x8b8>
 8006206:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800620a:	0d1b      	lsrs	r3, r3, #20
 800620c:	051b      	lsls	r3, r3, #20
 800620e:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006212:	d961      	bls.n	80062d8 <_strtod_l+0x8b8>
 8006214:	6963      	ldr	r3, [r4, #20]
 8006216:	b913      	cbnz	r3, 800621e <_strtod_l+0x7fe>
 8006218:	6923      	ldr	r3, [r4, #16]
 800621a:	2b01      	cmp	r3, #1
 800621c:	dd5c      	ble.n	80062d8 <_strtod_l+0x8b8>
 800621e:	4621      	mov	r1, r4
 8006220:	2201      	movs	r2, #1
 8006222:	9805      	ldr	r0, [sp, #20]
 8006224:	f002 ffc8 	bl	80091b8 <__lshift>
 8006228:	4641      	mov	r1, r8
 800622a:	4604      	mov	r4, r0
 800622c:	f003 f830 	bl	8009290 <__mcmp>
 8006230:	2800      	cmp	r0, #0
 8006232:	dd51      	ble.n	80062d8 <_strtod_l+0x8b8>
 8006234:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006238:	9a08      	ldr	r2, [sp, #32]
 800623a:	0d1b      	lsrs	r3, r3, #20
 800623c:	051b      	lsls	r3, r3, #20
 800623e:	2a00      	cmp	r2, #0
 8006240:	d06b      	beq.n	800631a <_strtod_l+0x8fa>
 8006242:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 8006246:	d868      	bhi.n	800631a <_strtod_l+0x8fa>
 8006248:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800624c:	f67f ae9d 	bls.w	8005f8a <_strtod_l+0x56a>
 8006250:	4b0a      	ldr	r3, [pc, #40]	@ (800627c <_strtod_l+0x85c>)
 8006252:	4650      	mov	r0, sl
 8006254:	4659      	mov	r1, fp
 8006256:	2200      	movs	r2, #0
 8006258:	f7fa f9d6 	bl	8000608 <__aeabi_dmul>
 800625c:	4b08      	ldr	r3, [pc, #32]	@ (8006280 <_strtod_l+0x860>)
 800625e:	400b      	ands	r3, r1
 8006260:	4682      	mov	sl, r0
 8006262:	468b      	mov	fp, r1
 8006264:	2b00      	cmp	r3, #0
 8006266:	f47f ae05 	bne.w	8005e74 <_strtod_l+0x454>
 800626a:	9a05      	ldr	r2, [sp, #20]
 800626c:	2322      	movs	r3, #34	@ 0x22
 800626e:	6013      	str	r3, [r2, #0]
 8006270:	e600      	b.n	8005e74 <_strtod_l+0x454>
 8006272:	bf00      	nop
 8006274:	0800c6f0 	.word	0x0800c6f0
 8006278:	fffffc02 	.word	0xfffffc02
 800627c:	39500000 	.word	0x39500000
 8006280:	7ff00000 	.word	0x7ff00000
 8006284:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006288:	d165      	bne.n	8006356 <_strtod_l+0x936>
 800628a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800628c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8006290:	b35a      	cbz	r2, 80062ea <_strtod_l+0x8ca>
 8006292:	4a9f      	ldr	r2, [pc, #636]	@ (8006510 <_strtod_l+0xaf0>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d12b      	bne.n	80062f0 <_strtod_l+0x8d0>
 8006298:	9b08      	ldr	r3, [sp, #32]
 800629a:	4651      	mov	r1, sl
 800629c:	b303      	cbz	r3, 80062e0 <_strtod_l+0x8c0>
 800629e:	4b9d      	ldr	r3, [pc, #628]	@ (8006514 <_strtod_l+0xaf4>)
 80062a0:	465a      	mov	r2, fp
 80062a2:	4013      	ands	r3, r2
 80062a4:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 80062a8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ac:	d81b      	bhi.n	80062e6 <_strtod_l+0x8c6>
 80062ae:	0d1b      	lsrs	r3, r3, #20
 80062b0:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80062b4:	fa02 f303 	lsl.w	r3, r2, r3
 80062b8:	4299      	cmp	r1, r3
 80062ba:	d119      	bne.n	80062f0 <_strtod_l+0x8d0>
 80062bc:	4b96      	ldr	r3, [pc, #600]	@ (8006518 <_strtod_l+0xaf8>)
 80062be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d102      	bne.n	80062ca <_strtod_l+0x8aa>
 80062c4:	3101      	adds	r1, #1
 80062c6:	f43f adca 	beq.w	8005e5e <_strtod_l+0x43e>
 80062ca:	4b92      	ldr	r3, [pc, #584]	@ (8006514 <_strtod_l+0xaf4>)
 80062cc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062ce:	401a      	ands	r2, r3
 80062d0:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 80062d4:	f04f 0a00 	mov.w	sl, #0
 80062d8:	9b08      	ldr	r3, [sp, #32]
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d1b8      	bne.n	8006250 <_strtod_l+0x830>
 80062de:	e5c9      	b.n	8005e74 <_strtod_l+0x454>
 80062e0:	f04f 33ff 	mov.w	r3, #4294967295
 80062e4:	e7e8      	b.n	80062b8 <_strtod_l+0x898>
 80062e6:	4613      	mov	r3, r2
 80062e8:	e7e6      	b.n	80062b8 <_strtod_l+0x898>
 80062ea:	ea53 030a 	orrs.w	r3, r3, sl
 80062ee:	d0a1      	beq.n	8006234 <_strtod_l+0x814>
 80062f0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80062f2:	b1db      	cbz	r3, 800632c <_strtod_l+0x90c>
 80062f4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80062f6:	4213      	tst	r3, r2
 80062f8:	d0ee      	beq.n	80062d8 <_strtod_l+0x8b8>
 80062fa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80062fc:	9a08      	ldr	r2, [sp, #32]
 80062fe:	4650      	mov	r0, sl
 8006300:	4659      	mov	r1, fp
 8006302:	b1bb      	cbz	r3, 8006334 <_strtod_l+0x914>
 8006304:	f7ff fb6b 	bl	80059de <sulp>
 8006308:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800630c:	ec53 2b10 	vmov	r2, r3, d0
 8006310:	f7f9 ffc4 	bl	800029c <__adddf3>
 8006314:	4682      	mov	sl, r0
 8006316:	468b      	mov	fp, r1
 8006318:	e7de      	b.n	80062d8 <_strtod_l+0x8b8>
 800631a:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800631e:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8006322:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8006326:	f04f 3aff 	mov.w	sl, #4294967295
 800632a:	e7d5      	b.n	80062d8 <_strtod_l+0x8b8>
 800632c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800632e:	ea13 0f0a 	tst.w	r3, sl
 8006332:	e7e1      	b.n	80062f8 <_strtod_l+0x8d8>
 8006334:	f7ff fb53 	bl	80059de <sulp>
 8006338:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800633c:	ec53 2b10 	vmov	r2, r3, d0
 8006340:	f7f9 ffaa 	bl	8000298 <__aeabi_dsub>
 8006344:	2200      	movs	r2, #0
 8006346:	2300      	movs	r3, #0
 8006348:	4682      	mov	sl, r0
 800634a:	468b      	mov	fp, r1
 800634c:	f7fa fbc4 	bl	8000ad8 <__aeabi_dcmpeq>
 8006350:	2800      	cmp	r0, #0
 8006352:	d0c1      	beq.n	80062d8 <_strtod_l+0x8b8>
 8006354:	e619      	b.n	8005f8a <_strtod_l+0x56a>
 8006356:	4641      	mov	r1, r8
 8006358:	4620      	mov	r0, r4
 800635a:	f003 f911 	bl	8009580 <__ratio>
 800635e:	ec57 6b10 	vmov	r6, r7, d0
 8006362:	2200      	movs	r2, #0
 8006364:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8006368:	4630      	mov	r0, r6
 800636a:	4639      	mov	r1, r7
 800636c:	f7fa fbc8 	bl	8000b00 <__aeabi_dcmple>
 8006370:	2800      	cmp	r0, #0
 8006372:	d06f      	beq.n	8006454 <_strtod_l+0xa34>
 8006374:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006376:	2b00      	cmp	r3, #0
 8006378:	d17a      	bne.n	8006470 <_strtod_l+0xa50>
 800637a:	f1ba 0f00 	cmp.w	sl, #0
 800637e:	d158      	bne.n	8006432 <_strtod_l+0xa12>
 8006380:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006382:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006386:	2b00      	cmp	r3, #0
 8006388:	d15a      	bne.n	8006440 <_strtod_l+0xa20>
 800638a:	4b64      	ldr	r3, [pc, #400]	@ (800651c <_strtod_l+0xafc>)
 800638c:	2200      	movs	r2, #0
 800638e:	4630      	mov	r0, r6
 8006390:	4639      	mov	r1, r7
 8006392:	f7fa fbab 	bl	8000aec <__aeabi_dcmplt>
 8006396:	2800      	cmp	r0, #0
 8006398:	d159      	bne.n	800644e <_strtod_l+0xa2e>
 800639a:	4630      	mov	r0, r6
 800639c:	4639      	mov	r1, r7
 800639e:	4b60      	ldr	r3, [pc, #384]	@ (8006520 <_strtod_l+0xb00>)
 80063a0:	2200      	movs	r2, #0
 80063a2:	f7fa f931 	bl	8000608 <__aeabi_dmul>
 80063a6:	4606      	mov	r6, r0
 80063a8:	460f      	mov	r7, r1
 80063aa:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 80063ae:	9606      	str	r6, [sp, #24]
 80063b0:	9307      	str	r3, [sp, #28]
 80063b2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063b6:	4d57      	ldr	r5, [pc, #348]	@ (8006514 <_strtod_l+0xaf4>)
 80063b8:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 80063bc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063be:	401d      	ands	r5, r3
 80063c0:	4b58      	ldr	r3, [pc, #352]	@ (8006524 <_strtod_l+0xb04>)
 80063c2:	429d      	cmp	r5, r3
 80063c4:	f040 80b2 	bne.w	800652c <_strtod_l+0xb0c>
 80063c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80063ca:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 80063ce:	ec4b ab10 	vmov	d0, sl, fp
 80063d2:	f003 f80d 	bl	80093f0 <__ulp>
 80063d6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80063da:	ec51 0b10 	vmov	r0, r1, d0
 80063de:	f7fa f913 	bl	8000608 <__aeabi_dmul>
 80063e2:	4652      	mov	r2, sl
 80063e4:	465b      	mov	r3, fp
 80063e6:	f7f9 ff59 	bl	800029c <__adddf3>
 80063ea:	460b      	mov	r3, r1
 80063ec:	4949      	ldr	r1, [pc, #292]	@ (8006514 <_strtod_l+0xaf4>)
 80063ee:	4a4e      	ldr	r2, [pc, #312]	@ (8006528 <_strtod_l+0xb08>)
 80063f0:	4019      	ands	r1, r3
 80063f2:	4291      	cmp	r1, r2
 80063f4:	4682      	mov	sl, r0
 80063f6:	d942      	bls.n	800647e <_strtod_l+0xa5e>
 80063f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80063fa:	4b47      	ldr	r3, [pc, #284]	@ (8006518 <_strtod_l+0xaf8>)
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d103      	bne.n	8006408 <_strtod_l+0x9e8>
 8006400:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8006402:	3301      	adds	r3, #1
 8006404:	f43f ad2b 	beq.w	8005e5e <_strtod_l+0x43e>
 8006408:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8006518 <_strtod_l+0xaf8>
 800640c:	f04f 3aff 	mov.w	sl, #4294967295
 8006410:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8006412:	9805      	ldr	r0, [sp, #20]
 8006414:	f002 fcb8 	bl	8008d88 <_Bfree>
 8006418:	9805      	ldr	r0, [sp, #20]
 800641a:	4649      	mov	r1, r9
 800641c:	f002 fcb4 	bl	8008d88 <_Bfree>
 8006420:	9805      	ldr	r0, [sp, #20]
 8006422:	4641      	mov	r1, r8
 8006424:	f002 fcb0 	bl	8008d88 <_Bfree>
 8006428:	9805      	ldr	r0, [sp, #20]
 800642a:	4621      	mov	r1, r4
 800642c:	f002 fcac 	bl	8008d88 <_Bfree>
 8006430:	e618      	b.n	8006064 <_strtod_l+0x644>
 8006432:	f1ba 0f01 	cmp.w	sl, #1
 8006436:	d103      	bne.n	8006440 <_strtod_l+0xa20>
 8006438:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800643a:	2b00      	cmp	r3, #0
 800643c:	f43f ada5 	beq.w	8005f8a <_strtod_l+0x56a>
 8006440:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 80064f0 <_strtod_l+0xad0>
 8006444:	4f35      	ldr	r7, [pc, #212]	@ (800651c <_strtod_l+0xafc>)
 8006446:	ed8d 7b06 	vstr	d7, [sp, #24]
 800644a:	2600      	movs	r6, #0
 800644c:	e7b1      	b.n	80063b2 <_strtod_l+0x992>
 800644e:	4f34      	ldr	r7, [pc, #208]	@ (8006520 <_strtod_l+0xb00>)
 8006450:	2600      	movs	r6, #0
 8006452:	e7aa      	b.n	80063aa <_strtod_l+0x98a>
 8006454:	4b32      	ldr	r3, [pc, #200]	@ (8006520 <_strtod_l+0xb00>)
 8006456:	4630      	mov	r0, r6
 8006458:	4639      	mov	r1, r7
 800645a:	2200      	movs	r2, #0
 800645c:	f7fa f8d4 	bl	8000608 <__aeabi_dmul>
 8006460:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006462:	4606      	mov	r6, r0
 8006464:	460f      	mov	r7, r1
 8006466:	2b00      	cmp	r3, #0
 8006468:	d09f      	beq.n	80063aa <_strtod_l+0x98a>
 800646a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800646e:	e7a0      	b.n	80063b2 <_strtod_l+0x992>
 8006470:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 80064f8 <_strtod_l+0xad8>
 8006474:	ed8d 7b06 	vstr	d7, [sp, #24]
 8006478:	ec57 6b17 	vmov	r6, r7, d7
 800647c:	e799      	b.n	80063b2 <_strtod_l+0x992>
 800647e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8006482:	9b08      	ldr	r3, [sp, #32]
 8006484:	f8cd b038 	str.w	fp, [sp, #56]	@ 0x38
 8006488:	2b00      	cmp	r3, #0
 800648a:	d1c1      	bne.n	8006410 <_strtod_l+0x9f0>
 800648c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8006490:	0d1b      	lsrs	r3, r3, #20
 8006492:	051b      	lsls	r3, r3, #20
 8006494:	429d      	cmp	r5, r3
 8006496:	d1bb      	bne.n	8006410 <_strtod_l+0x9f0>
 8006498:	4630      	mov	r0, r6
 800649a:	4639      	mov	r1, r7
 800649c:	f7fa fc14 	bl	8000cc8 <__aeabi_d2lz>
 80064a0:	f7fa f884 	bl	80005ac <__aeabi_l2d>
 80064a4:	4602      	mov	r2, r0
 80064a6:	460b      	mov	r3, r1
 80064a8:	4630      	mov	r0, r6
 80064aa:	4639      	mov	r1, r7
 80064ac:	f7f9 fef4 	bl	8000298 <__aeabi_dsub>
 80064b0:	460b      	mov	r3, r1
 80064b2:	4602      	mov	r2, r0
 80064b4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80064b8:	f3cb 0613 	ubfx	r6, fp, #0, #20
 80064bc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80064be:	ea46 060a 	orr.w	r6, r6, sl
 80064c2:	431e      	orrs	r6, r3
 80064c4:	d06f      	beq.n	80065a6 <_strtod_l+0xb86>
 80064c6:	a30e      	add	r3, pc, #56	@ (adr r3, 8006500 <_strtod_l+0xae0>)
 80064c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064cc:	f7fa fb0e 	bl	8000aec <__aeabi_dcmplt>
 80064d0:	2800      	cmp	r0, #0
 80064d2:	f47f accf 	bne.w	8005e74 <_strtod_l+0x454>
 80064d6:	a30c      	add	r3, pc, #48	@ (adr r3, 8006508 <_strtod_l+0xae8>)
 80064d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80064dc:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80064e0:	f7fa fb22 	bl	8000b28 <__aeabi_dcmpgt>
 80064e4:	2800      	cmp	r0, #0
 80064e6:	d093      	beq.n	8006410 <_strtod_l+0x9f0>
 80064e8:	e4c4      	b.n	8005e74 <_strtod_l+0x454>
 80064ea:	bf00      	nop
 80064ec:	f3af 8000 	nop.w
 80064f0:	00000000 	.word	0x00000000
 80064f4:	bff00000 	.word	0xbff00000
 80064f8:	00000000 	.word	0x00000000
 80064fc:	3ff00000 	.word	0x3ff00000
 8006500:	94a03595 	.word	0x94a03595
 8006504:	3fdfffff 	.word	0x3fdfffff
 8006508:	35afe535 	.word	0x35afe535
 800650c:	3fe00000 	.word	0x3fe00000
 8006510:	000fffff 	.word	0x000fffff
 8006514:	7ff00000 	.word	0x7ff00000
 8006518:	7fefffff 	.word	0x7fefffff
 800651c:	3ff00000 	.word	0x3ff00000
 8006520:	3fe00000 	.word	0x3fe00000
 8006524:	7fe00000 	.word	0x7fe00000
 8006528:	7c9fffff 	.word	0x7c9fffff
 800652c:	9b08      	ldr	r3, [sp, #32]
 800652e:	b323      	cbz	r3, 800657a <_strtod_l+0xb5a>
 8006530:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8006534:	d821      	bhi.n	800657a <_strtod_l+0xb5a>
 8006536:	a328      	add	r3, pc, #160	@ (adr r3, 80065d8 <_strtod_l+0xbb8>)
 8006538:	e9d3 2300 	ldrd	r2, r3, [r3]
 800653c:	4630      	mov	r0, r6
 800653e:	4639      	mov	r1, r7
 8006540:	f7fa fade 	bl	8000b00 <__aeabi_dcmple>
 8006544:	b1a0      	cbz	r0, 8006570 <_strtod_l+0xb50>
 8006546:	4639      	mov	r1, r7
 8006548:	4630      	mov	r0, r6
 800654a:	f7fa fb35 	bl	8000bb8 <__aeabi_d2uiz>
 800654e:	2801      	cmp	r0, #1
 8006550:	bf38      	it	cc
 8006552:	2001      	movcc	r0, #1
 8006554:	f7f9 ffde 	bl	8000514 <__aeabi_ui2d>
 8006558:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800655a:	4606      	mov	r6, r0
 800655c:	460f      	mov	r7, r1
 800655e:	b9fb      	cbnz	r3, 80065a0 <_strtod_l+0xb80>
 8006560:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8006564:	9014      	str	r0, [sp, #80]	@ 0x50
 8006566:	9315      	str	r3, [sp, #84]	@ 0x54
 8006568:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800656c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8006570:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8006572:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8006576:	1b5b      	subs	r3, r3, r5
 8006578:	9311      	str	r3, [sp, #68]	@ 0x44
 800657a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800657e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8006582:	f002 ff35 	bl	80093f0 <__ulp>
 8006586:	4650      	mov	r0, sl
 8006588:	ec53 2b10 	vmov	r2, r3, d0
 800658c:	4659      	mov	r1, fp
 800658e:	f7fa f83b 	bl	8000608 <__aeabi_dmul>
 8006592:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8006596:	f7f9 fe81 	bl	800029c <__adddf3>
 800659a:	4682      	mov	sl, r0
 800659c:	468b      	mov	fp, r1
 800659e:	e770      	b.n	8006482 <_strtod_l+0xa62>
 80065a0:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 80065a4:	e7e0      	b.n	8006568 <_strtod_l+0xb48>
 80065a6:	a30e      	add	r3, pc, #56	@ (adr r3, 80065e0 <_strtod_l+0xbc0>)
 80065a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065ac:	f7fa fa9e 	bl	8000aec <__aeabi_dcmplt>
 80065b0:	e798      	b.n	80064e4 <_strtod_l+0xac4>
 80065b2:	2300      	movs	r3, #0
 80065b4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80065b6:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 80065b8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80065ba:	6013      	str	r3, [r2, #0]
 80065bc:	f7ff ba6d 	b.w	8005a9a <_strtod_l+0x7a>
 80065c0:	2a65      	cmp	r2, #101	@ 0x65
 80065c2:	f43f ab66 	beq.w	8005c92 <_strtod_l+0x272>
 80065c6:	2a45      	cmp	r2, #69	@ 0x45
 80065c8:	f43f ab63 	beq.w	8005c92 <_strtod_l+0x272>
 80065cc:	2301      	movs	r3, #1
 80065ce:	f7ff bb9e 	b.w	8005d0e <_strtod_l+0x2ee>
 80065d2:	bf00      	nop
 80065d4:	f3af 8000 	nop.w
 80065d8:	ffc00000 	.word	0xffc00000
 80065dc:	41dfffff 	.word	0x41dfffff
 80065e0:	94a03595 	.word	0x94a03595
 80065e4:	3fcfffff 	.word	0x3fcfffff

080065e8 <_strtod_r>:
 80065e8:	4b01      	ldr	r3, [pc, #4]	@ (80065f0 <_strtod_r+0x8>)
 80065ea:	f7ff ba19 	b.w	8005a20 <_strtod_l>
 80065ee:	bf00      	nop
 80065f0:	20000058 	.word	0x20000058

080065f4 <strtod>:
 80065f4:	460a      	mov	r2, r1
 80065f6:	4601      	mov	r1, r0
 80065f8:	4802      	ldr	r0, [pc, #8]	@ (8006604 <strtod+0x10>)
 80065fa:	4b03      	ldr	r3, [pc, #12]	@ (8006608 <strtod+0x14>)
 80065fc:	6800      	ldr	r0, [r0, #0]
 80065fe:	f7ff ba0f 	b.w	8005a20 <_strtod_l>
 8006602:	bf00      	nop
 8006604:	200001c4 	.word	0x200001c4
 8006608:	20000058 	.word	0x20000058

0800660c <__cvt>:
 800660c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006610:	ec57 6b10 	vmov	r6, r7, d0
 8006614:	2f00      	cmp	r7, #0
 8006616:	460c      	mov	r4, r1
 8006618:	4619      	mov	r1, r3
 800661a:	463b      	mov	r3, r7
 800661c:	bfbb      	ittet	lt
 800661e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006622:	461f      	movlt	r7, r3
 8006624:	2300      	movge	r3, #0
 8006626:	232d      	movlt	r3, #45	@ 0x2d
 8006628:	700b      	strb	r3, [r1, #0]
 800662a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800662c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006630:	4691      	mov	r9, r2
 8006632:	f023 0820 	bic.w	r8, r3, #32
 8006636:	bfbc      	itt	lt
 8006638:	4632      	movlt	r2, r6
 800663a:	4616      	movlt	r6, r2
 800663c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006640:	d005      	beq.n	800664e <__cvt+0x42>
 8006642:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006646:	d100      	bne.n	800664a <__cvt+0x3e>
 8006648:	3401      	adds	r4, #1
 800664a:	2102      	movs	r1, #2
 800664c:	e000      	b.n	8006650 <__cvt+0x44>
 800664e:	2103      	movs	r1, #3
 8006650:	ab03      	add	r3, sp, #12
 8006652:	9301      	str	r3, [sp, #4]
 8006654:	ab02      	add	r3, sp, #8
 8006656:	9300      	str	r3, [sp, #0]
 8006658:	ec47 6b10 	vmov	d0, r6, r7
 800665c:	4653      	mov	r3, sl
 800665e:	4622      	mov	r2, r4
 8006660:	f001 f942 	bl	80078e8 <_dtoa_r>
 8006664:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006668:	4605      	mov	r5, r0
 800666a:	d119      	bne.n	80066a0 <__cvt+0x94>
 800666c:	f019 0f01 	tst.w	r9, #1
 8006670:	d00e      	beq.n	8006690 <__cvt+0x84>
 8006672:	eb00 0904 	add.w	r9, r0, r4
 8006676:	2200      	movs	r2, #0
 8006678:	2300      	movs	r3, #0
 800667a:	4630      	mov	r0, r6
 800667c:	4639      	mov	r1, r7
 800667e:	f7fa fa2b 	bl	8000ad8 <__aeabi_dcmpeq>
 8006682:	b108      	cbz	r0, 8006688 <__cvt+0x7c>
 8006684:	f8cd 900c 	str.w	r9, [sp, #12]
 8006688:	2230      	movs	r2, #48	@ 0x30
 800668a:	9b03      	ldr	r3, [sp, #12]
 800668c:	454b      	cmp	r3, r9
 800668e:	d31e      	bcc.n	80066ce <__cvt+0xc2>
 8006690:	9b03      	ldr	r3, [sp, #12]
 8006692:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006694:	1b5b      	subs	r3, r3, r5
 8006696:	4628      	mov	r0, r5
 8006698:	6013      	str	r3, [r2, #0]
 800669a:	b004      	add	sp, #16
 800669c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066a0:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80066a4:	eb00 0904 	add.w	r9, r0, r4
 80066a8:	d1e5      	bne.n	8006676 <__cvt+0x6a>
 80066aa:	7803      	ldrb	r3, [r0, #0]
 80066ac:	2b30      	cmp	r3, #48	@ 0x30
 80066ae:	d10a      	bne.n	80066c6 <__cvt+0xba>
 80066b0:	2200      	movs	r2, #0
 80066b2:	2300      	movs	r3, #0
 80066b4:	4630      	mov	r0, r6
 80066b6:	4639      	mov	r1, r7
 80066b8:	f7fa fa0e 	bl	8000ad8 <__aeabi_dcmpeq>
 80066bc:	b918      	cbnz	r0, 80066c6 <__cvt+0xba>
 80066be:	f1c4 0401 	rsb	r4, r4, #1
 80066c2:	f8ca 4000 	str.w	r4, [sl]
 80066c6:	f8da 3000 	ldr.w	r3, [sl]
 80066ca:	4499      	add	r9, r3
 80066cc:	e7d3      	b.n	8006676 <__cvt+0x6a>
 80066ce:	1c59      	adds	r1, r3, #1
 80066d0:	9103      	str	r1, [sp, #12]
 80066d2:	701a      	strb	r2, [r3, #0]
 80066d4:	e7d9      	b.n	800668a <__cvt+0x7e>

080066d6 <__exponent>:
 80066d6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80066d8:	2900      	cmp	r1, #0
 80066da:	bfba      	itte	lt
 80066dc:	4249      	neglt	r1, r1
 80066de:	232d      	movlt	r3, #45	@ 0x2d
 80066e0:	232b      	movge	r3, #43	@ 0x2b
 80066e2:	2909      	cmp	r1, #9
 80066e4:	7002      	strb	r2, [r0, #0]
 80066e6:	7043      	strb	r3, [r0, #1]
 80066e8:	dd29      	ble.n	800673e <__exponent+0x68>
 80066ea:	f10d 0307 	add.w	r3, sp, #7
 80066ee:	461d      	mov	r5, r3
 80066f0:	270a      	movs	r7, #10
 80066f2:	461a      	mov	r2, r3
 80066f4:	fbb1 f6f7 	udiv	r6, r1, r7
 80066f8:	fb07 1416 	mls	r4, r7, r6, r1
 80066fc:	3430      	adds	r4, #48	@ 0x30
 80066fe:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006702:	460c      	mov	r4, r1
 8006704:	2c63      	cmp	r4, #99	@ 0x63
 8006706:	f103 33ff 	add.w	r3, r3, #4294967295
 800670a:	4631      	mov	r1, r6
 800670c:	dcf1      	bgt.n	80066f2 <__exponent+0x1c>
 800670e:	3130      	adds	r1, #48	@ 0x30
 8006710:	1e94      	subs	r4, r2, #2
 8006712:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006716:	1c41      	adds	r1, r0, #1
 8006718:	4623      	mov	r3, r4
 800671a:	42ab      	cmp	r3, r5
 800671c:	d30a      	bcc.n	8006734 <__exponent+0x5e>
 800671e:	f10d 0309 	add.w	r3, sp, #9
 8006722:	1a9b      	subs	r3, r3, r2
 8006724:	42ac      	cmp	r4, r5
 8006726:	bf88      	it	hi
 8006728:	2300      	movhi	r3, #0
 800672a:	3302      	adds	r3, #2
 800672c:	4403      	add	r3, r0
 800672e:	1a18      	subs	r0, r3, r0
 8006730:	b003      	add	sp, #12
 8006732:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006734:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006738:	f801 6f01 	strb.w	r6, [r1, #1]!
 800673c:	e7ed      	b.n	800671a <__exponent+0x44>
 800673e:	2330      	movs	r3, #48	@ 0x30
 8006740:	3130      	adds	r1, #48	@ 0x30
 8006742:	7083      	strb	r3, [r0, #2]
 8006744:	70c1      	strb	r1, [r0, #3]
 8006746:	1d03      	adds	r3, r0, #4
 8006748:	e7f1      	b.n	800672e <__exponent+0x58>
	...

0800674c <_printf_float>:
 800674c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006750:	b08d      	sub	sp, #52	@ 0x34
 8006752:	460c      	mov	r4, r1
 8006754:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006758:	4616      	mov	r6, r2
 800675a:	461f      	mov	r7, r3
 800675c:	4605      	mov	r5, r0
 800675e:	f000 ff89 	bl	8007674 <_localeconv_r>
 8006762:	6803      	ldr	r3, [r0, #0]
 8006764:	9304      	str	r3, [sp, #16]
 8006766:	4618      	mov	r0, r3
 8006768:	f7f9 fd8a 	bl	8000280 <strlen>
 800676c:	2300      	movs	r3, #0
 800676e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006770:	f8d8 3000 	ldr.w	r3, [r8]
 8006774:	9005      	str	r0, [sp, #20]
 8006776:	3307      	adds	r3, #7
 8006778:	f023 0307 	bic.w	r3, r3, #7
 800677c:	f103 0208 	add.w	r2, r3, #8
 8006780:	f894 a018 	ldrb.w	sl, [r4, #24]
 8006784:	f8d4 b000 	ldr.w	fp, [r4]
 8006788:	f8c8 2000 	str.w	r2, [r8]
 800678c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8006790:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8006794:	9307      	str	r3, [sp, #28]
 8006796:	f8cd 8018 	str.w	r8, [sp, #24]
 800679a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800679e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067a2:	4b9c      	ldr	r3, [pc, #624]	@ (8006a14 <_printf_float+0x2c8>)
 80067a4:	f04f 32ff 	mov.w	r2, #4294967295
 80067a8:	f7fa f9c8 	bl	8000b3c <__aeabi_dcmpun>
 80067ac:	bb70      	cbnz	r0, 800680c <_printf_float+0xc0>
 80067ae:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80067b2:	4b98      	ldr	r3, [pc, #608]	@ (8006a14 <_printf_float+0x2c8>)
 80067b4:	f04f 32ff 	mov.w	r2, #4294967295
 80067b8:	f7fa f9a2 	bl	8000b00 <__aeabi_dcmple>
 80067bc:	bb30      	cbnz	r0, 800680c <_printf_float+0xc0>
 80067be:	2200      	movs	r2, #0
 80067c0:	2300      	movs	r3, #0
 80067c2:	4640      	mov	r0, r8
 80067c4:	4649      	mov	r1, r9
 80067c6:	f7fa f991 	bl	8000aec <__aeabi_dcmplt>
 80067ca:	b110      	cbz	r0, 80067d2 <_printf_float+0x86>
 80067cc:	232d      	movs	r3, #45	@ 0x2d
 80067ce:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067d2:	4a91      	ldr	r2, [pc, #580]	@ (8006a18 <_printf_float+0x2cc>)
 80067d4:	4b91      	ldr	r3, [pc, #580]	@ (8006a1c <_printf_float+0x2d0>)
 80067d6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80067da:	bf94      	ite	ls
 80067dc:	4690      	movls	r8, r2
 80067de:	4698      	movhi	r8, r3
 80067e0:	2303      	movs	r3, #3
 80067e2:	6123      	str	r3, [r4, #16]
 80067e4:	f02b 0304 	bic.w	r3, fp, #4
 80067e8:	6023      	str	r3, [r4, #0]
 80067ea:	f04f 0900 	mov.w	r9, #0
 80067ee:	9700      	str	r7, [sp, #0]
 80067f0:	4633      	mov	r3, r6
 80067f2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80067f4:	4621      	mov	r1, r4
 80067f6:	4628      	mov	r0, r5
 80067f8:	f000 f9d2 	bl	8006ba0 <_printf_common>
 80067fc:	3001      	adds	r0, #1
 80067fe:	f040 808d 	bne.w	800691c <_printf_float+0x1d0>
 8006802:	f04f 30ff 	mov.w	r0, #4294967295
 8006806:	b00d      	add	sp, #52	@ 0x34
 8006808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800680c:	4642      	mov	r2, r8
 800680e:	464b      	mov	r3, r9
 8006810:	4640      	mov	r0, r8
 8006812:	4649      	mov	r1, r9
 8006814:	f7fa f992 	bl	8000b3c <__aeabi_dcmpun>
 8006818:	b140      	cbz	r0, 800682c <_printf_float+0xe0>
 800681a:	464b      	mov	r3, r9
 800681c:	2b00      	cmp	r3, #0
 800681e:	bfbc      	itt	lt
 8006820:	232d      	movlt	r3, #45	@ 0x2d
 8006822:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006826:	4a7e      	ldr	r2, [pc, #504]	@ (8006a20 <_printf_float+0x2d4>)
 8006828:	4b7e      	ldr	r3, [pc, #504]	@ (8006a24 <_printf_float+0x2d8>)
 800682a:	e7d4      	b.n	80067d6 <_printf_float+0x8a>
 800682c:	6863      	ldr	r3, [r4, #4]
 800682e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006832:	9206      	str	r2, [sp, #24]
 8006834:	1c5a      	adds	r2, r3, #1
 8006836:	d13b      	bne.n	80068b0 <_printf_float+0x164>
 8006838:	2306      	movs	r3, #6
 800683a:	6063      	str	r3, [r4, #4]
 800683c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006840:	2300      	movs	r3, #0
 8006842:	6022      	str	r2, [r4, #0]
 8006844:	9303      	str	r3, [sp, #12]
 8006846:	ab0a      	add	r3, sp, #40	@ 0x28
 8006848:	e9cd a301 	strd	sl, r3, [sp, #4]
 800684c:	ab09      	add	r3, sp, #36	@ 0x24
 800684e:	9300      	str	r3, [sp, #0]
 8006850:	6861      	ldr	r1, [r4, #4]
 8006852:	ec49 8b10 	vmov	d0, r8, r9
 8006856:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800685a:	4628      	mov	r0, r5
 800685c:	f7ff fed6 	bl	800660c <__cvt>
 8006860:	9b06      	ldr	r3, [sp, #24]
 8006862:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006864:	2b47      	cmp	r3, #71	@ 0x47
 8006866:	4680      	mov	r8, r0
 8006868:	d129      	bne.n	80068be <_printf_float+0x172>
 800686a:	1cc8      	adds	r0, r1, #3
 800686c:	db02      	blt.n	8006874 <_printf_float+0x128>
 800686e:	6863      	ldr	r3, [r4, #4]
 8006870:	4299      	cmp	r1, r3
 8006872:	dd41      	ble.n	80068f8 <_printf_float+0x1ac>
 8006874:	f1aa 0a02 	sub.w	sl, sl, #2
 8006878:	fa5f fa8a 	uxtb.w	sl, sl
 800687c:	3901      	subs	r1, #1
 800687e:	4652      	mov	r2, sl
 8006880:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8006884:	9109      	str	r1, [sp, #36]	@ 0x24
 8006886:	f7ff ff26 	bl	80066d6 <__exponent>
 800688a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800688c:	1813      	adds	r3, r2, r0
 800688e:	2a01      	cmp	r2, #1
 8006890:	4681      	mov	r9, r0
 8006892:	6123      	str	r3, [r4, #16]
 8006894:	dc02      	bgt.n	800689c <_printf_float+0x150>
 8006896:	6822      	ldr	r2, [r4, #0]
 8006898:	07d2      	lsls	r2, r2, #31
 800689a:	d501      	bpl.n	80068a0 <_printf_float+0x154>
 800689c:	3301      	adds	r3, #1
 800689e:	6123      	str	r3, [r4, #16]
 80068a0:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80068a4:	2b00      	cmp	r3, #0
 80068a6:	d0a2      	beq.n	80067ee <_printf_float+0xa2>
 80068a8:	232d      	movs	r3, #45	@ 0x2d
 80068aa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80068ae:	e79e      	b.n	80067ee <_printf_float+0xa2>
 80068b0:	9a06      	ldr	r2, [sp, #24]
 80068b2:	2a47      	cmp	r2, #71	@ 0x47
 80068b4:	d1c2      	bne.n	800683c <_printf_float+0xf0>
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d1c0      	bne.n	800683c <_printf_float+0xf0>
 80068ba:	2301      	movs	r3, #1
 80068bc:	e7bd      	b.n	800683a <_printf_float+0xee>
 80068be:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80068c2:	d9db      	bls.n	800687c <_printf_float+0x130>
 80068c4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80068c8:	d118      	bne.n	80068fc <_printf_float+0x1b0>
 80068ca:	2900      	cmp	r1, #0
 80068cc:	6863      	ldr	r3, [r4, #4]
 80068ce:	dd0b      	ble.n	80068e8 <_printf_float+0x19c>
 80068d0:	6121      	str	r1, [r4, #16]
 80068d2:	b913      	cbnz	r3, 80068da <_printf_float+0x18e>
 80068d4:	6822      	ldr	r2, [r4, #0]
 80068d6:	07d0      	lsls	r0, r2, #31
 80068d8:	d502      	bpl.n	80068e0 <_printf_float+0x194>
 80068da:	3301      	adds	r3, #1
 80068dc:	440b      	add	r3, r1
 80068de:	6123      	str	r3, [r4, #16]
 80068e0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80068e2:	f04f 0900 	mov.w	r9, #0
 80068e6:	e7db      	b.n	80068a0 <_printf_float+0x154>
 80068e8:	b913      	cbnz	r3, 80068f0 <_printf_float+0x1a4>
 80068ea:	6822      	ldr	r2, [r4, #0]
 80068ec:	07d2      	lsls	r2, r2, #31
 80068ee:	d501      	bpl.n	80068f4 <_printf_float+0x1a8>
 80068f0:	3302      	adds	r3, #2
 80068f2:	e7f4      	b.n	80068de <_printf_float+0x192>
 80068f4:	2301      	movs	r3, #1
 80068f6:	e7f2      	b.n	80068de <_printf_float+0x192>
 80068f8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80068fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80068fe:	4299      	cmp	r1, r3
 8006900:	db05      	blt.n	800690e <_printf_float+0x1c2>
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	6121      	str	r1, [r4, #16]
 8006906:	07d8      	lsls	r0, r3, #31
 8006908:	d5ea      	bpl.n	80068e0 <_printf_float+0x194>
 800690a:	1c4b      	adds	r3, r1, #1
 800690c:	e7e7      	b.n	80068de <_printf_float+0x192>
 800690e:	2900      	cmp	r1, #0
 8006910:	bfd4      	ite	le
 8006912:	f1c1 0202 	rsble	r2, r1, #2
 8006916:	2201      	movgt	r2, #1
 8006918:	4413      	add	r3, r2
 800691a:	e7e0      	b.n	80068de <_printf_float+0x192>
 800691c:	6823      	ldr	r3, [r4, #0]
 800691e:	055a      	lsls	r2, r3, #21
 8006920:	d407      	bmi.n	8006932 <_printf_float+0x1e6>
 8006922:	6923      	ldr	r3, [r4, #16]
 8006924:	4642      	mov	r2, r8
 8006926:	4631      	mov	r1, r6
 8006928:	4628      	mov	r0, r5
 800692a:	47b8      	blx	r7
 800692c:	3001      	adds	r0, #1
 800692e:	d12b      	bne.n	8006988 <_printf_float+0x23c>
 8006930:	e767      	b.n	8006802 <_printf_float+0xb6>
 8006932:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006936:	f240 80dd 	bls.w	8006af4 <_printf_float+0x3a8>
 800693a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800693e:	2200      	movs	r2, #0
 8006940:	2300      	movs	r3, #0
 8006942:	f7fa f8c9 	bl	8000ad8 <__aeabi_dcmpeq>
 8006946:	2800      	cmp	r0, #0
 8006948:	d033      	beq.n	80069b2 <_printf_float+0x266>
 800694a:	4a37      	ldr	r2, [pc, #220]	@ (8006a28 <_printf_float+0x2dc>)
 800694c:	2301      	movs	r3, #1
 800694e:	4631      	mov	r1, r6
 8006950:	4628      	mov	r0, r5
 8006952:	47b8      	blx	r7
 8006954:	3001      	adds	r0, #1
 8006956:	f43f af54 	beq.w	8006802 <_printf_float+0xb6>
 800695a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800695e:	4543      	cmp	r3, r8
 8006960:	db02      	blt.n	8006968 <_printf_float+0x21c>
 8006962:	6823      	ldr	r3, [r4, #0]
 8006964:	07d8      	lsls	r0, r3, #31
 8006966:	d50f      	bpl.n	8006988 <_printf_float+0x23c>
 8006968:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800696c:	4631      	mov	r1, r6
 800696e:	4628      	mov	r0, r5
 8006970:	47b8      	blx	r7
 8006972:	3001      	adds	r0, #1
 8006974:	f43f af45 	beq.w	8006802 <_printf_float+0xb6>
 8006978:	f04f 0900 	mov.w	r9, #0
 800697c:	f108 38ff 	add.w	r8, r8, #4294967295
 8006980:	f104 0a1a 	add.w	sl, r4, #26
 8006984:	45c8      	cmp	r8, r9
 8006986:	dc09      	bgt.n	800699c <_printf_float+0x250>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	079b      	lsls	r3, r3, #30
 800698c:	f100 8103 	bmi.w	8006b96 <_printf_float+0x44a>
 8006990:	68e0      	ldr	r0, [r4, #12]
 8006992:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006994:	4298      	cmp	r0, r3
 8006996:	bfb8      	it	lt
 8006998:	4618      	movlt	r0, r3
 800699a:	e734      	b.n	8006806 <_printf_float+0xba>
 800699c:	2301      	movs	r3, #1
 800699e:	4652      	mov	r2, sl
 80069a0:	4631      	mov	r1, r6
 80069a2:	4628      	mov	r0, r5
 80069a4:	47b8      	blx	r7
 80069a6:	3001      	adds	r0, #1
 80069a8:	f43f af2b 	beq.w	8006802 <_printf_float+0xb6>
 80069ac:	f109 0901 	add.w	r9, r9, #1
 80069b0:	e7e8      	b.n	8006984 <_printf_float+0x238>
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc39      	bgt.n	8006a2c <_printf_float+0x2e0>
 80069b8:	4a1b      	ldr	r2, [pc, #108]	@ (8006a28 <_printf_float+0x2dc>)
 80069ba:	2301      	movs	r3, #1
 80069bc:	4631      	mov	r1, r6
 80069be:	4628      	mov	r0, r5
 80069c0:	47b8      	blx	r7
 80069c2:	3001      	adds	r0, #1
 80069c4:	f43f af1d 	beq.w	8006802 <_printf_float+0xb6>
 80069c8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80069cc:	ea59 0303 	orrs.w	r3, r9, r3
 80069d0:	d102      	bne.n	80069d8 <_printf_float+0x28c>
 80069d2:	6823      	ldr	r3, [r4, #0]
 80069d4:	07d9      	lsls	r1, r3, #31
 80069d6:	d5d7      	bpl.n	8006988 <_printf_float+0x23c>
 80069d8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80069dc:	4631      	mov	r1, r6
 80069de:	4628      	mov	r0, r5
 80069e0:	47b8      	blx	r7
 80069e2:	3001      	adds	r0, #1
 80069e4:	f43f af0d 	beq.w	8006802 <_printf_float+0xb6>
 80069e8:	f04f 0a00 	mov.w	sl, #0
 80069ec:	f104 0b1a 	add.w	fp, r4, #26
 80069f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069f2:	425b      	negs	r3, r3
 80069f4:	4553      	cmp	r3, sl
 80069f6:	dc01      	bgt.n	80069fc <_printf_float+0x2b0>
 80069f8:	464b      	mov	r3, r9
 80069fa:	e793      	b.n	8006924 <_printf_float+0x1d8>
 80069fc:	2301      	movs	r3, #1
 80069fe:	465a      	mov	r2, fp
 8006a00:	4631      	mov	r1, r6
 8006a02:	4628      	mov	r0, r5
 8006a04:	47b8      	blx	r7
 8006a06:	3001      	adds	r0, #1
 8006a08:	f43f aefb 	beq.w	8006802 <_printf_float+0xb6>
 8006a0c:	f10a 0a01 	add.w	sl, sl, #1
 8006a10:	e7ee      	b.n	80069f0 <_printf_float+0x2a4>
 8006a12:	bf00      	nop
 8006a14:	7fefffff 	.word	0x7fefffff
 8006a18:	0800c718 	.word	0x0800c718
 8006a1c:	0800c71c 	.word	0x0800c71c
 8006a20:	0800c720 	.word	0x0800c720
 8006a24:	0800c724 	.word	0x0800c724
 8006a28:	0800cb58 	.word	0x0800cb58
 8006a2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a32:	4553      	cmp	r3, sl
 8006a34:	bfa8      	it	ge
 8006a36:	4653      	movge	r3, sl
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	4699      	mov	r9, r3
 8006a3c:	dc36      	bgt.n	8006aac <_printf_float+0x360>
 8006a3e:	f04f 0b00 	mov.w	fp, #0
 8006a42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a46:	f104 021a 	add.w	r2, r4, #26
 8006a4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006a4c:	9306      	str	r3, [sp, #24]
 8006a4e:	eba3 0309 	sub.w	r3, r3, r9
 8006a52:	455b      	cmp	r3, fp
 8006a54:	dc31      	bgt.n	8006aba <_printf_float+0x36e>
 8006a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a58:	459a      	cmp	sl, r3
 8006a5a:	dc3a      	bgt.n	8006ad2 <_printf_float+0x386>
 8006a5c:	6823      	ldr	r3, [r4, #0]
 8006a5e:	07da      	lsls	r2, r3, #31
 8006a60:	d437      	bmi.n	8006ad2 <_printf_float+0x386>
 8006a62:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a64:	ebaa 0903 	sub.w	r9, sl, r3
 8006a68:	9b06      	ldr	r3, [sp, #24]
 8006a6a:	ebaa 0303 	sub.w	r3, sl, r3
 8006a6e:	4599      	cmp	r9, r3
 8006a70:	bfa8      	it	ge
 8006a72:	4699      	movge	r9, r3
 8006a74:	f1b9 0f00 	cmp.w	r9, #0
 8006a78:	dc33      	bgt.n	8006ae2 <_printf_float+0x396>
 8006a7a:	f04f 0800 	mov.w	r8, #0
 8006a7e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006a82:	f104 0b1a 	add.w	fp, r4, #26
 8006a86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006a88:	ebaa 0303 	sub.w	r3, sl, r3
 8006a8c:	eba3 0309 	sub.w	r3, r3, r9
 8006a90:	4543      	cmp	r3, r8
 8006a92:	f77f af79 	ble.w	8006988 <_printf_float+0x23c>
 8006a96:	2301      	movs	r3, #1
 8006a98:	465a      	mov	r2, fp
 8006a9a:	4631      	mov	r1, r6
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	47b8      	blx	r7
 8006aa0:	3001      	adds	r0, #1
 8006aa2:	f43f aeae 	beq.w	8006802 <_printf_float+0xb6>
 8006aa6:	f108 0801 	add.w	r8, r8, #1
 8006aaa:	e7ec      	b.n	8006a86 <_printf_float+0x33a>
 8006aac:	4642      	mov	r2, r8
 8006aae:	4631      	mov	r1, r6
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	47b8      	blx	r7
 8006ab4:	3001      	adds	r0, #1
 8006ab6:	d1c2      	bne.n	8006a3e <_printf_float+0x2f2>
 8006ab8:	e6a3      	b.n	8006802 <_printf_float+0xb6>
 8006aba:	2301      	movs	r3, #1
 8006abc:	4631      	mov	r1, r6
 8006abe:	4628      	mov	r0, r5
 8006ac0:	9206      	str	r2, [sp, #24]
 8006ac2:	47b8      	blx	r7
 8006ac4:	3001      	adds	r0, #1
 8006ac6:	f43f ae9c 	beq.w	8006802 <_printf_float+0xb6>
 8006aca:	9a06      	ldr	r2, [sp, #24]
 8006acc:	f10b 0b01 	add.w	fp, fp, #1
 8006ad0:	e7bb      	b.n	8006a4a <_printf_float+0x2fe>
 8006ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006ad6:	4631      	mov	r1, r6
 8006ad8:	4628      	mov	r0, r5
 8006ada:	47b8      	blx	r7
 8006adc:	3001      	adds	r0, #1
 8006ade:	d1c0      	bne.n	8006a62 <_printf_float+0x316>
 8006ae0:	e68f      	b.n	8006802 <_printf_float+0xb6>
 8006ae2:	9a06      	ldr	r2, [sp, #24]
 8006ae4:	464b      	mov	r3, r9
 8006ae6:	4442      	add	r2, r8
 8006ae8:	4631      	mov	r1, r6
 8006aea:	4628      	mov	r0, r5
 8006aec:	47b8      	blx	r7
 8006aee:	3001      	adds	r0, #1
 8006af0:	d1c3      	bne.n	8006a7a <_printf_float+0x32e>
 8006af2:	e686      	b.n	8006802 <_printf_float+0xb6>
 8006af4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006af8:	f1ba 0f01 	cmp.w	sl, #1
 8006afc:	dc01      	bgt.n	8006b02 <_printf_float+0x3b6>
 8006afe:	07db      	lsls	r3, r3, #31
 8006b00:	d536      	bpl.n	8006b70 <_printf_float+0x424>
 8006b02:	2301      	movs	r3, #1
 8006b04:	4642      	mov	r2, r8
 8006b06:	4631      	mov	r1, r6
 8006b08:	4628      	mov	r0, r5
 8006b0a:	47b8      	blx	r7
 8006b0c:	3001      	adds	r0, #1
 8006b0e:	f43f ae78 	beq.w	8006802 <_printf_float+0xb6>
 8006b12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006b16:	4631      	mov	r1, r6
 8006b18:	4628      	mov	r0, r5
 8006b1a:	47b8      	blx	r7
 8006b1c:	3001      	adds	r0, #1
 8006b1e:	f43f ae70 	beq.w	8006802 <_printf_float+0xb6>
 8006b22:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006b26:	2200      	movs	r2, #0
 8006b28:	2300      	movs	r3, #0
 8006b2a:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006b2e:	f7f9 ffd3 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b32:	b9c0      	cbnz	r0, 8006b66 <_printf_float+0x41a>
 8006b34:	4653      	mov	r3, sl
 8006b36:	f108 0201 	add.w	r2, r8, #1
 8006b3a:	4631      	mov	r1, r6
 8006b3c:	4628      	mov	r0, r5
 8006b3e:	47b8      	blx	r7
 8006b40:	3001      	adds	r0, #1
 8006b42:	d10c      	bne.n	8006b5e <_printf_float+0x412>
 8006b44:	e65d      	b.n	8006802 <_printf_float+0xb6>
 8006b46:	2301      	movs	r3, #1
 8006b48:	465a      	mov	r2, fp
 8006b4a:	4631      	mov	r1, r6
 8006b4c:	4628      	mov	r0, r5
 8006b4e:	47b8      	blx	r7
 8006b50:	3001      	adds	r0, #1
 8006b52:	f43f ae56 	beq.w	8006802 <_printf_float+0xb6>
 8006b56:	f108 0801 	add.w	r8, r8, #1
 8006b5a:	45d0      	cmp	r8, sl
 8006b5c:	dbf3      	blt.n	8006b46 <_printf_float+0x3fa>
 8006b5e:	464b      	mov	r3, r9
 8006b60:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006b64:	e6df      	b.n	8006926 <_printf_float+0x1da>
 8006b66:	f04f 0800 	mov.w	r8, #0
 8006b6a:	f104 0b1a 	add.w	fp, r4, #26
 8006b6e:	e7f4      	b.n	8006b5a <_printf_float+0x40e>
 8006b70:	2301      	movs	r3, #1
 8006b72:	4642      	mov	r2, r8
 8006b74:	e7e1      	b.n	8006b3a <_printf_float+0x3ee>
 8006b76:	2301      	movs	r3, #1
 8006b78:	464a      	mov	r2, r9
 8006b7a:	4631      	mov	r1, r6
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	47b8      	blx	r7
 8006b80:	3001      	adds	r0, #1
 8006b82:	f43f ae3e 	beq.w	8006802 <_printf_float+0xb6>
 8006b86:	f108 0801 	add.w	r8, r8, #1
 8006b8a:	68e3      	ldr	r3, [r4, #12]
 8006b8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b8e:	1a5b      	subs	r3, r3, r1
 8006b90:	4543      	cmp	r3, r8
 8006b92:	dcf0      	bgt.n	8006b76 <_printf_float+0x42a>
 8006b94:	e6fc      	b.n	8006990 <_printf_float+0x244>
 8006b96:	f04f 0800 	mov.w	r8, #0
 8006b9a:	f104 0919 	add.w	r9, r4, #25
 8006b9e:	e7f4      	b.n	8006b8a <_printf_float+0x43e>

08006ba0 <_printf_common>:
 8006ba0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ba4:	4616      	mov	r6, r2
 8006ba6:	4698      	mov	r8, r3
 8006ba8:	688a      	ldr	r2, [r1, #8]
 8006baa:	690b      	ldr	r3, [r1, #16]
 8006bac:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006bb0:	4293      	cmp	r3, r2
 8006bb2:	bfb8      	it	lt
 8006bb4:	4613      	movlt	r3, r2
 8006bb6:	6033      	str	r3, [r6, #0]
 8006bb8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006bbc:	4607      	mov	r7, r0
 8006bbe:	460c      	mov	r4, r1
 8006bc0:	b10a      	cbz	r2, 8006bc6 <_printf_common+0x26>
 8006bc2:	3301      	adds	r3, #1
 8006bc4:	6033      	str	r3, [r6, #0]
 8006bc6:	6823      	ldr	r3, [r4, #0]
 8006bc8:	0699      	lsls	r1, r3, #26
 8006bca:	bf42      	ittt	mi
 8006bcc:	6833      	ldrmi	r3, [r6, #0]
 8006bce:	3302      	addmi	r3, #2
 8006bd0:	6033      	strmi	r3, [r6, #0]
 8006bd2:	6825      	ldr	r5, [r4, #0]
 8006bd4:	f015 0506 	ands.w	r5, r5, #6
 8006bd8:	d106      	bne.n	8006be8 <_printf_common+0x48>
 8006bda:	f104 0a19 	add.w	sl, r4, #25
 8006bde:	68e3      	ldr	r3, [r4, #12]
 8006be0:	6832      	ldr	r2, [r6, #0]
 8006be2:	1a9b      	subs	r3, r3, r2
 8006be4:	42ab      	cmp	r3, r5
 8006be6:	dc26      	bgt.n	8006c36 <_printf_common+0x96>
 8006be8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006bec:	6822      	ldr	r2, [r4, #0]
 8006bee:	3b00      	subs	r3, #0
 8006bf0:	bf18      	it	ne
 8006bf2:	2301      	movne	r3, #1
 8006bf4:	0692      	lsls	r2, r2, #26
 8006bf6:	d42b      	bmi.n	8006c50 <_printf_common+0xb0>
 8006bf8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006bfc:	4641      	mov	r1, r8
 8006bfe:	4638      	mov	r0, r7
 8006c00:	47c8      	blx	r9
 8006c02:	3001      	adds	r0, #1
 8006c04:	d01e      	beq.n	8006c44 <_printf_common+0xa4>
 8006c06:	6823      	ldr	r3, [r4, #0]
 8006c08:	6922      	ldr	r2, [r4, #16]
 8006c0a:	f003 0306 	and.w	r3, r3, #6
 8006c0e:	2b04      	cmp	r3, #4
 8006c10:	bf02      	ittt	eq
 8006c12:	68e5      	ldreq	r5, [r4, #12]
 8006c14:	6833      	ldreq	r3, [r6, #0]
 8006c16:	1aed      	subeq	r5, r5, r3
 8006c18:	68a3      	ldr	r3, [r4, #8]
 8006c1a:	bf0c      	ite	eq
 8006c1c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006c20:	2500      	movne	r5, #0
 8006c22:	4293      	cmp	r3, r2
 8006c24:	bfc4      	itt	gt
 8006c26:	1a9b      	subgt	r3, r3, r2
 8006c28:	18ed      	addgt	r5, r5, r3
 8006c2a:	2600      	movs	r6, #0
 8006c2c:	341a      	adds	r4, #26
 8006c2e:	42b5      	cmp	r5, r6
 8006c30:	d11a      	bne.n	8006c68 <_printf_common+0xc8>
 8006c32:	2000      	movs	r0, #0
 8006c34:	e008      	b.n	8006c48 <_printf_common+0xa8>
 8006c36:	2301      	movs	r3, #1
 8006c38:	4652      	mov	r2, sl
 8006c3a:	4641      	mov	r1, r8
 8006c3c:	4638      	mov	r0, r7
 8006c3e:	47c8      	blx	r9
 8006c40:	3001      	adds	r0, #1
 8006c42:	d103      	bne.n	8006c4c <_printf_common+0xac>
 8006c44:	f04f 30ff 	mov.w	r0, #4294967295
 8006c48:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006c4c:	3501      	adds	r5, #1
 8006c4e:	e7c6      	b.n	8006bde <_printf_common+0x3e>
 8006c50:	18e1      	adds	r1, r4, r3
 8006c52:	1c5a      	adds	r2, r3, #1
 8006c54:	2030      	movs	r0, #48	@ 0x30
 8006c56:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006c5a:	4422      	add	r2, r4
 8006c5c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006c60:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006c64:	3302      	adds	r3, #2
 8006c66:	e7c7      	b.n	8006bf8 <_printf_common+0x58>
 8006c68:	2301      	movs	r3, #1
 8006c6a:	4622      	mov	r2, r4
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	4638      	mov	r0, r7
 8006c70:	47c8      	blx	r9
 8006c72:	3001      	adds	r0, #1
 8006c74:	d0e6      	beq.n	8006c44 <_printf_common+0xa4>
 8006c76:	3601      	adds	r6, #1
 8006c78:	e7d9      	b.n	8006c2e <_printf_common+0x8e>
	...

08006c7c <_printf_i>:
 8006c7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006c80:	7e0f      	ldrb	r7, [r1, #24]
 8006c82:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006c84:	2f78      	cmp	r7, #120	@ 0x78
 8006c86:	4691      	mov	r9, r2
 8006c88:	4680      	mov	r8, r0
 8006c8a:	460c      	mov	r4, r1
 8006c8c:	469a      	mov	sl, r3
 8006c8e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006c92:	d807      	bhi.n	8006ca4 <_printf_i+0x28>
 8006c94:	2f62      	cmp	r7, #98	@ 0x62
 8006c96:	d80a      	bhi.n	8006cae <_printf_i+0x32>
 8006c98:	2f00      	cmp	r7, #0
 8006c9a:	f000 80d2 	beq.w	8006e42 <_printf_i+0x1c6>
 8006c9e:	2f58      	cmp	r7, #88	@ 0x58
 8006ca0:	f000 80b9 	beq.w	8006e16 <_printf_i+0x19a>
 8006ca4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006ca8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006cac:	e03a      	b.n	8006d24 <_printf_i+0xa8>
 8006cae:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006cb2:	2b15      	cmp	r3, #21
 8006cb4:	d8f6      	bhi.n	8006ca4 <_printf_i+0x28>
 8006cb6:	a101      	add	r1, pc, #4	@ (adr r1, 8006cbc <_printf_i+0x40>)
 8006cb8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006cbc:	08006d15 	.word	0x08006d15
 8006cc0:	08006d29 	.word	0x08006d29
 8006cc4:	08006ca5 	.word	0x08006ca5
 8006cc8:	08006ca5 	.word	0x08006ca5
 8006ccc:	08006ca5 	.word	0x08006ca5
 8006cd0:	08006ca5 	.word	0x08006ca5
 8006cd4:	08006d29 	.word	0x08006d29
 8006cd8:	08006ca5 	.word	0x08006ca5
 8006cdc:	08006ca5 	.word	0x08006ca5
 8006ce0:	08006ca5 	.word	0x08006ca5
 8006ce4:	08006ca5 	.word	0x08006ca5
 8006ce8:	08006e29 	.word	0x08006e29
 8006cec:	08006d53 	.word	0x08006d53
 8006cf0:	08006de3 	.word	0x08006de3
 8006cf4:	08006ca5 	.word	0x08006ca5
 8006cf8:	08006ca5 	.word	0x08006ca5
 8006cfc:	08006e4b 	.word	0x08006e4b
 8006d00:	08006ca5 	.word	0x08006ca5
 8006d04:	08006d53 	.word	0x08006d53
 8006d08:	08006ca5 	.word	0x08006ca5
 8006d0c:	08006ca5 	.word	0x08006ca5
 8006d10:	08006deb 	.word	0x08006deb
 8006d14:	6833      	ldr	r3, [r6, #0]
 8006d16:	1d1a      	adds	r2, r3, #4
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	6032      	str	r2, [r6, #0]
 8006d1c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006d20:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006d24:	2301      	movs	r3, #1
 8006d26:	e09d      	b.n	8006e64 <_printf_i+0x1e8>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	6820      	ldr	r0, [r4, #0]
 8006d2c:	1d19      	adds	r1, r3, #4
 8006d2e:	6031      	str	r1, [r6, #0]
 8006d30:	0606      	lsls	r6, r0, #24
 8006d32:	d501      	bpl.n	8006d38 <_printf_i+0xbc>
 8006d34:	681d      	ldr	r5, [r3, #0]
 8006d36:	e003      	b.n	8006d40 <_printf_i+0xc4>
 8006d38:	0645      	lsls	r5, r0, #25
 8006d3a:	d5fb      	bpl.n	8006d34 <_printf_i+0xb8>
 8006d3c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006d40:	2d00      	cmp	r5, #0
 8006d42:	da03      	bge.n	8006d4c <_printf_i+0xd0>
 8006d44:	232d      	movs	r3, #45	@ 0x2d
 8006d46:	426d      	negs	r5, r5
 8006d48:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d4c:	4859      	ldr	r0, [pc, #356]	@ (8006eb4 <_printf_i+0x238>)
 8006d4e:	230a      	movs	r3, #10
 8006d50:	e011      	b.n	8006d76 <_printf_i+0xfa>
 8006d52:	6821      	ldr	r1, [r4, #0]
 8006d54:	6833      	ldr	r3, [r6, #0]
 8006d56:	0608      	lsls	r0, r1, #24
 8006d58:	f853 5b04 	ldr.w	r5, [r3], #4
 8006d5c:	d402      	bmi.n	8006d64 <_printf_i+0xe8>
 8006d5e:	0649      	lsls	r1, r1, #25
 8006d60:	bf48      	it	mi
 8006d62:	b2ad      	uxthmi	r5, r5
 8006d64:	2f6f      	cmp	r7, #111	@ 0x6f
 8006d66:	4853      	ldr	r0, [pc, #332]	@ (8006eb4 <_printf_i+0x238>)
 8006d68:	6033      	str	r3, [r6, #0]
 8006d6a:	bf14      	ite	ne
 8006d6c:	230a      	movne	r3, #10
 8006d6e:	2308      	moveq	r3, #8
 8006d70:	2100      	movs	r1, #0
 8006d72:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006d76:	6866      	ldr	r6, [r4, #4]
 8006d78:	60a6      	str	r6, [r4, #8]
 8006d7a:	2e00      	cmp	r6, #0
 8006d7c:	bfa2      	ittt	ge
 8006d7e:	6821      	ldrge	r1, [r4, #0]
 8006d80:	f021 0104 	bicge.w	r1, r1, #4
 8006d84:	6021      	strge	r1, [r4, #0]
 8006d86:	b90d      	cbnz	r5, 8006d8c <_printf_i+0x110>
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	d04b      	beq.n	8006e24 <_printf_i+0x1a8>
 8006d8c:	4616      	mov	r6, r2
 8006d8e:	fbb5 f1f3 	udiv	r1, r5, r3
 8006d92:	fb03 5711 	mls	r7, r3, r1, r5
 8006d96:	5dc7      	ldrb	r7, [r0, r7]
 8006d98:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006d9c:	462f      	mov	r7, r5
 8006d9e:	42bb      	cmp	r3, r7
 8006da0:	460d      	mov	r5, r1
 8006da2:	d9f4      	bls.n	8006d8e <_printf_i+0x112>
 8006da4:	2b08      	cmp	r3, #8
 8006da6:	d10b      	bne.n	8006dc0 <_printf_i+0x144>
 8006da8:	6823      	ldr	r3, [r4, #0]
 8006daa:	07df      	lsls	r7, r3, #31
 8006dac:	d508      	bpl.n	8006dc0 <_printf_i+0x144>
 8006dae:	6923      	ldr	r3, [r4, #16]
 8006db0:	6861      	ldr	r1, [r4, #4]
 8006db2:	4299      	cmp	r1, r3
 8006db4:	bfde      	ittt	le
 8006db6:	2330      	movle	r3, #48	@ 0x30
 8006db8:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006dbc:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006dc0:	1b92      	subs	r2, r2, r6
 8006dc2:	6122      	str	r2, [r4, #16]
 8006dc4:	f8cd a000 	str.w	sl, [sp]
 8006dc8:	464b      	mov	r3, r9
 8006dca:	aa03      	add	r2, sp, #12
 8006dcc:	4621      	mov	r1, r4
 8006dce:	4640      	mov	r0, r8
 8006dd0:	f7ff fee6 	bl	8006ba0 <_printf_common>
 8006dd4:	3001      	adds	r0, #1
 8006dd6:	d14a      	bne.n	8006e6e <_printf_i+0x1f2>
 8006dd8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ddc:	b004      	add	sp, #16
 8006dde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006de2:	6823      	ldr	r3, [r4, #0]
 8006de4:	f043 0320 	orr.w	r3, r3, #32
 8006de8:	6023      	str	r3, [r4, #0]
 8006dea:	4833      	ldr	r0, [pc, #204]	@ (8006eb8 <_printf_i+0x23c>)
 8006dec:	2778      	movs	r7, #120	@ 0x78
 8006dee:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006df2:	6823      	ldr	r3, [r4, #0]
 8006df4:	6831      	ldr	r1, [r6, #0]
 8006df6:	061f      	lsls	r7, r3, #24
 8006df8:	f851 5b04 	ldr.w	r5, [r1], #4
 8006dfc:	d402      	bmi.n	8006e04 <_printf_i+0x188>
 8006dfe:	065f      	lsls	r7, r3, #25
 8006e00:	bf48      	it	mi
 8006e02:	b2ad      	uxthmi	r5, r5
 8006e04:	6031      	str	r1, [r6, #0]
 8006e06:	07d9      	lsls	r1, r3, #31
 8006e08:	bf44      	itt	mi
 8006e0a:	f043 0320 	orrmi.w	r3, r3, #32
 8006e0e:	6023      	strmi	r3, [r4, #0]
 8006e10:	b11d      	cbz	r5, 8006e1a <_printf_i+0x19e>
 8006e12:	2310      	movs	r3, #16
 8006e14:	e7ac      	b.n	8006d70 <_printf_i+0xf4>
 8006e16:	4827      	ldr	r0, [pc, #156]	@ (8006eb4 <_printf_i+0x238>)
 8006e18:	e7e9      	b.n	8006dee <_printf_i+0x172>
 8006e1a:	6823      	ldr	r3, [r4, #0]
 8006e1c:	f023 0320 	bic.w	r3, r3, #32
 8006e20:	6023      	str	r3, [r4, #0]
 8006e22:	e7f6      	b.n	8006e12 <_printf_i+0x196>
 8006e24:	4616      	mov	r6, r2
 8006e26:	e7bd      	b.n	8006da4 <_printf_i+0x128>
 8006e28:	6833      	ldr	r3, [r6, #0]
 8006e2a:	6825      	ldr	r5, [r4, #0]
 8006e2c:	6961      	ldr	r1, [r4, #20]
 8006e2e:	1d18      	adds	r0, r3, #4
 8006e30:	6030      	str	r0, [r6, #0]
 8006e32:	062e      	lsls	r6, r5, #24
 8006e34:	681b      	ldr	r3, [r3, #0]
 8006e36:	d501      	bpl.n	8006e3c <_printf_i+0x1c0>
 8006e38:	6019      	str	r1, [r3, #0]
 8006e3a:	e002      	b.n	8006e42 <_printf_i+0x1c6>
 8006e3c:	0668      	lsls	r0, r5, #25
 8006e3e:	d5fb      	bpl.n	8006e38 <_printf_i+0x1bc>
 8006e40:	8019      	strh	r1, [r3, #0]
 8006e42:	2300      	movs	r3, #0
 8006e44:	6123      	str	r3, [r4, #16]
 8006e46:	4616      	mov	r6, r2
 8006e48:	e7bc      	b.n	8006dc4 <_printf_i+0x148>
 8006e4a:	6833      	ldr	r3, [r6, #0]
 8006e4c:	1d1a      	adds	r2, r3, #4
 8006e4e:	6032      	str	r2, [r6, #0]
 8006e50:	681e      	ldr	r6, [r3, #0]
 8006e52:	6862      	ldr	r2, [r4, #4]
 8006e54:	2100      	movs	r1, #0
 8006e56:	4630      	mov	r0, r6
 8006e58:	f7f9 f9c2 	bl	80001e0 <memchr>
 8006e5c:	b108      	cbz	r0, 8006e62 <_printf_i+0x1e6>
 8006e5e:	1b80      	subs	r0, r0, r6
 8006e60:	6060      	str	r0, [r4, #4]
 8006e62:	6863      	ldr	r3, [r4, #4]
 8006e64:	6123      	str	r3, [r4, #16]
 8006e66:	2300      	movs	r3, #0
 8006e68:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006e6c:	e7aa      	b.n	8006dc4 <_printf_i+0x148>
 8006e6e:	6923      	ldr	r3, [r4, #16]
 8006e70:	4632      	mov	r2, r6
 8006e72:	4649      	mov	r1, r9
 8006e74:	4640      	mov	r0, r8
 8006e76:	47d0      	blx	sl
 8006e78:	3001      	adds	r0, #1
 8006e7a:	d0ad      	beq.n	8006dd8 <_printf_i+0x15c>
 8006e7c:	6823      	ldr	r3, [r4, #0]
 8006e7e:	079b      	lsls	r3, r3, #30
 8006e80:	d413      	bmi.n	8006eaa <_printf_i+0x22e>
 8006e82:	68e0      	ldr	r0, [r4, #12]
 8006e84:	9b03      	ldr	r3, [sp, #12]
 8006e86:	4298      	cmp	r0, r3
 8006e88:	bfb8      	it	lt
 8006e8a:	4618      	movlt	r0, r3
 8006e8c:	e7a6      	b.n	8006ddc <_printf_i+0x160>
 8006e8e:	2301      	movs	r3, #1
 8006e90:	4632      	mov	r2, r6
 8006e92:	4649      	mov	r1, r9
 8006e94:	4640      	mov	r0, r8
 8006e96:	47d0      	blx	sl
 8006e98:	3001      	adds	r0, #1
 8006e9a:	d09d      	beq.n	8006dd8 <_printf_i+0x15c>
 8006e9c:	3501      	adds	r5, #1
 8006e9e:	68e3      	ldr	r3, [r4, #12]
 8006ea0:	9903      	ldr	r1, [sp, #12]
 8006ea2:	1a5b      	subs	r3, r3, r1
 8006ea4:	42ab      	cmp	r3, r5
 8006ea6:	dcf2      	bgt.n	8006e8e <_printf_i+0x212>
 8006ea8:	e7eb      	b.n	8006e82 <_printf_i+0x206>
 8006eaa:	2500      	movs	r5, #0
 8006eac:	f104 0619 	add.w	r6, r4, #25
 8006eb0:	e7f5      	b.n	8006e9e <_printf_i+0x222>
 8006eb2:	bf00      	nop
 8006eb4:	0800c728 	.word	0x0800c728
 8006eb8:	0800c739 	.word	0x0800c739

08006ebc <_scanf_float>:
 8006ebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ec0:	b087      	sub	sp, #28
 8006ec2:	4617      	mov	r7, r2
 8006ec4:	9303      	str	r3, [sp, #12]
 8006ec6:	688b      	ldr	r3, [r1, #8]
 8006ec8:	1e5a      	subs	r2, r3, #1
 8006eca:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006ece:	bf81      	itttt	hi
 8006ed0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006ed4:	eb03 0b05 	addhi.w	fp, r3, r5
 8006ed8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006edc:	608b      	strhi	r3, [r1, #8]
 8006ede:	680b      	ldr	r3, [r1, #0]
 8006ee0:	460a      	mov	r2, r1
 8006ee2:	f04f 0500 	mov.w	r5, #0
 8006ee6:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006eea:	f842 3b1c 	str.w	r3, [r2], #28
 8006eee:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006ef2:	4680      	mov	r8, r0
 8006ef4:	460c      	mov	r4, r1
 8006ef6:	bf98      	it	ls
 8006ef8:	f04f 0b00 	movls.w	fp, #0
 8006efc:	9201      	str	r2, [sp, #4]
 8006efe:	4616      	mov	r6, r2
 8006f00:	46aa      	mov	sl, r5
 8006f02:	46a9      	mov	r9, r5
 8006f04:	9502      	str	r5, [sp, #8]
 8006f06:	68a2      	ldr	r2, [r4, #8]
 8006f08:	b152      	cbz	r2, 8006f20 <_scanf_float+0x64>
 8006f0a:	683b      	ldr	r3, [r7, #0]
 8006f0c:	781b      	ldrb	r3, [r3, #0]
 8006f0e:	2b4e      	cmp	r3, #78	@ 0x4e
 8006f10:	d864      	bhi.n	8006fdc <_scanf_float+0x120>
 8006f12:	2b40      	cmp	r3, #64	@ 0x40
 8006f14:	d83c      	bhi.n	8006f90 <_scanf_float+0xd4>
 8006f16:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006f1a:	b2c8      	uxtb	r0, r1
 8006f1c:	280e      	cmp	r0, #14
 8006f1e:	d93a      	bls.n	8006f96 <_scanf_float+0xda>
 8006f20:	f1b9 0f00 	cmp.w	r9, #0
 8006f24:	d003      	beq.n	8006f2e <_scanf_float+0x72>
 8006f26:	6823      	ldr	r3, [r4, #0]
 8006f28:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006f2c:	6023      	str	r3, [r4, #0]
 8006f2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006f32:	f1ba 0f01 	cmp.w	sl, #1
 8006f36:	f200 8117 	bhi.w	8007168 <_scanf_float+0x2ac>
 8006f3a:	9b01      	ldr	r3, [sp, #4]
 8006f3c:	429e      	cmp	r6, r3
 8006f3e:	f200 8108 	bhi.w	8007152 <_scanf_float+0x296>
 8006f42:	2001      	movs	r0, #1
 8006f44:	b007      	add	sp, #28
 8006f46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006f4a:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006f4e:	2a0d      	cmp	r2, #13
 8006f50:	d8e6      	bhi.n	8006f20 <_scanf_float+0x64>
 8006f52:	a101      	add	r1, pc, #4	@ (adr r1, 8006f58 <_scanf_float+0x9c>)
 8006f54:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006f58:	0800709f 	.word	0x0800709f
 8006f5c:	08006f21 	.word	0x08006f21
 8006f60:	08006f21 	.word	0x08006f21
 8006f64:	08006f21 	.word	0x08006f21
 8006f68:	080070ff 	.word	0x080070ff
 8006f6c:	080070d7 	.word	0x080070d7
 8006f70:	08006f21 	.word	0x08006f21
 8006f74:	08006f21 	.word	0x08006f21
 8006f78:	080070ad 	.word	0x080070ad
 8006f7c:	08006f21 	.word	0x08006f21
 8006f80:	08006f21 	.word	0x08006f21
 8006f84:	08006f21 	.word	0x08006f21
 8006f88:	08006f21 	.word	0x08006f21
 8006f8c:	08007065 	.word	0x08007065
 8006f90:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006f94:	e7db      	b.n	8006f4e <_scanf_float+0x92>
 8006f96:	290e      	cmp	r1, #14
 8006f98:	d8c2      	bhi.n	8006f20 <_scanf_float+0x64>
 8006f9a:	a001      	add	r0, pc, #4	@ (adr r0, 8006fa0 <_scanf_float+0xe4>)
 8006f9c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006fa0:	08007055 	.word	0x08007055
 8006fa4:	08006f21 	.word	0x08006f21
 8006fa8:	08007055 	.word	0x08007055
 8006fac:	080070eb 	.word	0x080070eb
 8006fb0:	08006f21 	.word	0x08006f21
 8006fb4:	08006ffd 	.word	0x08006ffd
 8006fb8:	0800703b 	.word	0x0800703b
 8006fbc:	0800703b 	.word	0x0800703b
 8006fc0:	0800703b 	.word	0x0800703b
 8006fc4:	0800703b 	.word	0x0800703b
 8006fc8:	0800703b 	.word	0x0800703b
 8006fcc:	0800703b 	.word	0x0800703b
 8006fd0:	0800703b 	.word	0x0800703b
 8006fd4:	0800703b 	.word	0x0800703b
 8006fd8:	0800703b 	.word	0x0800703b
 8006fdc:	2b6e      	cmp	r3, #110	@ 0x6e
 8006fde:	d809      	bhi.n	8006ff4 <_scanf_float+0x138>
 8006fe0:	2b60      	cmp	r3, #96	@ 0x60
 8006fe2:	d8b2      	bhi.n	8006f4a <_scanf_float+0x8e>
 8006fe4:	2b54      	cmp	r3, #84	@ 0x54
 8006fe6:	d07b      	beq.n	80070e0 <_scanf_float+0x224>
 8006fe8:	2b59      	cmp	r3, #89	@ 0x59
 8006fea:	d199      	bne.n	8006f20 <_scanf_float+0x64>
 8006fec:	2d07      	cmp	r5, #7
 8006fee:	d197      	bne.n	8006f20 <_scanf_float+0x64>
 8006ff0:	2508      	movs	r5, #8
 8006ff2:	e02c      	b.n	800704e <_scanf_float+0x192>
 8006ff4:	2b74      	cmp	r3, #116	@ 0x74
 8006ff6:	d073      	beq.n	80070e0 <_scanf_float+0x224>
 8006ff8:	2b79      	cmp	r3, #121	@ 0x79
 8006ffa:	e7f6      	b.n	8006fea <_scanf_float+0x12e>
 8006ffc:	6821      	ldr	r1, [r4, #0]
 8006ffe:	05c8      	lsls	r0, r1, #23
 8007000:	d51b      	bpl.n	800703a <_scanf_float+0x17e>
 8007002:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8007006:	6021      	str	r1, [r4, #0]
 8007008:	f109 0901 	add.w	r9, r9, #1
 800700c:	f1bb 0f00 	cmp.w	fp, #0
 8007010:	d003      	beq.n	800701a <_scanf_float+0x15e>
 8007012:	3201      	adds	r2, #1
 8007014:	f10b 3bff 	add.w	fp, fp, #4294967295
 8007018:	60a2      	str	r2, [r4, #8]
 800701a:	68a3      	ldr	r3, [r4, #8]
 800701c:	3b01      	subs	r3, #1
 800701e:	60a3      	str	r3, [r4, #8]
 8007020:	6923      	ldr	r3, [r4, #16]
 8007022:	3301      	adds	r3, #1
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	3b01      	subs	r3, #1
 800702a:	2b00      	cmp	r3, #0
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	f340 8087 	ble.w	8007140 <_scanf_float+0x284>
 8007032:	683b      	ldr	r3, [r7, #0]
 8007034:	3301      	adds	r3, #1
 8007036:	603b      	str	r3, [r7, #0]
 8007038:	e765      	b.n	8006f06 <_scanf_float+0x4a>
 800703a:	eb1a 0105 	adds.w	r1, sl, r5
 800703e:	f47f af6f 	bne.w	8006f20 <_scanf_float+0x64>
 8007042:	6822      	ldr	r2, [r4, #0]
 8007044:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007048:	6022      	str	r2, [r4, #0]
 800704a:	460d      	mov	r5, r1
 800704c:	468a      	mov	sl, r1
 800704e:	f806 3b01 	strb.w	r3, [r6], #1
 8007052:	e7e2      	b.n	800701a <_scanf_float+0x15e>
 8007054:	6822      	ldr	r2, [r4, #0]
 8007056:	0610      	lsls	r0, r2, #24
 8007058:	f57f af62 	bpl.w	8006f20 <_scanf_float+0x64>
 800705c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007060:	6022      	str	r2, [r4, #0]
 8007062:	e7f4      	b.n	800704e <_scanf_float+0x192>
 8007064:	f1ba 0f00 	cmp.w	sl, #0
 8007068:	d10e      	bne.n	8007088 <_scanf_float+0x1cc>
 800706a:	f1b9 0f00 	cmp.w	r9, #0
 800706e:	d10e      	bne.n	800708e <_scanf_float+0x1d2>
 8007070:	6822      	ldr	r2, [r4, #0]
 8007072:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8007076:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 800707a:	d108      	bne.n	800708e <_scanf_float+0x1d2>
 800707c:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007080:	6022      	str	r2, [r4, #0]
 8007082:	f04f 0a01 	mov.w	sl, #1
 8007086:	e7e2      	b.n	800704e <_scanf_float+0x192>
 8007088:	f1ba 0f02 	cmp.w	sl, #2
 800708c:	d055      	beq.n	800713a <_scanf_float+0x27e>
 800708e:	2d01      	cmp	r5, #1
 8007090:	d002      	beq.n	8007098 <_scanf_float+0x1dc>
 8007092:	2d04      	cmp	r5, #4
 8007094:	f47f af44 	bne.w	8006f20 <_scanf_float+0x64>
 8007098:	3501      	adds	r5, #1
 800709a:	b2ed      	uxtb	r5, r5
 800709c:	e7d7      	b.n	800704e <_scanf_float+0x192>
 800709e:	f1ba 0f01 	cmp.w	sl, #1
 80070a2:	f47f af3d 	bne.w	8006f20 <_scanf_float+0x64>
 80070a6:	f04f 0a02 	mov.w	sl, #2
 80070aa:	e7d0      	b.n	800704e <_scanf_float+0x192>
 80070ac:	b97d      	cbnz	r5, 80070ce <_scanf_float+0x212>
 80070ae:	f1b9 0f00 	cmp.w	r9, #0
 80070b2:	f47f af38 	bne.w	8006f26 <_scanf_float+0x6a>
 80070b6:	6822      	ldr	r2, [r4, #0]
 80070b8:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80070bc:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80070c0:	f040 8108 	bne.w	80072d4 <_scanf_float+0x418>
 80070c4:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80070c8:	6022      	str	r2, [r4, #0]
 80070ca:	2501      	movs	r5, #1
 80070cc:	e7bf      	b.n	800704e <_scanf_float+0x192>
 80070ce:	2d03      	cmp	r5, #3
 80070d0:	d0e2      	beq.n	8007098 <_scanf_float+0x1dc>
 80070d2:	2d05      	cmp	r5, #5
 80070d4:	e7de      	b.n	8007094 <_scanf_float+0x1d8>
 80070d6:	2d02      	cmp	r5, #2
 80070d8:	f47f af22 	bne.w	8006f20 <_scanf_float+0x64>
 80070dc:	2503      	movs	r5, #3
 80070de:	e7b6      	b.n	800704e <_scanf_float+0x192>
 80070e0:	2d06      	cmp	r5, #6
 80070e2:	f47f af1d 	bne.w	8006f20 <_scanf_float+0x64>
 80070e6:	2507      	movs	r5, #7
 80070e8:	e7b1      	b.n	800704e <_scanf_float+0x192>
 80070ea:	6822      	ldr	r2, [r4, #0]
 80070ec:	0591      	lsls	r1, r2, #22
 80070ee:	f57f af17 	bpl.w	8006f20 <_scanf_float+0x64>
 80070f2:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 80070f6:	6022      	str	r2, [r4, #0]
 80070f8:	f8cd 9008 	str.w	r9, [sp, #8]
 80070fc:	e7a7      	b.n	800704e <_scanf_float+0x192>
 80070fe:	6822      	ldr	r2, [r4, #0]
 8007100:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007104:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007108:	d006      	beq.n	8007118 <_scanf_float+0x25c>
 800710a:	0550      	lsls	r0, r2, #21
 800710c:	f57f af08 	bpl.w	8006f20 <_scanf_float+0x64>
 8007110:	f1b9 0f00 	cmp.w	r9, #0
 8007114:	f000 80de 	beq.w	80072d4 <_scanf_float+0x418>
 8007118:	0591      	lsls	r1, r2, #22
 800711a:	bf58      	it	pl
 800711c:	9902      	ldrpl	r1, [sp, #8]
 800711e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007122:	bf58      	it	pl
 8007124:	eba9 0101 	subpl.w	r1, r9, r1
 8007128:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800712c:	bf58      	it	pl
 800712e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007132:	6022      	str	r2, [r4, #0]
 8007134:	f04f 0900 	mov.w	r9, #0
 8007138:	e789      	b.n	800704e <_scanf_float+0x192>
 800713a:	f04f 0a03 	mov.w	sl, #3
 800713e:	e786      	b.n	800704e <_scanf_float+0x192>
 8007140:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007144:	4639      	mov	r1, r7
 8007146:	4640      	mov	r0, r8
 8007148:	4798      	blx	r3
 800714a:	2800      	cmp	r0, #0
 800714c:	f43f aedb 	beq.w	8006f06 <_scanf_float+0x4a>
 8007150:	e6e6      	b.n	8006f20 <_scanf_float+0x64>
 8007152:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007156:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800715a:	463a      	mov	r2, r7
 800715c:	4640      	mov	r0, r8
 800715e:	4798      	blx	r3
 8007160:	6923      	ldr	r3, [r4, #16]
 8007162:	3b01      	subs	r3, #1
 8007164:	6123      	str	r3, [r4, #16]
 8007166:	e6e8      	b.n	8006f3a <_scanf_float+0x7e>
 8007168:	1e6b      	subs	r3, r5, #1
 800716a:	2b06      	cmp	r3, #6
 800716c:	d824      	bhi.n	80071b8 <_scanf_float+0x2fc>
 800716e:	2d02      	cmp	r5, #2
 8007170:	d836      	bhi.n	80071e0 <_scanf_float+0x324>
 8007172:	9b01      	ldr	r3, [sp, #4]
 8007174:	429e      	cmp	r6, r3
 8007176:	f67f aee4 	bls.w	8006f42 <_scanf_float+0x86>
 800717a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800717e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007182:	463a      	mov	r2, r7
 8007184:	4640      	mov	r0, r8
 8007186:	4798      	blx	r3
 8007188:	6923      	ldr	r3, [r4, #16]
 800718a:	3b01      	subs	r3, #1
 800718c:	6123      	str	r3, [r4, #16]
 800718e:	e7f0      	b.n	8007172 <_scanf_float+0x2b6>
 8007190:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007194:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007198:	463a      	mov	r2, r7
 800719a:	4640      	mov	r0, r8
 800719c:	4798      	blx	r3
 800719e:	6923      	ldr	r3, [r4, #16]
 80071a0:	3b01      	subs	r3, #1
 80071a2:	6123      	str	r3, [r4, #16]
 80071a4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80071a8:	fa5f fa8a 	uxtb.w	sl, sl
 80071ac:	f1ba 0f02 	cmp.w	sl, #2
 80071b0:	d1ee      	bne.n	8007190 <_scanf_float+0x2d4>
 80071b2:	3d03      	subs	r5, #3
 80071b4:	b2ed      	uxtb	r5, r5
 80071b6:	1b76      	subs	r6, r6, r5
 80071b8:	6823      	ldr	r3, [r4, #0]
 80071ba:	05da      	lsls	r2, r3, #23
 80071bc:	d530      	bpl.n	8007220 <_scanf_float+0x364>
 80071be:	055b      	lsls	r3, r3, #21
 80071c0:	d511      	bpl.n	80071e6 <_scanf_float+0x32a>
 80071c2:	9b01      	ldr	r3, [sp, #4]
 80071c4:	429e      	cmp	r6, r3
 80071c6:	f67f aebc 	bls.w	8006f42 <_scanf_float+0x86>
 80071ca:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80071ce:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80071d2:	463a      	mov	r2, r7
 80071d4:	4640      	mov	r0, r8
 80071d6:	4798      	blx	r3
 80071d8:	6923      	ldr	r3, [r4, #16]
 80071da:	3b01      	subs	r3, #1
 80071dc:	6123      	str	r3, [r4, #16]
 80071de:	e7f0      	b.n	80071c2 <_scanf_float+0x306>
 80071e0:	46aa      	mov	sl, r5
 80071e2:	46b3      	mov	fp, r6
 80071e4:	e7de      	b.n	80071a4 <_scanf_float+0x2e8>
 80071e6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80071ea:	6923      	ldr	r3, [r4, #16]
 80071ec:	2965      	cmp	r1, #101	@ 0x65
 80071ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80071f2:	f106 35ff 	add.w	r5, r6, #4294967295
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	d00c      	beq.n	8007214 <_scanf_float+0x358>
 80071fa:	2945      	cmp	r1, #69	@ 0x45
 80071fc:	d00a      	beq.n	8007214 <_scanf_float+0x358>
 80071fe:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007202:	463a      	mov	r2, r7
 8007204:	4640      	mov	r0, r8
 8007206:	4798      	blx	r3
 8007208:	6923      	ldr	r3, [r4, #16]
 800720a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800720e:	3b01      	subs	r3, #1
 8007210:	1eb5      	subs	r5, r6, #2
 8007212:	6123      	str	r3, [r4, #16]
 8007214:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007218:	463a      	mov	r2, r7
 800721a:	4640      	mov	r0, r8
 800721c:	4798      	blx	r3
 800721e:	462e      	mov	r6, r5
 8007220:	6822      	ldr	r2, [r4, #0]
 8007222:	f012 0210 	ands.w	r2, r2, #16
 8007226:	d001      	beq.n	800722c <_scanf_float+0x370>
 8007228:	2000      	movs	r0, #0
 800722a:	e68b      	b.n	8006f44 <_scanf_float+0x88>
 800722c:	7032      	strb	r2, [r6, #0]
 800722e:	6823      	ldr	r3, [r4, #0]
 8007230:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007234:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007238:	d11c      	bne.n	8007274 <_scanf_float+0x3b8>
 800723a:	9b02      	ldr	r3, [sp, #8]
 800723c:	454b      	cmp	r3, r9
 800723e:	eba3 0209 	sub.w	r2, r3, r9
 8007242:	d123      	bne.n	800728c <_scanf_float+0x3d0>
 8007244:	9901      	ldr	r1, [sp, #4]
 8007246:	2200      	movs	r2, #0
 8007248:	4640      	mov	r0, r8
 800724a:	f7ff f9cd 	bl	80065e8 <_strtod_r>
 800724e:	9b03      	ldr	r3, [sp, #12]
 8007250:	6821      	ldr	r1, [r4, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	f011 0f02 	tst.w	r1, #2
 8007258:	ec57 6b10 	vmov	r6, r7, d0
 800725c:	f103 0204 	add.w	r2, r3, #4
 8007260:	d01f      	beq.n	80072a2 <_scanf_float+0x3e6>
 8007262:	9903      	ldr	r1, [sp, #12]
 8007264:	600a      	str	r2, [r1, #0]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	e9c3 6700 	strd	r6, r7, [r3]
 800726c:	68e3      	ldr	r3, [r4, #12]
 800726e:	3301      	adds	r3, #1
 8007270:	60e3      	str	r3, [r4, #12]
 8007272:	e7d9      	b.n	8007228 <_scanf_float+0x36c>
 8007274:	9b04      	ldr	r3, [sp, #16]
 8007276:	2b00      	cmp	r3, #0
 8007278:	d0e4      	beq.n	8007244 <_scanf_float+0x388>
 800727a:	9905      	ldr	r1, [sp, #20]
 800727c:	230a      	movs	r3, #10
 800727e:	3101      	adds	r1, #1
 8007280:	4640      	mov	r0, r8
 8007282:	f002 fa6d 	bl	8009760 <_strtol_r>
 8007286:	9b04      	ldr	r3, [sp, #16]
 8007288:	9e05      	ldr	r6, [sp, #20]
 800728a:	1ac2      	subs	r2, r0, r3
 800728c:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007290:	429e      	cmp	r6, r3
 8007292:	bf28      	it	cs
 8007294:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007298:	4910      	ldr	r1, [pc, #64]	@ (80072dc <_scanf_float+0x420>)
 800729a:	4630      	mov	r0, r6
 800729c:	f000 f8e4 	bl	8007468 <siprintf>
 80072a0:	e7d0      	b.n	8007244 <_scanf_float+0x388>
 80072a2:	f011 0f04 	tst.w	r1, #4
 80072a6:	9903      	ldr	r1, [sp, #12]
 80072a8:	600a      	str	r2, [r1, #0]
 80072aa:	d1dc      	bne.n	8007266 <_scanf_float+0x3aa>
 80072ac:	681d      	ldr	r5, [r3, #0]
 80072ae:	4632      	mov	r2, r6
 80072b0:	463b      	mov	r3, r7
 80072b2:	4630      	mov	r0, r6
 80072b4:	4639      	mov	r1, r7
 80072b6:	f7f9 fc41 	bl	8000b3c <__aeabi_dcmpun>
 80072ba:	b128      	cbz	r0, 80072c8 <_scanf_float+0x40c>
 80072bc:	4808      	ldr	r0, [pc, #32]	@ (80072e0 <_scanf_float+0x424>)
 80072be:	f000 fa67 	bl	8007790 <nanf>
 80072c2:	ed85 0a00 	vstr	s0, [r5]
 80072c6:	e7d1      	b.n	800726c <_scanf_float+0x3b0>
 80072c8:	4630      	mov	r0, r6
 80072ca:	4639      	mov	r1, r7
 80072cc:	f7f9 fc94 	bl	8000bf8 <__aeabi_d2f>
 80072d0:	6028      	str	r0, [r5, #0]
 80072d2:	e7cb      	b.n	800726c <_scanf_float+0x3b0>
 80072d4:	f04f 0900 	mov.w	r9, #0
 80072d8:	e629      	b.n	8006f2e <_scanf_float+0x72>
 80072da:	bf00      	nop
 80072dc:	0800c74a 	.word	0x0800c74a
 80072e0:	0800c803 	.word	0x0800c803

080072e4 <std>:
 80072e4:	2300      	movs	r3, #0
 80072e6:	b510      	push	{r4, lr}
 80072e8:	4604      	mov	r4, r0
 80072ea:	e9c0 3300 	strd	r3, r3, [r0]
 80072ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80072f2:	6083      	str	r3, [r0, #8]
 80072f4:	8181      	strh	r1, [r0, #12]
 80072f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80072f8:	81c2      	strh	r2, [r0, #14]
 80072fa:	6183      	str	r3, [r0, #24]
 80072fc:	4619      	mov	r1, r3
 80072fe:	2208      	movs	r2, #8
 8007300:	305c      	adds	r0, #92	@ 0x5c
 8007302:	f000 f940 	bl	8007586 <memset>
 8007306:	4b0d      	ldr	r3, [pc, #52]	@ (800733c <std+0x58>)
 8007308:	6263      	str	r3, [r4, #36]	@ 0x24
 800730a:	4b0d      	ldr	r3, [pc, #52]	@ (8007340 <std+0x5c>)
 800730c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800730e:	4b0d      	ldr	r3, [pc, #52]	@ (8007344 <std+0x60>)
 8007310:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007312:	4b0d      	ldr	r3, [pc, #52]	@ (8007348 <std+0x64>)
 8007314:	6323      	str	r3, [r4, #48]	@ 0x30
 8007316:	4b0d      	ldr	r3, [pc, #52]	@ (800734c <std+0x68>)
 8007318:	6224      	str	r4, [r4, #32]
 800731a:	429c      	cmp	r4, r3
 800731c:	d006      	beq.n	800732c <std+0x48>
 800731e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007322:	4294      	cmp	r4, r2
 8007324:	d002      	beq.n	800732c <std+0x48>
 8007326:	33d0      	adds	r3, #208	@ 0xd0
 8007328:	429c      	cmp	r4, r3
 800732a:	d105      	bne.n	8007338 <std+0x54>
 800732c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007330:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007334:	f000 ba12 	b.w	800775c <__retarget_lock_init_recursive>
 8007338:	bd10      	pop	{r4, pc}
 800733a:	bf00      	nop
 800733c:	080074fd 	.word	0x080074fd
 8007340:	08007523 	.word	0x08007523
 8007344:	0800755b 	.word	0x0800755b
 8007348:	0800757f 	.word	0x0800757f
 800734c:	20000810 	.word	0x20000810

08007350 <stdio_exit_handler>:
 8007350:	4a02      	ldr	r2, [pc, #8]	@ (800735c <stdio_exit_handler+0xc>)
 8007352:	4903      	ldr	r1, [pc, #12]	@ (8007360 <stdio_exit_handler+0x10>)
 8007354:	4803      	ldr	r0, [pc, #12]	@ (8007364 <stdio_exit_handler+0x14>)
 8007356:	f000 b869 	b.w	800742c <_fwalk_sglue>
 800735a:	bf00      	nop
 800735c:	2000004c 	.word	0x2000004c
 8007360:	0800a169 	.word	0x0800a169
 8007364:	200001c8 	.word	0x200001c8

08007368 <cleanup_stdio>:
 8007368:	6841      	ldr	r1, [r0, #4]
 800736a:	4b0c      	ldr	r3, [pc, #48]	@ (800739c <cleanup_stdio+0x34>)
 800736c:	4299      	cmp	r1, r3
 800736e:	b510      	push	{r4, lr}
 8007370:	4604      	mov	r4, r0
 8007372:	d001      	beq.n	8007378 <cleanup_stdio+0x10>
 8007374:	f002 fef8 	bl	800a168 <_fflush_r>
 8007378:	68a1      	ldr	r1, [r4, #8]
 800737a:	4b09      	ldr	r3, [pc, #36]	@ (80073a0 <cleanup_stdio+0x38>)
 800737c:	4299      	cmp	r1, r3
 800737e:	d002      	beq.n	8007386 <cleanup_stdio+0x1e>
 8007380:	4620      	mov	r0, r4
 8007382:	f002 fef1 	bl	800a168 <_fflush_r>
 8007386:	68e1      	ldr	r1, [r4, #12]
 8007388:	4b06      	ldr	r3, [pc, #24]	@ (80073a4 <cleanup_stdio+0x3c>)
 800738a:	4299      	cmp	r1, r3
 800738c:	d004      	beq.n	8007398 <cleanup_stdio+0x30>
 800738e:	4620      	mov	r0, r4
 8007390:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007394:	f002 bee8 	b.w	800a168 <_fflush_r>
 8007398:	bd10      	pop	{r4, pc}
 800739a:	bf00      	nop
 800739c:	20000810 	.word	0x20000810
 80073a0:	20000878 	.word	0x20000878
 80073a4:	200008e0 	.word	0x200008e0

080073a8 <global_stdio_init.part.0>:
 80073a8:	b510      	push	{r4, lr}
 80073aa:	4b0b      	ldr	r3, [pc, #44]	@ (80073d8 <global_stdio_init.part.0+0x30>)
 80073ac:	4c0b      	ldr	r4, [pc, #44]	@ (80073dc <global_stdio_init.part.0+0x34>)
 80073ae:	4a0c      	ldr	r2, [pc, #48]	@ (80073e0 <global_stdio_init.part.0+0x38>)
 80073b0:	601a      	str	r2, [r3, #0]
 80073b2:	4620      	mov	r0, r4
 80073b4:	2200      	movs	r2, #0
 80073b6:	2104      	movs	r1, #4
 80073b8:	f7ff ff94 	bl	80072e4 <std>
 80073bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80073c0:	2201      	movs	r2, #1
 80073c2:	2109      	movs	r1, #9
 80073c4:	f7ff ff8e 	bl	80072e4 <std>
 80073c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80073cc:	2202      	movs	r2, #2
 80073ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80073d2:	2112      	movs	r1, #18
 80073d4:	f7ff bf86 	b.w	80072e4 <std>
 80073d8:	20000948 	.word	0x20000948
 80073dc:	20000810 	.word	0x20000810
 80073e0:	08007351 	.word	0x08007351

080073e4 <__sfp_lock_acquire>:
 80073e4:	4801      	ldr	r0, [pc, #4]	@ (80073ec <__sfp_lock_acquire+0x8>)
 80073e6:	f000 b9ba 	b.w	800775e <__retarget_lock_acquire_recursive>
 80073ea:	bf00      	nop
 80073ec:	20000951 	.word	0x20000951

080073f0 <__sfp_lock_release>:
 80073f0:	4801      	ldr	r0, [pc, #4]	@ (80073f8 <__sfp_lock_release+0x8>)
 80073f2:	f000 b9b5 	b.w	8007760 <__retarget_lock_release_recursive>
 80073f6:	bf00      	nop
 80073f8:	20000951 	.word	0x20000951

080073fc <__sinit>:
 80073fc:	b510      	push	{r4, lr}
 80073fe:	4604      	mov	r4, r0
 8007400:	f7ff fff0 	bl	80073e4 <__sfp_lock_acquire>
 8007404:	6a23      	ldr	r3, [r4, #32]
 8007406:	b11b      	cbz	r3, 8007410 <__sinit+0x14>
 8007408:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800740c:	f7ff bff0 	b.w	80073f0 <__sfp_lock_release>
 8007410:	4b04      	ldr	r3, [pc, #16]	@ (8007424 <__sinit+0x28>)
 8007412:	6223      	str	r3, [r4, #32]
 8007414:	4b04      	ldr	r3, [pc, #16]	@ (8007428 <__sinit+0x2c>)
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	2b00      	cmp	r3, #0
 800741a:	d1f5      	bne.n	8007408 <__sinit+0xc>
 800741c:	f7ff ffc4 	bl	80073a8 <global_stdio_init.part.0>
 8007420:	e7f2      	b.n	8007408 <__sinit+0xc>
 8007422:	bf00      	nop
 8007424:	08007369 	.word	0x08007369
 8007428:	20000948 	.word	0x20000948

0800742c <_fwalk_sglue>:
 800742c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007430:	4607      	mov	r7, r0
 8007432:	4688      	mov	r8, r1
 8007434:	4614      	mov	r4, r2
 8007436:	2600      	movs	r6, #0
 8007438:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800743c:	f1b9 0901 	subs.w	r9, r9, #1
 8007440:	d505      	bpl.n	800744e <_fwalk_sglue+0x22>
 8007442:	6824      	ldr	r4, [r4, #0]
 8007444:	2c00      	cmp	r4, #0
 8007446:	d1f7      	bne.n	8007438 <_fwalk_sglue+0xc>
 8007448:	4630      	mov	r0, r6
 800744a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800744e:	89ab      	ldrh	r3, [r5, #12]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d907      	bls.n	8007464 <_fwalk_sglue+0x38>
 8007454:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007458:	3301      	adds	r3, #1
 800745a:	d003      	beq.n	8007464 <_fwalk_sglue+0x38>
 800745c:	4629      	mov	r1, r5
 800745e:	4638      	mov	r0, r7
 8007460:	47c0      	blx	r8
 8007462:	4306      	orrs	r6, r0
 8007464:	3568      	adds	r5, #104	@ 0x68
 8007466:	e7e9      	b.n	800743c <_fwalk_sglue+0x10>

08007468 <siprintf>:
 8007468:	b40e      	push	{r1, r2, r3}
 800746a:	b500      	push	{lr}
 800746c:	b09c      	sub	sp, #112	@ 0x70
 800746e:	ab1d      	add	r3, sp, #116	@ 0x74
 8007470:	9002      	str	r0, [sp, #8]
 8007472:	9006      	str	r0, [sp, #24]
 8007474:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007478:	4809      	ldr	r0, [pc, #36]	@ (80074a0 <siprintf+0x38>)
 800747a:	9107      	str	r1, [sp, #28]
 800747c:	9104      	str	r1, [sp, #16]
 800747e:	4909      	ldr	r1, [pc, #36]	@ (80074a4 <siprintf+0x3c>)
 8007480:	f853 2b04 	ldr.w	r2, [r3], #4
 8007484:	9105      	str	r1, [sp, #20]
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	a902      	add	r1, sp, #8
 800748c:	f002 f9d2 	bl	8009834 <_svfiprintf_r>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	2200      	movs	r2, #0
 8007494:	701a      	strb	r2, [r3, #0]
 8007496:	b01c      	add	sp, #112	@ 0x70
 8007498:	f85d eb04 	ldr.w	lr, [sp], #4
 800749c:	b003      	add	sp, #12
 800749e:	4770      	bx	lr
 80074a0:	200001c4 	.word	0x200001c4
 80074a4:	ffff0208 	.word	0xffff0208

080074a8 <siscanf>:
 80074a8:	b40e      	push	{r1, r2, r3}
 80074aa:	b530      	push	{r4, r5, lr}
 80074ac:	b09c      	sub	sp, #112	@ 0x70
 80074ae:	ac1f      	add	r4, sp, #124	@ 0x7c
 80074b0:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80074b4:	f854 5b04 	ldr.w	r5, [r4], #4
 80074b8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80074bc:	9002      	str	r0, [sp, #8]
 80074be:	9006      	str	r0, [sp, #24]
 80074c0:	f7f8 fede 	bl	8000280 <strlen>
 80074c4:	4b0b      	ldr	r3, [pc, #44]	@ (80074f4 <siscanf+0x4c>)
 80074c6:	9003      	str	r0, [sp, #12]
 80074c8:	9007      	str	r0, [sp, #28]
 80074ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80074cc:	480a      	ldr	r0, [pc, #40]	@ (80074f8 <siscanf+0x50>)
 80074ce:	9401      	str	r4, [sp, #4]
 80074d0:	2300      	movs	r3, #0
 80074d2:	930f      	str	r3, [sp, #60]	@ 0x3c
 80074d4:	9314      	str	r3, [sp, #80]	@ 0x50
 80074d6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80074da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80074de:	462a      	mov	r2, r5
 80074e0:	4623      	mov	r3, r4
 80074e2:	a902      	add	r1, sp, #8
 80074e4:	6800      	ldr	r0, [r0, #0]
 80074e6:	f002 faf9 	bl	8009adc <__ssvfiscanf_r>
 80074ea:	b01c      	add	sp, #112	@ 0x70
 80074ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80074f0:	b003      	add	sp, #12
 80074f2:	4770      	bx	lr
 80074f4:	0800751f 	.word	0x0800751f
 80074f8:	200001c4 	.word	0x200001c4

080074fc <__sread>:
 80074fc:	b510      	push	{r4, lr}
 80074fe:	460c      	mov	r4, r1
 8007500:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007504:	f000 f8dc 	bl	80076c0 <_read_r>
 8007508:	2800      	cmp	r0, #0
 800750a:	bfab      	itete	ge
 800750c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800750e:	89a3      	ldrhlt	r3, [r4, #12]
 8007510:	181b      	addge	r3, r3, r0
 8007512:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007516:	bfac      	ite	ge
 8007518:	6563      	strge	r3, [r4, #84]	@ 0x54
 800751a:	81a3      	strhlt	r3, [r4, #12]
 800751c:	bd10      	pop	{r4, pc}

0800751e <__seofread>:
 800751e:	2000      	movs	r0, #0
 8007520:	4770      	bx	lr

08007522 <__swrite>:
 8007522:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007526:	461f      	mov	r7, r3
 8007528:	898b      	ldrh	r3, [r1, #12]
 800752a:	05db      	lsls	r3, r3, #23
 800752c:	4605      	mov	r5, r0
 800752e:	460c      	mov	r4, r1
 8007530:	4616      	mov	r6, r2
 8007532:	d505      	bpl.n	8007540 <__swrite+0x1e>
 8007534:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007538:	2302      	movs	r3, #2
 800753a:	2200      	movs	r2, #0
 800753c:	f000 f8ae 	bl	800769c <_lseek_r>
 8007540:	89a3      	ldrh	r3, [r4, #12]
 8007542:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007546:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800754a:	81a3      	strh	r3, [r4, #12]
 800754c:	4632      	mov	r2, r6
 800754e:	463b      	mov	r3, r7
 8007550:	4628      	mov	r0, r5
 8007552:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007556:	f000 b8c5 	b.w	80076e4 <_write_r>

0800755a <__sseek>:
 800755a:	b510      	push	{r4, lr}
 800755c:	460c      	mov	r4, r1
 800755e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007562:	f000 f89b 	bl	800769c <_lseek_r>
 8007566:	1c43      	adds	r3, r0, #1
 8007568:	89a3      	ldrh	r3, [r4, #12]
 800756a:	bf15      	itete	ne
 800756c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800756e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007572:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007576:	81a3      	strheq	r3, [r4, #12]
 8007578:	bf18      	it	ne
 800757a:	81a3      	strhne	r3, [r4, #12]
 800757c:	bd10      	pop	{r4, pc}

0800757e <__sclose>:
 800757e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007582:	f000 b87b 	b.w	800767c <_close_r>

08007586 <memset>:
 8007586:	4402      	add	r2, r0
 8007588:	4603      	mov	r3, r0
 800758a:	4293      	cmp	r3, r2
 800758c:	d100      	bne.n	8007590 <memset+0xa>
 800758e:	4770      	bx	lr
 8007590:	f803 1b01 	strb.w	r1, [r3], #1
 8007594:	e7f9      	b.n	800758a <memset+0x4>

08007596 <strncmp>:
 8007596:	b510      	push	{r4, lr}
 8007598:	b16a      	cbz	r2, 80075b6 <strncmp+0x20>
 800759a:	3901      	subs	r1, #1
 800759c:	1884      	adds	r4, r0, r2
 800759e:	f810 2b01 	ldrb.w	r2, [r0], #1
 80075a2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80075a6:	429a      	cmp	r2, r3
 80075a8:	d103      	bne.n	80075b2 <strncmp+0x1c>
 80075aa:	42a0      	cmp	r0, r4
 80075ac:	d001      	beq.n	80075b2 <strncmp+0x1c>
 80075ae:	2a00      	cmp	r2, #0
 80075b0:	d1f5      	bne.n	800759e <strncmp+0x8>
 80075b2:	1ad0      	subs	r0, r2, r3
 80075b4:	bd10      	pop	{r4, pc}
 80075b6:	4610      	mov	r0, r2
 80075b8:	e7fc      	b.n	80075b4 <strncmp+0x1e>
	...

080075bc <strtok>:
 80075bc:	4b16      	ldr	r3, [pc, #88]	@ (8007618 <strtok+0x5c>)
 80075be:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80075c2:	681f      	ldr	r7, [r3, #0]
 80075c4:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 80075c6:	4605      	mov	r5, r0
 80075c8:	460e      	mov	r6, r1
 80075ca:	b9ec      	cbnz	r4, 8007608 <strtok+0x4c>
 80075cc:	2050      	movs	r0, #80	@ 0x50
 80075ce:	f001 fad3 	bl	8008b78 <malloc>
 80075d2:	4602      	mov	r2, r0
 80075d4:	6478      	str	r0, [r7, #68]	@ 0x44
 80075d6:	b920      	cbnz	r0, 80075e2 <strtok+0x26>
 80075d8:	4b10      	ldr	r3, [pc, #64]	@ (800761c <strtok+0x60>)
 80075da:	4811      	ldr	r0, [pc, #68]	@ (8007620 <strtok+0x64>)
 80075dc:	215b      	movs	r1, #91	@ 0x5b
 80075de:	f000 f8dd 	bl	800779c <__assert_func>
 80075e2:	e9c0 4400 	strd	r4, r4, [r0]
 80075e6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80075ea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80075ee:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 80075f2:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 80075f6:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 80075fa:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 80075fe:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8007602:	6184      	str	r4, [r0, #24]
 8007604:	7704      	strb	r4, [r0, #28]
 8007606:	6244      	str	r4, [r0, #36]	@ 0x24
 8007608:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800760a:	4631      	mov	r1, r6
 800760c:	4628      	mov	r0, r5
 800760e:	2301      	movs	r3, #1
 8007610:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007614:	f000 b806 	b.w	8007624 <__strtok_r>
 8007618:	200001c4 	.word	0x200001c4
 800761c:	0800c74f 	.word	0x0800c74f
 8007620:	0800c766 	.word	0x0800c766

08007624 <__strtok_r>:
 8007624:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007626:	4604      	mov	r4, r0
 8007628:	b908      	cbnz	r0, 800762e <__strtok_r+0xa>
 800762a:	6814      	ldr	r4, [r2, #0]
 800762c:	b144      	cbz	r4, 8007640 <__strtok_r+0x1c>
 800762e:	4620      	mov	r0, r4
 8007630:	f814 5b01 	ldrb.w	r5, [r4], #1
 8007634:	460f      	mov	r7, r1
 8007636:	f817 6b01 	ldrb.w	r6, [r7], #1
 800763a:	b91e      	cbnz	r6, 8007644 <__strtok_r+0x20>
 800763c:	b965      	cbnz	r5, 8007658 <__strtok_r+0x34>
 800763e:	6015      	str	r5, [r2, #0]
 8007640:	2000      	movs	r0, #0
 8007642:	e005      	b.n	8007650 <__strtok_r+0x2c>
 8007644:	42b5      	cmp	r5, r6
 8007646:	d1f6      	bne.n	8007636 <__strtok_r+0x12>
 8007648:	2b00      	cmp	r3, #0
 800764a:	d1f0      	bne.n	800762e <__strtok_r+0xa>
 800764c:	6014      	str	r4, [r2, #0]
 800764e:	7003      	strb	r3, [r0, #0]
 8007650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007652:	461c      	mov	r4, r3
 8007654:	e00c      	b.n	8007670 <__strtok_r+0x4c>
 8007656:	b915      	cbnz	r5, 800765e <__strtok_r+0x3a>
 8007658:	f814 3b01 	ldrb.w	r3, [r4], #1
 800765c:	460e      	mov	r6, r1
 800765e:	f816 5b01 	ldrb.w	r5, [r6], #1
 8007662:	42ab      	cmp	r3, r5
 8007664:	d1f7      	bne.n	8007656 <__strtok_r+0x32>
 8007666:	2b00      	cmp	r3, #0
 8007668:	d0f3      	beq.n	8007652 <__strtok_r+0x2e>
 800766a:	2300      	movs	r3, #0
 800766c:	f804 3c01 	strb.w	r3, [r4, #-1]
 8007670:	6014      	str	r4, [r2, #0]
 8007672:	e7ed      	b.n	8007650 <__strtok_r+0x2c>

08007674 <_localeconv_r>:
 8007674:	4800      	ldr	r0, [pc, #0]	@ (8007678 <_localeconv_r+0x4>)
 8007676:	4770      	bx	lr
 8007678:	20000148 	.word	0x20000148

0800767c <_close_r>:
 800767c:	b538      	push	{r3, r4, r5, lr}
 800767e:	4d06      	ldr	r5, [pc, #24]	@ (8007698 <_close_r+0x1c>)
 8007680:	2300      	movs	r3, #0
 8007682:	4604      	mov	r4, r0
 8007684:	4608      	mov	r0, r1
 8007686:	602b      	str	r3, [r5, #0]
 8007688:	f7fa fcec 	bl	8002064 <_close>
 800768c:	1c43      	adds	r3, r0, #1
 800768e:	d102      	bne.n	8007696 <_close_r+0x1a>
 8007690:	682b      	ldr	r3, [r5, #0]
 8007692:	b103      	cbz	r3, 8007696 <_close_r+0x1a>
 8007694:	6023      	str	r3, [r4, #0]
 8007696:	bd38      	pop	{r3, r4, r5, pc}
 8007698:	2000094c 	.word	0x2000094c

0800769c <_lseek_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d07      	ldr	r5, [pc, #28]	@ (80076bc <_lseek_r+0x20>)
 80076a0:	4604      	mov	r4, r0
 80076a2:	4608      	mov	r0, r1
 80076a4:	4611      	mov	r1, r2
 80076a6:	2200      	movs	r2, #0
 80076a8:	602a      	str	r2, [r5, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	f7fa fd01 	bl	80020b2 <_lseek>
 80076b0:	1c43      	adds	r3, r0, #1
 80076b2:	d102      	bne.n	80076ba <_lseek_r+0x1e>
 80076b4:	682b      	ldr	r3, [r5, #0]
 80076b6:	b103      	cbz	r3, 80076ba <_lseek_r+0x1e>
 80076b8:	6023      	str	r3, [r4, #0]
 80076ba:	bd38      	pop	{r3, r4, r5, pc}
 80076bc:	2000094c 	.word	0x2000094c

080076c0 <_read_r>:
 80076c0:	b538      	push	{r3, r4, r5, lr}
 80076c2:	4d07      	ldr	r5, [pc, #28]	@ (80076e0 <_read_r+0x20>)
 80076c4:	4604      	mov	r4, r0
 80076c6:	4608      	mov	r0, r1
 80076c8:	4611      	mov	r1, r2
 80076ca:	2200      	movs	r2, #0
 80076cc:	602a      	str	r2, [r5, #0]
 80076ce:	461a      	mov	r2, r3
 80076d0:	f7fa fc8f 	bl	8001ff2 <_read>
 80076d4:	1c43      	adds	r3, r0, #1
 80076d6:	d102      	bne.n	80076de <_read_r+0x1e>
 80076d8:	682b      	ldr	r3, [r5, #0]
 80076da:	b103      	cbz	r3, 80076de <_read_r+0x1e>
 80076dc:	6023      	str	r3, [r4, #0]
 80076de:	bd38      	pop	{r3, r4, r5, pc}
 80076e0:	2000094c 	.word	0x2000094c

080076e4 <_write_r>:
 80076e4:	b538      	push	{r3, r4, r5, lr}
 80076e6:	4d07      	ldr	r5, [pc, #28]	@ (8007704 <_write_r+0x20>)
 80076e8:	4604      	mov	r4, r0
 80076ea:	4608      	mov	r0, r1
 80076ec:	4611      	mov	r1, r2
 80076ee:	2200      	movs	r2, #0
 80076f0:	602a      	str	r2, [r5, #0]
 80076f2:	461a      	mov	r2, r3
 80076f4:	f7fa fc9a 	bl	800202c <_write>
 80076f8:	1c43      	adds	r3, r0, #1
 80076fa:	d102      	bne.n	8007702 <_write_r+0x1e>
 80076fc:	682b      	ldr	r3, [r5, #0]
 80076fe:	b103      	cbz	r3, 8007702 <_write_r+0x1e>
 8007700:	6023      	str	r3, [r4, #0]
 8007702:	bd38      	pop	{r3, r4, r5, pc}
 8007704:	2000094c 	.word	0x2000094c

08007708 <__errno>:
 8007708:	4b01      	ldr	r3, [pc, #4]	@ (8007710 <__errno+0x8>)
 800770a:	6818      	ldr	r0, [r3, #0]
 800770c:	4770      	bx	lr
 800770e:	bf00      	nop
 8007710:	200001c4 	.word	0x200001c4

08007714 <__libc_init_array>:
 8007714:	b570      	push	{r4, r5, r6, lr}
 8007716:	4d0d      	ldr	r5, [pc, #52]	@ (800774c <__libc_init_array+0x38>)
 8007718:	4c0d      	ldr	r4, [pc, #52]	@ (8007750 <__libc_init_array+0x3c>)
 800771a:	1b64      	subs	r4, r4, r5
 800771c:	10a4      	asrs	r4, r4, #2
 800771e:	2600      	movs	r6, #0
 8007720:	42a6      	cmp	r6, r4
 8007722:	d109      	bne.n	8007738 <__libc_init_array+0x24>
 8007724:	4d0b      	ldr	r5, [pc, #44]	@ (8007754 <__libc_init_array+0x40>)
 8007726:	4c0c      	ldr	r4, [pc, #48]	@ (8007758 <__libc_init_array+0x44>)
 8007728:	f004 ff5a 	bl	800c5e0 <_init>
 800772c:	1b64      	subs	r4, r4, r5
 800772e:	10a4      	asrs	r4, r4, #2
 8007730:	2600      	movs	r6, #0
 8007732:	42a6      	cmp	r6, r4
 8007734:	d105      	bne.n	8007742 <__libc_init_array+0x2e>
 8007736:	bd70      	pop	{r4, r5, r6, pc}
 8007738:	f855 3b04 	ldr.w	r3, [r5], #4
 800773c:	4798      	blx	r3
 800773e:	3601      	adds	r6, #1
 8007740:	e7ee      	b.n	8007720 <__libc_init_array+0xc>
 8007742:	f855 3b04 	ldr.w	r3, [r5], #4
 8007746:	4798      	blx	r3
 8007748:	3601      	adds	r6, #1
 800774a:	e7f2      	b.n	8007732 <__libc_init_array+0x1e>
 800774c:	0800cbb0 	.word	0x0800cbb0
 8007750:	0800cbb0 	.word	0x0800cbb0
 8007754:	0800cbb0 	.word	0x0800cbb0
 8007758:	0800cbb4 	.word	0x0800cbb4

0800775c <__retarget_lock_init_recursive>:
 800775c:	4770      	bx	lr

0800775e <__retarget_lock_acquire_recursive>:
 800775e:	4770      	bx	lr

08007760 <__retarget_lock_release_recursive>:
 8007760:	4770      	bx	lr

08007762 <memcpy>:
 8007762:	440a      	add	r2, r1
 8007764:	4291      	cmp	r1, r2
 8007766:	f100 33ff 	add.w	r3, r0, #4294967295
 800776a:	d100      	bne.n	800776e <memcpy+0xc>
 800776c:	4770      	bx	lr
 800776e:	b510      	push	{r4, lr}
 8007770:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007774:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007778:	4291      	cmp	r1, r2
 800777a:	d1f9      	bne.n	8007770 <memcpy+0xe>
 800777c:	bd10      	pop	{r4, pc}
	...

08007780 <nan>:
 8007780:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 8007788 <nan+0x8>
 8007784:	4770      	bx	lr
 8007786:	bf00      	nop
 8007788:	00000000 	.word	0x00000000
 800778c:	7ff80000 	.word	0x7ff80000

08007790 <nanf>:
 8007790:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8007798 <nanf+0x8>
 8007794:	4770      	bx	lr
 8007796:	bf00      	nop
 8007798:	7fc00000 	.word	0x7fc00000

0800779c <__assert_func>:
 800779c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800779e:	4614      	mov	r4, r2
 80077a0:	461a      	mov	r2, r3
 80077a2:	4b09      	ldr	r3, [pc, #36]	@ (80077c8 <__assert_func+0x2c>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4605      	mov	r5, r0
 80077a8:	68d8      	ldr	r0, [r3, #12]
 80077aa:	b954      	cbnz	r4, 80077c2 <__assert_func+0x26>
 80077ac:	4b07      	ldr	r3, [pc, #28]	@ (80077cc <__assert_func+0x30>)
 80077ae:	461c      	mov	r4, r3
 80077b0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80077b4:	9100      	str	r1, [sp, #0]
 80077b6:	462b      	mov	r3, r5
 80077b8:	4905      	ldr	r1, [pc, #20]	@ (80077d0 <__assert_func+0x34>)
 80077ba:	f002 fcfd 	bl	800a1b8 <fiprintf>
 80077be:	f002 fdab 	bl	800a318 <abort>
 80077c2:	4b04      	ldr	r3, [pc, #16]	@ (80077d4 <__assert_func+0x38>)
 80077c4:	e7f4      	b.n	80077b0 <__assert_func+0x14>
 80077c6:	bf00      	nop
 80077c8:	200001c4 	.word	0x200001c4
 80077cc:	0800c803 	.word	0x0800c803
 80077d0:	0800c7d5 	.word	0x0800c7d5
 80077d4:	0800c7c8 	.word	0x0800c7c8

080077d8 <quorem>:
 80077d8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077dc:	6903      	ldr	r3, [r0, #16]
 80077de:	690c      	ldr	r4, [r1, #16]
 80077e0:	42a3      	cmp	r3, r4
 80077e2:	4607      	mov	r7, r0
 80077e4:	db7e      	blt.n	80078e4 <quorem+0x10c>
 80077e6:	3c01      	subs	r4, #1
 80077e8:	f101 0814 	add.w	r8, r1, #20
 80077ec:	00a3      	lsls	r3, r4, #2
 80077ee:	f100 0514 	add.w	r5, r0, #20
 80077f2:	9300      	str	r3, [sp, #0]
 80077f4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077f8:	9301      	str	r3, [sp, #4]
 80077fa:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077fe:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007802:	3301      	adds	r3, #1
 8007804:	429a      	cmp	r2, r3
 8007806:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800780a:	fbb2 f6f3 	udiv	r6, r2, r3
 800780e:	d32e      	bcc.n	800786e <quorem+0x96>
 8007810:	f04f 0a00 	mov.w	sl, #0
 8007814:	46c4      	mov	ip, r8
 8007816:	46ae      	mov	lr, r5
 8007818:	46d3      	mov	fp, sl
 800781a:	f85c 3b04 	ldr.w	r3, [ip], #4
 800781e:	b298      	uxth	r0, r3
 8007820:	fb06 a000 	mla	r0, r6, r0, sl
 8007824:	0c02      	lsrs	r2, r0, #16
 8007826:	0c1b      	lsrs	r3, r3, #16
 8007828:	fb06 2303 	mla	r3, r6, r3, r2
 800782c:	f8de 2000 	ldr.w	r2, [lr]
 8007830:	b280      	uxth	r0, r0
 8007832:	b292      	uxth	r2, r2
 8007834:	1a12      	subs	r2, r2, r0
 8007836:	445a      	add	r2, fp
 8007838:	f8de 0000 	ldr.w	r0, [lr]
 800783c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007840:	b29b      	uxth	r3, r3
 8007842:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8007846:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800784a:	b292      	uxth	r2, r2
 800784c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007850:	45e1      	cmp	r9, ip
 8007852:	f84e 2b04 	str.w	r2, [lr], #4
 8007856:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800785a:	d2de      	bcs.n	800781a <quorem+0x42>
 800785c:	9b00      	ldr	r3, [sp, #0]
 800785e:	58eb      	ldr	r3, [r5, r3]
 8007860:	b92b      	cbnz	r3, 800786e <quorem+0x96>
 8007862:	9b01      	ldr	r3, [sp, #4]
 8007864:	3b04      	subs	r3, #4
 8007866:	429d      	cmp	r5, r3
 8007868:	461a      	mov	r2, r3
 800786a:	d32f      	bcc.n	80078cc <quorem+0xf4>
 800786c:	613c      	str	r4, [r7, #16]
 800786e:	4638      	mov	r0, r7
 8007870:	f001 fd0e 	bl	8009290 <__mcmp>
 8007874:	2800      	cmp	r0, #0
 8007876:	db25      	blt.n	80078c4 <quorem+0xec>
 8007878:	4629      	mov	r1, r5
 800787a:	2000      	movs	r0, #0
 800787c:	f858 2b04 	ldr.w	r2, [r8], #4
 8007880:	f8d1 c000 	ldr.w	ip, [r1]
 8007884:	fa1f fe82 	uxth.w	lr, r2
 8007888:	fa1f f38c 	uxth.w	r3, ip
 800788c:	eba3 030e 	sub.w	r3, r3, lr
 8007890:	4403      	add	r3, r0
 8007892:	0c12      	lsrs	r2, r2, #16
 8007894:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007898:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800789c:	b29b      	uxth	r3, r3
 800789e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80078a2:	45c1      	cmp	r9, r8
 80078a4:	f841 3b04 	str.w	r3, [r1], #4
 80078a8:	ea4f 4022 	mov.w	r0, r2, asr #16
 80078ac:	d2e6      	bcs.n	800787c <quorem+0xa4>
 80078ae:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80078b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80078b6:	b922      	cbnz	r2, 80078c2 <quorem+0xea>
 80078b8:	3b04      	subs	r3, #4
 80078ba:	429d      	cmp	r5, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	d30b      	bcc.n	80078d8 <quorem+0x100>
 80078c0:	613c      	str	r4, [r7, #16]
 80078c2:	3601      	adds	r6, #1
 80078c4:	4630      	mov	r0, r6
 80078c6:	b003      	add	sp, #12
 80078c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078cc:	6812      	ldr	r2, [r2, #0]
 80078ce:	3b04      	subs	r3, #4
 80078d0:	2a00      	cmp	r2, #0
 80078d2:	d1cb      	bne.n	800786c <quorem+0x94>
 80078d4:	3c01      	subs	r4, #1
 80078d6:	e7c6      	b.n	8007866 <quorem+0x8e>
 80078d8:	6812      	ldr	r2, [r2, #0]
 80078da:	3b04      	subs	r3, #4
 80078dc:	2a00      	cmp	r2, #0
 80078de:	d1ef      	bne.n	80078c0 <quorem+0xe8>
 80078e0:	3c01      	subs	r4, #1
 80078e2:	e7ea      	b.n	80078ba <quorem+0xe2>
 80078e4:	2000      	movs	r0, #0
 80078e6:	e7ee      	b.n	80078c6 <quorem+0xee>

080078e8 <_dtoa_r>:
 80078e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ec:	69c7      	ldr	r7, [r0, #28]
 80078ee:	b099      	sub	sp, #100	@ 0x64
 80078f0:	ed8d 0b02 	vstr	d0, [sp, #8]
 80078f4:	ec55 4b10 	vmov	r4, r5, d0
 80078f8:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 80078fa:	9109      	str	r1, [sp, #36]	@ 0x24
 80078fc:	4683      	mov	fp, r0
 80078fe:	920e      	str	r2, [sp, #56]	@ 0x38
 8007900:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007902:	b97f      	cbnz	r7, 8007924 <_dtoa_r+0x3c>
 8007904:	2010      	movs	r0, #16
 8007906:	f001 f937 	bl	8008b78 <malloc>
 800790a:	4602      	mov	r2, r0
 800790c:	f8cb 001c 	str.w	r0, [fp, #28]
 8007910:	b920      	cbnz	r0, 800791c <_dtoa_r+0x34>
 8007912:	4ba7      	ldr	r3, [pc, #668]	@ (8007bb0 <_dtoa_r+0x2c8>)
 8007914:	21ef      	movs	r1, #239	@ 0xef
 8007916:	48a7      	ldr	r0, [pc, #668]	@ (8007bb4 <_dtoa_r+0x2cc>)
 8007918:	f7ff ff40 	bl	800779c <__assert_func>
 800791c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8007920:	6007      	str	r7, [r0, #0]
 8007922:	60c7      	str	r7, [r0, #12]
 8007924:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007928:	6819      	ldr	r1, [r3, #0]
 800792a:	b159      	cbz	r1, 8007944 <_dtoa_r+0x5c>
 800792c:	685a      	ldr	r2, [r3, #4]
 800792e:	604a      	str	r2, [r1, #4]
 8007930:	2301      	movs	r3, #1
 8007932:	4093      	lsls	r3, r2
 8007934:	608b      	str	r3, [r1, #8]
 8007936:	4658      	mov	r0, fp
 8007938:	f001 fa26 	bl	8008d88 <_Bfree>
 800793c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007940:	2200      	movs	r2, #0
 8007942:	601a      	str	r2, [r3, #0]
 8007944:	1e2b      	subs	r3, r5, #0
 8007946:	bfb9      	ittee	lt
 8007948:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800794c:	9303      	strlt	r3, [sp, #12]
 800794e:	2300      	movge	r3, #0
 8007950:	6033      	strge	r3, [r6, #0]
 8007952:	9f03      	ldr	r7, [sp, #12]
 8007954:	4b98      	ldr	r3, [pc, #608]	@ (8007bb8 <_dtoa_r+0x2d0>)
 8007956:	bfbc      	itt	lt
 8007958:	2201      	movlt	r2, #1
 800795a:	6032      	strlt	r2, [r6, #0]
 800795c:	43bb      	bics	r3, r7
 800795e:	d112      	bne.n	8007986 <_dtoa_r+0x9e>
 8007960:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8007962:	f242 730f 	movw	r3, #9999	@ 0x270f
 8007966:	6013      	str	r3, [r2, #0]
 8007968:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800796c:	4323      	orrs	r3, r4
 800796e:	f000 854d 	beq.w	800840c <_dtoa_r+0xb24>
 8007972:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007974:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8007bcc <_dtoa_r+0x2e4>
 8007978:	2b00      	cmp	r3, #0
 800797a:	f000 854f 	beq.w	800841c <_dtoa_r+0xb34>
 800797e:	f10a 0303 	add.w	r3, sl, #3
 8007982:	f000 bd49 	b.w	8008418 <_dtoa_r+0xb30>
 8007986:	ed9d 7b02 	vldr	d7, [sp, #8]
 800798a:	2200      	movs	r2, #0
 800798c:	ec51 0b17 	vmov	r0, r1, d7
 8007990:	2300      	movs	r3, #0
 8007992:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 8007996:	f7f9 f89f 	bl	8000ad8 <__aeabi_dcmpeq>
 800799a:	4680      	mov	r8, r0
 800799c:	b158      	cbz	r0, 80079b6 <_dtoa_r+0xce>
 800799e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80079a0:	2301      	movs	r3, #1
 80079a2:	6013      	str	r3, [r2, #0]
 80079a4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079a6:	b113      	cbz	r3, 80079ae <_dtoa_r+0xc6>
 80079a8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80079aa:	4b84      	ldr	r3, [pc, #528]	@ (8007bbc <_dtoa_r+0x2d4>)
 80079ac:	6013      	str	r3, [r2, #0]
 80079ae:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8007bd0 <_dtoa_r+0x2e8>
 80079b2:	f000 bd33 	b.w	800841c <_dtoa_r+0xb34>
 80079b6:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 80079ba:	aa16      	add	r2, sp, #88	@ 0x58
 80079bc:	a917      	add	r1, sp, #92	@ 0x5c
 80079be:	4658      	mov	r0, fp
 80079c0:	f001 fd86 	bl	80094d0 <__d2b>
 80079c4:	f3c7 560a 	ubfx	r6, r7, #20, #11
 80079c8:	4681      	mov	r9, r0
 80079ca:	2e00      	cmp	r6, #0
 80079cc:	d077      	beq.n	8007abe <_dtoa_r+0x1d6>
 80079ce:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80079d0:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 80079d4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80079d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80079dc:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80079e0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80079e4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079e8:	4619      	mov	r1, r3
 80079ea:	2200      	movs	r2, #0
 80079ec:	4b74      	ldr	r3, [pc, #464]	@ (8007bc0 <_dtoa_r+0x2d8>)
 80079ee:	f7f8 fc53 	bl	8000298 <__aeabi_dsub>
 80079f2:	a369      	add	r3, pc, #420	@ (adr r3, 8007b98 <_dtoa_r+0x2b0>)
 80079f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079f8:	f7f8 fe06 	bl	8000608 <__aeabi_dmul>
 80079fc:	a368      	add	r3, pc, #416	@ (adr r3, 8007ba0 <_dtoa_r+0x2b8>)
 80079fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a02:	f7f8 fc4b 	bl	800029c <__adddf3>
 8007a06:	4604      	mov	r4, r0
 8007a08:	4630      	mov	r0, r6
 8007a0a:	460d      	mov	r5, r1
 8007a0c:	f7f8 fd92 	bl	8000534 <__aeabi_i2d>
 8007a10:	a365      	add	r3, pc, #404	@ (adr r3, 8007ba8 <_dtoa_r+0x2c0>)
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	f7f8 fdf7 	bl	8000608 <__aeabi_dmul>
 8007a1a:	4602      	mov	r2, r0
 8007a1c:	460b      	mov	r3, r1
 8007a1e:	4620      	mov	r0, r4
 8007a20:	4629      	mov	r1, r5
 8007a22:	f7f8 fc3b 	bl	800029c <__adddf3>
 8007a26:	4604      	mov	r4, r0
 8007a28:	460d      	mov	r5, r1
 8007a2a:	f7f9 f89d 	bl	8000b68 <__aeabi_d2iz>
 8007a2e:	2200      	movs	r2, #0
 8007a30:	4607      	mov	r7, r0
 8007a32:	2300      	movs	r3, #0
 8007a34:	4620      	mov	r0, r4
 8007a36:	4629      	mov	r1, r5
 8007a38:	f7f9 f858 	bl	8000aec <__aeabi_dcmplt>
 8007a3c:	b140      	cbz	r0, 8007a50 <_dtoa_r+0x168>
 8007a3e:	4638      	mov	r0, r7
 8007a40:	f7f8 fd78 	bl	8000534 <__aeabi_i2d>
 8007a44:	4622      	mov	r2, r4
 8007a46:	462b      	mov	r3, r5
 8007a48:	f7f9 f846 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a4c:	b900      	cbnz	r0, 8007a50 <_dtoa_r+0x168>
 8007a4e:	3f01      	subs	r7, #1
 8007a50:	2f16      	cmp	r7, #22
 8007a52:	d851      	bhi.n	8007af8 <_dtoa_r+0x210>
 8007a54:	4b5b      	ldr	r3, [pc, #364]	@ (8007bc4 <_dtoa_r+0x2dc>)
 8007a56:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a5e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007a62:	f7f9 f843 	bl	8000aec <__aeabi_dcmplt>
 8007a66:	2800      	cmp	r0, #0
 8007a68:	d048      	beq.n	8007afc <_dtoa_r+0x214>
 8007a6a:	3f01      	subs	r7, #1
 8007a6c:	2300      	movs	r3, #0
 8007a6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8007a70:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8007a72:	1b9b      	subs	r3, r3, r6
 8007a74:	1e5a      	subs	r2, r3, #1
 8007a76:	bf44      	itt	mi
 8007a78:	f1c3 0801 	rsbmi	r8, r3, #1
 8007a7c:	2300      	movmi	r3, #0
 8007a7e:	9208      	str	r2, [sp, #32]
 8007a80:	bf54      	ite	pl
 8007a82:	f04f 0800 	movpl.w	r8, #0
 8007a86:	9308      	strmi	r3, [sp, #32]
 8007a88:	2f00      	cmp	r7, #0
 8007a8a:	db39      	blt.n	8007b00 <_dtoa_r+0x218>
 8007a8c:	9b08      	ldr	r3, [sp, #32]
 8007a8e:	970f      	str	r7, [sp, #60]	@ 0x3c
 8007a90:	443b      	add	r3, r7
 8007a92:	9308      	str	r3, [sp, #32]
 8007a94:	2300      	movs	r3, #0
 8007a96:	930a      	str	r3, [sp, #40]	@ 0x28
 8007a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a9a:	2b09      	cmp	r3, #9
 8007a9c:	d864      	bhi.n	8007b68 <_dtoa_r+0x280>
 8007a9e:	2b05      	cmp	r3, #5
 8007aa0:	bfc4      	itt	gt
 8007aa2:	3b04      	subgt	r3, #4
 8007aa4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 8007aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa8:	f1a3 0302 	sub.w	r3, r3, #2
 8007aac:	bfcc      	ite	gt
 8007aae:	2400      	movgt	r4, #0
 8007ab0:	2401      	movle	r4, #1
 8007ab2:	2b03      	cmp	r3, #3
 8007ab4:	d863      	bhi.n	8007b7e <_dtoa_r+0x296>
 8007ab6:	e8df f003 	tbb	[pc, r3]
 8007aba:	372a      	.short	0x372a
 8007abc:	5535      	.short	0x5535
 8007abe:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8007ac2:	441e      	add	r6, r3
 8007ac4:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007ac8:	2b20      	cmp	r3, #32
 8007aca:	bfc1      	itttt	gt
 8007acc:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007ad0:	409f      	lslgt	r7, r3
 8007ad2:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007ad6:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007ada:	bfd6      	itet	le
 8007adc:	f1c3 0320 	rsble	r3, r3, #32
 8007ae0:	ea47 0003 	orrgt.w	r0, r7, r3
 8007ae4:	fa04 f003 	lslle.w	r0, r4, r3
 8007ae8:	f7f8 fd14 	bl	8000514 <__aeabi_ui2d>
 8007aec:	2201      	movs	r2, #1
 8007aee:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007af2:	3e01      	subs	r6, #1
 8007af4:	9214      	str	r2, [sp, #80]	@ 0x50
 8007af6:	e777      	b.n	80079e8 <_dtoa_r+0x100>
 8007af8:	2301      	movs	r3, #1
 8007afa:	e7b8      	b.n	8007a6e <_dtoa_r+0x186>
 8007afc:	9012      	str	r0, [sp, #72]	@ 0x48
 8007afe:	e7b7      	b.n	8007a70 <_dtoa_r+0x188>
 8007b00:	427b      	negs	r3, r7
 8007b02:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b04:	2300      	movs	r3, #0
 8007b06:	eba8 0807 	sub.w	r8, r8, r7
 8007b0a:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007b0c:	e7c4      	b.n	8007a98 <_dtoa_r+0x1b0>
 8007b0e:	2300      	movs	r3, #0
 8007b10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b12:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	dc35      	bgt.n	8007b84 <_dtoa_r+0x29c>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	9300      	str	r3, [sp, #0]
 8007b1c:	9307      	str	r3, [sp, #28]
 8007b1e:	461a      	mov	r2, r3
 8007b20:	920e      	str	r2, [sp, #56]	@ 0x38
 8007b22:	e00b      	b.n	8007b3c <_dtoa_r+0x254>
 8007b24:	2301      	movs	r3, #1
 8007b26:	e7f3      	b.n	8007b10 <_dtoa_r+0x228>
 8007b28:	2300      	movs	r3, #0
 8007b2a:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b2e:	18fb      	adds	r3, r7, r3
 8007b30:	9300      	str	r3, [sp, #0]
 8007b32:	3301      	adds	r3, #1
 8007b34:	2b01      	cmp	r3, #1
 8007b36:	9307      	str	r3, [sp, #28]
 8007b38:	bfb8      	it	lt
 8007b3a:	2301      	movlt	r3, #1
 8007b3c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8007b40:	2100      	movs	r1, #0
 8007b42:	2204      	movs	r2, #4
 8007b44:	f102 0514 	add.w	r5, r2, #20
 8007b48:	429d      	cmp	r5, r3
 8007b4a:	d91f      	bls.n	8007b8c <_dtoa_r+0x2a4>
 8007b4c:	6041      	str	r1, [r0, #4]
 8007b4e:	4658      	mov	r0, fp
 8007b50:	f001 f8da 	bl	8008d08 <_Balloc>
 8007b54:	4682      	mov	sl, r0
 8007b56:	2800      	cmp	r0, #0
 8007b58:	d13c      	bne.n	8007bd4 <_dtoa_r+0x2ec>
 8007b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8007bc8 <_dtoa_r+0x2e0>)
 8007b5c:	4602      	mov	r2, r0
 8007b5e:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b62:	e6d8      	b.n	8007916 <_dtoa_r+0x2e>
 8007b64:	2301      	movs	r3, #1
 8007b66:	e7e0      	b.n	8007b2a <_dtoa_r+0x242>
 8007b68:	2401      	movs	r4, #1
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b6e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8007b70:	f04f 33ff 	mov.w	r3, #4294967295
 8007b74:	9300      	str	r3, [sp, #0]
 8007b76:	9307      	str	r3, [sp, #28]
 8007b78:	2200      	movs	r2, #0
 8007b7a:	2312      	movs	r3, #18
 8007b7c:	e7d0      	b.n	8007b20 <_dtoa_r+0x238>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007b82:	e7f5      	b.n	8007b70 <_dtoa_r+0x288>
 8007b84:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007b86:	9300      	str	r3, [sp, #0]
 8007b88:	9307      	str	r3, [sp, #28]
 8007b8a:	e7d7      	b.n	8007b3c <_dtoa_r+0x254>
 8007b8c:	3101      	adds	r1, #1
 8007b8e:	0052      	lsls	r2, r2, #1
 8007b90:	e7d8      	b.n	8007b44 <_dtoa_r+0x25c>
 8007b92:	bf00      	nop
 8007b94:	f3af 8000 	nop.w
 8007b98:	636f4361 	.word	0x636f4361
 8007b9c:	3fd287a7 	.word	0x3fd287a7
 8007ba0:	8b60c8b3 	.word	0x8b60c8b3
 8007ba4:	3fc68a28 	.word	0x3fc68a28
 8007ba8:	509f79fb 	.word	0x509f79fb
 8007bac:	3fd34413 	.word	0x3fd34413
 8007bb0:	0800c74f 	.word	0x0800c74f
 8007bb4:	0800c811 	.word	0x0800c811
 8007bb8:	7ff00000 	.word	0x7ff00000
 8007bbc:	0800cb59 	.word	0x0800cb59
 8007bc0:	3ff80000 	.word	0x3ff80000
 8007bc4:	0800c968 	.word	0x0800c968
 8007bc8:	0800c869 	.word	0x0800c869
 8007bcc:	0800c80d 	.word	0x0800c80d
 8007bd0:	0800cb58 	.word	0x0800cb58
 8007bd4:	f8db 301c 	ldr.w	r3, [fp, #28]
 8007bd8:	6018      	str	r0, [r3, #0]
 8007bda:	9b07      	ldr	r3, [sp, #28]
 8007bdc:	2b0e      	cmp	r3, #14
 8007bde:	f200 80a4 	bhi.w	8007d2a <_dtoa_r+0x442>
 8007be2:	2c00      	cmp	r4, #0
 8007be4:	f000 80a1 	beq.w	8007d2a <_dtoa_r+0x442>
 8007be8:	2f00      	cmp	r7, #0
 8007bea:	dd33      	ble.n	8007c54 <_dtoa_r+0x36c>
 8007bec:	4bad      	ldr	r3, [pc, #692]	@ (8007ea4 <_dtoa_r+0x5bc>)
 8007bee:	f007 020f 	and.w	r2, r7, #15
 8007bf2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bf6:	ed93 7b00 	vldr	d7, [r3]
 8007bfa:	05f8      	lsls	r0, r7, #23
 8007bfc:	ed8d 7b04 	vstr	d7, [sp, #16]
 8007c00:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007c04:	d516      	bpl.n	8007c34 <_dtoa_r+0x34c>
 8007c06:	4ba8      	ldr	r3, [pc, #672]	@ (8007ea8 <_dtoa_r+0x5c0>)
 8007c08:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c0c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007c10:	f7f8 fe24 	bl	800085c <__aeabi_ddiv>
 8007c14:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c18:	f004 040f 	and.w	r4, r4, #15
 8007c1c:	2603      	movs	r6, #3
 8007c1e:	4da2      	ldr	r5, [pc, #648]	@ (8007ea8 <_dtoa_r+0x5c0>)
 8007c20:	b954      	cbnz	r4, 8007c38 <_dtoa_r+0x350>
 8007c22:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007c2a:	f7f8 fe17 	bl	800085c <__aeabi_ddiv>
 8007c2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c32:	e028      	b.n	8007c86 <_dtoa_r+0x39e>
 8007c34:	2602      	movs	r6, #2
 8007c36:	e7f2      	b.n	8007c1e <_dtoa_r+0x336>
 8007c38:	07e1      	lsls	r1, r4, #31
 8007c3a:	d508      	bpl.n	8007c4e <_dtoa_r+0x366>
 8007c3c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007c40:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c44:	f7f8 fce0 	bl	8000608 <__aeabi_dmul>
 8007c48:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c4c:	3601      	adds	r6, #1
 8007c4e:	1064      	asrs	r4, r4, #1
 8007c50:	3508      	adds	r5, #8
 8007c52:	e7e5      	b.n	8007c20 <_dtoa_r+0x338>
 8007c54:	f000 80d2 	beq.w	8007dfc <_dtoa_r+0x514>
 8007c58:	427c      	negs	r4, r7
 8007c5a:	4b92      	ldr	r3, [pc, #584]	@ (8007ea4 <_dtoa_r+0x5bc>)
 8007c5c:	4d92      	ldr	r5, [pc, #584]	@ (8007ea8 <_dtoa_r+0x5c0>)
 8007c5e:	f004 020f 	and.w	r2, r4, #15
 8007c62:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c6a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8007c6e:	f7f8 fccb 	bl	8000608 <__aeabi_dmul>
 8007c72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007c76:	1124      	asrs	r4, r4, #4
 8007c78:	2300      	movs	r3, #0
 8007c7a:	2602      	movs	r6, #2
 8007c7c:	2c00      	cmp	r4, #0
 8007c7e:	f040 80b2 	bne.w	8007de6 <_dtoa_r+0x4fe>
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d1d3      	bne.n	8007c2e <_dtoa_r+0x346>
 8007c86:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8007c88:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	f000 80b7 	beq.w	8007e00 <_dtoa_r+0x518>
 8007c92:	4b86      	ldr	r3, [pc, #536]	@ (8007eac <_dtoa_r+0x5c4>)
 8007c94:	2200      	movs	r2, #0
 8007c96:	4620      	mov	r0, r4
 8007c98:	4629      	mov	r1, r5
 8007c9a:	f7f8 ff27 	bl	8000aec <__aeabi_dcmplt>
 8007c9e:	2800      	cmp	r0, #0
 8007ca0:	f000 80ae 	beq.w	8007e00 <_dtoa_r+0x518>
 8007ca4:	9b07      	ldr	r3, [sp, #28]
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	f000 80aa 	beq.w	8007e00 <_dtoa_r+0x518>
 8007cac:	9b00      	ldr	r3, [sp, #0]
 8007cae:	2b00      	cmp	r3, #0
 8007cb0:	dd37      	ble.n	8007d22 <_dtoa_r+0x43a>
 8007cb2:	1e7b      	subs	r3, r7, #1
 8007cb4:	9304      	str	r3, [sp, #16]
 8007cb6:	4620      	mov	r0, r4
 8007cb8:	4b7d      	ldr	r3, [pc, #500]	@ (8007eb0 <_dtoa_r+0x5c8>)
 8007cba:	2200      	movs	r2, #0
 8007cbc:	4629      	mov	r1, r5
 8007cbe:	f7f8 fca3 	bl	8000608 <__aeabi_dmul>
 8007cc2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007cc6:	9c00      	ldr	r4, [sp, #0]
 8007cc8:	3601      	adds	r6, #1
 8007cca:	4630      	mov	r0, r6
 8007ccc:	f7f8 fc32 	bl	8000534 <__aeabi_i2d>
 8007cd0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007cd4:	f7f8 fc98 	bl	8000608 <__aeabi_dmul>
 8007cd8:	4b76      	ldr	r3, [pc, #472]	@ (8007eb4 <_dtoa_r+0x5cc>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	f7f8 fade 	bl	800029c <__adddf3>
 8007ce0:	4605      	mov	r5, r0
 8007ce2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ce6:	2c00      	cmp	r4, #0
 8007ce8:	f040 808d 	bne.w	8007e06 <_dtoa_r+0x51e>
 8007cec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007cf0:	4b71      	ldr	r3, [pc, #452]	@ (8007eb8 <_dtoa_r+0x5d0>)
 8007cf2:	2200      	movs	r2, #0
 8007cf4:	f7f8 fad0 	bl	8000298 <__aeabi_dsub>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	460b      	mov	r3, r1
 8007cfc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007d00:	462a      	mov	r2, r5
 8007d02:	4633      	mov	r3, r6
 8007d04:	f7f8 ff10 	bl	8000b28 <__aeabi_dcmpgt>
 8007d08:	2800      	cmp	r0, #0
 8007d0a:	f040 828b 	bne.w	8008224 <_dtoa_r+0x93c>
 8007d0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007d12:	462a      	mov	r2, r5
 8007d14:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007d18:	f7f8 fee8 	bl	8000aec <__aeabi_dcmplt>
 8007d1c:	2800      	cmp	r0, #0
 8007d1e:	f040 8128 	bne.w	8007f72 <_dtoa_r+0x68a>
 8007d22:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8007d26:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8007d2a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	f2c0 815a 	blt.w	8007fe6 <_dtoa_r+0x6fe>
 8007d32:	2f0e      	cmp	r7, #14
 8007d34:	f300 8157 	bgt.w	8007fe6 <_dtoa_r+0x6fe>
 8007d38:	4b5a      	ldr	r3, [pc, #360]	@ (8007ea4 <_dtoa_r+0x5bc>)
 8007d3a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007d3e:	ed93 7b00 	vldr	d7, [r3]
 8007d42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	ed8d 7b00 	vstr	d7, [sp]
 8007d4a:	da03      	bge.n	8007d54 <_dtoa_r+0x46c>
 8007d4c:	9b07      	ldr	r3, [sp, #28]
 8007d4e:	2b00      	cmp	r3, #0
 8007d50:	f340 8101 	ble.w	8007f56 <_dtoa_r+0x66e>
 8007d54:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8007d58:	4656      	mov	r6, sl
 8007d5a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d5e:	4620      	mov	r0, r4
 8007d60:	4629      	mov	r1, r5
 8007d62:	f7f8 fd7b 	bl	800085c <__aeabi_ddiv>
 8007d66:	f7f8 feff 	bl	8000b68 <__aeabi_d2iz>
 8007d6a:	4680      	mov	r8, r0
 8007d6c:	f7f8 fbe2 	bl	8000534 <__aeabi_i2d>
 8007d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007d74:	f7f8 fc48 	bl	8000608 <__aeabi_dmul>
 8007d78:	4602      	mov	r2, r0
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	4620      	mov	r0, r4
 8007d7e:	4629      	mov	r1, r5
 8007d80:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007d84:	f7f8 fa88 	bl	8000298 <__aeabi_dsub>
 8007d88:	f806 4b01 	strb.w	r4, [r6], #1
 8007d8c:	9d07      	ldr	r5, [sp, #28]
 8007d8e:	eba6 040a 	sub.w	r4, r6, sl
 8007d92:	42a5      	cmp	r5, r4
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	f040 8117 	bne.w	8007fca <_dtoa_r+0x6e2>
 8007d9c:	f7f8 fa7e 	bl	800029c <__adddf3>
 8007da0:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007da4:	4604      	mov	r4, r0
 8007da6:	460d      	mov	r5, r1
 8007da8:	f7f8 febe 	bl	8000b28 <__aeabi_dcmpgt>
 8007dac:	2800      	cmp	r0, #0
 8007dae:	f040 80f9 	bne.w	8007fa4 <_dtoa_r+0x6bc>
 8007db2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007db6:	4620      	mov	r0, r4
 8007db8:	4629      	mov	r1, r5
 8007dba:	f7f8 fe8d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007dbe:	b118      	cbz	r0, 8007dc8 <_dtoa_r+0x4e0>
 8007dc0:	f018 0f01 	tst.w	r8, #1
 8007dc4:	f040 80ee 	bne.w	8007fa4 <_dtoa_r+0x6bc>
 8007dc8:	4649      	mov	r1, r9
 8007dca:	4658      	mov	r0, fp
 8007dcc:	f000 ffdc 	bl	8008d88 <_Bfree>
 8007dd0:	2300      	movs	r3, #0
 8007dd2:	7033      	strb	r3, [r6, #0]
 8007dd4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8007dd6:	3701      	adds	r7, #1
 8007dd8:	601f      	str	r7, [r3, #0]
 8007dda:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007ddc:	2b00      	cmp	r3, #0
 8007dde:	f000 831d 	beq.w	800841c <_dtoa_r+0xb34>
 8007de2:	601e      	str	r6, [r3, #0]
 8007de4:	e31a      	b.n	800841c <_dtoa_r+0xb34>
 8007de6:	07e2      	lsls	r2, r4, #31
 8007de8:	d505      	bpl.n	8007df6 <_dtoa_r+0x50e>
 8007dea:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007dee:	f7f8 fc0b 	bl	8000608 <__aeabi_dmul>
 8007df2:	3601      	adds	r6, #1
 8007df4:	2301      	movs	r3, #1
 8007df6:	1064      	asrs	r4, r4, #1
 8007df8:	3508      	adds	r5, #8
 8007dfa:	e73f      	b.n	8007c7c <_dtoa_r+0x394>
 8007dfc:	2602      	movs	r6, #2
 8007dfe:	e742      	b.n	8007c86 <_dtoa_r+0x39e>
 8007e00:	9c07      	ldr	r4, [sp, #28]
 8007e02:	9704      	str	r7, [sp, #16]
 8007e04:	e761      	b.n	8007cca <_dtoa_r+0x3e2>
 8007e06:	4b27      	ldr	r3, [pc, #156]	@ (8007ea4 <_dtoa_r+0x5bc>)
 8007e08:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007e0a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007e0e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007e12:	4454      	add	r4, sl
 8007e14:	2900      	cmp	r1, #0
 8007e16:	d053      	beq.n	8007ec0 <_dtoa_r+0x5d8>
 8007e18:	4928      	ldr	r1, [pc, #160]	@ (8007ebc <_dtoa_r+0x5d4>)
 8007e1a:	2000      	movs	r0, #0
 8007e1c:	f7f8 fd1e 	bl	800085c <__aeabi_ddiv>
 8007e20:	4633      	mov	r3, r6
 8007e22:	462a      	mov	r2, r5
 8007e24:	f7f8 fa38 	bl	8000298 <__aeabi_dsub>
 8007e28:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e2c:	4656      	mov	r6, sl
 8007e2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e32:	f7f8 fe99 	bl	8000b68 <__aeabi_d2iz>
 8007e36:	4605      	mov	r5, r0
 8007e38:	f7f8 fb7c 	bl	8000534 <__aeabi_i2d>
 8007e3c:	4602      	mov	r2, r0
 8007e3e:	460b      	mov	r3, r1
 8007e40:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e44:	f7f8 fa28 	bl	8000298 <__aeabi_dsub>
 8007e48:	3530      	adds	r5, #48	@ 0x30
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	460b      	mov	r3, r1
 8007e4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007e52:	f806 5b01 	strb.w	r5, [r6], #1
 8007e56:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e5a:	f7f8 fe47 	bl	8000aec <__aeabi_dcmplt>
 8007e5e:	2800      	cmp	r0, #0
 8007e60:	d171      	bne.n	8007f46 <_dtoa_r+0x65e>
 8007e62:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007e66:	4911      	ldr	r1, [pc, #68]	@ (8007eac <_dtoa_r+0x5c4>)
 8007e68:	2000      	movs	r0, #0
 8007e6a:	f7f8 fa15 	bl	8000298 <__aeabi_dsub>
 8007e6e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007e72:	f7f8 fe3b 	bl	8000aec <__aeabi_dcmplt>
 8007e76:	2800      	cmp	r0, #0
 8007e78:	f040 8095 	bne.w	8007fa6 <_dtoa_r+0x6be>
 8007e7c:	42a6      	cmp	r6, r4
 8007e7e:	f43f af50 	beq.w	8007d22 <_dtoa_r+0x43a>
 8007e82:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007e86:	4b0a      	ldr	r3, [pc, #40]	@ (8007eb0 <_dtoa_r+0x5c8>)
 8007e88:	2200      	movs	r2, #0
 8007e8a:	f7f8 fbbd 	bl	8000608 <__aeabi_dmul>
 8007e8e:	4b08      	ldr	r3, [pc, #32]	@ (8007eb0 <_dtoa_r+0x5c8>)
 8007e90:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007e94:	2200      	movs	r2, #0
 8007e96:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007e9a:	f7f8 fbb5 	bl	8000608 <__aeabi_dmul>
 8007e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007ea2:	e7c4      	b.n	8007e2e <_dtoa_r+0x546>
 8007ea4:	0800c968 	.word	0x0800c968
 8007ea8:	0800c940 	.word	0x0800c940
 8007eac:	3ff00000 	.word	0x3ff00000
 8007eb0:	40240000 	.word	0x40240000
 8007eb4:	401c0000 	.word	0x401c0000
 8007eb8:	40140000 	.word	0x40140000
 8007ebc:	3fe00000 	.word	0x3fe00000
 8007ec0:	4631      	mov	r1, r6
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f7f8 fba0 	bl	8000608 <__aeabi_dmul>
 8007ec8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8007ecc:	9415      	str	r4, [sp, #84]	@ 0x54
 8007ece:	4656      	mov	r6, sl
 8007ed0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ed4:	f7f8 fe48 	bl	8000b68 <__aeabi_d2iz>
 8007ed8:	4605      	mov	r5, r0
 8007eda:	f7f8 fb2b 	bl	8000534 <__aeabi_i2d>
 8007ede:	4602      	mov	r2, r0
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007ee6:	f7f8 f9d7 	bl	8000298 <__aeabi_dsub>
 8007eea:	3530      	adds	r5, #48	@ 0x30
 8007eec:	f806 5b01 	strb.w	r5, [r6], #1
 8007ef0:	4602      	mov	r2, r0
 8007ef2:	460b      	mov	r3, r1
 8007ef4:	42a6      	cmp	r6, r4
 8007ef6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8007efa:	f04f 0200 	mov.w	r2, #0
 8007efe:	d124      	bne.n	8007f4a <_dtoa_r+0x662>
 8007f00:	4bac      	ldr	r3, [pc, #688]	@ (80081b4 <_dtoa_r+0x8cc>)
 8007f02:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8007f06:	f7f8 f9c9 	bl	800029c <__adddf3>
 8007f0a:	4602      	mov	r2, r0
 8007f0c:	460b      	mov	r3, r1
 8007f0e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f12:	f7f8 fe09 	bl	8000b28 <__aeabi_dcmpgt>
 8007f16:	2800      	cmp	r0, #0
 8007f18:	d145      	bne.n	8007fa6 <_dtoa_r+0x6be>
 8007f1a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8007f1e:	49a5      	ldr	r1, [pc, #660]	@ (80081b4 <_dtoa_r+0x8cc>)
 8007f20:	2000      	movs	r0, #0
 8007f22:	f7f8 f9b9 	bl	8000298 <__aeabi_dsub>
 8007f26:	4602      	mov	r2, r0
 8007f28:	460b      	mov	r3, r1
 8007f2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007f2e:	f7f8 fddd 	bl	8000aec <__aeabi_dcmplt>
 8007f32:	2800      	cmp	r0, #0
 8007f34:	f43f aef5 	beq.w	8007d22 <_dtoa_r+0x43a>
 8007f38:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8007f3a:	1e73      	subs	r3, r6, #1
 8007f3c:	9315      	str	r3, [sp, #84]	@ 0x54
 8007f3e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007f42:	2b30      	cmp	r3, #48	@ 0x30
 8007f44:	d0f8      	beq.n	8007f38 <_dtoa_r+0x650>
 8007f46:	9f04      	ldr	r7, [sp, #16]
 8007f48:	e73e      	b.n	8007dc8 <_dtoa_r+0x4e0>
 8007f4a:	4b9b      	ldr	r3, [pc, #620]	@ (80081b8 <_dtoa_r+0x8d0>)
 8007f4c:	f7f8 fb5c 	bl	8000608 <__aeabi_dmul>
 8007f50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8007f54:	e7bc      	b.n	8007ed0 <_dtoa_r+0x5e8>
 8007f56:	d10c      	bne.n	8007f72 <_dtoa_r+0x68a>
 8007f58:	4b98      	ldr	r3, [pc, #608]	@ (80081bc <_dtoa_r+0x8d4>)
 8007f5a:	2200      	movs	r2, #0
 8007f5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007f60:	f7f8 fb52 	bl	8000608 <__aeabi_dmul>
 8007f64:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007f68:	f7f8 fdd4 	bl	8000b14 <__aeabi_dcmpge>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	f000 8157 	beq.w	8008220 <_dtoa_r+0x938>
 8007f72:	2400      	movs	r4, #0
 8007f74:	4625      	mov	r5, r4
 8007f76:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007f78:	43db      	mvns	r3, r3
 8007f7a:	9304      	str	r3, [sp, #16]
 8007f7c:	4656      	mov	r6, sl
 8007f7e:	2700      	movs	r7, #0
 8007f80:	4621      	mov	r1, r4
 8007f82:	4658      	mov	r0, fp
 8007f84:	f000 ff00 	bl	8008d88 <_Bfree>
 8007f88:	2d00      	cmp	r5, #0
 8007f8a:	d0dc      	beq.n	8007f46 <_dtoa_r+0x65e>
 8007f8c:	b12f      	cbz	r7, 8007f9a <_dtoa_r+0x6b2>
 8007f8e:	42af      	cmp	r7, r5
 8007f90:	d003      	beq.n	8007f9a <_dtoa_r+0x6b2>
 8007f92:	4639      	mov	r1, r7
 8007f94:	4658      	mov	r0, fp
 8007f96:	f000 fef7 	bl	8008d88 <_Bfree>
 8007f9a:	4629      	mov	r1, r5
 8007f9c:	4658      	mov	r0, fp
 8007f9e:	f000 fef3 	bl	8008d88 <_Bfree>
 8007fa2:	e7d0      	b.n	8007f46 <_dtoa_r+0x65e>
 8007fa4:	9704      	str	r7, [sp, #16]
 8007fa6:	4633      	mov	r3, r6
 8007fa8:	461e      	mov	r6, r3
 8007faa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007fae:	2a39      	cmp	r2, #57	@ 0x39
 8007fb0:	d107      	bne.n	8007fc2 <_dtoa_r+0x6da>
 8007fb2:	459a      	cmp	sl, r3
 8007fb4:	d1f8      	bne.n	8007fa8 <_dtoa_r+0x6c0>
 8007fb6:	9a04      	ldr	r2, [sp, #16]
 8007fb8:	3201      	adds	r2, #1
 8007fba:	9204      	str	r2, [sp, #16]
 8007fbc:	2230      	movs	r2, #48	@ 0x30
 8007fbe:	f88a 2000 	strb.w	r2, [sl]
 8007fc2:	781a      	ldrb	r2, [r3, #0]
 8007fc4:	3201      	adds	r2, #1
 8007fc6:	701a      	strb	r2, [r3, #0]
 8007fc8:	e7bd      	b.n	8007f46 <_dtoa_r+0x65e>
 8007fca:	4b7b      	ldr	r3, [pc, #492]	@ (80081b8 <_dtoa_r+0x8d0>)
 8007fcc:	2200      	movs	r2, #0
 8007fce:	f7f8 fb1b 	bl	8000608 <__aeabi_dmul>
 8007fd2:	2200      	movs	r2, #0
 8007fd4:	2300      	movs	r3, #0
 8007fd6:	4604      	mov	r4, r0
 8007fd8:	460d      	mov	r5, r1
 8007fda:	f7f8 fd7d 	bl	8000ad8 <__aeabi_dcmpeq>
 8007fde:	2800      	cmp	r0, #0
 8007fe0:	f43f aebb 	beq.w	8007d5a <_dtoa_r+0x472>
 8007fe4:	e6f0      	b.n	8007dc8 <_dtoa_r+0x4e0>
 8007fe6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007fe8:	2a00      	cmp	r2, #0
 8007fea:	f000 80db 	beq.w	80081a4 <_dtoa_r+0x8bc>
 8007fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff0:	2a01      	cmp	r2, #1
 8007ff2:	f300 80bf 	bgt.w	8008174 <_dtoa_r+0x88c>
 8007ff6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007ff8:	2a00      	cmp	r2, #0
 8007ffa:	f000 80b7 	beq.w	800816c <_dtoa_r+0x884>
 8007ffe:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008002:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008004:	4646      	mov	r6, r8
 8008006:	9a08      	ldr	r2, [sp, #32]
 8008008:	2101      	movs	r1, #1
 800800a:	441a      	add	r2, r3
 800800c:	4658      	mov	r0, fp
 800800e:	4498      	add	r8, r3
 8008010:	9208      	str	r2, [sp, #32]
 8008012:	f000 ffb7 	bl	8008f84 <__i2b>
 8008016:	4605      	mov	r5, r0
 8008018:	b15e      	cbz	r6, 8008032 <_dtoa_r+0x74a>
 800801a:	9b08      	ldr	r3, [sp, #32]
 800801c:	2b00      	cmp	r3, #0
 800801e:	dd08      	ble.n	8008032 <_dtoa_r+0x74a>
 8008020:	42b3      	cmp	r3, r6
 8008022:	9a08      	ldr	r2, [sp, #32]
 8008024:	bfa8      	it	ge
 8008026:	4633      	movge	r3, r6
 8008028:	eba8 0803 	sub.w	r8, r8, r3
 800802c:	1af6      	subs	r6, r6, r3
 800802e:	1ad3      	subs	r3, r2, r3
 8008030:	9308      	str	r3, [sp, #32]
 8008032:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008034:	b1f3      	cbz	r3, 8008074 <_dtoa_r+0x78c>
 8008036:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008038:	2b00      	cmp	r3, #0
 800803a:	f000 80b7 	beq.w	80081ac <_dtoa_r+0x8c4>
 800803e:	b18c      	cbz	r4, 8008064 <_dtoa_r+0x77c>
 8008040:	4629      	mov	r1, r5
 8008042:	4622      	mov	r2, r4
 8008044:	4658      	mov	r0, fp
 8008046:	f001 f85d 	bl	8009104 <__pow5mult>
 800804a:	464a      	mov	r2, r9
 800804c:	4601      	mov	r1, r0
 800804e:	4605      	mov	r5, r0
 8008050:	4658      	mov	r0, fp
 8008052:	f000 ffad 	bl	8008fb0 <__multiply>
 8008056:	4649      	mov	r1, r9
 8008058:	9004      	str	r0, [sp, #16]
 800805a:	4658      	mov	r0, fp
 800805c:	f000 fe94 	bl	8008d88 <_Bfree>
 8008060:	9b04      	ldr	r3, [sp, #16]
 8008062:	4699      	mov	r9, r3
 8008064:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008066:	1b1a      	subs	r2, r3, r4
 8008068:	d004      	beq.n	8008074 <_dtoa_r+0x78c>
 800806a:	4649      	mov	r1, r9
 800806c:	4658      	mov	r0, fp
 800806e:	f001 f849 	bl	8009104 <__pow5mult>
 8008072:	4681      	mov	r9, r0
 8008074:	2101      	movs	r1, #1
 8008076:	4658      	mov	r0, fp
 8008078:	f000 ff84 	bl	8008f84 <__i2b>
 800807c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800807e:	4604      	mov	r4, r0
 8008080:	2b00      	cmp	r3, #0
 8008082:	f000 81cf 	beq.w	8008424 <_dtoa_r+0xb3c>
 8008086:	461a      	mov	r2, r3
 8008088:	4601      	mov	r1, r0
 800808a:	4658      	mov	r0, fp
 800808c:	f001 f83a 	bl	8009104 <__pow5mult>
 8008090:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008092:	2b01      	cmp	r3, #1
 8008094:	4604      	mov	r4, r0
 8008096:	f300 8095 	bgt.w	80081c4 <_dtoa_r+0x8dc>
 800809a:	9b02      	ldr	r3, [sp, #8]
 800809c:	2b00      	cmp	r3, #0
 800809e:	f040 8087 	bne.w	80081b0 <_dtoa_r+0x8c8>
 80080a2:	9b03      	ldr	r3, [sp, #12]
 80080a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f040 8089 	bne.w	80081c0 <_dtoa_r+0x8d8>
 80080ae:	9b03      	ldr	r3, [sp, #12]
 80080b0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80080b4:	0d1b      	lsrs	r3, r3, #20
 80080b6:	051b      	lsls	r3, r3, #20
 80080b8:	b12b      	cbz	r3, 80080c6 <_dtoa_r+0x7de>
 80080ba:	9b08      	ldr	r3, [sp, #32]
 80080bc:	3301      	adds	r3, #1
 80080be:	9308      	str	r3, [sp, #32]
 80080c0:	f108 0801 	add.w	r8, r8, #1
 80080c4:	2301      	movs	r3, #1
 80080c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80080c8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	f000 81b0 	beq.w	8008430 <_dtoa_r+0xb48>
 80080d0:	6923      	ldr	r3, [r4, #16]
 80080d2:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80080d6:	6918      	ldr	r0, [r3, #16]
 80080d8:	f000 ff08 	bl	8008eec <__hi0bits>
 80080dc:	f1c0 0020 	rsb	r0, r0, #32
 80080e0:	9b08      	ldr	r3, [sp, #32]
 80080e2:	4418      	add	r0, r3
 80080e4:	f010 001f 	ands.w	r0, r0, #31
 80080e8:	d077      	beq.n	80081da <_dtoa_r+0x8f2>
 80080ea:	f1c0 0320 	rsb	r3, r0, #32
 80080ee:	2b04      	cmp	r3, #4
 80080f0:	dd6b      	ble.n	80081ca <_dtoa_r+0x8e2>
 80080f2:	9b08      	ldr	r3, [sp, #32]
 80080f4:	f1c0 001c 	rsb	r0, r0, #28
 80080f8:	4403      	add	r3, r0
 80080fa:	4480      	add	r8, r0
 80080fc:	4406      	add	r6, r0
 80080fe:	9308      	str	r3, [sp, #32]
 8008100:	f1b8 0f00 	cmp.w	r8, #0
 8008104:	dd05      	ble.n	8008112 <_dtoa_r+0x82a>
 8008106:	4649      	mov	r1, r9
 8008108:	4642      	mov	r2, r8
 800810a:	4658      	mov	r0, fp
 800810c:	f001 f854 	bl	80091b8 <__lshift>
 8008110:	4681      	mov	r9, r0
 8008112:	9b08      	ldr	r3, [sp, #32]
 8008114:	2b00      	cmp	r3, #0
 8008116:	dd05      	ble.n	8008124 <_dtoa_r+0x83c>
 8008118:	4621      	mov	r1, r4
 800811a:	461a      	mov	r2, r3
 800811c:	4658      	mov	r0, fp
 800811e:	f001 f84b 	bl	80091b8 <__lshift>
 8008122:	4604      	mov	r4, r0
 8008124:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8008126:	2b00      	cmp	r3, #0
 8008128:	d059      	beq.n	80081de <_dtoa_r+0x8f6>
 800812a:	4621      	mov	r1, r4
 800812c:	4648      	mov	r0, r9
 800812e:	f001 f8af 	bl	8009290 <__mcmp>
 8008132:	2800      	cmp	r0, #0
 8008134:	da53      	bge.n	80081de <_dtoa_r+0x8f6>
 8008136:	1e7b      	subs	r3, r7, #1
 8008138:	9304      	str	r3, [sp, #16]
 800813a:	4649      	mov	r1, r9
 800813c:	2300      	movs	r3, #0
 800813e:	220a      	movs	r2, #10
 8008140:	4658      	mov	r0, fp
 8008142:	f000 fe43 	bl	8008dcc <__multadd>
 8008146:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008148:	4681      	mov	r9, r0
 800814a:	2b00      	cmp	r3, #0
 800814c:	f000 8172 	beq.w	8008434 <_dtoa_r+0xb4c>
 8008150:	2300      	movs	r3, #0
 8008152:	4629      	mov	r1, r5
 8008154:	220a      	movs	r2, #10
 8008156:	4658      	mov	r0, fp
 8008158:	f000 fe38 	bl	8008dcc <__multadd>
 800815c:	9b00      	ldr	r3, [sp, #0]
 800815e:	2b00      	cmp	r3, #0
 8008160:	4605      	mov	r5, r0
 8008162:	dc67      	bgt.n	8008234 <_dtoa_r+0x94c>
 8008164:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008166:	2b02      	cmp	r3, #2
 8008168:	dc41      	bgt.n	80081ee <_dtoa_r+0x906>
 800816a:	e063      	b.n	8008234 <_dtoa_r+0x94c>
 800816c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800816e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008172:	e746      	b.n	8008002 <_dtoa_r+0x71a>
 8008174:	9b07      	ldr	r3, [sp, #28]
 8008176:	1e5c      	subs	r4, r3, #1
 8008178:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800817a:	42a3      	cmp	r3, r4
 800817c:	bfbf      	itttt	lt
 800817e:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008180:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8008182:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008184:	1ae3      	sublt	r3, r4, r3
 8008186:	bfb4      	ite	lt
 8008188:	18d2      	addlt	r2, r2, r3
 800818a:	1b1c      	subge	r4, r3, r4
 800818c:	9b07      	ldr	r3, [sp, #28]
 800818e:	bfbc      	itt	lt
 8008190:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8008192:	2400      	movlt	r4, #0
 8008194:	2b00      	cmp	r3, #0
 8008196:	bfb5      	itete	lt
 8008198:	eba8 0603 	sublt.w	r6, r8, r3
 800819c:	9b07      	ldrge	r3, [sp, #28]
 800819e:	2300      	movlt	r3, #0
 80081a0:	4646      	movge	r6, r8
 80081a2:	e730      	b.n	8008006 <_dtoa_r+0x71e>
 80081a4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80081a6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80081a8:	4646      	mov	r6, r8
 80081aa:	e735      	b.n	8008018 <_dtoa_r+0x730>
 80081ac:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80081ae:	e75c      	b.n	800806a <_dtoa_r+0x782>
 80081b0:	2300      	movs	r3, #0
 80081b2:	e788      	b.n	80080c6 <_dtoa_r+0x7de>
 80081b4:	3fe00000 	.word	0x3fe00000
 80081b8:	40240000 	.word	0x40240000
 80081bc:	40140000 	.word	0x40140000
 80081c0:	9b02      	ldr	r3, [sp, #8]
 80081c2:	e780      	b.n	80080c6 <_dtoa_r+0x7de>
 80081c4:	2300      	movs	r3, #0
 80081c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80081c8:	e782      	b.n	80080d0 <_dtoa_r+0x7e8>
 80081ca:	d099      	beq.n	8008100 <_dtoa_r+0x818>
 80081cc:	9a08      	ldr	r2, [sp, #32]
 80081ce:	331c      	adds	r3, #28
 80081d0:	441a      	add	r2, r3
 80081d2:	4498      	add	r8, r3
 80081d4:	441e      	add	r6, r3
 80081d6:	9208      	str	r2, [sp, #32]
 80081d8:	e792      	b.n	8008100 <_dtoa_r+0x818>
 80081da:	4603      	mov	r3, r0
 80081dc:	e7f6      	b.n	80081cc <_dtoa_r+0x8e4>
 80081de:	9b07      	ldr	r3, [sp, #28]
 80081e0:	9704      	str	r7, [sp, #16]
 80081e2:	2b00      	cmp	r3, #0
 80081e4:	dc20      	bgt.n	8008228 <_dtoa_r+0x940>
 80081e6:	9300      	str	r3, [sp, #0]
 80081e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80081ea:	2b02      	cmp	r3, #2
 80081ec:	dd1e      	ble.n	800822c <_dtoa_r+0x944>
 80081ee:	9b00      	ldr	r3, [sp, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	f47f aec0 	bne.w	8007f76 <_dtoa_r+0x68e>
 80081f6:	4621      	mov	r1, r4
 80081f8:	2205      	movs	r2, #5
 80081fa:	4658      	mov	r0, fp
 80081fc:	f000 fde6 	bl	8008dcc <__multadd>
 8008200:	4601      	mov	r1, r0
 8008202:	4604      	mov	r4, r0
 8008204:	4648      	mov	r0, r9
 8008206:	f001 f843 	bl	8009290 <__mcmp>
 800820a:	2800      	cmp	r0, #0
 800820c:	f77f aeb3 	ble.w	8007f76 <_dtoa_r+0x68e>
 8008210:	4656      	mov	r6, sl
 8008212:	2331      	movs	r3, #49	@ 0x31
 8008214:	f806 3b01 	strb.w	r3, [r6], #1
 8008218:	9b04      	ldr	r3, [sp, #16]
 800821a:	3301      	adds	r3, #1
 800821c:	9304      	str	r3, [sp, #16]
 800821e:	e6ae      	b.n	8007f7e <_dtoa_r+0x696>
 8008220:	9c07      	ldr	r4, [sp, #28]
 8008222:	9704      	str	r7, [sp, #16]
 8008224:	4625      	mov	r5, r4
 8008226:	e7f3      	b.n	8008210 <_dtoa_r+0x928>
 8008228:	9b07      	ldr	r3, [sp, #28]
 800822a:	9300      	str	r3, [sp, #0]
 800822c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800822e:	2b00      	cmp	r3, #0
 8008230:	f000 8104 	beq.w	800843c <_dtoa_r+0xb54>
 8008234:	2e00      	cmp	r6, #0
 8008236:	dd05      	ble.n	8008244 <_dtoa_r+0x95c>
 8008238:	4629      	mov	r1, r5
 800823a:	4632      	mov	r2, r6
 800823c:	4658      	mov	r0, fp
 800823e:	f000 ffbb 	bl	80091b8 <__lshift>
 8008242:	4605      	mov	r5, r0
 8008244:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008246:	2b00      	cmp	r3, #0
 8008248:	d05a      	beq.n	8008300 <_dtoa_r+0xa18>
 800824a:	6869      	ldr	r1, [r5, #4]
 800824c:	4658      	mov	r0, fp
 800824e:	f000 fd5b 	bl	8008d08 <_Balloc>
 8008252:	4606      	mov	r6, r0
 8008254:	b928      	cbnz	r0, 8008262 <_dtoa_r+0x97a>
 8008256:	4b84      	ldr	r3, [pc, #528]	@ (8008468 <_dtoa_r+0xb80>)
 8008258:	4602      	mov	r2, r0
 800825a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800825e:	f7ff bb5a 	b.w	8007916 <_dtoa_r+0x2e>
 8008262:	692a      	ldr	r2, [r5, #16]
 8008264:	3202      	adds	r2, #2
 8008266:	0092      	lsls	r2, r2, #2
 8008268:	f105 010c 	add.w	r1, r5, #12
 800826c:	300c      	adds	r0, #12
 800826e:	f7ff fa78 	bl	8007762 <memcpy>
 8008272:	2201      	movs	r2, #1
 8008274:	4631      	mov	r1, r6
 8008276:	4658      	mov	r0, fp
 8008278:	f000 ff9e 	bl	80091b8 <__lshift>
 800827c:	f10a 0301 	add.w	r3, sl, #1
 8008280:	9307      	str	r3, [sp, #28]
 8008282:	9b00      	ldr	r3, [sp, #0]
 8008284:	4453      	add	r3, sl
 8008286:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008288:	9b02      	ldr	r3, [sp, #8]
 800828a:	f003 0301 	and.w	r3, r3, #1
 800828e:	462f      	mov	r7, r5
 8008290:	930a      	str	r3, [sp, #40]	@ 0x28
 8008292:	4605      	mov	r5, r0
 8008294:	9b07      	ldr	r3, [sp, #28]
 8008296:	4621      	mov	r1, r4
 8008298:	3b01      	subs	r3, #1
 800829a:	4648      	mov	r0, r9
 800829c:	9300      	str	r3, [sp, #0]
 800829e:	f7ff fa9b 	bl	80077d8 <quorem>
 80082a2:	4639      	mov	r1, r7
 80082a4:	9002      	str	r0, [sp, #8]
 80082a6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80082aa:	4648      	mov	r0, r9
 80082ac:	f000 fff0 	bl	8009290 <__mcmp>
 80082b0:	462a      	mov	r2, r5
 80082b2:	9008      	str	r0, [sp, #32]
 80082b4:	4621      	mov	r1, r4
 80082b6:	4658      	mov	r0, fp
 80082b8:	f001 f806 	bl	80092c8 <__mdiff>
 80082bc:	68c2      	ldr	r2, [r0, #12]
 80082be:	4606      	mov	r6, r0
 80082c0:	bb02      	cbnz	r2, 8008304 <_dtoa_r+0xa1c>
 80082c2:	4601      	mov	r1, r0
 80082c4:	4648      	mov	r0, r9
 80082c6:	f000 ffe3 	bl	8009290 <__mcmp>
 80082ca:	4602      	mov	r2, r0
 80082cc:	4631      	mov	r1, r6
 80082ce:	4658      	mov	r0, fp
 80082d0:	920e      	str	r2, [sp, #56]	@ 0x38
 80082d2:	f000 fd59 	bl	8008d88 <_Bfree>
 80082d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082d8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80082da:	9e07      	ldr	r6, [sp, #28]
 80082dc:	ea43 0102 	orr.w	r1, r3, r2
 80082e0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80082e2:	4319      	orrs	r1, r3
 80082e4:	d110      	bne.n	8008308 <_dtoa_r+0xa20>
 80082e6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80082ea:	d029      	beq.n	8008340 <_dtoa_r+0xa58>
 80082ec:	9b08      	ldr	r3, [sp, #32]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	dd02      	ble.n	80082f8 <_dtoa_r+0xa10>
 80082f2:	9b02      	ldr	r3, [sp, #8]
 80082f4:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 80082f8:	9b00      	ldr	r3, [sp, #0]
 80082fa:	f883 8000 	strb.w	r8, [r3]
 80082fe:	e63f      	b.n	8007f80 <_dtoa_r+0x698>
 8008300:	4628      	mov	r0, r5
 8008302:	e7bb      	b.n	800827c <_dtoa_r+0x994>
 8008304:	2201      	movs	r2, #1
 8008306:	e7e1      	b.n	80082cc <_dtoa_r+0x9e4>
 8008308:	9b08      	ldr	r3, [sp, #32]
 800830a:	2b00      	cmp	r3, #0
 800830c:	db04      	blt.n	8008318 <_dtoa_r+0xa30>
 800830e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008310:	430b      	orrs	r3, r1
 8008312:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008314:	430b      	orrs	r3, r1
 8008316:	d120      	bne.n	800835a <_dtoa_r+0xa72>
 8008318:	2a00      	cmp	r2, #0
 800831a:	dded      	ble.n	80082f8 <_dtoa_r+0xa10>
 800831c:	4649      	mov	r1, r9
 800831e:	2201      	movs	r2, #1
 8008320:	4658      	mov	r0, fp
 8008322:	f000 ff49 	bl	80091b8 <__lshift>
 8008326:	4621      	mov	r1, r4
 8008328:	4681      	mov	r9, r0
 800832a:	f000 ffb1 	bl	8009290 <__mcmp>
 800832e:	2800      	cmp	r0, #0
 8008330:	dc03      	bgt.n	800833a <_dtoa_r+0xa52>
 8008332:	d1e1      	bne.n	80082f8 <_dtoa_r+0xa10>
 8008334:	f018 0f01 	tst.w	r8, #1
 8008338:	d0de      	beq.n	80082f8 <_dtoa_r+0xa10>
 800833a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800833e:	d1d8      	bne.n	80082f2 <_dtoa_r+0xa0a>
 8008340:	9a00      	ldr	r2, [sp, #0]
 8008342:	2339      	movs	r3, #57	@ 0x39
 8008344:	7013      	strb	r3, [r2, #0]
 8008346:	4633      	mov	r3, r6
 8008348:	461e      	mov	r6, r3
 800834a:	3b01      	subs	r3, #1
 800834c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008350:	2a39      	cmp	r2, #57	@ 0x39
 8008352:	d052      	beq.n	80083fa <_dtoa_r+0xb12>
 8008354:	3201      	adds	r2, #1
 8008356:	701a      	strb	r2, [r3, #0]
 8008358:	e612      	b.n	8007f80 <_dtoa_r+0x698>
 800835a:	2a00      	cmp	r2, #0
 800835c:	dd07      	ble.n	800836e <_dtoa_r+0xa86>
 800835e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008362:	d0ed      	beq.n	8008340 <_dtoa_r+0xa58>
 8008364:	9a00      	ldr	r2, [sp, #0]
 8008366:	f108 0301 	add.w	r3, r8, #1
 800836a:	7013      	strb	r3, [r2, #0]
 800836c:	e608      	b.n	8007f80 <_dtoa_r+0x698>
 800836e:	9b07      	ldr	r3, [sp, #28]
 8008370:	9a07      	ldr	r2, [sp, #28]
 8008372:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008376:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008378:	4293      	cmp	r3, r2
 800837a:	d028      	beq.n	80083ce <_dtoa_r+0xae6>
 800837c:	4649      	mov	r1, r9
 800837e:	2300      	movs	r3, #0
 8008380:	220a      	movs	r2, #10
 8008382:	4658      	mov	r0, fp
 8008384:	f000 fd22 	bl	8008dcc <__multadd>
 8008388:	42af      	cmp	r7, r5
 800838a:	4681      	mov	r9, r0
 800838c:	f04f 0300 	mov.w	r3, #0
 8008390:	f04f 020a 	mov.w	r2, #10
 8008394:	4639      	mov	r1, r7
 8008396:	4658      	mov	r0, fp
 8008398:	d107      	bne.n	80083aa <_dtoa_r+0xac2>
 800839a:	f000 fd17 	bl	8008dcc <__multadd>
 800839e:	4607      	mov	r7, r0
 80083a0:	4605      	mov	r5, r0
 80083a2:	9b07      	ldr	r3, [sp, #28]
 80083a4:	3301      	adds	r3, #1
 80083a6:	9307      	str	r3, [sp, #28]
 80083a8:	e774      	b.n	8008294 <_dtoa_r+0x9ac>
 80083aa:	f000 fd0f 	bl	8008dcc <__multadd>
 80083ae:	4629      	mov	r1, r5
 80083b0:	4607      	mov	r7, r0
 80083b2:	2300      	movs	r3, #0
 80083b4:	220a      	movs	r2, #10
 80083b6:	4658      	mov	r0, fp
 80083b8:	f000 fd08 	bl	8008dcc <__multadd>
 80083bc:	4605      	mov	r5, r0
 80083be:	e7f0      	b.n	80083a2 <_dtoa_r+0xaba>
 80083c0:	9b00      	ldr	r3, [sp, #0]
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	bfcc      	ite	gt
 80083c6:	461e      	movgt	r6, r3
 80083c8:	2601      	movle	r6, #1
 80083ca:	4456      	add	r6, sl
 80083cc:	2700      	movs	r7, #0
 80083ce:	4649      	mov	r1, r9
 80083d0:	2201      	movs	r2, #1
 80083d2:	4658      	mov	r0, fp
 80083d4:	f000 fef0 	bl	80091b8 <__lshift>
 80083d8:	4621      	mov	r1, r4
 80083da:	4681      	mov	r9, r0
 80083dc:	f000 ff58 	bl	8009290 <__mcmp>
 80083e0:	2800      	cmp	r0, #0
 80083e2:	dcb0      	bgt.n	8008346 <_dtoa_r+0xa5e>
 80083e4:	d102      	bne.n	80083ec <_dtoa_r+0xb04>
 80083e6:	f018 0f01 	tst.w	r8, #1
 80083ea:	d1ac      	bne.n	8008346 <_dtoa_r+0xa5e>
 80083ec:	4633      	mov	r3, r6
 80083ee:	461e      	mov	r6, r3
 80083f0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083f4:	2a30      	cmp	r2, #48	@ 0x30
 80083f6:	d0fa      	beq.n	80083ee <_dtoa_r+0xb06>
 80083f8:	e5c2      	b.n	8007f80 <_dtoa_r+0x698>
 80083fa:	459a      	cmp	sl, r3
 80083fc:	d1a4      	bne.n	8008348 <_dtoa_r+0xa60>
 80083fe:	9b04      	ldr	r3, [sp, #16]
 8008400:	3301      	adds	r3, #1
 8008402:	9304      	str	r3, [sp, #16]
 8008404:	2331      	movs	r3, #49	@ 0x31
 8008406:	f88a 3000 	strb.w	r3, [sl]
 800840a:	e5b9      	b.n	8007f80 <_dtoa_r+0x698>
 800840c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800840e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800846c <_dtoa_r+0xb84>
 8008412:	b11b      	cbz	r3, 800841c <_dtoa_r+0xb34>
 8008414:	f10a 0308 	add.w	r3, sl, #8
 8008418:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800841a:	6013      	str	r3, [r2, #0]
 800841c:	4650      	mov	r0, sl
 800841e:	b019      	add	sp, #100	@ 0x64
 8008420:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008424:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008426:	2b01      	cmp	r3, #1
 8008428:	f77f ae37 	ble.w	800809a <_dtoa_r+0x7b2>
 800842c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800842e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008430:	2001      	movs	r0, #1
 8008432:	e655      	b.n	80080e0 <_dtoa_r+0x7f8>
 8008434:	9b00      	ldr	r3, [sp, #0]
 8008436:	2b00      	cmp	r3, #0
 8008438:	f77f aed6 	ble.w	80081e8 <_dtoa_r+0x900>
 800843c:	4656      	mov	r6, sl
 800843e:	4621      	mov	r1, r4
 8008440:	4648      	mov	r0, r9
 8008442:	f7ff f9c9 	bl	80077d8 <quorem>
 8008446:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800844a:	f806 8b01 	strb.w	r8, [r6], #1
 800844e:	9b00      	ldr	r3, [sp, #0]
 8008450:	eba6 020a 	sub.w	r2, r6, sl
 8008454:	4293      	cmp	r3, r2
 8008456:	ddb3      	ble.n	80083c0 <_dtoa_r+0xad8>
 8008458:	4649      	mov	r1, r9
 800845a:	2300      	movs	r3, #0
 800845c:	220a      	movs	r2, #10
 800845e:	4658      	mov	r0, fp
 8008460:	f000 fcb4 	bl	8008dcc <__multadd>
 8008464:	4681      	mov	r9, r0
 8008466:	e7ea      	b.n	800843e <_dtoa_r+0xb56>
 8008468:	0800c869 	.word	0x0800c869
 800846c:	0800c804 	.word	0x0800c804

08008470 <_free_r>:
 8008470:	b538      	push	{r3, r4, r5, lr}
 8008472:	4605      	mov	r5, r0
 8008474:	2900      	cmp	r1, #0
 8008476:	d041      	beq.n	80084fc <_free_r+0x8c>
 8008478:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800847c:	1f0c      	subs	r4, r1, #4
 800847e:	2b00      	cmp	r3, #0
 8008480:	bfb8      	it	lt
 8008482:	18e4      	addlt	r4, r4, r3
 8008484:	f000 fc34 	bl	8008cf0 <__malloc_lock>
 8008488:	4a1d      	ldr	r2, [pc, #116]	@ (8008500 <_free_r+0x90>)
 800848a:	6813      	ldr	r3, [r2, #0]
 800848c:	b933      	cbnz	r3, 800849c <_free_r+0x2c>
 800848e:	6063      	str	r3, [r4, #4]
 8008490:	6014      	str	r4, [r2, #0]
 8008492:	4628      	mov	r0, r5
 8008494:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008498:	f000 bc30 	b.w	8008cfc <__malloc_unlock>
 800849c:	42a3      	cmp	r3, r4
 800849e:	d908      	bls.n	80084b2 <_free_r+0x42>
 80084a0:	6820      	ldr	r0, [r4, #0]
 80084a2:	1821      	adds	r1, r4, r0
 80084a4:	428b      	cmp	r3, r1
 80084a6:	bf01      	itttt	eq
 80084a8:	6819      	ldreq	r1, [r3, #0]
 80084aa:	685b      	ldreq	r3, [r3, #4]
 80084ac:	1809      	addeq	r1, r1, r0
 80084ae:	6021      	streq	r1, [r4, #0]
 80084b0:	e7ed      	b.n	800848e <_free_r+0x1e>
 80084b2:	461a      	mov	r2, r3
 80084b4:	685b      	ldr	r3, [r3, #4]
 80084b6:	b10b      	cbz	r3, 80084bc <_free_r+0x4c>
 80084b8:	42a3      	cmp	r3, r4
 80084ba:	d9fa      	bls.n	80084b2 <_free_r+0x42>
 80084bc:	6811      	ldr	r1, [r2, #0]
 80084be:	1850      	adds	r0, r2, r1
 80084c0:	42a0      	cmp	r0, r4
 80084c2:	d10b      	bne.n	80084dc <_free_r+0x6c>
 80084c4:	6820      	ldr	r0, [r4, #0]
 80084c6:	4401      	add	r1, r0
 80084c8:	1850      	adds	r0, r2, r1
 80084ca:	4283      	cmp	r3, r0
 80084cc:	6011      	str	r1, [r2, #0]
 80084ce:	d1e0      	bne.n	8008492 <_free_r+0x22>
 80084d0:	6818      	ldr	r0, [r3, #0]
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	6053      	str	r3, [r2, #4]
 80084d6:	4408      	add	r0, r1
 80084d8:	6010      	str	r0, [r2, #0]
 80084da:	e7da      	b.n	8008492 <_free_r+0x22>
 80084dc:	d902      	bls.n	80084e4 <_free_r+0x74>
 80084de:	230c      	movs	r3, #12
 80084e0:	602b      	str	r3, [r5, #0]
 80084e2:	e7d6      	b.n	8008492 <_free_r+0x22>
 80084e4:	6820      	ldr	r0, [r4, #0]
 80084e6:	1821      	adds	r1, r4, r0
 80084e8:	428b      	cmp	r3, r1
 80084ea:	bf04      	itt	eq
 80084ec:	6819      	ldreq	r1, [r3, #0]
 80084ee:	685b      	ldreq	r3, [r3, #4]
 80084f0:	6063      	str	r3, [r4, #4]
 80084f2:	bf04      	itt	eq
 80084f4:	1809      	addeq	r1, r1, r0
 80084f6:	6021      	streq	r1, [r4, #0]
 80084f8:	6054      	str	r4, [r2, #4]
 80084fa:	e7ca      	b.n	8008492 <_free_r+0x22>
 80084fc:	bd38      	pop	{r3, r4, r5, pc}
 80084fe:	bf00      	nop
 8008500:	20000958 	.word	0x20000958

08008504 <rshift>:
 8008504:	6903      	ldr	r3, [r0, #16]
 8008506:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800850a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800850e:	ea4f 1261 	mov.w	r2, r1, asr #5
 8008512:	f100 0414 	add.w	r4, r0, #20
 8008516:	dd45      	ble.n	80085a4 <rshift+0xa0>
 8008518:	f011 011f 	ands.w	r1, r1, #31
 800851c:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8008520:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8008524:	d10c      	bne.n	8008540 <rshift+0x3c>
 8008526:	f100 0710 	add.w	r7, r0, #16
 800852a:	4629      	mov	r1, r5
 800852c:	42b1      	cmp	r1, r6
 800852e:	d334      	bcc.n	800859a <rshift+0x96>
 8008530:	1a9b      	subs	r3, r3, r2
 8008532:	009b      	lsls	r3, r3, #2
 8008534:	1eea      	subs	r2, r5, #3
 8008536:	4296      	cmp	r6, r2
 8008538:	bf38      	it	cc
 800853a:	2300      	movcc	r3, #0
 800853c:	4423      	add	r3, r4
 800853e:	e015      	b.n	800856c <rshift+0x68>
 8008540:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8008544:	f1c1 0820 	rsb	r8, r1, #32
 8008548:	40cf      	lsrs	r7, r1
 800854a:	f105 0e04 	add.w	lr, r5, #4
 800854e:	46a1      	mov	r9, r4
 8008550:	4576      	cmp	r6, lr
 8008552:	46f4      	mov	ip, lr
 8008554:	d815      	bhi.n	8008582 <rshift+0x7e>
 8008556:	1a9a      	subs	r2, r3, r2
 8008558:	0092      	lsls	r2, r2, #2
 800855a:	3a04      	subs	r2, #4
 800855c:	3501      	adds	r5, #1
 800855e:	42ae      	cmp	r6, r5
 8008560:	bf38      	it	cc
 8008562:	2200      	movcc	r2, #0
 8008564:	18a3      	adds	r3, r4, r2
 8008566:	50a7      	str	r7, [r4, r2]
 8008568:	b107      	cbz	r7, 800856c <rshift+0x68>
 800856a:	3304      	adds	r3, #4
 800856c:	1b1a      	subs	r2, r3, r4
 800856e:	42a3      	cmp	r3, r4
 8008570:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8008574:	bf08      	it	eq
 8008576:	2300      	moveq	r3, #0
 8008578:	6102      	str	r2, [r0, #16]
 800857a:	bf08      	it	eq
 800857c:	6143      	streq	r3, [r0, #20]
 800857e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008582:	f8dc c000 	ldr.w	ip, [ip]
 8008586:	fa0c fc08 	lsl.w	ip, ip, r8
 800858a:	ea4c 0707 	orr.w	r7, ip, r7
 800858e:	f849 7b04 	str.w	r7, [r9], #4
 8008592:	f85e 7b04 	ldr.w	r7, [lr], #4
 8008596:	40cf      	lsrs	r7, r1
 8008598:	e7da      	b.n	8008550 <rshift+0x4c>
 800859a:	f851 cb04 	ldr.w	ip, [r1], #4
 800859e:	f847 cf04 	str.w	ip, [r7, #4]!
 80085a2:	e7c3      	b.n	800852c <rshift+0x28>
 80085a4:	4623      	mov	r3, r4
 80085a6:	e7e1      	b.n	800856c <rshift+0x68>

080085a8 <__hexdig_fun>:
 80085a8:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 80085ac:	2b09      	cmp	r3, #9
 80085ae:	d802      	bhi.n	80085b6 <__hexdig_fun+0xe>
 80085b0:	3820      	subs	r0, #32
 80085b2:	b2c0      	uxtb	r0, r0
 80085b4:	4770      	bx	lr
 80085b6:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 80085ba:	2b05      	cmp	r3, #5
 80085bc:	d801      	bhi.n	80085c2 <__hexdig_fun+0x1a>
 80085be:	3847      	subs	r0, #71	@ 0x47
 80085c0:	e7f7      	b.n	80085b2 <__hexdig_fun+0xa>
 80085c2:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 80085c6:	2b05      	cmp	r3, #5
 80085c8:	d801      	bhi.n	80085ce <__hexdig_fun+0x26>
 80085ca:	3827      	subs	r0, #39	@ 0x27
 80085cc:	e7f1      	b.n	80085b2 <__hexdig_fun+0xa>
 80085ce:	2000      	movs	r0, #0
 80085d0:	4770      	bx	lr
	...

080085d4 <__gethex>:
 80085d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085d8:	b085      	sub	sp, #20
 80085da:	468a      	mov	sl, r1
 80085dc:	9302      	str	r3, [sp, #8]
 80085de:	680b      	ldr	r3, [r1, #0]
 80085e0:	9001      	str	r0, [sp, #4]
 80085e2:	4690      	mov	r8, r2
 80085e4:	1c9c      	adds	r4, r3, #2
 80085e6:	46a1      	mov	r9, r4
 80085e8:	f814 0b01 	ldrb.w	r0, [r4], #1
 80085ec:	2830      	cmp	r0, #48	@ 0x30
 80085ee:	d0fa      	beq.n	80085e6 <__gethex+0x12>
 80085f0:	eba9 0303 	sub.w	r3, r9, r3
 80085f4:	f1a3 0b02 	sub.w	fp, r3, #2
 80085f8:	f7ff ffd6 	bl	80085a8 <__hexdig_fun>
 80085fc:	4605      	mov	r5, r0
 80085fe:	2800      	cmp	r0, #0
 8008600:	d168      	bne.n	80086d4 <__gethex+0x100>
 8008602:	49a0      	ldr	r1, [pc, #640]	@ (8008884 <__gethex+0x2b0>)
 8008604:	2201      	movs	r2, #1
 8008606:	4648      	mov	r0, r9
 8008608:	f7fe ffc5 	bl	8007596 <strncmp>
 800860c:	4607      	mov	r7, r0
 800860e:	2800      	cmp	r0, #0
 8008610:	d167      	bne.n	80086e2 <__gethex+0x10e>
 8008612:	f899 0001 	ldrb.w	r0, [r9, #1]
 8008616:	4626      	mov	r6, r4
 8008618:	f7ff ffc6 	bl	80085a8 <__hexdig_fun>
 800861c:	2800      	cmp	r0, #0
 800861e:	d062      	beq.n	80086e6 <__gethex+0x112>
 8008620:	4623      	mov	r3, r4
 8008622:	7818      	ldrb	r0, [r3, #0]
 8008624:	2830      	cmp	r0, #48	@ 0x30
 8008626:	4699      	mov	r9, r3
 8008628:	f103 0301 	add.w	r3, r3, #1
 800862c:	d0f9      	beq.n	8008622 <__gethex+0x4e>
 800862e:	f7ff ffbb 	bl	80085a8 <__hexdig_fun>
 8008632:	fab0 f580 	clz	r5, r0
 8008636:	096d      	lsrs	r5, r5, #5
 8008638:	f04f 0b01 	mov.w	fp, #1
 800863c:	464a      	mov	r2, r9
 800863e:	4616      	mov	r6, r2
 8008640:	3201      	adds	r2, #1
 8008642:	7830      	ldrb	r0, [r6, #0]
 8008644:	f7ff ffb0 	bl	80085a8 <__hexdig_fun>
 8008648:	2800      	cmp	r0, #0
 800864a:	d1f8      	bne.n	800863e <__gethex+0x6a>
 800864c:	498d      	ldr	r1, [pc, #564]	@ (8008884 <__gethex+0x2b0>)
 800864e:	2201      	movs	r2, #1
 8008650:	4630      	mov	r0, r6
 8008652:	f7fe ffa0 	bl	8007596 <strncmp>
 8008656:	2800      	cmp	r0, #0
 8008658:	d13f      	bne.n	80086da <__gethex+0x106>
 800865a:	b944      	cbnz	r4, 800866e <__gethex+0x9a>
 800865c:	1c74      	adds	r4, r6, #1
 800865e:	4622      	mov	r2, r4
 8008660:	4616      	mov	r6, r2
 8008662:	3201      	adds	r2, #1
 8008664:	7830      	ldrb	r0, [r6, #0]
 8008666:	f7ff ff9f 	bl	80085a8 <__hexdig_fun>
 800866a:	2800      	cmp	r0, #0
 800866c:	d1f8      	bne.n	8008660 <__gethex+0x8c>
 800866e:	1ba4      	subs	r4, r4, r6
 8008670:	00a7      	lsls	r7, r4, #2
 8008672:	7833      	ldrb	r3, [r6, #0]
 8008674:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 8008678:	2b50      	cmp	r3, #80	@ 0x50
 800867a:	d13e      	bne.n	80086fa <__gethex+0x126>
 800867c:	7873      	ldrb	r3, [r6, #1]
 800867e:	2b2b      	cmp	r3, #43	@ 0x2b
 8008680:	d033      	beq.n	80086ea <__gethex+0x116>
 8008682:	2b2d      	cmp	r3, #45	@ 0x2d
 8008684:	d034      	beq.n	80086f0 <__gethex+0x11c>
 8008686:	1c71      	adds	r1, r6, #1
 8008688:	2400      	movs	r4, #0
 800868a:	7808      	ldrb	r0, [r1, #0]
 800868c:	f7ff ff8c 	bl	80085a8 <__hexdig_fun>
 8008690:	1e43      	subs	r3, r0, #1
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b18      	cmp	r3, #24
 8008696:	d830      	bhi.n	80086fa <__gethex+0x126>
 8008698:	f1a0 0210 	sub.w	r2, r0, #16
 800869c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80086a0:	f7ff ff82 	bl	80085a8 <__hexdig_fun>
 80086a4:	f100 3cff 	add.w	ip, r0, #4294967295
 80086a8:	fa5f fc8c 	uxtb.w	ip, ip
 80086ac:	f1bc 0f18 	cmp.w	ip, #24
 80086b0:	f04f 030a 	mov.w	r3, #10
 80086b4:	d91e      	bls.n	80086f4 <__gethex+0x120>
 80086b6:	b104      	cbz	r4, 80086ba <__gethex+0xe6>
 80086b8:	4252      	negs	r2, r2
 80086ba:	4417      	add	r7, r2
 80086bc:	f8ca 1000 	str.w	r1, [sl]
 80086c0:	b1ed      	cbz	r5, 80086fe <__gethex+0x12a>
 80086c2:	f1bb 0f00 	cmp.w	fp, #0
 80086c6:	bf0c      	ite	eq
 80086c8:	2506      	moveq	r5, #6
 80086ca:	2500      	movne	r5, #0
 80086cc:	4628      	mov	r0, r5
 80086ce:	b005      	add	sp, #20
 80086d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d4:	2500      	movs	r5, #0
 80086d6:	462c      	mov	r4, r5
 80086d8:	e7b0      	b.n	800863c <__gethex+0x68>
 80086da:	2c00      	cmp	r4, #0
 80086dc:	d1c7      	bne.n	800866e <__gethex+0x9a>
 80086de:	4627      	mov	r7, r4
 80086e0:	e7c7      	b.n	8008672 <__gethex+0x9e>
 80086e2:	464e      	mov	r6, r9
 80086e4:	462f      	mov	r7, r5
 80086e6:	2501      	movs	r5, #1
 80086e8:	e7c3      	b.n	8008672 <__gethex+0x9e>
 80086ea:	2400      	movs	r4, #0
 80086ec:	1cb1      	adds	r1, r6, #2
 80086ee:	e7cc      	b.n	800868a <__gethex+0xb6>
 80086f0:	2401      	movs	r4, #1
 80086f2:	e7fb      	b.n	80086ec <__gethex+0x118>
 80086f4:	fb03 0002 	mla	r0, r3, r2, r0
 80086f8:	e7ce      	b.n	8008698 <__gethex+0xc4>
 80086fa:	4631      	mov	r1, r6
 80086fc:	e7de      	b.n	80086bc <__gethex+0xe8>
 80086fe:	eba6 0309 	sub.w	r3, r6, r9
 8008702:	3b01      	subs	r3, #1
 8008704:	4629      	mov	r1, r5
 8008706:	2b07      	cmp	r3, #7
 8008708:	dc0a      	bgt.n	8008720 <__gethex+0x14c>
 800870a:	9801      	ldr	r0, [sp, #4]
 800870c:	f000 fafc 	bl	8008d08 <_Balloc>
 8008710:	4604      	mov	r4, r0
 8008712:	b940      	cbnz	r0, 8008726 <__gethex+0x152>
 8008714:	4b5c      	ldr	r3, [pc, #368]	@ (8008888 <__gethex+0x2b4>)
 8008716:	4602      	mov	r2, r0
 8008718:	21e4      	movs	r1, #228	@ 0xe4
 800871a:	485c      	ldr	r0, [pc, #368]	@ (800888c <__gethex+0x2b8>)
 800871c:	f7ff f83e 	bl	800779c <__assert_func>
 8008720:	3101      	adds	r1, #1
 8008722:	105b      	asrs	r3, r3, #1
 8008724:	e7ef      	b.n	8008706 <__gethex+0x132>
 8008726:	f100 0a14 	add.w	sl, r0, #20
 800872a:	2300      	movs	r3, #0
 800872c:	4655      	mov	r5, sl
 800872e:	469b      	mov	fp, r3
 8008730:	45b1      	cmp	r9, r6
 8008732:	d337      	bcc.n	80087a4 <__gethex+0x1d0>
 8008734:	f845 bb04 	str.w	fp, [r5], #4
 8008738:	eba5 050a 	sub.w	r5, r5, sl
 800873c:	10ad      	asrs	r5, r5, #2
 800873e:	6125      	str	r5, [r4, #16]
 8008740:	4658      	mov	r0, fp
 8008742:	f000 fbd3 	bl	8008eec <__hi0bits>
 8008746:	016d      	lsls	r5, r5, #5
 8008748:	f8d8 6000 	ldr.w	r6, [r8]
 800874c:	1a2d      	subs	r5, r5, r0
 800874e:	42b5      	cmp	r5, r6
 8008750:	dd54      	ble.n	80087fc <__gethex+0x228>
 8008752:	1bad      	subs	r5, r5, r6
 8008754:	4629      	mov	r1, r5
 8008756:	4620      	mov	r0, r4
 8008758:	f000 ff67 	bl	800962a <__any_on>
 800875c:	4681      	mov	r9, r0
 800875e:	b178      	cbz	r0, 8008780 <__gethex+0x1ac>
 8008760:	1e6b      	subs	r3, r5, #1
 8008762:	1159      	asrs	r1, r3, #5
 8008764:	f003 021f 	and.w	r2, r3, #31
 8008768:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800876c:	f04f 0901 	mov.w	r9, #1
 8008770:	fa09 f202 	lsl.w	r2, r9, r2
 8008774:	420a      	tst	r2, r1
 8008776:	d003      	beq.n	8008780 <__gethex+0x1ac>
 8008778:	454b      	cmp	r3, r9
 800877a:	dc36      	bgt.n	80087ea <__gethex+0x216>
 800877c:	f04f 0902 	mov.w	r9, #2
 8008780:	4629      	mov	r1, r5
 8008782:	4620      	mov	r0, r4
 8008784:	f7ff febe 	bl	8008504 <rshift>
 8008788:	442f      	add	r7, r5
 800878a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800878e:	42bb      	cmp	r3, r7
 8008790:	da42      	bge.n	8008818 <__gethex+0x244>
 8008792:	9801      	ldr	r0, [sp, #4]
 8008794:	4621      	mov	r1, r4
 8008796:	f000 faf7 	bl	8008d88 <_Bfree>
 800879a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800879c:	2300      	movs	r3, #0
 800879e:	6013      	str	r3, [r2, #0]
 80087a0:	25a3      	movs	r5, #163	@ 0xa3
 80087a2:	e793      	b.n	80086cc <__gethex+0xf8>
 80087a4:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 80087a8:	2a2e      	cmp	r2, #46	@ 0x2e
 80087aa:	d012      	beq.n	80087d2 <__gethex+0x1fe>
 80087ac:	2b20      	cmp	r3, #32
 80087ae:	d104      	bne.n	80087ba <__gethex+0x1e6>
 80087b0:	f845 bb04 	str.w	fp, [r5], #4
 80087b4:	f04f 0b00 	mov.w	fp, #0
 80087b8:	465b      	mov	r3, fp
 80087ba:	7830      	ldrb	r0, [r6, #0]
 80087bc:	9303      	str	r3, [sp, #12]
 80087be:	f7ff fef3 	bl	80085a8 <__hexdig_fun>
 80087c2:	9b03      	ldr	r3, [sp, #12]
 80087c4:	f000 000f 	and.w	r0, r0, #15
 80087c8:	4098      	lsls	r0, r3
 80087ca:	ea4b 0b00 	orr.w	fp, fp, r0
 80087ce:	3304      	adds	r3, #4
 80087d0:	e7ae      	b.n	8008730 <__gethex+0x15c>
 80087d2:	45b1      	cmp	r9, r6
 80087d4:	d8ea      	bhi.n	80087ac <__gethex+0x1d8>
 80087d6:	492b      	ldr	r1, [pc, #172]	@ (8008884 <__gethex+0x2b0>)
 80087d8:	9303      	str	r3, [sp, #12]
 80087da:	2201      	movs	r2, #1
 80087dc:	4630      	mov	r0, r6
 80087de:	f7fe feda 	bl	8007596 <strncmp>
 80087e2:	9b03      	ldr	r3, [sp, #12]
 80087e4:	2800      	cmp	r0, #0
 80087e6:	d1e1      	bne.n	80087ac <__gethex+0x1d8>
 80087e8:	e7a2      	b.n	8008730 <__gethex+0x15c>
 80087ea:	1ea9      	subs	r1, r5, #2
 80087ec:	4620      	mov	r0, r4
 80087ee:	f000 ff1c 	bl	800962a <__any_on>
 80087f2:	2800      	cmp	r0, #0
 80087f4:	d0c2      	beq.n	800877c <__gethex+0x1a8>
 80087f6:	f04f 0903 	mov.w	r9, #3
 80087fa:	e7c1      	b.n	8008780 <__gethex+0x1ac>
 80087fc:	da09      	bge.n	8008812 <__gethex+0x23e>
 80087fe:	1b75      	subs	r5, r6, r5
 8008800:	4621      	mov	r1, r4
 8008802:	9801      	ldr	r0, [sp, #4]
 8008804:	462a      	mov	r2, r5
 8008806:	f000 fcd7 	bl	80091b8 <__lshift>
 800880a:	1b7f      	subs	r7, r7, r5
 800880c:	4604      	mov	r4, r0
 800880e:	f100 0a14 	add.w	sl, r0, #20
 8008812:	f04f 0900 	mov.w	r9, #0
 8008816:	e7b8      	b.n	800878a <__gethex+0x1b6>
 8008818:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800881c:	42bd      	cmp	r5, r7
 800881e:	dd6f      	ble.n	8008900 <__gethex+0x32c>
 8008820:	1bed      	subs	r5, r5, r7
 8008822:	42ae      	cmp	r6, r5
 8008824:	dc34      	bgt.n	8008890 <__gethex+0x2bc>
 8008826:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800882a:	2b02      	cmp	r3, #2
 800882c:	d022      	beq.n	8008874 <__gethex+0x2a0>
 800882e:	2b03      	cmp	r3, #3
 8008830:	d024      	beq.n	800887c <__gethex+0x2a8>
 8008832:	2b01      	cmp	r3, #1
 8008834:	d115      	bne.n	8008862 <__gethex+0x28e>
 8008836:	42ae      	cmp	r6, r5
 8008838:	d113      	bne.n	8008862 <__gethex+0x28e>
 800883a:	2e01      	cmp	r6, #1
 800883c:	d10b      	bne.n	8008856 <__gethex+0x282>
 800883e:	9a02      	ldr	r2, [sp, #8]
 8008840:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8008844:	6013      	str	r3, [r2, #0]
 8008846:	2301      	movs	r3, #1
 8008848:	6123      	str	r3, [r4, #16]
 800884a:	f8ca 3000 	str.w	r3, [sl]
 800884e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008850:	2562      	movs	r5, #98	@ 0x62
 8008852:	601c      	str	r4, [r3, #0]
 8008854:	e73a      	b.n	80086cc <__gethex+0xf8>
 8008856:	1e71      	subs	r1, r6, #1
 8008858:	4620      	mov	r0, r4
 800885a:	f000 fee6 	bl	800962a <__any_on>
 800885e:	2800      	cmp	r0, #0
 8008860:	d1ed      	bne.n	800883e <__gethex+0x26a>
 8008862:	9801      	ldr	r0, [sp, #4]
 8008864:	4621      	mov	r1, r4
 8008866:	f000 fa8f 	bl	8008d88 <_Bfree>
 800886a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800886c:	2300      	movs	r3, #0
 800886e:	6013      	str	r3, [r2, #0]
 8008870:	2550      	movs	r5, #80	@ 0x50
 8008872:	e72b      	b.n	80086cc <__gethex+0xf8>
 8008874:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008876:	2b00      	cmp	r3, #0
 8008878:	d1f3      	bne.n	8008862 <__gethex+0x28e>
 800887a:	e7e0      	b.n	800883e <__gethex+0x26a>
 800887c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800887e:	2b00      	cmp	r3, #0
 8008880:	d1dd      	bne.n	800883e <__gethex+0x26a>
 8008882:	e7ee      	b.n	8008862 <__gethex+0x28e>
 8008884:	0800c6c4 	.word	0x0800c6c4
 8008888:	0800c869 	.word	0x0800c869
 800888c:	0800c87a 	.word	0x0800c87a
 8008890:	1e6f      	subs	r7, r5, #1
 8008892:	f1b9 0f00 	cmp.w	r9, #0
 8008896:	d130      	bne.n	80088fa <__gethex+0x326>
 8008898:	b127      	cbz	r7, 80088a4 <__gethex+0x2d0>
 800889a:	4639      	mov	r1, r7
 800889c:	4620      	mov	r0, r4
 800889e:	f000 fec4 	bl	800962a <__any_on>
 80088a2:	4681      	mov	r9, r0
 80088a4:	117a      	asrs	r2, r7, #5
 80088a6:	2301      	movs	r3, #1
 80088a8:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 80088ac:	f007 071f 	and.w	r7, r7, #31
 80088b0:	40bb      	lsls	r3, r7
 80088b2:	4213      	tst	r3, r2
 80088b4:	4629      	mov	r1, r5
 80088b6:	4620      	mov	r0, r4
 80088b8:	bf18      	it	ne
 80088ba:	f049 0902 	orrne.w	r9, r9, #2
 80088be:	f7ff fe21 	bl	8008504 <rshift>
 80088c2:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80088c6:	1b76      	subs	r6, r6, r5
 80088c8:	2502      	movs	r5, #2
 80088ca:	f1b9 0f00 	cmp.w	r9, #0
 80088ce:	d047      	beq.n	8008960 <__gethex+0x38c>
 80088d0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 80088d4:	2b02      	cmp	r3, #2
 80088d6:	d015      	beq.n	8008904 <__gethex+0x330>
 80088d8:	2b03      	cmp	r3, #3
 80088da:	d017      	beq.n	800890c <__gethex+0x338>
 80088dc:	2b01      	cmp	r3, #1
 80088de:	d109      	bne.n	80088f4 <__gethex+0x320>
 80088e0:	f019 0f02 	tst.w	r9, #2
 80088e4:	d006      	beq.n	80088f4 <__gethex+0x320>
 80088e6:	f8da 3000 	ldr.w	r3, [sl]
 80088ea:	ea49 0903 	orr.w	r9, r9, r3
 80088ee:	f019 0f01 	tst.w	r9, #1
 80088f2:	d10e      	bne.n	8008912 <__gethex+0x33e>
 80088f4:	f045 0510 	orr.w	r5, r5, #16
 80088f8:	e032      	b.n	8008960 <__gethex+0x38c>
 80088fa:	f04f 0901 	mov.w	r9, #1
 80088fe:	e7d1      	b.n	80088a4 <__gethex+0x2d0>
 8008900:	2501      	movs	r5, #1
 8008902:	e7e2      	b.n	80088ca <__gethex+0x2f6>
 8008904:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008906:	f1c3 0301 	rsb	r3, r3, #1
 800890a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800890c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800890e:	2b00      	cmp	r3, #0
 8008910:	d0f0      	beq.n	80088f4 <__gethex+0x320>
 8008912:	f8d4 b010 	ldr.w	fp, [r4, #16]
 8008916:	f104 0314 	add.w	r3, r4, #20
 800891a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800891e:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 8008922:	f04f 0c00 	mov.w	ip, #0
 8008926:	4618      	mov	r0, r3
 8008928:	f853 2b04 	ldr.w	r2, [r3], #4
 800892c:	f1b2 3fff 	cmp.w	r2, #4294967295
 8008930:	d01b      	beq.n	800896a <__gethex+0x396>
 8008932:	3201      	adds	r2, #1
 8008934:	6002      	str	r2, [r0, #0]
 8008936:	2d02      	cmp	r5, #2
 8008938:	f104 0314 	add.w	r3, r4, #20
 800893c:	d13c      	bne.n	80089b8 <__gethex+0x3e4>
 800893e:	f8d8 2000 	ldr.w	r2, [r8]
 8008942:	3a01      	subs	r2, #1
 8008944:	42b2      	cmp	r2, r6
 8008946:	d109      	bne.n	800895c <__gethex+0x388>
 8008948:	1171      	asrs	r1, r6, #5
 800894a:	2201      	movs	r2, #1
 800894c:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8008950:	f006 061f 	and.w	r6, r6, #31
 8008954:	fa02 f606 	lsl.w	r6, r2, r6
 8008958:	421e      	tst	r6, r3
 800895a:	d13a      	bne.n	80089d2 <__gethex+0x3fe>
 800895c:	f045 0520 	orr.w	r5, r5, #32
 8008960:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008962:	601c      	str	r4, [r3, #0]
 8008964:	9b02      	ldr	r3, [sp, #8]
 8008966:	601f      	str	r7, [r3, #0]
 8008968:	e6b0      	b.n	80086cc <__gethex+0xf8>
 800896a:	4299      	cmp	r1, r3
 800896c:	f843 cc04 	str.w	ip, [r3, #-4]
 8008970:	d8d9      	bhi.n	8008926 <__gethex+0x352>
 8008972:	68a3      	ldr	r3, [r4, #8]
 8008974:	459b      	cmp	fp, r3
 8008976:	db17      	blt.n	80089a8 <__gethex+0x3d4>
 8008978:	6861      	ldr	r1, [r4, #4]
 800897a:	9801      	ldr	r0, [sp, #4]
 800897c:	3101      	adds	r1, #1
 800897e:	f000 f9c3 	bl	8008d08 <_Balloc>
 8008982:	4681      	mov	r9, r0
 8008984:	b918      	cbnz	r0, 800898e <__gethex+0x3ba>
 8008986:	4b1a      	ldr	r3, [pc, #104]	@ (80089f0 <__gethex+0x41c>)
 8008988:	4602      	mov	r2, r0
 800898a:	2184      	movs	r1, #132	@ 0x84
 800898c:	e6c5      	b.n	800871a <__gethex+0x146>
 800898e:	6922      	ldr	r2, [r4, #16]
 8008990:	3202      	adds	r2, #2
 8008992:	f104 010c 	add.w	r1, r4, #12
 8008996:	0092      	lsls	r2, r2, #2
 8008998:	300c      	adds	r0, #12
 800899a:	f7fe fee2 	bl	8007762 <memcpy>
 800899e:	4621      	mov	r1, r4
 80089a0:	9801      	ldr	r0, [sp, #4]
 80089a2:	f000 f9f1 	bl	8008d88 <_Bfree>
 80089a6:	464c      	mov	r4, r9
 80089a8:	6923      	ldr	r3, [r4, #16]
 80089aa:	1c5a      	adds	r2, r3, #1
 80089ac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80089b0:	6122      	str	r2, [r4, #16]
 80089b2:	2201      	movs	r2, #1
 80089b4:	615a      	str	r2, [r3, #20]
 80089b6:	e7be      	b.n	8008936 <__gethex+0x362>
 80089b8:	6922      	ldr	r2, [r4, #16]
 80089ba:	455a      	cmp	r2, fp
 80089bc:	dd0b      	ble.n	80089d6 <__gethex+0x402>
 80089be:	2101      	movs	r1, #1
 80089c0:	4620      	mov	r0, r4
 80089c2:	f7ff fd9f 	bl	8008504 <rshift>
 80089c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80089ca:	3701      	adds	r7, #1
 80089cc:	42bb      	cmp	r3, r7
 80089ce:	f6ff aee0 	blt.w	8008792 <__gethex+0x1be>
 80089d2:	2501      	movs	r5, #1
 80089d4:	e7c2      	b.n	800895c <__gethex+0x388>
 80089d6:	f016 061f 	ands.w	r6, r6, #31
 80089da:	d0fa      	beq.n	80089d2 <__gethex+0x3fe>
 80089dc:	4453      	add	r3, sl
 80089de:	f1c6 0620 	rsb	r6, r6, #32
 80089e2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 80089e6:	f000 fa81 	bl	8008eec <__hi0bits>
 80089ea:	42b0      	cmp	r0, r6
 80089ec:	dbe7      	blt.n	80089be <__gethex+0x3ea>
 80089ee:	e7f0      	b.n	80089d2 <__gethex+0x3fe>
 80089f0:	0800c869 	.word	0x0800c869

080089f4 <L_shift>:
 80089f4:	f1c2 0208 	rsb	r2, r2, #8
 80089f8:	0092      	lsls	r2, r2, #2
 80089fa:	b570      	push	{r4, r5, r6, lr}
 80089fc:	f1c2 0620 	rsb	r6, r2, #32
 8008a00:	6843      	ldr	r3, [r0, #4]
 8008a02:	6804      	ldr	r4, [r0, #0]
 8008a04:	fa03 f506 	lsl.w	r5, r3, r6
 8008a08:	432c      	orrs	r4, r5
 8008a0a:	40d3      	lsrs	r3, r2
 8008a0c:	6004      	str	r4, [r0, #0]
 8008a0e:	f840 3f04 	str.w	r3, [r0, #4]!
 8008a12:	4288      	cmp	r0, r1
 8008a14:	d3f4      	bcc.n	8008a00 <L_shift+0xc>
 8008a16:	bd70      	pop	{r4, r5, r6, pc}

08008a18 <__match>:
 8008a18:	b530      	push	{r4, r5, lr}
 8008a1a:	6803      	ldr	r3, [r0, #0]
 8008a1c:	3301      	adds	r3, #1
 8008a1e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a22:	b914      	cbnz	r4, 8008a2a <__match+0x12>
 8008a24:	6003      	str	r3, [r0, #0]
 8008a26:	2001      	movs	r0, #1
 8008a28:	bd30      	pop	{r4, r5, pc}
 8008a2a:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a2e:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 8008a32:	2d19      	cmp	r5, #25
 8008a34:	bf98      	it	ls
 8008a36:	3220      	addls	r2, #32
 8008a38:	42a2      	cmp	r2, r4
 8008a3a:	d0f0      	beq.n	8008a1e <__match+0x6>
 8008a3c:	2000      	movs	r0, #0
 8008a3e:	e7f3      	b.n	8008a28 <__match+0x10>

08008a40 <__hexnan>:
 8008a40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a44:	680b      	ldr	r3, [r1, #0]
 8008a46:	6801      	ldr	r1, [r0, #0]
 8008a48:	115e      	asrs	r6, r3, #5
 8008a4a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8008a4e:	f013 031f 	ands.w	r3, r3, #31
 8008a52:	b087      	sub	sp, #28
 8008a54:	bf18      	it	ne
 8008a56:	3604      	addne	r6, #4
 8008a58:	2500      	movs	r5, #0
 8008a5a:	1f37      	subs	r7, r6, #4
 8008a5c:	4682      	mov	sl, r0
 8008a5e:	4690      	mov	r8, r2
 8008a60:	9301      	str	r3, [sp, #4]
 8008a62:	f846 5c04 	str.w	r5, [r6, #-4]
 8008a66:	46b9      	mov	r9, r7
 8008a68:	463c      	mov	r4, r7
 8008a6a:	9502      	str	r5, [sp, #8]
 8008a6c:	46ab      	mov	fp, r5
 8008a6e:	784a      	ldrb	r2, [r1, #1]
 8008a70:	1c4b      	adds	r3, r1, #1
 8008a72:	9303      	str	r3, [sp, #12]
 8008a74:	b342      	cbz	r2, 8008ac8 <__hexnan+0x88>
 8008a76:	4610      	mov	r0, r2
 8008a78:	9105      	str	r1, [sp, #20]
 8008a7a:	9204      	str	r2, [sp, #16]
 8008a7c:	f7ff fd94 	bl	80085a8 <__hexdig_fun>
 8008a80:	2800      	cmp	r0, #0
 8008a82:	d151      	bne.n	8008b28 <__hexnan+0xe8>
 8008a84:	9a04      	ldr	r2, [sp, #16]
 8008a86:	9905      	ldr	r1, [sp, #20]
 8008a88:	2a20      	cmp	r2, #32
 8008a8a:	d818      	bhi.n	8008abe <__hexnan+0x7e>
 8008a8c:	9b02      	ldr	r3, [sp, #8]
 8008a8e:	459b      	cmp	fp, r3
 8008a90:	dd13      	ble.n	8008aba <__hexnan+0x7a>
 8008a92:	454c      	cmp	r4, r9
 8008a94:	d206      	bcs.n	8008aa4 <__hexnan+0x64>
 8008a96:	2d07      	cmp	r5, #7
 8008a98:	dc04      	bgt.n	8008aa4 <__hexnan+0x64>
 8008a9a:	462a      	mov	r2, r5
 8008a9c:	4649      	mov	r1, r9
 8008a9e:	4620      	mov	r0, r4
 8008aa0:	f7ff ffa8 	bl	80089f4 <L_shift>
 8008aa4:	4544      	cmp	r4, r8
 8008aa6:	d952      	bls.n	8008b4e <__hexnan+0x10e>
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	f1a4 0904 	sub.w	r9, r4, #4
 8008aae:	f844 3c04 	str.w	r3, [r4, #-4]
 8008ab2:	f8cd b008 	str.w	fp, [sp, #8]
 8008ab6:	464c      	mov	r4, r9
 8008ab8:	461d      	mov	r5, r3
 8008aba:	9903      	ldr	r1, [sp, #12]
 8008abc:	e7d7      	b.n	8008a6e <__hexnan+0x2e>
 8008abe:	2a29      	cmp	r2, #41	@ 0x29
 8008ac0:	d157      	bne.n	8008b72 <__hexnan+0x132>
 8008ac2:	3102      	adds	r1, #2
 8008ac4:	f8ca 1000 	str.w	r1, [sl]
 8008ac8:	f1bb 0f00 	cmp.w	fp, #0
 8008acc:	d051      	beq.n	8008b72 <__hexnan+0x132>
 8008ace:	454c      	cmp	r4, r9
 8008ad0:	d206      	bcs.n	8008ae0 <__hexnan+0xa0>
 8008ad2:	2d07      	cmp	r5, #7
 8008ad4:	dc04      	bgt.n	8008ae0 <__hexnan+0xa0>
 8008ad6:	462a      	mov	r2, r5
 8008ad8:	4649      	mov	r1, r9
 8008ada:	4620      	mov	r0, r4
 8008adc:	f7ff ff8a 	bl	80089f4 <L_shift>
 8008ae0:	4544      	cmp	r4, r8
 8008ae2:	d936      	bls.n	8008b52 <__hexnan+0x112>
 8008ae4:	f1a8 0204 	sub.w	r2, r8, #4
 8008ae8:	4623      	mov	r3, r4
 8008aea:	f853 1b04 	ldr.w	r1, [r3], #4
 8008aee:	f842 1f04 	str.w	r1, [r2, #4]!
 8008af2:	429f      	cmp	r7, r3
 8008af4:	d2f9      	bcs.n	8008aea <__hexnan+0xaa>
 8008af6:	1b3b      	subs	r3, r7, r4
 8008af8:	f023 0303 	bic.w	r3, r3, #3
 8008afc:	3304      	adds	r3, #4
 8008afe:	3401      	adds	r4, #1
 8008b00:	3e03      	subs	r6, #3
 8008b02:	42b4      	cmp	r4, r6
 8008b04:	bf88      	it	hi
 8008b06:	2304      	movhi	r3, #4
 8008b08:	4443      	add	r3, r8
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	f843 2b04 	str.w	r2, [r3], #4
 8008b10:	429f      	cmp	r7, r3
 8008b12:	d2fb      	bcs.n	8008b0c <__hexnan+0xcc>
 8008b14:	683b      	ldr	r3, [r7, #0]
 8008b16:	b91b      	cbnz	r3, 8008b20 <__hexnan+0xe0>
 8008b18:	4547      	cmp	r7, r8
 8008b1a:	d128      	bne.n	8008b6e <__hexnan+0x12e>
 8008b1c:	2301      	movs	r3, #1
 8008b1e:	603b      	str	r3, [r7, #0]
 8008b20:	2005      	movs	r0, #5
 8008b22:	b007      	add	sp, #28
 8008b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b28:	3501      	adds	r5, #1
 8008b2a:	2d08      	cmp	r5, #8
 8008b2c:	f10b 0b01 	add.w	fp, fp, #1
 8008b30:	dd06      	ble.n	8008b40 <__hexnan+0x100>
 8008b32:	4544      	cmp	r4, r8
 8008b34:	d9c1      	bls.n	8008aba <__hexnan+0x7a>
 8008b36:	2300      	movs	r3, #0
 8008b38:	f844 3c04 	str.w	r3, [r4, #-4]
 8008b3c:	2501      	movs	r5, #1
 8008b3e:	3c04      	subs	r4, #4
 8008b40:	6822      	ldr	r2, [r4, #0]
 8008b42:	f000 000f 	and.w	r0, r0, #15
 8008b46:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8008b4a:	6020      	str	r0, [r4, #0]
 8008b4c:	e7b5      	b.n	8008aba <__hexnan+0x7a>
 8008b4e:	2508      	movs	r5, #8
 8008b50:	e7b3      	b.n	8008aba <__hexnan+0x7a>
 8008b52:	9b01      	ldr	r3, [sp, #4]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d0dd      	beq.n	8008b14 <__hexnan+0xd4>
 8008b58:	f1c3 0320 	rsb	r3, r3, #32
 8008b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8008b60:	40da      	lsrs	r2, r3
 8008b62:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8008b66:	4013      	ands	r3, r2
 8008b68:	f846 3c04 	str.w	r3, [r6, #-4]
 8008b6c:	e7d2      	b.n	8008b14 <__hexnan+0xd4>
 8008b6e:	3f04      	subs	r7, #4
 8008b70:	e7d0      	b.n	8008b14 <__hexnan+0xd4>
 8008b72:	2004      	movs	r0, #4
 8008b74:	e7d5      	b.n	8008b22 <__hexnan+0xe2>
	...

08008b78 <malloc>:
 8008b78:	4b02      	ldr	r3, [pc, #8]	@ (8008b84 <malloc+0xc>)
 8008b7a:	4601      	mov	r1, r0
 8008b7c:	6818      	ldr	r0, [r3, #0]
 8008b7e:	f000 b825 	b.w	8008bcc <_malloc_r>
 8008b82:	bf00      	nop
 8008b84:	200001c4 	.word	0x200001c4

08008b88 <sbrk_aligned>:
 8008b88:	b570      	push	{r4, r5, r6, lr}
 8008b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8008bc8 <sbrk_aligned+0x40>)
 8008b8c:	460c      	mov	r4, r1
 8008b8e:	6831      	ldr	r1, [r6, #0]
 8008b90:	4605      	mov	r5, r0
 8008b92:	b911      	cbnz	r1, 8008b9a <sbrk_aligned+0x12>
 8008b94:	f001 fbb0 	bl	800a2f8 <_sbrk_r>
 8008b98:	6030      	str	r0, [r6, #0]
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	f001 fbab 	bl	800a2f8 <_sbrk_r>
 8008ba2:	1c43      	adds	r3, r0, #1
 8008ba4:	d103      	bne.n	8008bae <sbrk_aligned+0x26>
 8008ba6:	f04f 34ff 	mov.w	r4, #4294967295
 8008baa:	4620      	mov	r0, r4
 8008bac:	bd70      	pop	{r4, r5, r6, pc}
 8008bae:	1cc4      	adds	r4, r0, #3
 8008bb0:	f024 0403 	bic.w	r4, r4, #3
 8008bb4:	42a0      	cmp	r0, r4
 8008bb6:	d0f8      	beq.n	8008baa <sbrk_aligned+0x22>
 8008bb8:	1a21      	subs	r1, r4, r0
 8008bba:	4628      	mov	r0, r5
 8008bbc:	f001 fb9c 	bl	800a2f8 <_sbrk_r>
 8008bc0:	3001      	adds	r0, #1
 8008bc2:	d1f2      	bne.n	8008baa <sbrk_aligned+0x22>
 8008bc4:	e7ef      	b.n	8008ba6 <sbrk_aligned+0x1e>
 8008bc6:	bf00      	nop
 8008bc8:	20000954 	.word	0x20000954

08008bcc <_malloc_r>:
 8008bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008bd0:	1ccd      	adds	r5, r1, #3
 8008bd2:	f025 0503 	bic.w	r5, r5, #3
 8008bd6:	3508      	adds	r5, #8
 8008bd8:	2d0c      	cmp	r5, #12
 8008bda:	bf38      	it	cc
 8008bdc:	250c      	movcc	r5, #12
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	4606      	mov	r6, r0
 8008be2:	db01      	blt.n	8008be8 <_malloc_r+0x1c>
 8008be4:	42a9      	cmp	r1, r5
 8008be6:	d904      	bls.n	8008bf2 <_malloc_r+0x26>
 8008be8:	230c      	movs	r3, #12
 8008bea:	6033      	str	r3, [r6, #0]
 8008bec:	2000      	movs	r0, #0
 8008bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008cc8 <_malloc_r+0xfc>
 8008bf6:	f000 f87b 	bl	8008cf0 <__malloc_lock>
 8008bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8008bfe:	461c      	mov	r4, r3
 8008c00:	bb44      	cbnz	r4, 8008c54 <_malloc_r+0x88>
 8008c02:	4629      	mov	r1, r5
 8008c04:	4630      	mov	r0, r6
 8008c06:	f7ff ffbf 	bl	8008b88 <sbrk_aligned>
 8008c0a:	1c43      	adds	r3, r0, #1
 8008c0c:	4604      	mov	r4, r0
 8008c0e:	d158      	bne.n	8008cc2 <_malloc_r+0xf6>
 8008c10:	f8d8 4000 	ldr.w	r4, [r8]
 8008c14:	4627      	mov	r7, r4
 8008c16:	2f00      	cmp	r7, #0
 8008c18:	d143      	bne.n	8008ca2 <_malloc_r+0xd6>
 8008c1a:	2c00      	cmp	r4, #0
 8008c1c:	d04b      	beq.n	8008cb6 <_malloc_r+0xea>
 8008c1e:	6823      	ldr	r3, [r4, #0]
 8008c20:	4639      	mov	r1, r7
 8008c22:	4630      	mov	r0, r6
 8008c24:	eb04 0903 	add.w	r9, r4, r3
 8008c28:	f001 fb66 	bl	800a2f8 <_sbrk_r>
 8008c2c:	4581      	cmp	r9, r0
 8008c2e:	d142      	bne.n	8008cb6 <_malloc_r+0xea>
 8008c30:	6821      	ldr	r1, [r4, #0]
 8008c32:	1a6d      	subs	r5, r5, r1
 8008c34:	4629      	mov	r1, r5
 8008c36:	4630      	mov	r0, r6
 8008c38:	f7ff ffa6 	bl	8008b88 <sbrk_aligned>
 8008c3c:	3001      	adds	r0, #1
 8008c3e:	d03a      	beq.n	8008cb6 <_malloc_r+0xea>
 8008c40:	6823      	ldr	r3, [r4, #0]
 8008c42:	442b      	add	r3, r5
 8008c44:	6023      	str	r3, [r4, #0]
 8008c46:	f8d8 3000 	ldr.w	r3, [r8]
 8008c4a:	685a      	ldr	r2, [r3, #4]
 8008c4c:	bb62      	cbnz	r2, 8008ca8 <_malloc_r+0xdc>
 8008c4e:	f8c8 7000 	str.w	r7, [r8]
 8008c52:	e00f      	b.n	8008c74 <_malloc_r+0xa8>
 8008c54:	6822      	ldr	r2, [r4, #0]
 8008c56:	1b52      	subs	r2, r2, r5
 8008c58:	d420      	bmi.n	8008c9c <_malloc_r+0xd0>
 8008c5a:	2a0b      	cmp	r2, #11
 8008c5c:	d917      	bls.n	8008c8e <_malloc_r+0xc2>
 8008c5e:	1961      	adds	r1, r4, r5
 8008c60:	42a3      	cmp	r3, r4
 8008c62:	6025      	str	r5, [r4, #0]
 8008c64:	bf18      	it	ne
 8008c66:	6059      	strne	r1, [r3, #4]
 8008c68:	6863      	ldr	r3, [r4, #4]
 8008c6a:	bf08      	it	eq
 8008c6c:	f8c8 1000 	streq.w	r1, [r8]
 8008c70:	5162      	str	r2, [r4, r5]
 8008c72:	604b      	str	r3, [r1, #4]
 8008c74:	4630      	mov	r0, r6
 8008c76:	f000 f841 	bl	8008cfc <__malloc_unlock>
 8008c7a:	f104 000b 	add.w	r0, r4, #11
 8008c7e:	1d23      	adds	r3, r4, #4
 8008c80:	f020 0007 	bic.w	r0, r0, #7
 8008c84:	1ac2      	subs	r2, r0, r3
 8008c86:	bf1c      	itt	ne
 8008c88:	1a1b      	subne	r3, r3, r0
 8008c8a:	50a3      	strne	r3, [r4, r2]
 8008c8c:	e7af      	b.n	8008bee <_malloc_r+0x22>
 8008c8e:	6862      	ldr	r2, [r4, #4]
 8008c90:	42a3      	cmp	r3, r4
 8008c92:	bf0c      	ite	eq
 8008c94:	f8c8 2000 	streq.w	r2, [r8]
 8008c98:	605a      	strne	r2, [r3, #4]
 8008c9a:	e7eb      	b.n	8008c74 <_malloc_r+0xa8>
 8008c9c:	4623      	mov	r3, r4
 8008c9e:	6864      	ldr	r4, [r4, #4]
 8008ca0:	e7ae      	b.n	8008c00 <_malloc_r+0x34>
 8008ca2:	463c      	mov	r4, r7
 8008ca4:	687f      	ldr	r7, [r7, #4]
 8008ca6:	e7b6      	b.n	8008c16 <_malloc_r+0x4a>
 8008ca8:	461a      	mov	r2, r3
 8008caa:	685b      	ldr	r3, [r3, #4]
 8008cac:	42a3      	cmp	r3, r4
 8008cae:	d1fb      	bne.n	8008ca8 <_malloc_r+0xdc>
 8008cb0:	2300      	movs	r3, #0
 8008cb2:	6053      	str	r3, [r2, #4]
 8008cb4:	e7de      	b.n	8008c74 <_malloc_r+0xa8>
 8008cb6:	230c      	movs	r3, #12
 8008cb8:	6033      	str	r3, [r6, #0]
 8008cba:	4630      	mov	r0, r6
 8008cbc:	f000 f81e 	bl	8008cfc <__malloc_unlock>
 8008cc0:	e794      	b.n	8008bec <_malloc_r+0x20>
 8008cc2:	6005      	str	r5, [r0, #0]
 8008cc4:	e7d6      	b.n	8008c74 <_malloc_r+0xa8>
 8008cc6:	bf00      	nop
 8008cc8:	20000958 	.word	0x20000958

08008ccc <__ascii_mbtowc>:
 8008ccc:	b082      	sub	sp, #8
 8008cce:	b901      	cbnz	r1, 8008cd2 <__ascii_mbtowc+0x6>
 8008cd0:	a901      	add	r1, sp, #4
 8008cd2:	b142      	cbz	r2, 8008ce6 <__ascii_mbtowc+0x1a>
 8008cd4:	b14b      	cbz	r3, 8008cea <__ascii_mbtowc+0x1e>
 8008cd6:	7813      	ldrb	r3, [r2, #0]
 8008cd8:	600b      	str	r3, [r1, #0]
 8008cda:	7812      	ldrb	r2, [r2, #0]
 8008cdc:	1e10      	subs	r0, r2, #0
 8008cde:	bf18      	it	ne
 8008ce0:	2001      	movne	r0, #1
 8008ce2:	b002      	add	sp, #8
 8008ce4:	4770      	bx	lr
 8008ce6:	4610      	mov	r0, r2
 8008ce8:	e7fb      	b.n	8008ce2 <__ascii_mbtowc+0x16>
 8008cea:	f06f 0001 	mvn.w	r0, #1
 8008cee:	e7f8      	b.n	8008ce2 <__ascii_mbtowc+0x16>

08008cf0 <__malloc_lock>:
 8008cf0:	4801      	ldr	r0, [pc, #4]	@ (8008cf8 <__malloc_lock+0x8>)
 8008cf2:	f7fe bd34 	b.w	800775e <__retarget_lock_acquire_recursive>
 8008cf6:	bf00      	nop
 8008cf8:	20000950 	.word	0x20000950

08008cfc <__malloc_unlock>:
 8008cfc:	4801      	ldr	r0, [pc, #4]	@ (8008d04 <__malloc_unlock+0x8>)
 8008cfe:	f7fe bd2f 	b.w	8007760 <__retarget_lock_release_recursive>
 8008d02:	bf00      	nop
 8008d04:	20000950 	.word	0x20000950

08008d08 <_Balloc>:
 8008d08:	b570      	push	{r4, r5, r6, lr}
 8008d0a:	69c6      	ldr	r6, [r0, #28]
 8008d0c:	4604      	mov	r4, r0
 8008d0e:	460d      	mov	r5, r1
 8008d10:	b976      	cbnz	r6, 8008d30 <_Balloc+0x28>
 8008d12:	2010      	movs	r0, #16
 8008d14:	f7ff ff30 	bl	8008b78 <malloc>
 8008d18:	4602      	mov	r2, r0
 8008d1a:	61e0      	str	r0, [r4, #28]
 8008d1c:	b920      	cbnz	r0, 8008d28 <_Balloc+0x20>
 8008d1e:	4b18      	ldr	r3, [pc, #96]	@ (8008d80 <_Balloc+0x78>)
 8008d20:	4818      	ldr	r0, [pc, #96]	@ (8008d84 <_Balloc+0x7c>)
 8008d22:	216b      	movs	r1, #107	@ 0x6b
 8008d24:	f7fe fd3a 	bl	800779c <__assert_func>
 8008d28:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008d2c:	6006      	str	r6, [r0, #0]
 8008d2e:	60c6      	str	r6, [r0, #12]
 8008d30:	69e6      	ldr	r6, [r4, #28]
 8008d32:	68f3      	ldr	r3, [r6, #12]
 8008d34:	b183      	cbz	r3, 8008d58 <_Balloc+0x50>
 8008d36:	69e3      	ldr	r3, [r4, #28]
 8008d38:	68db      	ldr	r3, [r3, #12]
 8008d3a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008d3e:	b9b8      	cbnz	r0, 8008d70 <_Balloc+0x68>
 8008d40:	2101      	movs	r1, #1
 8008d42:	fa01 f605 	lsl.w	r6, r1, r5
 8008d46:	1d72      	adds	r2, r6, #5
 8008d48:	0092      	lsls	r2, r2, #2
 8008d4a:	4620      	mov	r0, r4
 8008d4c:	f001 faeb 	bl	800a326 <_calloc_r>
 8008d50:	b160      	cbz	r0, 8008d6c <_Balloc+0x64>
 8008d52:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8008d56:	e00e      	b.n	8008d76 <_Balloc+0x6e>
 8008d58:	2221      	movs	r2, #33	@ 0x21
 8008d5a:	2104      	movs	r1, #4
 8008d5c:	4620      	mov	r0, r4
 8008d5e:	f001 fae2 	bl	800a326 <_calloc_r>
 8008d62:	69e3      	ldr	r3, [r4, #28]
 8008d64:	60f0      	str	r0, [r6, #12]
 8008d66:	68db      	ldr	r3, [r3, #12]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d1e4      	bne.n	8008d36 <_Balloc+0x2e>
 8008d6c:	2000      	movs	r0, #0
 8008d6e:	bd70      	pop	{r4, r5, r6, pc}
 8008d70:	6802      	ldr	r2, [r0, #0]
 8008d72:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8008d76:	2300      	movs	r3, #0
 8008d78:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8008d7c:	e7f7      	b.n	8008d6e <_Balloc+0x66>
 8008d7e:	bf00      	nop
 8008d80:	0800c74f 	.word	0x0800c74f
 8008d84:	0800c8da 	.word	0x0800c8da

08008d88 <_Bfree>:
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	69c6      	ldr	r6, [r0, #28]
 8008d8c:	4605      	mov	r5, r0
 8008d8e:	460c      	mov	r4, r1
 8008d90:	b976      	cbnz	r6, 8008db0 <_Bfree+0x28>
 8008d92:	2010      	movs	r0, #16
 8008d94:	f7ff fef0 	bl	8008b78 <malloc>
 8008d98:	4602      	mov	r2, r0
 8008d9a:	61e8      	str	r0, [r5, #28]
 8008d9c:	b920      	cbnz	r0, 8008da8 <_Bfree+0x20>
 8008d9e:	4b09      	ldr	r3, [pc, #36]	@ (8008dc4 <_Bfree+0x3c>)
 8008da0:	4809      	ldr	r0, [pc, #36]	@ (8008dc8 <_Bfree+0x40>)
 8008da2:	218f      	movs	r1, #143	@ 0x8f
 8008da4:	f7fe fcfa 	bl	800779c <__assert_func>
 8008da8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008dac:	6006      	str	r6, [r0, #0]
 8008dae:	60c6      	str	r6, [r0, #12]
 8008db0:	b13c      	cbz	r4, 8008dc2 <_Bfree+0x3a>
 8008db2:	69eb      	ldr	r3, [r5, #28]
 8008db4:	6862      	ldr	r2, [r4, #4]
 8008db6:	68db      	ldr	r3, [r3, #12]
 8008db8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8008dbc:	6021      	str	r1, [r4, #0]
 8008dbe:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	0800c74f 	.word	0x0800c74f
 8008dc8:	0800c8da 	.word	0x0800c8da

08008dcc <__multadd>:
 8008dcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008dd0:	690d      	ldr	r5, [r1, #16]
 8008dd2:	4607      	mov	r7, r0
 8008dd4:	460c      	mov	r4, r1
 8008dd6:	461e      	mov	r6, r3
 8008dd8:	f101 0c14 	add.w	ip, r1, #20
 8008ddc:	2000      	movs	r0, #0
 8008dde:	f8dc 3000 	ldr.w	r3, [ip]
 8008de2:	b299      	uxth	r1, r3
 8008de4:	fb02 6101 	mla	r1, r2, r1, r6
 8008de8:	0c1e      	lsrs	r6, r3, #16
 8008dea:	0c0b      	lsrs	r3, r1, #16
 8008dec:	fb02 3306 	mla	r3, r2, r6, r3
 8008df0:	b289      	uxth	r1, r1
 8008df2:	3001      	adds	r0, #1
 8008df4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008df8:	4285      	cmp	r5, r0
 8008dfa:	f84c 1b04 	str.w	r1, [ip], #4
 8008dfe:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8008e02:	dcec      	bgt.n	8008dde <__multadd+0x12>
 8008e04:	b30e      	cbz	r6, 8008e4a <__multadd+0x7e>
 8008e06:	68a3      	ldr	r3, [r4, #8]
 8008e08:	42ab      	cmp	r3, r5
 8008e0a:	dc19      	bgt.n	8008e40 <__multadd+0x74>
 8008e0c:	6861      	ldr	r1, [r4, #4]
 8008e0e:	4638      	mov	r0, r7
 8008e10:	3101      	adds	r1, #1
 8008e12:	f7ff ff79 	bl	8008d08 <_Balloc>
 8008e16:	4680      	mov	r8, r0
 8008e18:	b928      	cbnz	r0, 8008e26 <__multadd+0x5a>
 8008e1a:	4602      	mov	r2, r0
 8008e1c:	4b0c      	ldr	r3, [pc, #48]	@ (8008e50 <__multadd+0x84>)
 8008e1e:	480d      	ldr	r0, [pc, #52]	@ (8008e54 <__multadd+0x88>)
 8008e20:	21ba      	movs	r1, #186	@ 0xba
 8008e22:	f7fe fcbb 	bl	800779c <__assert_func>
 8008e26:	6922      	ldr	r2, [r4, #16]
 8008e28:	3202      	adds	r2, #2
 8008e2a:	f104 010c 	add.w	r1, r4, #12
 8008e2e:	0092      	lsls	r2, r2, #2
 8008e30:	300c      	adds	r0, #12
 8008e32:	f7fe fc96 	bl	8007762 <memcpy>
 8008e36:	4621      	mov	r1, r4
 8008e38:	4638      	mov	r0, r7
 8008e3a:	f7ff ffa5 	bl	8008d88 <_Bfree>
 8008e3e:	4644      	mov	r4, r8
 8008e40:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8008e44:	3501      	adds	r5, #1
 8008e46:	615e      	str	r6, [r3, #20]
 8008e48:	6125      	str	r5, [r4, #16]
 8008e4a:	4620      	mov	r0, r4
 8008e4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008e50:	0800c869 	.word	0x0800c869
 8008e54:	0800c8da 	.word	0x0800c8da

08008e58 <__s2b>:
 8008e58:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008e5c:	460c      	mov	r4, r1
 8008e5e:	4615      	mov	r5, r2
 8008e60:	461f      	mov	r7, r3
 8008e62:	2209      	movs	r2, #9
 8008e64:	3308      	adds	r3, #8
 8008e66:	4606      	mov	r6, r0
 8008e68:	fb93 f3f2 	sdiv	r3, r3, r2
 8008e6c:	2100      	movs	r1, #0
 8008e6e:	2201      	movs	r2, #1
 8008e70:	429a      	cmp	r2, r3
 8008e72:	db09      	blt.n	8008e88 <__s2b+0x30>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ff47 	bl	8008d08 <_Balloc>
 8008e7a:	b940      	cbnz	r0, 8008e8e <__s2b+0x36>
 8008e7c:	4602      	mov	r2, r0
 8008e7e:	4b19      	ldr	r3, [pc, #100]	@ (8008ee4 <__s2b+0x8c>)
 8008e80:	4819      	ldr	r0, [pc, #100]	@ (8008ee8 <__s2b+0x90>)
 8008e82:	21d3      	movs	r1, #211	@ 0xd3
 8008e84:	f7fe fc8a 	bl	800779c <__assert_func>
 8008e88:	0052      	lsls	r2, r2, #1
 8008e8a:	3101      	adds	r1, #1
 8008e8c:	e7f0      	b.n	8008e70 <__s2b+0x18>
 8008e8e:	9b08      	ldr	r3, [sp, #32]
 8008e90:	6143      	str	r3, [r0, #20]
 8008e92:	2d09      	cmp	r5, #9
 8008e94:	f04f 0301 	mov.w	r3, #1
 8008e98:	6103      	str	r3, [r0, #16]
 8008e9a:	dd16      	ble.n	8008eca <__s2b+0x72>
 8008e9c:	f104 0909 	add.w	r9, r4, #9
 8008ea0:	46c8      	mov	r8, r9
 8008ea2:	442c      	add	r4, r5
 8008ea4:	f818 3b01 	ldrb.w	r3, [r8], #1
 8008ea8:	4601      	mov	r1, r0
 8008eaa:	3b30      	subs	r3, #48	@ 0x30
 8008eac:	220a      	movs	r2, #10
 8008eae:	4630      	mov	r0, r6
 8008eb0:	f7ff ff8c 	bl	8008dcc <__multadd>
 8008eb4:	45a0      	cmp	r8, r4
 8008eb6:	d1f5      	bne.n	8008ea4 <__s2b+0x4c>
 8008eb8:	f1a5 0408 	sub.w	r4, r5, #8
 8008ebc:	444c      	add	r4, r9
 8008ebe:	1b2d      	subs	r5, r5, r4
 8008ec0:	1963      	adds	r3, r4, r5
 8008ec2:	42bb      	cmp	r3, r7
 8008ec4:	db04      	blt.n	8008ed0 <__s2b+0x78>
 8008ec6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008eca:	340a      	adds	r4, #10
 8008ecc:	2509      	movs	r5, #9
 8008ece:	e7f6      	b.n	8008ebe <__s2b+0x66>
 8008ed0:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008ed4:	4601      	mov	r1, r0
 8008ed6:	3b30      	subs	r3, #48	@ 0x30
 8008ed8:	220a      	movs	r2, #10
 8008eda:	4630      	mov	r0, r6
 8008edc:	f7ff ff76 	bl	8008dcc <__multadd>
 8008ee0:	e7ee      	b.n	8008ec0 <__s2b+0x68>
 8008ee2:	bf00      	nop
 8008ee4:	0800c869 	.word	0x0800c869
 8008ee8:	0800c8da 	.word	0x0800c8da

08008eec <__hi0bits>:
 8008eec:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008ef0:	4603      	mov	r3, r0
 8008ef2:	bf36      	itet	cc
 8008ef4:	0403      	lslcc	r3, r0, #16
 8008ef6:	2000      	movcs	r0, #0
 8008ef8:	2010      	movcc	r0, #16
 8008efa:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008efe:	bf3c      	itt	cc
 8008f00:	021b      	lslcc	r3, r3, #8
 8008f02:	3008      	addcc	r0, #8
 8008f04:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008f08:	bf3c      	itt	cc
 8008f0a:	011b      	lslcc	r3, r3, #4
 8008f0c:	3004      	addcc	r0, #4
 8008f0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f12:	bf3c      	itt	cc
 8008f14:	009b      	lslcc	r3, r3, #2
 8008f16:	3002      	addcc	r0, #2
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	db05      	blt.n	8008f28 <__hi0bits+0x3c>
 8008f1c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008f20:	f100 0001 	add.w	r0, r0, #1
 8008f24:	bf08      	it	eq
 8008f26:	2020      	moveq	r0, #32
 8008f28:	4770      	bx	lr

08008f2a <__lo0bits>:
 8008f2a:	6803      	ldr	r3, [r0, #0]
 8008f2c:	4602      	mov	r2, r0
 8008f2e:	f013 0007 	ands.w	r0, r3, #7
 8008f32:	d00b      	beq.n	8008f4c <__lo0bits+0x22>
 8008f34:	07d9      	lsls	r1, r3, #31
 8008f36:	d421      	bmi.n	8008f7c <__lo0bits+0x52>
 8008f38:	0798      	lsls	r0, r3, #30
 8008f3a:	bf49      	itett	mi
 8008f3c:	085b      	lsrmi	r3, r3, #1
 8008f3e:	089b      	lsrpl	r3, r3, #2
 8008f40:	2001      	movmi	r0, #1
 8008f42:	6013      	strmi	r3, [r2, #0]
 8008f44:	bf5c      	itt	pl
 8008f46:	6013      	strpl	r3, [r2, #0]
 8008f48:	2002      	movpl	r0, #2
 8008f4a:	4770      	bx	lr
 8008f4c:	b299      	uxth	r1, r3
 8008f4e:	b909      	cbnz	r1, 8008f54 <__lo0bits+0x2a>
 8008f50:	0c1b      	lsrs	r3, r3, #16
 8008f52:	2010      	movs	r0, #16
 8008f54:	b2d9      	uxtb	r1, r3
 8008f56:	b909      	cbnz	r1, 8008f5c <__lo0bits+0x32>
 8008f58:	3008      	adds	r0, #8
 8008f5a:	0a1b      	lsrs	r3, r3, #8
 8008f5c:	0719      	lsls	r1, r3, #28
 8008f5e:	bf04      	itt	eq
 8008f60:	091b      	lsreq	r3, r3, #4
 8008f62:	3004      	addeq	r0, #4
 8008f64:	0799      	lsls	r1, r3, #30
 8008f66:	bf04      	itt	eq
 8008f68:	089b      	lsreq	r3, r3, #2
 8008f6a:	3002      	addeq	r0, #2
 8008f6c:	07d9      	lsls	r1, r3, #31
 8008f6e:	d403      	bmi.n	8008f78 <__lo0bits+0x4e>
 8008f70:	085b      	lsrs	r3, r3, #1
 8008f72:	f100 0001 	add.w	r0, r0, #1
 8008f76:	d003      	beq.n	8008f80 <__lo0bits+0x56>
 8008f78:	6013      	str	r3, [r2, #0]
 8008f7a:	4770      	bx	lr
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	4770      	bx	lr
 8008f80:	2020      	movs	r0, #32
 8008f82:	4770      	bx	lr

08008f84 <__i2b>:
 8008f84:	b510      	push	{r4, lr}
 8008f86:	460c      	mov	r4, r1
 8008f88:	2101      	movs	r1, #1
 8008f8a:	f7ff febd 	bl	8008d08 <_Balloc>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	b928      	cbnz	r0, 8008f9e <__i2b+0x1a>
 8008f92:	4b05      	ldr	r3, [pc, #20]	@ (8008fa8 <__i2b+0x24>)
 8008f94:	4805      	ldr	r0, [pc, #20]	@ (8008fac <__i2b+0x28>)
 8008f96:	f240 1145 	movw	r1, #325	@ 0x145
 8008f9a:	f7fe fbff 	bl	800779c <__assert_func>
 8008f9e:	2301      	movs	r3, #1
 8008fa0:	6144      	str	r4, [r0, #20]
 8008fa2:	6103      	str	r3, [r0, #16]
 8008fa4:	bd10      	pop	{r4, pc}
 8008fa6:	bf00      	nop
 8008fa8:	0800c869 	.word	0x0800c869
 8008fac:	0800c8da 	.word	0x0800c8da

08008fb0 <__multiply>:
 8008fb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fb4:	4614      	mov	r4, r2
 8008fb6:	690a      	ldr	r2, [r1, #16]
 8008fb8:	6923      	ldr	r3, [r4, #16]
 8008fba:	429a      	cmp	r2, r3
 8008fbc:	bfa8      	it	ge
 8008fbe:	4623      	movge	r3, r4
 8008fc0:	460f      	mov	r7, r1
 8008fc2:	bfa4      	itt	ge
 8008fc4:	460c      	movge	r4, r1
 8008fc6:	461f      	movge	r7, r3
 8008fc8:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8008fcc:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8008fd0:	68a3      	ldr	r3, [r4, #8]
 8008fd2:	6861      	ldr	r1, [r4, #4]
 8008fd4:	eb0a 0609 	add.w	r6, sl, r9
 8008fd8:	42b3      	cmp	r3, r6
 8008fda:	b085      	sub	sp, #20
 8008fdc:	bfb8      	it	lt
 8008fde:	3101      	addlt	r1, #1
 8008fe0:	f7ff fe92 	bl	8008d08 <_Balloc>
 8008fe4:	b930      	cbnz	r0, 8008ff4 <__multiply+0x44>
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	4b44      	ldr	r3, [pc, #272]	@ (80090fc <__multiply+0x14c>)
 8008fea:	4845      	ldr	r0, [pc, #276]	@ (8009100 <__multiply+0x150>)
 8008fec:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008ff0:	f7fe fbd4 	bl	800779c <__assert_func>
 8008ff4:	f100 0514 	add.w	r5, r0, #20
 8008ff8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8008ffc:	462b      	mov	r3, r5
 8008ffe:	2200      	movs	r2, #0
 8009000:	4543      	cmp	r3, r8
 8009002:	d321      	bcc.n	8009048 <__multiply+0x98>
 8009004:	f107 0114 	add.w	r1, r7, #20
 8009008:	f104 0214 	add.w	r2, r4, #20
 800900c:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009010:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009014:	9302      	str	r3, [sp, #8]
 8009016:	1b13      	subs	r3, r2, r4
 8009018:	3b15      	subs	r3, #21
 800901a:	f023 0303 	bic.w	r3, r3, #3
 800901e:	3304      	adds	r3, #4
 8009020:	f104 0715 	add.w	r7, r4, #21
 8009024:	42ba      	cmp	r2, r7
 8009026:	bf38      	it	cc
 8009028:	2304      	movcc	r3, #4
 800902a:	9301      	str	r3, [sp, #4]
 800902c:	9b02      	ldr	r3, [sp, #8]
 800902e:	9103      	str	r1, [sp, #12]
 8009030:	428b      	cmp	r3, r1
 8009032:	d80c      	bhi.n	800904e <__multiply+0x9e>
 8009034:	2e00      	cmp	r6, #0
 8009036:	dd03      	ble.n	8009040 <__multiply+0x90>
 8009038:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800903c:	2b00      	cmp	r3, #0
 800903e:	d05b      	beq.n	80090f8 <__multiply+0x148>
 8009040:	6106      	str	r6, [r0, #16]
 8009042:	b005      	add	sp, #20
 8009044:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009048:	f843 2b04 	str.w	r2, [r3], #4
 800904c:	e7d8      	b.n	8009000 <__multiply+0x50>
 800904e:	f8b1 a000 	ldrh.w	sl, [r1]
 8009052:	f1ba 0f00 	cmp.w	sl, #0
 8009056:	d024      	beq.n	80090a2 <__multiply+0xf2>
 8009058:	f104 0e14 	add.w	lr, r4, #20
 800905c:	46a9      	mov	r9, r5
 800905e:	f04f 0c00 	mov.w	ip, #0
 8009062:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009066:	f8d9 3000 	ldr.w	r3, [r9]
 800906a:	fa1f fb87 	uxth.w	fp, r7
 800906e:	b29b      	uxth	r3, r3
 8009070:	fb0a 330b 	mla	r3, sl, fp, r3
 8009074:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 8009078:	f8d9 7000 	ldr.w	r7, [r9]
 800907c:	4463      	add	r3, ip
 800907e:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 8009082:	fb0a c70b 	mla	r7, sl, fp, ip
 8009086:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800908a:	b29b      	uxth	r3, r3
 800908c:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 8009090:	4572      	cmp	r2, lr
 8009092:	f849 3b04 	str.w	r3, [r9], #4
 8009096:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800909a:	d8e2      	bhi.n	8009062 <__multiply+0xb2>
 800909c:	9b01      	ldr	r3, [sp, #4]
 800909e:	f845 c003 	str.w	ip, [r5, r3]
 80090a2:	9b03      	ldr	r3, [sp, #12]
 80090a4:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80090a8:	3104      	adds	r1, #4
 80090aa:	f1b9 0f00 	cmp.w	r9, #0
 80090ae:	d021      	beq.n	80090f4 <__multiply+0x144>
 80090b0:	682b      	ldr	r3, [r5, #0]
 80090b2:	f104 0c14 	add.w	ip, r4, #20
 80090b6:	46ae      	mov	lr, r5
 80090b8:	f04f 0a00 	mov.w	sl, #0
 80090bc:	f8bc b000 	ldrh.w	fp, [ip]
 80090c0:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80090c4:	fb09 770b 	mla	r7, r9, fp, r7
 80090c8:	4457      	add	r7, sl
 80090ca:	b29b      	uxth	r3, r3
 80090cc:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80090d0:	f84e 3b04 	str.w	r3, [lr], #4
 80090d4:	f85c 3b04 	ldr.w	r3, [ip], #4
 80090d8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090dc:	f8be 3000 	ldrh.w	r3, [lr]
 80090e0:	fb09 330a 	mla	r3, r9, sl, r3
 80090e4:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 80090e8:	4562      	cmp	r2, ip
 80090ea:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80090ee:	d8e5      	bhi.n	80090bc <__multiply+0x10c>
 80090f0:	9f01      	ldr	r7, [sp, #4]
 80090f2:	51eb      	str	r3, [r5, r7]
 80090f4:	3504      	adds	r5, #4
 80090f6:	e799      	b.n	800902c <__multiply+0x7c>
 80090f8:	3e01      	subs	r6, #1
 80090fa:	e79b      	b.n	8009034 <__multiply+0x84>
 80090fc:	0800c869 	.word	0x0800c869
 8009100:	0800c8da 	.word	0x0800c8da

08009104 <__pow5mult>:
 8009104:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009108:	4615      	mov	r5, r2
 800910a:	f012 0203 	ands.w	r2, r2, #3
 800910e:	4607      	mov	r7, r0
 8009110:	460e      	mov	r6, r1
 8009112:	d007      	beq.n	8009124 <__pow5mult+0x20>
 8009114:	4c25      	ldr	r4, [pc, #148]	@ (80091ac <__pow5mult+0xa8>)
 8009116:	3a01      	subs	r2, #1
 8009118:	2300      	movs	r3, #0
 800911a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800911e:	f7ff fe55 	bl	8008dcc <__multadd>
 8009122:	4606      	mov	r6, r0
 8009124:	10ad      	asrs	r5, r5, #2
 8009126:	d03d      	beq.n	80091a4 <__pow5mult+0xa0>
 8009128:	69fc      	ldr	r4, [r7, #28]
 800912a:	b97c      	cbnz	r4, 800914c <__pow5mult+0x48>
 800912c:	2010      	movs	r0, #16
 800912e:	f7ff fd23 	bl	8008b78 <malloc>
 8009132:	4602      	mov	r2, r0
 8009134:	61f8      	str	r0, [r7, #28]
 8009136:	b928      	cbnz	r0, 8009144 <__pow5mult+0x40>
 8009138:	4b1d      	ldr	r3, [pc, #116]	@ (80091b0 <__pow5mult+0xac>)
 800913a:	481e      	ldr	r0, [pc, #120]	@ (80091b4 <__pow5mult+0xb0>)
 800913c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009140:	f7fe fb2c 	bl	800779c <__assert_func>
 8009144:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009148:	6004      	str	r4, [r0, #0]
 800914a:	60c4      	str	r4, [r0, #12]
 800914c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009150:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009154:	b94c      	cbnz	r4, 800916a <__pow5mult+0x66>
 8009156:	f240 2171 	movw	r1, #625	@ 0x271
 800915a:	4638      	mov	r0, r7
 800915c:	f7ff ff12 	bl	8008f84 <__i2b>
 8009160:	2300      	movs	r3, #0
 8009162:	f8c8 0008 	str.w	r0, [r8, #8]
 8009166:	4604      	mov	r4, r0
 8009168:	6003      	str	r3, [r0, #0]
 800916a:	f04f 0900 	mov.w	r9, #0
 800916e:	07eb      	lsls	r3, r5, #31
 8009170:	d50a      	bpl.n	8009188 <__pow5mult+0x84>
 8009172:	4631      	mov	r1, r6
 8009174:	4622      	mov	r2, r4
 8009176:	4638      	mov	r0, r7
 8009178:	f7ff ff1a 	bl	8008fb0 <__multiply>
 800917c:	4631      	mov	r1, r6
 800917e:	4680      	mov	r8, r0
 8009180:	4638      	mov	r0, r7
 8009182:	f7ff fe01 	bl	8008d88 <_Bfree>
 8009186:	4646      	mov	r6, r8
 8009188:	106d      	asrs	r5, r5, #1
 800918a:	d00b      	beq.n	80091a4 <__pow5mult+0xa0>
 800918c:	6820      	ldr	r0, [r4, #0]
 800918e:	b938      	cbnz	r0, 80091a0 <__pow5mult+0x9c>
 8009190:	4622      	mov	r2, r4
 8009192:	4621      	mov	r1, r4
 8009194:	4638      	mov	r0, r7
 8009196:	f7ff ff0b 	bl	8008fb0 <__multiply>
 800919a:	6020      	str	r0, [r4, #0]
 800919c:	f8c0 9000 	str.w	r9, [r0]
 80091a0:	4604      	mov	r4, r0
 80091a2:	e7e4      	b.n	800916e <__pow5mult+0x6a>
 80091a4:	4630      	mov	r0, r6
 80091a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091aa:	bf00      	nop
 80091ac:	0800c934 	.word	0x0800c934
 80091b0:	0800c74f 	.word	0x0800c74f
 80091b4:	0800c8da 	.word	0x0800c8da

080091b8 <__lshift>:
 80091b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80091bc:	460c      	mov	r4, r1
 80091be:	6849      	ldr	r1, [r1, #4]
 80091c0:	6923      	ldr	r3, [r4, #16]
 80091c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80091c6:	68a3      	ldr	r3, [r4, #8]
 80091c8:	4607      	mov	r7, r0
 80091ca:	4691      	mov	r9, r2
 80091cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80091d0:	f108 0601 	add.w	r6, r8, #1
 80091d4:	42b3      	cmp	r3, r6
 80091d6:	db0b      	blt.n	80091f0 <__lshift+0x38>
 80091d8:	4638      	mov	r0, r7
 80091da:	f7ff fd95 	bl	8008d08 <_Balloc>
 80091de:	4605      	mov	r5, r0
 80091e0:	b948      	cbnz	r0, 80091f6 <__lshift+0x3e>
 80091e2:	4602      	mov	r2, r0
 80091e4:	4b28      	ldr	r3, [pc, #160]	@ (8009288 <__lshift+0xd0>)
 80091e6:	4829      	ldr	r0, [pc, #164]	@ (800928c <__lshift+0xd4>)
 80091e8:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80091ec:	f7fe fad6 	bl	800779c <__assert_func>
 80091f0:	3101      	adds	r1, #1
 80091f2:	005b      	lsls	r3, r3, #1
 80091f4:	e7ee      	b.n	80091d4 <__lshift+0x1c>
 80091f6:	2300      	movs	r3, #0
 80091f8:	f100 0114 	add.w	r1, r0, #20
 80091fc:	f100 0210 	add.w	r2, r0, #16
 8009200:	4618      	mov	r0, r3
 8009202:	4553      	cmp	r3, sl
 8009204:	db33      	blt.n	800926e <__lshift+0xb6>
 8009206:	6920      	ldr	r0, [r4, #16]
 8009208:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800920c:	f104 0314 	add.w	r3, r4, #20
 8009210:	f019 091f 	ands.w	r9, r9, #31
 8009214:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009218:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800921c:	d02b      	beq.n	8009276 <__lshift+0xbe>
 800921e:	f1c9 0e20 	rsb	lr, r9, #32
 8009222:	468a      	mov	sl, r1
 8009224:	2200      	movs	r2, #0
 8009226:	6818      	ldr	r0, [r3, #0]
 8009228:	fa00 f009 	lsl.w	r0, r0, r9
 800922c:	4310      	orrs	r0, r2
 800922e:	f84a 0b04 	str.w	r0, [sl], #4
 8009232:	f853 2b04 	ldr.w	r2, [r3], #4
 8009236:	459c      	cmp	ip, r3
 8009238:	fa22 f20e 	lsr.w	r2, r2, lr
 800923c:	d8f3      	bhi.n	8009226 <__lshift+0x6e>
 800923e:	ebac 0304 	sub.w	r3, ip, r4
 8009242:	3b15      	subs	r3, #21
 8009244:	f023 0303 	bic.w	r3, r3, #3
 8009248:	3304      	adds	r3, #4
 800924a:	f104 0015 	add.w	r0, r4, #21
 800924e:	4584      	cmp	ip, r0
 8009250:	bf38      	it	cc
 8009252:	2304      	movcc	r3, #4
 8009254:	50ca      	str	r2, [r1, r3]
 8009256:	b10a      	cbz	r2, 800925c <__lshift+0xa4>
 8009258:	f108 0602 	add.w	r6, r8, #2
 800925c:	3e01      	subs	r6, #1
 800925e:	4638      	mov	r0, r7
 8009260:	612e      	str	r6, [r5, #16]
 8009262:	4621      	mov	r1, r4
 8009264:	f7ff fd90 	bl	8008d88 <_Bfree>
 8009268:	4628      	mov	r0, r5
 800926a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800926e:	f842 0f04 	str.w	r0, [r2, #4]!
 8009272:	3301      	adds	r3, #1
 8009274:	e7c5      	b.n	8009202 <__lshift+0x4a>
 8009276:	3904      	subs	r1, #4
 8009278:	f853 2b04 	ldr.w	r2, [r3], #4
 800927c:	f841 2f04 	str.w	r2, [r1, #4]!
 8009280:	459c      	cmp	ip, r3
 8009282:	d8f9      	bhi.n	8009278 <__lshift+0xc0>
 8009284:	e7ea      	b.n	800925c <__lshift+0xa4>
 8009286:	bf00      	nop
 8009288:	0800c869 	.word	0x0800c869
 800928c:	0800c8da 	.word	0x0800c8da

08009290 <__mcmp>:
 8009290:	690a      	ldr	r2, [r1, #16]
 8009292:	4603      	mov	r3, r0
 8009294:	6900      	ldr	r0, [r0, #16]
 8009296:	1a80      	subs	r0, r0, r2
 8009298:	b530      	push	{r4, r5, lr}
 800929a:	d10e      	bne.n	80092ba <__mcmp+0x2a>
 800929c:	3314      	adds	r3, #20
 800929e:	3114      	adds	r1, #20
 80092a0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80092a4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80092a8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80092ac:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80092b0:	4295      	cmp	r5, r2
 80092b2:	d003      	beq.n	80092bc <__mcmp+0x2c>
 80092b4:	d205      	bcs.n	80092c2 <__mcmp+0x32>
 80092b6:	f04f 30ff 	mov.w	r0, #4294967295
 80092ba:	bd30      	pop	{r4, r5, pc}
 80092bc:	42a3      	cmp	r3, r4
 80092be:	d3f3      	bcc.n	80092a8 <__mcmp+0x18>
 80092c0:	e7fb      	b.n	80092ba <__mcmp+0x2a>
 80092c2:	2001      	movs	r0, #1
 80092c4:	e7f9      	b.n	80092ba <__mcmp+0x2a>
	...

080092c8 <__mdiff>:
 80092c8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80092cc:	4689      	mov	r9, r1
 80092ce:	4606      	mov	r6, r0
 80092d0:	4611      	mov	r1, r2
 80092d2:	4648      	mov	r0, r9
 80092d4:	4614      	mov	r4, r2
 80092d6:	f7ff ffdb 	bl	8009290 <__mcmp>
 80092da:	1e05      	subs	r5, r0, #0
 80092dc:	d112      	bne.n	8009304 <__mdiff+0x3c>
 80092de:	4629      	mov	r1, r5
 80092e0:	4630      	mov	r0, r6
 80092e2:	f7ff fd11 	bl	8008d08 <_Balloc>
 80092e6:	4602      	mov	r2, r0
 80092e8:	b928      	cbnz	r0, 80092f6 <__mdiff+0x2e>
 80092ea:	4b3f      	ldr	r3, [pc, #252]	@ (80093e8 <__mdiff+0x120>)
 80092ec:	f240 2137 	movw	r1, #567	@ 0x237
 80092f0:	483e      	ldr	r0, [pc, #248]	@ (80093ec <__mdiff+0x124>)
 80092f2:	f7fe fa53 	bl	800779c <__assert_func>
 80092f6:	2301      	movs	r3, #1
 80092f8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80092fc:	4610      	mov	r0, r2
 80092fe:	b003      	add	sp, #12
 8009300:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009304:	bfbc      	itt	lt
 8009306:	464b      	movlt	r3, r9
 8009308:	46a1      	movlt	r9, r4
 800930a:	4630      	mov	r0, r6
 800930c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009310:	bfba      	itte	lt
 8009312:	461c      	movlt	r4, r3
 8009314:	2501      	movlt	r5, #1
 8009316:	2500      	movge	r5, #0
 8009318:	f7ff fcf6 	bl	8008d08 <_Balloc>
 800931c:	4602      	mov	r2, r0
 800931e:	b918      	cbnz	r0, 8009328 <__mdiff+0x60>
 8009320:	4b31      	ldr	r3, [pc, #196]	@ (80093e8 <__mdiff+0x120>)
 8009322:	f240 2145 	movw	r1, #581	@ 0x245
 8009326:	e7e3      	b.n	80092f0 <__mdiff+0x28>
 8009328:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800932c:	6926      	ldr	r6, [r4, #16]
 800932e:	60c5      	str	r5, [r0, #12]
 8009330:	f109 0310 	add.w	r3, r9, #16
 8009334:	f109 0514 	add.w	r5, r9, #20
 8009338:	f104 0e14 	add.w	lr, r4, #20
 800933c:	f100 0b14 	add.w	fp, r0, #20
 8009340:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009344:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009348:	9301      	str	r3, [sp, #4]
 800934a:	46d9      	mov	r9, fp
 800934c:	f04f 0c00 	mov.w	ip, #0
 8009350:	9b01      	ldr	r3, [sp, #4]
 8009352:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009356:	f853 af04 	ldr.w	sl, [r3, #4]!
 800935a:	9301      	str	r3, [sp, #4]
 800935c:	fa1f f38a 	uxth.w	r3, sl
 8009360:	4619      	mov	r1, r3
 8009362:	b283      	uxth	r3, r0
 8009364:	1acb      	subs	r3, r1, r3
 8009366:	0c00      	lsrs	r0, r0, #16
 8009368:	4463      	add	r3, ip
 800936a:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800936e:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009372:	b29b      	uxth	r3, r3
 8009374:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009378:	4576      	cmp	r6, lr
 800937a:	f849 3b04 	str.w	r3, [r9], #4
 800937e:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009382:	d8e5      	bhi.n	8009350 <__mdiff+0x88>
 8009384:	1b33      	subs	r3, r6, r4
 8009386:	3b15      	subs	r3, #21
 8009388:	f023 0303 	bic.w	r3, r3, #3
 800938c:	3415      	adds	r4, #21
 800938e:	3304      	adds	r3, #4
 8009390:	42a6      	cmp	r6, r4
 8009392:	bf38      	it	cc
 8009394:	2304      	movcc	r3, #4
 8009396:	441d      	add	r5, r3
 8009398:	445b      	add	r3, fp
 800939a:	461e      	mov	r6, r3
 800939c:	462c      	mov	r4, r5
 800939e:	4544      	cmp	r4, r8
 80093a0:	d30e      	bcc.n	80093c0 <__mdiff+0xf8>
 80093a2:	f108 0103 	add.w	r1, r8, #3
 80093a6:	1b49      	subs	r1, r1, r5
 80093a8:	f021 0103 	bic.w	r1, r1, #3
 80093ac:	3d03      	subs	r5, #3
 80093ae:	45a8      	cmp	r8, r5
 80093b0:	bf38      	it	cc
 80093b2:	2100      	movcc	r1, #0
 80093b4:	440b      	add	r3, r1
 80093b6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80093ba:	b191      	cbz	r1, 80093e2 <__mdiff+0x11a>
 80093bc:	6117      	str	r7, [r2, #16]
 80093be:	e79d      	b.n	80092fc <__mdiff+0x34>
 80093c0:	f854 1b04 	ldr.w	r1, [r4], #4
 80093c4:	46e6      	mov	lr, ip
 80093c6:	0c08      	lsrs	r0, r1, #16
 80093c8:	fa1c fc81 	uxtah	ip, ip, r1
 80093cc:	4471      	add	r1, lr
 80093ce:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80093d2:	b289      	uxth	r1, r1
 80093d4:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80093d8:	f846 1b04 	str.w	r1, [r6], #4
 80093dc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80093e0:	e7dd      	b.n	800939e <__mdiff+0xd6>
 80093e2:	3f01      	subs	r7, #1
 80093e4:	e7e7      	b.n	80093b6 <__mdiff+0xee>
 80093e6:	bf00      	nop
 80093e8:	0800c869 	.word	0x0800c869
 80093ec:	0800c8da 	.word	0x0800c8da

080093f0 <__ulp>:
 80093f0:	b082      	sub	sp, #8
 80093f2:	ed8d 0b00 	vstr	d0, [sp]
 80093f6:	9a01      	ldr	r2, [sp, #4]
 80093f8:	4b0f      	ldr	r3, [pc, #60]	@ (8009438 <__ulp+0x48>)
 80093fa:	4013      	ands	r3, r2
 80093fc:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009400:	2b00      	cmp	r3, #0
 8009402:	dc08      	bgt.n	8009416 <__ulp+0x26>
 8009404:	425b      	negs	r3, r3
 8009406:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800940a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800940e:	da04      	bge.n	800941a <__ulp+0x2a>
 8009410:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009414:	4113      	asrs	r3, r2
 8009416:	2200      	movs	r2, #0
 8009418:	e008      	b.n	800942c <__ulp+0x3c>
 800941a:	f1a2 0314 	sub.w	r3, r2, #20
 800941e:	2b1e      	cmp	r3, #30
 8009420:	bfda      	itte	le
 8009422:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009426:	40da      	lsrle	r2, r3
 8009428:	2201      	movgt	r2, #1
 800942a:	2300      	movs	r3, #0
 800942c:	4619      	mov	r1, r3
 800942e:	4610      	mov	r0, r2
 8009430:	ec41 0b10 	vmov	d0, r0, r1
 8009434:	b002      	add	sp, #8
 8009436:	4770      	bx	lr
 8009438:	7ff00000 	.word	0x7ff00000

0800943c <__b2d>:
 800943c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009440:	6906      	ldr	r6, [r0, #16]
 8009442:	f100 0814 	add.w	r8, r0, #20
 8009446:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800944a:	1f37      	subs	r7, r6, #4
 800944c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009450:	4610      	mov	r0, r2
 8009452:	f7ff fd4b 	bl	8008eec <__hi0bits>
 8009456:	f1c0 0320 	rsb	r3, r0, #32
 800945a:	280a      	cmp	r0, #10
 800945c:	600b      	str	r3, [r1, #0]
 800945e:	491b      	ldr	r1, [pc, #108]	@ (80094cc <__b2d+0x90>)
 8009460:	dc15      	bgt.n	800948e <__b2d+0x52>
 8009462:	f1c0 0c0b 	rsb	ip, r0, #11
 8009466:	fa22 f30c 	lsr.w	r3, r2, ip
 800946a:	45b8      	cmp	r8, r7
 800946c:	ea43 0501 	orr.w	r5, r3, r1
 8009470:	bf34      	ite	cc
 8009472:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009476:	2300      	movcs	r3, #0
 8009478:	3015      	adds	r0, #21
 800947a:	fa02 f000 	lsl.w	r0, r2, r0
 800947e:	fa23 f30c 	lsr.w	r3, r3, ip
 8009482:	4303      	orrs	r3, r0
 8009484:	461c      	mov	r4, r3
 8009486:	ec45 4b10 	vmov	d0, r4, r5
 800948a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800948e:	45b8      	cmp	r8, r7
 8009490:	bf3a      	itte	cc
 8009492:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8009496:	f1a6 0708 	subcc.w	r7, r6, #8
 800949a:	2300      	movcs	r3, #0
 800949c:	380b      	subs	r0, #11
 800949e:	d012      	beq.n	80094c6 <__b2d+0x8a>
 80094a0:	f1c0 0120 	rsb	r1, r0, #32
 80094a4:	fa23 f401 	lsr.w	r4, r3, r1
 80094a8:	4082      	lsls	r2, r0
 80094aa:	4322      	orrs	r2, r4
 80094ac:	4547      	cmp	r7, r8
 80094ae:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80094b2:	bf8c      	ite	hi
 80094b4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80094b8:	2200      	movls	r2, #0
 80094ba:	4083      	lsls	r3, r0
 80094bc:	40ca      	lsrs	r2, r1
 80094be:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 80094c2:	4313      	orrs	r3, r2
 80094c4:	e7de      	b.n	8009484 <__b2d+0x48>
 80094c6:	ea42 0501 	orr.w	r5, r2, r1
 80094ca:	e7db      	b.n	8009484 <__b2d+0x48>
 80094cc:	3ff00000 	.word	0x3ff00000

080094d0 <__d2b>:
 80094d0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80094d4:	460f      	mov	r7, r1
 80094d6:	2101      	movs	r1, #1
 80094d8:	ec59 8b10 	vmov	r8, r9, d0
 80094dc:	4616      	mov	r6, r2
 80094de:	f7ff fc13 	bl	8008d08 <_Balloc>
 80094e2:	4604      	mov	r4, r0
 80094e4:	b930      	cbnz	r0, 80094f4 <__d2b+0x24>
 80094e6:	4602      	mov	r2, r0
 80094e8:	4b23      	ldr	r3, [pc, #140]	@ (8009578 <__d2b+0xa8>)
 80094ea:	4824      	ldr	r0, [pc, #144]	@ (800957c <__d2b+0xac>)
 80094ec:	f240 310f 	movw	r1, #783	@ 0x30f
 80094f0:	f7fe f954 	bl	800779c <__assert_func>
 80094f4:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80094f8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80094fc:	b10d      	cbz	r5, 8009502 <__d2b+0x32>
 80094fe:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009502:	9301      	str	r3, [sp, #4]
 8009504:	f1b8 0300 	subs.w	r3, r8, #0
 8009508:	d023      	beq.n	8009552 <__d2b+0x82>
 800950a:	4668      	mov	r0, sp
 800950c:	9300      	str	r3, [sp, #0]
 800950e:	f7ff fd0c 	bl	8008f2a <__lo0bits>
 8009512:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009516:	b1d0      	cbz	r0, 800954e <__d2b+0x7e>
 8009518:	f1c0 0320 	rsb	r3, r0, #32
 800951c:	fa02 f303 	lsl.w	r3, r2, r3
 8009520:	430b      	orrs	r3, r1
 8009522:	40c2      	lsrs	r2, r0
 8009524:	6163      	str	r3, [r4, #20]
 8009526:	9201      	str	r2, [sp, #4]
 8009528:	9b01      	ldr	r3, [sp, #4]
 800952a:	61a3      	str	r3, [r4, #24]
 800952c:	2b00      	cmp	r3, #0
 800952e:	bf0c      	ite	eq
 8009530:	2201      	moveq	r2, #1
 8009532:	2202      	movne	r2, #2
 8009534:	6122      	str	r2, [r4, #16]
 8009536:	b1a5      	cbz	r5, 8009562 <__d2b+0x92>
 8009538:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800953c:	4405      	add	r5, r0
 800953e:	603d      	str	r5, [r7, #0]
 8009540:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009544:	6030      	str	r0, [r6, #0]
 8009546:	4620      	mov	r0, r4
 8009548:	b003      	add	sp, #12
 800954a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800954e:	6161      	str	r1, [r4, #20]
 8009550:	e7ea      	b.n	8009528 <__d2b+0x58>
 8009552:	a801      	add	r0, sp, #4
 8009554:	f7ff fce9 	bl	8008f2a <__lo0bits>
 8009558:	9b01      	ldr	r3, [sp, #4]
 800955a:	6163      	str	r3, [r4, #20]
 800955c:	3020      	adds	r0, #32
 800955e:	2201      	movs	r2, #1
 8009560:	e7e8      	b.n	8009534 <__d2b+0x64>
 8009562:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009566:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800956a:	6038      	str	r0, [r7, #0]
 800956c:	6918      	ldr	r0, [r3, #16]
 800956e:	f7ff fcbd 	bl	8008eec <__hi0bits>
 8009572:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009576:	e7e5      	b.n	8009544 <__d2b+0x74>
 8009578:	0800c869 	.word	0x0800c869
 800957c:	0800c8da 	.word	0x0800c8da

08009580 <__ratio>:
 8009580:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009584:	b085      	sub	sp, #20
 8009586:	e9cd 1000 	strd	r1, r0, [sp]
 800958a:	a902      	add	r1, sp, #8
 800958c:	f7ff ff56 	bl	800943c <__b2d>
 8009590:	9800      	ldr	r0, [sp, #0]
 8009592:	a903      	add	r1, sp, #12
 8009594:	ec55 4b10 	vmov	r4, r5, d0
 8009598:	f7ff ff50 	bl	800943c <__b2d>
 800959c:	9b01      	ldr	r3, [sp, #4]
 800959e:	6919      	ldr	r1, [r3, #16]
 80095a0:	9b00      	ldr	r3, [sp, #0]
 80095a2:	691b      	ldr	r3, [r3, #16]
 80095a4:	1ac9      	subs	r1, r1, r3
 80095a6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80095aa:	1a9b      	subs	r3, r3, r2
 80095ac:	ec5b ab10 	vmov	sl, fp, d0
 80095b0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80095b4:	2b00      	cmp	r3, #0
 80095b6:	bfce      	itee	gt
 80095b8:	462a      	movgt	r2, r5
 80095ba:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80095be:	465a      	movle	r2, fp
 80095c0:	462f      	mov	r7, r5
 80095c2:	46d9      	mov	r9, fp
 80095c4:	bfcc      	ite	gt
 80095c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 80095ca:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 80095ce:	464b      	mov	r3, r9
 80095d0:	4652      	mov	r2, sl
 80095d2:	4620      	mov	r0, r4
 80095d4:	4639      	mov	r1, r7
 80095d6:	f7f7 f941 	bl	800085c <__aeabi_ddiv>
 80095da:	ec41 0b10 	vmov	d0, r0, r1
 80095de:	b005      	add	sp, #20
 80095e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080095e4 <__copybits>:
 80095e4:	3901      	subs	r1, #1
 80095e6:	b570      	push	{r4, r5, r6, lr}
 80095e8:	1149      	asrs	r1, r1, #5
 80095ea:	6914      	ldr	r4, [r2, #16]
 80095ec:	3101      	adds	r1, #1
 80095ee:	f102 0314 	add.w	r3, r2, #20
 80095f2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 80095f6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80095fa:	1f05      	subs	r5, r0, #4
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d30c      	bcc.n	800961a <__copybits+0x36>
 8009600:	1aa3      	subs	r3, r4, r2
 8009602:	3b11      	subs	r3, #17
 8009604:	f023 0303 	bic.w	r3, r3, #3
 8009608:	3211      	adds	r2, #17
 800960a:	42a2      	cmp	r2, r4
 800960c:	bf88      	it	hi
 800960e:	2300      	movhi	r3, #0
 8009610:	4418      	add	r0, r3
 8009612:	2300      	movs	r3, #0
 8009614:	4288      	cmp	r0, r1
 8009616:	d305      	bcc.n	8009624 <__copybits+0x40>
 8009618:	bd70      	pop	{r4, r5, r6, pc}
 800961a:	f853 6b04 	ldr.w	r6, [r3], #4
 800961e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009622:	e7eb      	b.n	80095fc <__copybits+0x18>
 8009624:	f840 3b04 	str.w	r3, [r0], #4
 8009628:	e7f4      	b.n	8009614 <__copybits+0x30>

0800962a <__any_on>:
 800962a:	f100 0214 	add.w	r2, r0, #20
 800962e:	6900      	ldr	r0, [r0, #16]
 8009630:	114b      	asrs	r3, r1, #5
 8009632:	4298      	cmp	r0, r3
 8009634:	b510      	push	{r4, lr}
 8009636:	db11      	blt.n	800965c <__any_on+0x32>
 8009638:	dd0a      	ble.n	8009650 <__any_on+0x26>
 800963a:	f011 011f 	ands.w	r1, r1, #31
 800963e:	d007      	beq.n	8009650 <__any_on+0x26>
 8009640:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009644:	fa24 f001 	lsr.w	r0, r4, r1
 8009648:	fa00 f101 	lsl.w	r1, r0, r1
 800964c:	428c      	cmp	r4, r1
 800964e:	d10b      	bne.n	8009668 <__any_on+0x3e>
 8009650:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009654:	4293      	cmp	r3, r2
 8009656:	d803      	bhi.n	8009660 <__any_on+0x36>
 8009658:	2000      	movs	r0, #0
 800965a:	bd10      	pop	{r4, pc}
 800965c:	4603      	mov	r3, r0
 800965e:	e7f7      	b.n	8009650 <__any_on+0x26>
 8009660:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009664:	2900      	cmp	r1, #0
 8009666:	d0f5      	beq.n	8009654 <__any_on+0x2a>
 8009668:	2001      	movs	r0, #1
 800966a:	e7f6      	b.n	800965a <__any_on+0x30>

0800966c <_strtol_l.constprop.0>:
 800966c:	2b24      	cmp	r3, #36	@ 0x24
 800966e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009672:	4686      	mov	lr, r0
 8009674:	4690      	mov	r8, r2
 8009676:	d801      	bhi.n	800967c <_strtol_l.constprop.0+0x10>
 8009678:	2b01      	cmp	r3, #1
 800967a:	d106      	bne.n	800968a <_strtol_l.constprop.0+0x1e>
 800967c:	f7fe f844 	bl	8007708 <__errno>
 8009680:	2316      	movs	r3, #22
 8009682:	6003      	str	r3, [r0, #0]
 8009684:	2000      	movs	r0, #0
 8009686:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800968a:	4834      	ldr	r0, [pc, #208]	@ (800975c <_strtol_l.constprop.0+0xf0>)
 800968c:	460d      	mov	r5, r1
 800968e:	462a      	mov	r2, r5
 8009690:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009694:	5d06      	ldrb	r6, [r0, r4]
 8009696:	f016 0608 	ands.w	r6, r6, #8
 800969a:	d1f8      	bne.n	800968e <_strtol_l.constprop.0+0x22>
 800969c:	2c2d      	cmp	r4, #45	@ 0x2d
 800969e:	d12d      	bne.n	80096fc <_strtol_l.constprop.0+0x90>
 80096a0:	782c      	ldrb	r4, [r5, #0]
 80096a2:	2601      	movs	r6, #1
 80096a4:	1c95      	adds	r5, r2, #2
 80096a6:	f033 0210 	bics.w	r2, r3, #16
 80096aa:	d109      	bne.n	80096c0 <_strtol_l.constprop.0+0x54>
 80096ac:	2c30      	cmp	r4, #48	@ 0x30
 80096ae:	d12a      	bne.n	8009706 <_strtol_l.constprop.0+0x9a>
 80096b0:	782a      	ldrb	r2, [r5, #0]
 80096b2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80096b6:	2a58      	cmp	r2, #88	@ 0x58
 80096b8:	d125      	bne.n	8009706 <_strtol_l.constprop.0+0x9a>
 80096ba:	786c      	ldrb	r4, [r5, #1]
 80096bc:	2310      	movs	r3, #16
 80096be:	3502      	adds	r5, #2
 80096c0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80096c4:	f10c 3cff 	add.w	ip, ip, #4294967295
 80096c8:	2200      	movs	r2, #0
 80096ca:	fbbc f9f3 	udiv	r9, ip, r3
 80096ce:	4610      	mov	r0, r2
 80096d0:	fb03 ca19 	mls	sl, r3, r9, ip
 80096d4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 80096d8:	2f09      	cmp	r7, #9
 80096da:	d81b      	bhi.n	8009714 <_strtol_l.constprop.0+0xa8>
 80096dc:	463c      	mov	r4, r7
 80096de:	42a3      	cmp	r3, r4
 80096e0:	dd27      	ble.n	8009732 <_strtol_l.constprop.0+0xc6>
 80096e2:	1c57      	adds	r7, r2, #1
 80096e4:	d007      	beq.n	80096f6 <_strtol_l.constprop.0+0x8a>
 80096e6:	4581      	cmp	r9, r0
 80096e8:	d320      	bcc.n	800972c <_strtol_l.constprop.0+0xc0>
 80096ea:	d101      	bne.n	80096f0 <_strtol_l.constprop.0+0x84>
 80096ec:	45a2      	cmp	sl, r4
 80096ee:	db1d      	blt.n	800972c <_strtol_l.constprop.0+0xc0>
 80096f0:	fb00 4003 	mla	r0, r0, r3, r4
 80096f4:	2201      	movs	r2, #1
 80096f6:	f815 4b01 	ldrb.w	r4, [r5], #1
 80096fa:	e7eb      	b.n	80096d4 <_strtol_l.constprop.0+0x68>
 80096fc:	2c2b      	cmp	r4, #43	@ 0x2b
 80096fe:	bf04      	itt	eq
 8009700:	782c      	ldrbeq	r4, [r5, #0]
 8009702:	1c95      	addeq	r5, r2, #2
 8009704:	e7cf      	b.n	80096a6 <_strtol_l.constprop.0+0x3a>
 8009706:	2b00      	cmp	r3, #0
 8009708:	d1da      	bne.n	80096c0 <_strtol_l.constprop.0+0x54>
 800970a:	2c30      	cmp	r4, #48	@ 0x30
 800970c:	bf0c      	ite	eq
 800970e:	2308      	moveq	r3, #8
 8009710:	230a      	movne	r3, #10
 8009712:	e7d5      	b.n	80096c0 <_strtol_l.constprop.0+0x54>
 8009714:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009718:	2f19      	cmp	r7, #25
 800971a:	d801      	bhi.n	8009720 <_strtol_l.constprop.0+0xb4>
 800971c:	3c37      	subs	r4, #55	@ 0x37
 800971e:	e7de      	b.n	80096de <_strtol_l.constprop.0+0x72>
 8009720:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009724:	2f19      	cmp	r7, #25
 8009726:	d804      	bhi.n	8009732 <_strtol_l.constprop.0+0xc6>
 8009728:	3c57      	subs	r4, #87	@ 0x57
 800972a:	e7d8      	b.n	80096de <_strtol_l.constprop.0+0x72>
 800972c:	f04f 32ff 	mov.w	r2, #4294967295
 8009730:	e7e1      	b.n	80096f6 <_strtol_l.constprop.0+0x8a>
 8009732:	1c53      	adds	r3, r2, #1
 8009734:	d108      	bne.n	8009748 <_strtol_l.constprop.0+0xdc>
 8009736:	2322      	movs	r3, #34	@ 0x22
 8009738:	f8ce 3000 	str.w	r3, [lr]
 800973c:	4660      	mov	r0, ip
 800973e:	f1b8 0f00 	cmp.w	r8, #0
 8009742:	d0a0      	beq.n	8009686 <_strtol_l.constprop.0+0x1a>
 8009744:	1e69      	subs	r1, r5, #1
 8009746:	e006      	b.n	8009756 <_strtol_l.constprop.0+0xea>
 8009748:	b106      	cbz	r6, 800974c <_strtol_l.constprop.0+0xe0>
 800974a:	4240      	negs	r0, r0
 800974c:	f1b8 0f00 	cmp.w	r8, #0
 8009750:	d099      	beq.n	8009686 <_strtol_l.constprop.0+0x1a>
 8009752:	2a00      	cmp	r2, #0
 8009754:	d1f6      	bne.n	8009744 <_strtol_l.constprop.0+0xd8>
 8009756:	f8c8 1000 	str.w	r1, [r8]
 800975a:	e794      	b.n	8009686 <_strtol_l.constprop.0+0x1a>
 800975c:	0800ca31 	.word	0x0800ca31

08009760 <_strtol_r>:
 8009760:	f7ff bf84 	b.w	800966c <_strtol_l.constprop.0>

08009764 <__ascii_wctomb>:
 8009764:	4603      	mov	r3, r0
 8009766:	4608      	mov	r0, r1
 8009768:	b141      	cbz	r1, 800977c <__ascii_wctomb+0x18>
 800976a:	2aff      	cmp	r2, #255	@ 0xff
 800976c:	d904      	bls.n	8009778 <__ascii_wctomb+0x14>
 800976e:	228a      	movs	r2, #138	@ 0x8a
 8009770:	601a      	str	r2, [r3, #0]
 8009772:	f04f 30ff 	mov.w	r0, #4294967295
 8009776:	4770      	bx	lr
 8009778:	700a      	strb	r2, [r1, #0]
 800977a:	2001      	movs	r0, #1
 800977c:	4770      	bx	lr

0800977e <__ssputs_r>:
 800977e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009782:	688e      	ldr	r6, [r1, #8]
 8009784:	461f      	mov	r7, r3
 8009786:	42be      	cmp	r6, r7
 8009788:	680b      	ldr	r3, [r1, #0]
 800978a:	4682      	mov	sl, r0
 800978c:	460c      	mov	r4, r1
 800978e:	4690      	mov	r8, r2
 8009790:	d82d      	bhi.n	80097ee <__ssputs_r+0x70>
 8009792:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009796:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800979a:	d026      	beq.n	80097ea <__ssputs_r+0x6c>
 800979c:	6965      	ldr	r5, [r4, #20]
 800979e:	6909      	ldr	r1, [r1, #16]
 80097a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80097a4:	eba3 0901 	sub.w	r9, r3, r1
 80097a8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80097ac:	1c7b      	adds	r3, r7, #1
 80097ae:	444b      	add	r3, r9
 80097b0:	106d      	asrs	r5, r5, #1
 80097b2:	429d      	cmp	r5, r3
 80097b4:	bf38      	it	cc
 80097b6:	461d      	movcc	r5, r3
 80097b8:	0553      	lsls	r3, r2, #21
 80097ba:	d527      	bpl.n	800980c <__ssputs_r+0x8e>
 80097bc:	4629      	mov	r1, r5
 80097be:	f7ff fa05 	bl	8008bcc <_malloc_r>
 80097c2:	4606      	mov	r6, r0
 80097c4:	b360      	cbz	r0, 8009820 <__ssputs_r+0xa2>
 80097c6:	6921      	ldr	r1, [r4, #16]
 80097c8:	464a      	mov	r2, r9
 80097ca:	f7fd ffca 	bl	8007762 <memcpy>
 80097ce:	89a3      	ldrh	r3, [r4, #12]
 80097d0:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80097d4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80097d8:	81a3      	strh	r3, [r4, #12]
 80097da:	6126      	str	r6, [r4, #16]
 80097dc:	6165      	str	r5, [r4, #20]
 80097de:	444e      	add	r6, r9
 80097e0:	eba5 0509 	sub.w	r5, r5, r9
 80097e4:	6026      	str	r6, [r4, #0]
 80097e6:	60a5      	str	r5, [r4, #8]
 80097e8:	463e      	mov	r6, r7
 80097ea:	42be      	cmp	r6, r7
 80097ec:	d900      	bls.n	80097f0 <__ssputs_r+0x72>
 80097ee:	463e      	mov	r6, r7
 80097f0:	6820      	ldr	r0, [r4, #0]
 80097f2:	4632      	mov	r2, r6
 80097f4:	4641      	mov	r1, r8
 80097f6:	f000 fd64 	bl	800a2c2 <memmove>
 80097fa:	68a3      	ldr	r3, [r4, #8]
 80097fc:	1b9b      	subs	r3, r3, r6
 80097fe:	60a3      	str	r3, [r4, #8]
 8009800:	6823      	ldr	r3, [r4, #0]
 8009802:	4433      	add	r3, r6
 8009804:	6023      	str	r3, [r4, #0]
 8009806:	2000      	movs	r0, #0
 8009808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800980c:	462a      	mov	r2, r5
 800980e:	f000 fd9e 	bl	800a34e <_realloc_r>
 8009812:	4606      	mov	r6, r0
 8009814:	2800      	cmp	r0, #0
 8009816:	d1e0      	bne.n	80097da <__ssputs_r+0x5c>
 8009818:	6921      	ldr	r1, [r4, #16]
 800981a:	4650      	mov	r0, sl
 800981c:	f7fe fe28 	bl	8008470 <_free_r>
 8009820:	230c      	movs	r3, #12
 8009822:	f8ca 3000 	str.w	r3, [sl]
 8009826:	89a3      	ldrh	r3, [r4, #12]
 8009828:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800982c:	81a3      	strh	r3, [r4, #12]
 800982e:	f04f 30ff 	mov.w	r0, #4294967295
 8009832:	e7e9      	b.n	8009808 <__ssputs_r+0x8a>

08009834 <_svfiprintf_r>:
 8009834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009838:	4698      	mov	r8, r3
 800983a:	898b      	ldrh	r3, [r1, #12]
 800983c:	061b      	lsls	r3, r3, #24
 800983e:	b09d      	sub	sp, #116	@ 0x74
 8009840:	4607      	mov	r7, r0
 8009842:	460d      	mov	r5, r1
 8009844:	4614      	mov	r4, r2
 8009846:	d510      	bpl.n	800986a <_svfiprintf_r+0x36>
 8009848:	690b      	ldr	r3, [r1, #16]
 800984a:	b973      	cbnz	r3, 800986a <_svfiprintf_r+0x36>
 800984c:	2140      	movs	r1, #64	@ 0x40
 800984e:	f7ff f9bd 	bl	8008bcc <_malloc_r>
 8009852:	6028      	str	r0, [r5, #0]
 8009854:	6128      	str	r0, [r5, #16]
 8009856:	b930      	cbnz	r0, 8009866 <_svfiprintf_r+0x32>
 8009858:	230c      	movs	r3, #12
 800985a:	603b      	str	r3, [r7, #0]
 800985c:	f04f 30ff 	mov.w	r0, #4294967295
 8009860:	b01d      	add	sp, #116	@ 0x74
 8009862:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009866:	2340      	movs	r3, #64	@ 0x40
 8009868:	616b      	str	r3, [r5, #20]
 800986a:	2300      	movs	r3, #0
 800986c:	9309      	str	r3, [sp, #36]	@ 0x24
 800986e:	2320      	movs	r3, #32
 8009870:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009874:	f8cd 800c 	str.w	r8, [sp, #12]
 8009878:	2330      	movs	r3, #48	@ 0x30
 800987a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009a18 <_svfiprintf_r+0x1e4>
 800987e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009882:	f04f 0901 	mov.w	r9, #1
 8009886:	4623      	mov	r3, r4
 8009888:	469a      	mov	sl, r3
 800988a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800988e:	b10a      	cbz	r2, 8009894 <_svfiprintf_r+0x60>
 8009890:	2a25      	cmp	r2, #37	@ 0x25
 8009892:	d1f9      	bne.n	8009888 <_svfiprintf_r+0x54>
 8009894:	ebba 0b04 	subs.w	fp, sl, r4
 8009898:	d00b      	beq.n	80098b2 <_svfiprintf_r+0x7e>
 800989a:	465b      	mov	r3, fp
 800989c:	4622      	mov	r2, r4
 800989e:	4629      	mov	r1, r5
 80098a0:	4638      	mov	r0, r7
 80098a2:	f7ff ff6c 	bl	800977e <__ssputs_r>
 80098a6:	3001      	adds	r0, #1
 80098a8:	f000 80a7 	beq.w	80099fa <_svfiprintf_r+0x1c6>
 80098ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80098ae:	445a      	add	r2, fp
 80098b0:	9209      	str	r2, [sp, #36]	@ 0x24
 80098b2:	f89a 3000 	ldrb.w	r3, [sl]
 80098b6:	2b00      	cmp	r3, #0
 80098b8:	f000 809f 	beq.w	80099fa <_svfiprintf_r+0x1c6>
 80098bc:	2300      	movs	r3, #0
 80098be:	f04f 32ff 	mov.w	r2, #4294967295
 80098c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80098c6:	f10a 0a01 	add.w	sl, sl, #1
 80098ca:	9304      	str	r3, [sp, #16]
 80098cc:	9307      	str	r3, [sp, #28]
 80098ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80098d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80098d4:	4654      	mov	r4, sl
 80098d6:	2205      	movs	r2, #5
 80098d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80098dc:	484e      	ldr	r0, [pc, #312]	@ (8009a18 <_svfiprintf_r+0x1e4>)
 80098de:	f7f6 fc7f 	bl	80001e0 <memchr>
 80098e2:	9a04      	ldr	r2, [sp, #16]
 80098e4:	b9d8      	cbnz	r0, 800991e <_svfiprintf_r+0xea>
 80098e6:	06d0      	lsls	r0, r2, #27
 80098e8:	bf44      	itt	mi
 80098ea:	2320      	movmi	r3, #32
 80098ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098f0:	0711      	lsls	r1, r2, #28
 80098f2:	bf44      	itt	mi
 80098f4:	232b      	movmi	r3, #43	@ 0x2b
 80098f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80098fa:	f89a 3000 	ldrb.w	r3, [sl]
 80098fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8009900:	d015      	beq.n	800992e <_svfiprintf_r+0xfa>
 8009902:	9a07      	ldr	r2, [sp, #28]
 8009904:	4654      	mov	r4, sl
 8009906:	2000      	movs	r0, #0
 8009908:	f04f 0c0a 	mov.w	ip, #10
 800990c:	4621      	mov	r1, r4
 800990e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009912:	3b30      	subs	r3, #48	@ 0x30
 8009914:	2b09      	cmp	r3, #9
 8009916:	d94b      	bls.n	80099b0 <_svfiprintf_r+0x17c>
 8009918:	b1b0      	cbz	r0, 8009948 <_svfiprintf_r+0x114>
 800991a:	9207      	str	r2, [sp, #28]
 800991c:	e014      	b.n	8009948 <_svfiprintf_r+0x114>
 800991e:	eba0 0308 	sub.w	r3, r0, r8
 8009922:	fa09 f303 	lsl.w	r3, r9, r3
 8009926:	4313      	orrs	r3, r2
 8009928:	9304      	str	r3, [sp, #16]
 800992a:	46a2      	mov	sl, r4
 800992c:	e7d2      	b.n	80098d4 <_svfiprintf_r+0xa0>
 800992e:	9b03      	ldr	r3, [sp, #12]
 8009930:	1d19      	adds	r1, r3, #4
 8009932:	681b      	ldr	r3, [r3, #0]
 8009934:	9103      	str	r1, [sp, #12]
 8009936:	2b00      	cmp	r3, #0
 8009938:	bfbb      	ittet	lt
 800993a:	425b      	neglt	r3, r3
 800993c:	f042 0202 	orrlt.w	r2, r2, #2
 8009940:	9307      	strge	r3, [sp, #28]
 8009942:	9307      	strlt	r3, [sp, #28]
 8009944:	bfb8      	it	lt
 8009946:	9204      	strlt	r2, [sp, #16]
 8009948:	7823      	ldrb	r3, [r4, #0]
 800994a:	2b2e      	cmp	r3, #46	@ 0x2e
 800994c:	d10a      	bne.n	8009964 <_svfiprintf_r+0x130>
 800994e:	7863      	ldrb	r3, [r4, #1]
 8009950:	2b2a      	cmp	r3, #42	@ 0x2a
 8009952:	d132      	bne.n	80099ba <_svfiprintf_r+0x186>
 8009954:	9b03      	ldr	r3, [sp, #12]
 8009956:	1d1a      	adds	r2, r3, #4
 8009958:	681b      	ldr	r3, [r3, #0]
 800995a:	9203      	str	r2, [sp, #12]
 800995c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009960:	3402      	adds	r4, #2
 8009962:	9305      	str	r3, [sp, #20]
 8009964:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009a28 <_svfiprintf_r+0x1f4>
 8009968:	7821      	ldrb	r1, [r4, #0]
 800996a:	2203      	movs	r2, #3
 800996c:	4650      	mov	r0, sl
 800996e:	f7f6 fc37 	bl	80001e0 <memchr>
 8009972:	b138      	cbz	r0, 8009984 <_svfiprintf_r+0x150>
 8009974:	9b04      	ldr	r3, [sp, #16]
 8009976:	eba0 000a 	sub.w	r0, r0, sl
 800997a:	2240      	movs	r2, #64	@ 0x40
 800997c:	4082      	lsls	r2, r0
 800997e:	4313      	orrs	r3, r2
 8009980:	3401      	adds	r4, #1
 8009982:	9304      	str	r3, [sp, #16]
 8009984:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009988:	4824      	ldr	r0, [pc, #144]	@ (8009a1c <_svfiprintf_r+0x1e8>)
 800998a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800998e:	2206      	movs	r2, #6
 8009990:	f7f6 fc26 	bl	80001e0 <memchr>
 8009994:	2800      	cmp	r0, #0
 8009996:	d036      	beq.n	8009a06 <_svfiprintf_r+0x1d2>
 8009998:	4b21      	ldr	r3, [pc, #132]	@ (8009a20 <_svfiprintf_r+0x1ec>)
 800999a:	bb1b      	cbnz	r3, 80099e4 <_svfiprintf_r+0x1b0>
 800999c:	9b03      	ldr	r3, [sp, #12]
 800999e:	3307      	adds	r3, #7
 80099a0:	f023 0307 	bic.w	r3, r3, #7
 80099a4:	3308      	adds	r3, #8
 80099a6:	9303      	str	r3, [sp, #12]
 80099a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80099aa:	4433      	add	r3, r6
 80099ac:	9309      	str	r3, [sp, #36]	@ 0x24
 80099ae:	e76a      	b.n	8009886 <_svfiprintf_r+0x52>
 80099b0:	fb0c 3202 	mla	r2, ip, r2, r3
 80099b4:	460c      	mov	r4, r1
 80099b6:	2001      	movs	r0, #1
 80099b8:	e7a8      	b.n	800990c <_svfiprintf_r+0xd8>
 80099ba:	2300      	movs	r3, #0
 80099bc:	3401      	adds	r4, #1
 80099be:	9305      	str	r3, [sp, #20]
 80099c0:	4619      	mov	r1, r3
 80099c2:	f04f 0c0a 	mov.w	ip, #10
 80099c6:	4620      	mov	r0, r4
 80099c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80099cc:	3a30      	subs	r2, #48	@ 0x30
 80099ce:	2a09      	cmp	r2, #9
 80099d0:	d903      	bls.n	80099da <_svfiprintf_r+0x1a6>
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d0c6      	beq.n	8009964 <_svfiprintf_r+0x130>
 80099d6:	9105      	str	r1, [sp, #20]
 80099d8:	e7c4      	b.n	8009964 <_svfiprintf_r+0x130>
 80099da:	fb0c 2101 	mla	r1, ip, r1, r2
 80099de:	4604      	mov	r4, r0
 80099e0:	2301      	movs	r3, #1
 80099e2:	e7f0      	b.n	80099c6 <_svfiprintf_r+0x192>
 80099e4:	ab03      	add	r3, sp, #12
 80099e6:	9300      	str	r3, [sp, #0]
 80099e8:	462a      	mov	r2, r5
 80099ea:	4b0e      	ldr	r3, [pc, #56]	@ (8009a24 <_svfiprintf_r+0x1f0>)
 80099ec:	a904      	add	r1, sp, #16
 80099ee:	4638      	mov	r0, r7
 80099f0:	f7fc feac 	bl	800674c <_printf_float>
 80099f4:	1c42      	adds	r2, r0, #1
 80099f6:	4606      	mov	r6, r0
 80099f8:	d1d6      	bne.n	80099a8 <_svfiprintf_r+0x174>
 80099fa:	89ab      	ldrh	r3, [r5, #12]
 80099fc:	065b      	lsls	r3, r3, #25
 80099fe:	f53f af2d 	bmi.w	800985c <_svfiprintf_r+0x28>
 8009a02:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009a04:	e72c      	b.n	8009860 <_svfiprintf_r+0x2c>
 8009a06:	ab03      	add	r3, sp, #12
 8009a08:	9300      	str	r3, [sp, #0]
 8009a0a:	462a      	mov	r2, r5
 8009a0c:	4b05      	ldr	r3, [pc, #20]	@ (8009a24 <_svfiprintf_r+0x1f0>)
 8009a0e:	a904      	add	r1, sp, #16
 8009a10:	4638      	mov	r0, r7
 8009a12:	f7fd f933 	bl	8006c7c <_printf_i>
 8009a16:	e7ed      	b.n	80099f4 <_svfiprintf_r+0x1c0>
 8009a18:	0800cb31 	.word	0x0800cb31
 8009a1c:	0800cb3b 	.word	0x0800cb3b
 8009a20:	0800674d 	.word	0x0800674d
 8009a24:	0800977f 	.word	0x0800977f
 8009a28:	0800cb37 	.word	0x0800cb37

08009a2c <_sungetc_r>:
 8009a2c:	b538      	push	{r3, r4, r5, lr}
 8009a2e:	1c4b      	adds	r3, r1, #1
 8009a30:	4614      	mov	r4, r2
 8009a32:	d103      	bne.n	8009a3c <_sungetc_r+0x10>
 8009a34:	f04f 35ff 	mov.w	r5, #4294967295
 8009a38:	4628      	mov	r0, r5
 8009a3a:	bd38      	pop	{r3, r4, r5, pc}
 8009a3c:	8993      	ldrh	r3, [r2, #12]
 8009a3e:	f023 0320 	bic.w	r3, r3, #32
 8009a42:	8193      	strh	r3, [r2, #12]
 8009a44:	6853      	ldr	r3, [r2, #4]
 8009a46:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009a48:	b2cd      	uxtb	r5, r1
 8009a4a:	b18a      	cbz	r2, 8009a70 <_sungetc_r+0x44>
 8009a4c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009a4e:	429a      	cmp	r2, r3
 8009a50:	dd08      	ble.n	8009a64 <_sungetc_r+0x38>
 8009a52:	6823      	ldr	r3, [r4, #0]
 8009a54:	1e5a      	subs	r2, r3, #1
 8009a56:	6022      	str	r2, [r4, #0]
 8009a58:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009a5c:	6863      	ldr	r3, [r4, #4]
 8009a5e:	3301      	adds	r3, #1
 8009a60:	6063      	str	r3, [r4, #4]
 8009a62:	e7e9      	b.n	8009a38 <_sungetc_r+0xc>
 8009a64:	4621      	mov	r1, r4
 8009a66:	f000 fbf2 	bl	800a24e <__submore>
 8009a6a:	2800      	cmp	r0, #0
 8009a6c:	d0f1      	beq.n	8009a52 <_sungetc_r+0x26>
 8009a6e:	e7e1      	b.n	8009a34 <_sungetc_r+0x8>
 8009a70:	6921      	ldr	r1, [r4, #16]
 8009a72:	6822      	ldr	r2, [r4, #0]
 8009a74:	b141      	cbz	r1, 8009a88 <_sungetc_r+0x5c>
 8009a76:	4291      	cmp	r1, r2
 8009a78:	d206      	bcs.n	8009a88 <_sungetc_r+0x5c>
 8009a7a:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009a7e:	42a9      	cmp	r1, r5
 8009a80:	d102      	bne.n	8009a88 <_sungetc_r+0x5c>
 8009a82:	3a01      	subs	r2, #1
 8009a84:	6022      	str	r2, [r4, #0]
 8009a86:	e7ea      	b.n	8009a5e <_sungetc_r+0x32>
 8009a88:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009a8c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009a90:	6363      	str	r3, [r4, #52]	@ 0x34
 8009a92:	2303      	movs	r3, #3
 8009a94:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009a96:	4623      	mov	r3, r4
 8009a98:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009a9c:	6023      	str	r3, [r4, #0]
 8009a9e:	2301      	movs	r3, #1
 8009aa0:	e7de      	b.n	8009a60 <_sungetc_r+0x34>

08009aa2 <__ssrefill_r>:
 8009aa2:	b510      	push	{r4, lr}
 8009aa4:	460c      	mov	r4, r1
 8009aa6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009aa8:	b169      	cbz	r1, 8009ac6 <__ssrefill_r+0x24>
 8009aaa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009aae:	4299      	cmp	r1, r3
 8009ab0:	d001      	beq.n	8009ab6 <__ssrefill_r+0x14>
 8009ab2:	f7fe fcdd 	bl	8008470 <_free_r>
 8009ab6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009ab8:	6063      	str	r3, [r4, #4]
 8009aba:	2000      	movs	r0, #0
 8009abc:	6360      	str	r0, [r4, #52]	@ 0x34
 8009abe:	b113      	cbz	r3, 8009ac6 <__ssrefill_r+0x24>
 8009ac0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009ac2:	6023      	str	r3, [r4, #0]
 8009ac4:	bd10      	pop	{r4, pc}
 8009ac6:	6923      	ldr	r3, [r4, #16]
 8009ac8:	6023      	str	r3, [r4, #0]
 8009aca:	2300      	movs	r3, #0
 8009acc:	6063      	str	r3, [r4, #4]
 8009ace:	89a3      	ldrh	r3, [r4, #12]
 8009ad0:	f043 0320 	orr.w	r3, r3, #32
 8009ad4:	81a3      	strh	r3, [r4, #12]
 8009ad6:	f04f 30ff 	mov.w	r0, #4294967295
 8009ada:	e7f3      	b.n	8009ac4 <__ssrefill_r+0x22>

08009adc <__ssvfiscanf_r>:
 8009adc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae0:	460c      	mov	r4, r1
 8009ae2:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009ae6:	2100      	movs	r1, #0
 8009ae8:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009aec:	49a5      	ldr	r1, [pc, #660]	@ (8009d84 <__ssvfiscanf_r+0x2a8>)
 8009aee:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009af0:	f10d 0804 	add.w	r8, sp, #4
 8009af4:	49a4      	ldr	r1, [pc, #656]	@ (8009d88 <__ssvfiscanf_r+0x2ac>)
 8009af6:	4fa5      	ldr	r7, [pc, #660]	@ (8009d8c <__ssvfiscanf_r+0x2b0>)
 8009af8:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009afc:	4606      	mov	r6, r0
 8009afe:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009b00:	9300      	str	r3, [sp, #0]
 8009b02:	7813      	ldrb	r3, [r2, #0]
 8009b04:	2b00      	cmp	r3, #0
 8009b06:	f000 8158 	beq.w	8009dba <__ssvfiscanf_r+0x2de>
 8009b0a:	5cf9      	ldrb	r1, [r7, r3]
 8009b0c:	f011 0108 	ands.w	r1, r1, #8
 8009b10:	f102 0501 	add.w	r5, r2, #1
 8009b14:	d019      	beq.n	8009b4a <__ssvfiscanf_r+0x6e>
 8009b16:	6863      	ldr	r3, [r4, #4]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	dd0f      	ble.n	8009b3c <__ssvfiscanf_r+0x60>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	781a      	ldrb	r2, [r3, #0]
 8009b20:	5cba      	ldrb	r2, [r7, r2]
 8009b22:	0712      	lsls	r2, r2, #28
 8009b24:	d401      	bmi.n	8009b2a <__ssvfiscanf_r+0x4e>
 8009b26:	462a      	mov	r2, r5
 8009b28:	e7eb      	b.n	8009b02 <__ssvfiscanf_r+0x26>
 8009b2a:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009b2c:	3201      	adds	r2, #1
 8009b2e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009b30:	6862      	ldr	r2, [r4, #4]
 8009b32:	3301      	adds	r3, #1
 8009b34:	3a01      	subs	r2, #1
 8009b36:	6062      	str	r2, [r4, #4]
 8009b38:	6023      	str	r3, [r4, #0]
 8009b3a:	e7ec      	b.n	8009b16 <__ssvfiscanf_r+0x3a>
 8009b3c:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009b3e:	4621      	mov	r1, r4
 8009b40:	4630      	mov	r0, r6
 8009b42:	4798      	blx	r3
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d0e9      	beq.n	8009b1c <__ssvfiscanf_r+0x40>
 8009b48:	e7ed      	b.n	8009b26 <__ssvfiscanf_r+0x4a>
 8009b4a:	2b25      	cmp	r3, #37	@ 0x25
 8009b4c:	d012      	beq.n	8009b74 <__ssvfiscanf_r+0x98>
 8009b4e:	4699      	mov	r9, r3
 8009b50:	6863      	ldr	r3, [r4, #4]
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	f340 8093 	ble.w	8009c7e <__ssvfiscanf_r+0x1a2>
 8009b58:	6822      	ldr	r2, [r4, #0]
 8009b5a:	7813      	ldrb	r3, [r2, #0]
 8009b5c:	454b      	cmp	r3, r9
 8009b5e:	f040 812c 	bne.w	8009dba <__ssvfiscanf_r+0x2de>
 8009b62:	6863      	ldr	r3, [r4, #4]
 8009b64:	3b01      	subs	r3, #1
 8009b66:	6063      	str	r3, [r4, #4]
 8009b68:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009b6a:	3201      	adds	r2, #1
 8009b6c:	3301      	adds	r3, #1
 8009b6e:	6022      	str	r2, [r4, #0]
 8009b70:	9345      	str	r3, [sp, #276]	@ 0x114
 8009b72:	e7d8      	b.n	8009b26 <__ssvfiscanf_r+0x4a>
 8009b74:	9141      	str	r1, [sp, #260]	@ 0x104
 8009b76:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009b78:	7853      	ldrb	r3, [r2, #1]
 8009b7a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b7c:	bf02      	ittt	eq
 8009b7e:	2310      	moveq	r3, #16
 8009b80:	1c95      	addeq	r5, r2, #2
 8009b82:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009b84:	220a      	movs	r2, #10
 8009b86:	46a9      	mov	r9, r5
 8009b88:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009b8c:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009b90:	2b09      	cmp	r3, #9
 8009b92:	d91e      	bls.n	8009bd2 <__ssvfiscanf_r+0xf6>
 8009b94:	f8df a1f8 	ldr.w	sl, [pc, #504]	@ 8009d90 <__ssvfiscanf_r+0x2b4>
 8009b98:	2203      	movs	r2, #3
 8009b9a:	4650      	mov	r0, sl
 8009b9c:	f7f6 fb20 	bl	80001e0 <memchr>
 8009ba0:	b138      	cbz	r0, 8009bb2 <__ssvfiscanf_r+0xd6>
 8009ba2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ba4:	eba0 000a 	sub.w	r0, r0, sl
 8009ba8:	2301      	movs	r3, #1
 8009baa:	4083      	lsls	r3, r0
 8009bac:	4313      	orrs	r3, r2
 8009bae:	9341      	str	r3, [sp, #260]	@ 0x104
 8009bb0:	464d      	mov	r5, r9
 8009bb2:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009bb6:	2b78      	cmp	r3, #120	@ 0x78
 8009bb8:	d806      	bhi.n	8009bc8 <__ssvfiscanf_r+0xec>
 8009bba:	2b57      	cmp	r3, #87	@ 0x57
 8009bbc:	d810      	bhi.n	8009be0 <__ssvfiscanf_r+0x104>
 8009bbe:	2b25      	cmp	r3, #37	@ 0x25
 8009bc0:	d0c5      	beq.n	8009b4e <__ssvfiscanf_r+0x72>
 8009bc2:	d857      	bhi.n	8009c74 <__ssvfiscanf_r+0x198>
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d065      	beq.n	8009c94 <__ssvfiscanf_r+0x1b8>
 8009bc8:	2303      	movs	r3, #3
 8009bca:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009bcc:	230a      	movs	r3, #10
 8009bce:	9342      	str	r3, [sp, #264]	@ 0x108
 8009bd0:	e078      	b.n	8009cc4 <__ssvfiscanf_r+0x1e8>
 8009bd2:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009bd4:	fb02 1103 	mla	r1, r2, r3, r1
 8009bd8:	3930      	subs	r1, #48	@ 0x30
 8009bda:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009bdc:	464d      	mov	r5, r9
 8009bde:	e7d2      	b.n	8009b86 <__ssvfiscanf_r+0xaa>
 8009be0:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009be4:	2a20      	cmp	r2, #32
 8009be6:	d8ef      	bhi.n	8009bc8 <__ssvfiscanf_r+0xec>
 8009be8:	a101      	add	r1, pc, #4	@ (adr r1, 8009bf0 <__ssvfiscanf_r+0x114>)
 8009bea:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009bee:	bf00      	nop
 8009bf0:	08009ca3 	.word	0x08009ca3
 8009bf4:	08009bc9 	.word	0x08009bc9
 8009bf8:	08009bc9 	.word	0x08009bc9
 8009bfc:	08009cfd 	.word	0x08009cfd
 8009c00:	08009bc9 	.word	0x08009bc9
 8009c04:	08009bc9 	.word	0x08009bc9
 8009c08:	08009bc9 	.word	0x08009bc9
 8009c0c:	08009bc9 	.word	0x08009bc9
 8009c10:	08009bc9 	.word	0x08009bc9
 8009c14:	08009bc9 	.word	0x08009bc9
 8009c18:	08009bc9 	.word	0x08009bc9
 8009c1c:	08009d13 	.word	0x08009d13
 8009c20:	08009cf9 	.word	0x08009cf9
 8009c24:	08009c7b 	.word	0x08009c7b
 8009c28:	08009c7b 	.word	0x08009c7b
 8009c2c:	08009c7b 	.word	0x08009c7b
 8009c30:	08009bc9 	.word	0x08009bc9
 8009c34:	08009cb5 	.word	0x08009cb5
 8009c38:	08009bc9 	.word	0x08009bc9
 8009c3c:	08009bc9 	.word	0x08009bc9
 8009c40:	08009bc9 	.word	0x08009bc9
 8009c44:	08009bc9 	.word	0x08009bc9
 8009c48:	08009d23 	.word	0x08009d23
 8009c4c:	08009cbd 	.word	0x08009cbd
 8009c50:	08009c9b 	.word	0x08009c9b
 8009c54:	08009bc9 	.word	0x08009bc9
 8009c58:	08009bc9 	.word	0x08009bc9
 8009c5c:	08009d1f 	.word	0x08009d1f
 8009c60:	08009bc9 	.word	0x08009bc9
 8009c64:	08009cf9 	.word	0x08009cf9
 8009c68:	08009bc9 	.word	0x08009bc9
 8009c6c:	08009bc9 	.word	0x08009bc9
 8009c70:	08009ca3 	.word	0x08009ca3
 8009c74:	3b45      	subs	r3, #69	@ 0x45
 8009c76:	2b02      	cmp	r3, #2
 8009c78:	d8a6      	bhi.n	8009bc8 <__ssvfiscanf_r+0xec>
 8009c7a:	2305      	movs	r3, #5
 8009c7c:	e021      	b.n	8009cc2 <__ssvfiscanf_r+0x1e6>
 8009c7e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009c80:	4621      	mov	r1, r4
 8009c82:	4630      	mov	r0, r6
 8009c84:	4798      	blx	r3
 8009c86:	2800      	cmp	r0, #0
 8009c88:	f43f af66 	beq.w	8009b58 <__ssvfiscanf_r+0x7c>
 8009c8c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009c8e:	2800      	cmp	r0, #0
 8009c90:	f040 808b 	bne.w	8009daa <__ssvfiscanf_r+0x2ce>
 8009c94:	f04f 30ff 	mov.w	r0, #4294967295
 8009c98:	e08b      	b.n	8009db2 <__ssvfiscanf_r+0x2d6>
 8009c9a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009c9c:	f042 0220 	orr.w	r2, r2, #32
 8009ca0:	9241      	str	r2, [sp, #260]	@ 0x104
 8009ca2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ca4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ca8:	9241      	str	r2, [sp, #260]	@ 0x104
 8009caa:	2210      	movs	r2, #16
 8009cac:	2b6e      	cmp	r3, #110	@ 0x6e
 8009cae:	9242      	str	r2, [sp, #264]	@ 0x108
 8009cb0:	d902      	bls.n	8009cb8 <__ssvfiscanf_r+0x1dc>
 8009cb2:	e005      	b.n	8009cc0 <__ssvfiscanf_r+0x1e4>
 8009cb4:	2300      	movs	r3, #0
 8009cb6:	9342      	str	r3, [sp, #264]	@ 0x108
 8009cb8:	2303      	movs	r3, #3
 8009cba:	e002      	b.n	8009cc2 <__ssvfiscanf_r+0x1e6>
 8009cbc:	2308      	movs	r3, #8
 8009cbe:	9342      	str	r3, [sp, #264]	@ 0x108
 8009cc0:	2304      	movs	r3, #4
 8009cc2:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009cc4:	6863      	ldr	r3, [r4, #4]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	dd39      	ble.n	8009d3e <__ssvfiscanf_r+0x262>
 8009cca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009ccc:	0659      	lsls	r1, r3, #25
 8009cce:	d404      	bmi.n	8009cda <__ssvfiscanf_r+0x1fe>
 8009cd0:	6823      	ldr	r3, [r4, #0]
 8009cd2:	781a      	ldrb	r2, [r3, #0]
 8009cd4:	5cba      	ldrb	r2, [r7, r2]
 8009cd6:	0712      	lsls	r2, r2, #28
 8009cd8:	d438      	bmi.n	8009d4c <__ssvfiscanf_r+0x270>
 8009cda:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009cdc:	2b02      	cmp	r3, #2
 8009cde:	dc47      	bgt.n	8009d70 <__ssvfiscanf_r+0x294>
 8009ce0:	466b      	mov	r3, sp
 8009ce2:	4622      	mov	r2, r4
 8009ce4:	a941      	add	r1, sp, #260	@ 0x104
 8009ce6:	4630      	mov	r0, r6
 8009ce8:	f000 f86c 	bl	8009dc4 <_scanf_chars>
 8009cec:	2801      	cmp	r0, #1
 8009cee:	d064      	beq.n	8009dba <__ssvfiscanf_r+0x2de>
 8009cf0:	2802      	cmp	r0, #2
 8009cf2:	f47f af18 	bne.w	8009b26 <__ssvfiscanf_r+0x4a>
 8009cf6:	e7c9      	b.n	8009c8c <__ssvfiscanf_r+0x1b0>
 8009cf8:	220a      	movs	r2, #10
 8009cfa:	e7d7      	b.n	8009cac <__ssvfiscanf_r+0x1d0>
 8009cfc:	4629      	mov	r1, r5
 8009cfe:	4640      	mov	r0, r8
 8009d00:	f000 fa6c 	bl	800a1dc <__sccl>
 8009d04:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009d06:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d0a:	9341      	str	r3, [sp, #260]	@ 0x104
 8009d0c:	4605      	mov	r5, r0
 8009d0e:	2301      	movs	r3, #1
 8009d10:	e7d7      	b.n	8009cc2 <__ssvfiscanf_r+0x1e6>
 8009d12:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009d14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d18:	9341      	str	r3, [sp, #260]	@ 0x104
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	e7d1      	b.n	8009cc2 <__ssvfiscanf_r+0x1e6>
 8009d1e:	2302      	movs	r3, #2
 8009d20:	e7cf      	b.n	8009cc2 <__ssvfiscanf_r+0x1e6>
 8009d22:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009d24:	06c3      	lsls	r3, r0, #27
 8009d26:	f53f aefe 	bmi.w	8009b26 <__ssvfiscanf_r+0x4a>
 8009d2a:	9b00      	ldr	r3, [sp, #0]
 8009d2c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009d2e:	1d19      	adds	r1, r3, #4
 8009d30:	9100      	str	r1, [sp, #0]
 8009d32:	681b      	ldr	r3, [r3, #0]
 8009d34:	07c0      	lsls	r0, r0, #31
 8009d36:	bf4c      	ite	mi
 8009d38:	801a      	strhmi	r2, [r3, #0]
 8009d3a:	601a      	strpl	r2, [r3, #0]
 8009d3c:	e6f3      	b.n	8009b26 <__ssvfiscanf_r+0x4a>
 8009d3e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d40:	4621      	mov	r1, r4
 8009d42:	4630      	mov	r0, r6
 8009d44:	4798      	blx	r3
 8009d46:	2800      	cmp	r0, #0
 8009d48:	d0bf      	beq.n	8009cca <__ssvfiscanf_r+0x1ee>
 8009d4a:	e79f      	b.n	8009c8c <__ssvfiscanf_r+0x1b0>
 8009d4c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009d4e:	3201      	adds	r2, #1
 8009d50:	9245      	str	r2, [sp, #276]	@ 0x114
 8009d52:	6862      	ldr	r2, [r4, #4]
 8009d54:	3a01      	subs	r2, #1
 8009d56:	2a00      	cmp	r2, #0
 8009d58:	6062      	str	r2, [r4, #4]
 8009d5a:	dd02      	ble.n	8009d62 <__ssvfiscanf_r+0x286>
 8009d5c:	3301      	adds	r3, #1
 8009d5e:	6023      	str	r3, [r4, #0]
 8009d60:	e7b6      	b.n	8009cd0 <__ssvfiscanf_r+0x1f4>
 8009d62:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d64:	4621      	mov	r1, r4
 8009d66:	4630      	mov	r0, r6
 8009d68:	4798      	blx	r3
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d0b0      	beq.n	8009cd0 <__ssvfiscanf_r+0x1f4>
 8009d6e:	e78d      	b.n	8009c8c <__ssvfiscanf_r+0x1b0>
 8009d70:	2b04      	cmp	r3, #4
 8009d72:	dc0f      	bgt.n	8009d94 <__ssvfiscanf_r+0x2b8>
 8009d74:	466b      	mov	r3, sp
 8009d76:	4622      	mov	r2, r4
 8009d78:	a941      	add	r1, sp, #260	@ 0x104
 8009d7a:	4630      	mov	r0, r6
 8009d7c:	f000 f87c 	bl	8009e78 <_scanf_i>
 8009d80:	e7b4      	b.n	8009cec <__ssvfiscanf_r+0x210>
 8009d82:	bf00      	nop
 8009d84:	08009a2d 	.word	0x08009a2d
 8009d88:	08009aa3 	.word	0x08009aa3
 8009d8c:	0800ca31 	.word	0x0800ca31
 8009d90:	0800cb37 	.word	0x0800cb37
 8009d94:	4b0a      	ldr	r3, [pc, #40]	@ (8009dc0 <__ssvfiscanf_r+0x2e4>)
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	f43f aec5 	beq.w	8009b26 <__ssvfiscanf_r+0x4a>
 8009d9c:	466b      	mov	r3, sp
 8009d9e:	4622      	mov	r2, r4
 8009da0:	a941      	add	r1, sp, #260	@ 0x104
 8009da2:	4630      	mov	r0, r6
 8009da4:	f7fd f88a 	bl	8006ebc <_scanf_float>
 8009da8:	e7a0      	b.n	8009cec <__ssvfiscanf_r+0x210>
 8009daa:	89a3      	ldrh	r3, [r4, #12]
 8009dac:	065b      	lsls	r3, r3, #25
 8009dae:	f53f af71 	bmi.w	8009c94 <__ssvfiscanf_r+0x1b8>
 8009db2:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 8009db6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009dba:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009dbc:	e7f9      	b.n	8009db2 <__ssvfiscanf_r+0x2d6>
 8009dbe:	bf00      	nop
 8009dc0:	08006ebd 	.word	0x08006ebd

08009dc4 <_scanf_chars>:
 8009dc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009dc8:	4615      	mov	r5, r2
 8009dca:	688a      	ldr	r2, [r1, #8]
 8009dcc:	4680      	mov	r8, r0
 8009dce:	460c      	mov	r4, r1
 8009dd0:	b932      	cbnz	r2, 8009de0 <_scanf_chars+0x1c>
 8009dd2:	698a      	ldr	r2, [r1, #24]
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	bf14      	ite	ne
 8009dd8:	f04f 32ff 	movne.w	r2, #4294967295
 8009ddc:	2201      	moveq	r2, #1
 8009dde:	608a      	str	r2, [r1, #8]
 8009de0:	6822      	ldr	r2, [r4, #0]
 8009de2:	f8df 9090 	ldr.w	r9, [pc, #144]	@ 8009e74 <_scanf_chars+0xb0>
 8009de6:	06d1      	lsls	r1, r2, #27
 8009de8:	bf5f      	itttt	pl
 8009dea:	681a      	ldrpl	r2, [r3, #0]
 8009dec:	1d11      	addpl	r1, r2, #4
 8009dee:	6019      	strpl	r1, [r3, #0]
 8009df0:	6816      	ldrpl	r6, [r2, #0]
 8009df2:	2700      	movs	r7, #0
 8009df4:	69a0      	ldr	r0, [r4, #24]
 8009df6:	b188      	cbz	r0, 8009e1c <_scanf_chars+0x58>
 8009df8:	2801      	cmp	r0, #1
 8009dfa:	d107      	bne.n	8009e0c <_scanf_chars+0x48>
 8009dfc:	682b      	ldr	r3, [r5, #0]
 8009dfe:	781a      	ldrb	r2, [r3, #0]
 8009e00:	6963      	ldr	r3, [r4, #20]
 8009e02:	5c9b      	ldrb	r3, [r3, r2]
 8009e04:	b953      	cbnz	r3, 8009e1c <_scanf_chars+0x58>
 8009e06:	2f00      	cmp	r7, #0
 8009e08:	d031      	beq.n	8009e6e <_scanf_chars+0xaa>
 8009e0a:	e022      	b.n	8009e52 <_scanf_chars+0x8e>
 8009e0c:	2802      	cmp	r0, #2
 8009e0e:	d120      	bne.n	8009e52 <_scanf_chars+0x8e>
 8009e10:	682b      	ldr	r3, [r5, #0]
 8009e12:	781b      	ldrb	r3, [r3, #0]
 8009e14:	f819 3003 	ldrb.w	r3, [r9, r3]
 8009e18:	071b      	lsls	r3, r3, #28
 8009e1a:	d41a      	bmi.n	8009e52 <_scanf_chars+0x8e>
 8009e1c:	6823      	ldr	r3, [r4, #0]
 8009e1e:	06da      	lsls	r2, r3, #27
 8009e20:	bf5e      	ittt	pl
 8009e22:	682b      	ldrpl	r3, [r5, #0]
 8009e24:	781b      	ldrbpl	r3, [r3, #0]
 8009e26:	f806 3b01 	strbpl.w	r3, [r6], #1
 8009e2a:	682a      	ldr	r2, [r5, #0]
 8009e2c:	686b      	ldr	r3, [r5, #4]
 8009e2e:	3201      	adds	r2, #1
 8009e30:	602a      	str	r2, [r5, #0]
 8009e32:	68a2      	ldr	r2, [r4, #8]
 8009e34:	3b01      	subs	r3, #1
 8009e36:	3a01      	subs	r2, #1
 8009e38:	606b      	str	r3, [r5, #4]
 8009e3a:	3701      	adds	r7, #1
 8009e3c:	60a2      	str	r2, [r4, #8]
 8009e3e:	b142      	cbz	r2, 8009e52 <_scanf_chars+0x8e>
 8009e40:	2b00      	cmp	r3, #0
 8009e42:	dcd7      	bgt.n	8009df4 <_scanf_chars+0x30>
 8009e44:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009e48:	4629      	mov	r1, r5
 8009e4a:	4640      	mov	r0, r8
 8009e4c:	4798      	blx	r3
 8009e4e:	2800      	cmp	r0, #0
 8009e50:	d0d0      	beq.n	8009df4 <_scanf_chars+0x30>
 8009e52:	6823      	ldr	r3, [r4, #0]
 8009e54:	f013 0310 	ands.w	r3, r3, #16
 8009e58:	d105      	bne.n	8009e66 <_scanf_chars+0xa2>
 8009e5a:	68e2      	ldr	r2, [r4, #12]
 8009e5c:	3201      	adds	r2, #1
 8009e5e:	60e2      	str	r2, [r4, #12]
 8009e60:	69a2      	ldr	r2, [r4, #24]
 8009e62:	b102      	cbz	r2, 8009e66 <_scanf_chars+0xa2>
 8009e64:	7033      	strb	r3, [r6, #0]
 8009e66:	6923      	ldr	r3, [r4, #16]
 8009e68:	443b      	add	r3, r7
 8009e6a:	6123      	str	r3, [r4, #16]
 8009e6c:	2000      	movs	r0, #0
 8009e6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009e72:	bf00      	nop
 8009e74:	0800ca31 	.word	0x0800ca31

08009e78 <_scanf_i>:
 8009e78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009e7c:	4698      	mov	r8, r3
 8009e7e:	4b74      	ldr	r3, [pc, #464]	@ (800a050 <_scanf_i+0x1d8>)
 8009e80:	460c      	mov	r4, r1
 8009e82:	4682      	mov	sl, r0
 8009e84:	4616      	mov	r6, r2
 8009e86:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 8009e8a:	b087      	sub	sp, #28
 8009e8c:	ab03      	add	r3, sp, #12
 8009e8e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8009e92:	4b70      	ldr	r3, [pc, #448]	@ (800a054 <_scanf_i+0x1dc>)
 8009e94:	69a1      	ldr	r1, [r4, #24]
 8009e96:	4a70      	ldr	r2, [pc, #448]	@ (800a058 <_scanf_i+0x1e0>)
 8009e98:	2903      	cmp	r1, #3
 8009e9a:	bf08      	it	eq
 8009e9c:	461a      	moveq	r2, r3
 8009e9e:	68a3      	ldr	r3, [r4, #8]
 8009ea0:	9201      	str	r2, [sp, #4]
 8009ea2:	1e5a      	subs	r2, r3, #1
 8009ea4:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8009ea8:	bf88      	it	hi
 8009eaa:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8009eae:	4627      	mov	r7, r4
 8009eb0:	bf82      	ittt	hi
 8009eb2:	eb03 0905 	addhi.w	r9, r3, r5
 8009eb6:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8009eba:	60a3      	strhi	r3, [r4, #8]
 8009ebc:	f857 3b1c 	ldr.w	r3, [r7], #28
 8009ec0:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 8009ec4:	bf98      	it	ls
 8009ec6:	f04f 0900 	movls.w	r9, #0
 8009eca:	6023      	str	r3, [r4, #0]
 8009ecc:	463d      	mov	r5, r7
 8009ece:	f04f 0b00 	mov.w	fp, #0
 8009ed2:	6831      	ldr	r1, [r6, #0]
 8009ed4:	ab03      	add	r3, sp, #12
 8009ed6:	7809      	ldrb	r1, [r1, #0]
 8009ed8:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8009edc:	2202      	movs	r2, #2
 8009ede:	f7f6 f97f 	bl	80001e0 <memchr>
 8009ee2:	b328      	cbz	r0, 8009f30 <_scanf_i+0xb8>
 8009ee4:	f1bb 0f01 	cmp.w	fp, #1
 8009ee8:	d159      	bne.n	8009f9e <_scanf_i+0x126>
 8009eea:	6862      	ldr	r2, [r4, #4]
 8009eec:	b92a      	cbnz	r2, 8009efa <_scanf_i+0x82>
 8009eee:	6822      	ldr	r2, [r4, #0]
 8009ef0:	2108      	movs	r1, #8
 8009ef2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef6:	6061      	str	r1, [r4, #4]
 8009ef8:	6022      	str	r2, [r4, #0]
 8009efa:	6822      	ldr	r2, [r4, #0]
 8009efc:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 8009f00:	6022      	str	r2, [r4, #0]
 8009f02:	68a2      	ldr	r2, [r4, #8]
 8009f04:	1e51      	subs	r1, r2, #1
 8009f06:	60a1      	str	r1, [r4, #8]
 8009f08:	b192      	cbz	r2, 8009f30 <_scanf_i+0xb8>
 8009f0a:	6832      	ldr	r2, [r6, #0]
 8009f0c:	1c51      	adds	r1, r2, #1
 8009f0e:	6031      	str	r1, [r6, #0]
 8009f10:	7812      	ldrb	r2, [r2, #0]
 8009f12:	f805 2b01 	strb.w	r2, [r5], #1
 8009f16:	6872      	ldr	r2, [r6, #4]
 8009f18:	3a01      	subs	r2, #1
 8009f1a:	2a00      	cmp	r2, #0
 8009f1c:	6072      	str	r2, [r6, #4]
 8009f1e:	dc07      	bgt.n	8009f30 <_scanf_i+0xb8>
 8009f20:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 8009f24:	4631      	mov	r1, r6
 8009f26:	4650      	mov	r0, sl
 8009f28:	4790      	blx	r2
 8009f2a:	2800      	cmp	r0, #0
 8009f2c:	f040 8085 	bne.w	800a03a <_scanf_i+0x1c2>
 8009f30:	f10b 0b01 	add.w	fp, fp, #1
 8009f34:	f1bb 0f03 	cmp.w	fp, #3
 8009f38:	d1cb      	bne.n	8009ed2 <_scanf_i+0x5a>
 8009f3a:	6863      	ldr	r3, [r4, #4]
 8009f3c:	b90b      	cbnz	r3, 8009f42 <_scanf_i+0xca>
 8009f3e:	230a      	movs	r3, #10
 8009f40:	6063      	str	r3, [r4, #4]
 8009f42:	6863      	ldr	r3, [r4, #4]
 8009f44:	4945      	ldr	r1, [pc, #276]	@ (800a05c <_scanf_i+0x1e4>)
 8009f46:	6960      	ldr	r0, [r4, #20]
 8009f48:	1ac9      	subs	r1, r1, r3
 8009f4a:	f000 f947 	bl	800a1dc <__sccl>
 8009f4e:	f04f 0b00 	mov.w	fp, #0
 8009f52:	68a3      	ldr	r3, [r4, #8]
 8009f54:	6822      	ldr	r2, [r4, #0]
 8009f56:	2b00      	cmp	r3, #0
 8009f58:	d03d      	beq.n	8009fd6 <_scanf_i+0x15e>
 8009f5a:	6831      	ldr	r1, [r6, #0]
 8009f5c:	6960      	ldr	r0, [r4, #20]
 8009f5e:	f891 c000 	ldrb.w	ip, [r1]
 8009f62:	f810 000c 	ldrb.w	r0, [r0, ip]
 8009f66:	2800      	cmp	r0, #0
 8009f68:	d035      	beq.n	8009fd6 <_scanf_i+0x15e>
 8009f6a:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 8009f6e:	d124      	bne.n	8009fba <_scanf_i+0x142>
 8009f70:	0510      	lsls	r0, r2, #20
 8009f72:	d522      	bpl.n	8009fba <_scanf_i+0x142>
 8009f74:	f10b 0b01 	add.w	fp, fp, #1
 8009f78:	f1b9 0f00 	cmp.w	r9, #0
 8009f7c:	d003      	beq.n	8009f86 <_scanf_i+0x10e>
 8009f7e:	3301      	adds	r3, #1
 8009f80:	f109 39ff 	add.w	r9, r9, #4294967295
 8009f84:	60a3      	str	r3, [r4, #8]
 8009f86:	6873      	ldr	r3, [r6, #4]
 8009f88:	3b01      	subs	r3, #1
 8009f8a:	2b00      	cmp	r3, #0
 8009f8c:	6073      	str	r3, [r6, #4]
 8009f8e:	dd1b      	ble.n	8009fc8 <_scanf_i+0x150>
 8009f90:	6833      	ldr	r3, [r6, #0]
 8009f92:	3301      	adds	r3, #1
 8009f94:	6033      	str	r3, [r6, #0]
 8009f96:	68a3      	ldr	r3, [r4, #8]
 8009f98:	3b01      	subs	r3, #1
 8009f9a:	60a3      	str	r3, [r4, #8]
 8009f9c:	e7d9      	b.n	8009f52 <_scanf_i+0xda>
 8009f9e:	f1bb 0f02 	cmp.w	fp, #2
 8009fa2:	d1ae      	bne.n	8009f02 <_scanf_i+0x8a>
 8009fa4:	6822      	ldr	r2, [r4, #0]
 8009fa6:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 8009faa:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8009fae:	d1bf      	bne.n	8009f30 <_scanf_i+0xb8>
 8009fb0:	2110      	movs	r1, #16
 8009fb2:	6061      	str	r1, [r4, #4]
 8009fb4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009fb8:	e7a2      	b.n	8009f00 <_scanf_i+0x88>
 8009fba:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 8009fbe:	6022      	str	r2, [r4, #0]
 8009fc0:	780b      	ldrb	r3, [r1, #0]
 8009fc2:	f805 3b01 	strb.w	r3, [r5], #1
 8009fc6:	e7de      	b.n	8009f86 <_scanf_i+0x10e>
 8009fc8:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8009fcc:	4631      	mov	r1, r6
 8009fce:	4650      	mov	r0, sl
 8009fd0:	4798      	blx	r3
 8009fd2:	2800      	cmp	r0, #0
 8009fd4:	d0df      	beq.n	8009f96 <_scanf_i+0x11e>
 8009fd6:	6823      	ldr	r3, [r4, #0]
 8009fd8:	05d9      	lsls	r1, r3, #23
 8009fda:	d50d      	bpl.n	8009ff8 <_scanf_i+0x180>
 8009fdc:	42bd      	cmp	r5, r7
 8009fde:	d909      	bls.n	8009ff4 <_scanf_i+0x17c>
 8009fe0:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8009fe4:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8009fe8:	4632      	mov	r2, r6
 8009fea:	4650      	mov	r0, sl
 8009fec:	4798      	blx	r3
 8009fee:	f105 39ff 	add.w	r9, r5, #4294967295
 8009ff2:	464d      	mov	r5, r9
 8009ff4:	42bd      	cmp	r5, r7
 8009ff6:	d028      	beq.n	800a04a <_scanf_i+0x1d2>
 8009ff8:	6822      	ldr	r2, [r4, #0]
 8009ffa:	f012 0210 	ands.w	r2, r2, #16
 8009ffe:	d113      	bne.n	800a028 <_scanf_i+0x1b0>
 800a000:	702a      	strb	r2, [r5, #0]
 800a002:	6863      	ldr	r3, [r4, #4]
 800a004:	9e01      	ldr	r6, [sp, #4]
 800a006:	4639      	mov	r1, r7
 800a008:	4650      	mov	r0, sl
 800a00a:	47b0      	blx	r6
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	6821      	ldr	r1, [r4, #0]
 800a012:	1d1a      	adds	r2, r3, #4
 800a014:	f8c8 2000 	str.w	r2, [r8]
 800a018:	f011 0f20 	tst.w	r1, #32
 800a01c:	681b      	ldr	r3, [r3, #0]
 800a01e:	d00f      	beq.n	800a040 <_scanf_i+0x1c8>
 800a020:	6018      	str	r0, [r3, #0]
 800a022:	68e3      	ldr	r3, [r4, #12]
 800a024:	3301      	adds	r3, #1
 800a026:	60e3      	str	r3, [r4, #12]
 800a028:	6923      	ldr	r3, [r4, #16]
 800a02a:	1bed      	subs	r5, r5, r7
 800a02c:	445d      	add	r5, fp
 800a02e:	442b      	add	r3, r5
 800a030:	6123      	str	r3, [r4, #16]
 800a032:	2000      	movs	r0, #0
 800a034:	b007      	add	sp, #28
 800a036:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a03a:	f04f 0b00 	mov.w	fp, #0
 800a03e:	e7ca      	b.n	8009fd6 <_scanf_i+0x15e>
 800a040:	07ca      	lsls	r2, r1, #31
 800a042:	bf4c      	ite	mi
 800a044:	8018      	strhmi	r0, [r3, #0]
 800a046:	6018      	strpl	r0, [r3, #0]
 800a048:	e7eb      	b.n	800a022 <_scanf_i+0x1aa>
 800a04a:	2001      	movs	r0, #1
 800a04c:	e7f2      	b.n	800a034 <_scanf_i+0x1bc>
 800a04e:	bf00      	nop
 800a050:	0800c6a0 	.word	0x0800c6a0
 800a054:	08009761 	.word	0x08009761
 800a058:	0800a489 	.word	0x0800a489
 800a05c:	0800cb52 	.word	0x0800cb52

0800a060 <__sflush_r>:
 800a060:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a064:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a068:	0716      	lsls	r6, r2, #28
 800a06a:	4605      	mov	r5, r0
 800a06c:	460c      	mov	r4, r1
 800a06e:	d454      	bmi.n	800a11a <__sflush_r+0xba>
 800a070:	684b      	ldr	r3, [r1, #4]
 800a072:	2b00      	cmp	r3, #0
 800a074:	dc02      	bgt.n	800a07c <__sflush_r+0x1c>
 800a076:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a078:	2b00      	cmp	r3, #0
 800a07a:	dd48      	ble.n	800a10e <__sflush_r+0xae>
 800a07c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a07e:	2e00      	cmp	r6, #0
 800a080:	d045      	beq.n	800a10e <__sflush_r+0xae>
 800a082:	2300      	movs	r3, #0
 800a084:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a088:	682f      	ldr	r7, [r5, #0]
 800a08a:	6a21      	ldr	r1, [r4, #32]
 800a08c:	602b      	str	r3, [r5, #0]
 800a08e:	d030      	beq.n	800a0f2 <__sflush_r+0x92>
 800a090:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a092:	89a3      	ldrh	r3, [r4, #12]
 800a094:	0759      	lsls	r1, r3, #29
 800a096:	d505      	bpl.n	800a0a4 <__sflush_r+0x44>
 800a098:	6863      	ldr	r3, [r4, #4]
 800a09a:	1ad2      	subs	r2, r2, r3
 800a09c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a09e:	b10b      	cbz	r3, 800a0a4 <__sflush_r+0x44>
 800a0a0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a0a2:	1ad2      	subs	r2, r2, r3
 800a0a4:	2300      	movs	r3, #0
 800a0a6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a0a8:	6a21      	ldr	r1, [r4, #32]
 800a0aa:	4628      	mov	r0, r5
 800a0ac:	47b0      	blx	r6
 800a0ae:	1c43      	adds	r3, r0, #1
 800a0b0:	89a3      	ldrh	r3, [r4, #12]
 800a0b2:	d106      	bne.n	800a0c2 <__sflush_r+0x62>
 800a0b4:	6829      	ldr	r1, [r5, #0]
 800a0b6:	291d      	cmp	r1, #29
 800a0b8:	d82b      	bhi.n	800a112 <__sflush_r+0xb2>
 800a0ba:	4a2a      	ldr	r2, [pc, #168]	@ (800a164 <__sflush_r+0x104>)
 800a0bc:	410a      	asrs	r2, r1
 800a0be:	07d6      	lsls	r6, r2, #31
 800a0c0:	d427      	bmi.n	800a112 <__sflush_r+0xb2>
 800a0c2:	2200      	movs	r2, #0
 800a0c4:	6062      	str	r2, [r4, #4]
 800a0c6:	04d9      	lsls	r1, r3, #19
 800a0c8:	6922      	ldr	r2, [r4, #16]
 800a0ca:	6022      	str	r2, [r4, #0]
 800a0cc:	d504      	bpl.n	800a0d8 <__sflush_r+0x78>
 800a0ce:	1c42      	adds	r2, r0, #1
 800a0d0:	d101      	bne.n	800a0d6 <__sflush_r+0x76>
 800a0d2:	682b      	ldr	r3, [r5, #0]
 800a0d4:	b903      	cbnz	r3, 800a0d8 <__sflush_r+0x78>
 800a0d6:	6560      	str	r0, [r4, #84]	@ 0x54
 800a0d8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a0da:	602f      	str	r7, [r5, #0]
 800a0dc:	b1b9      	cbz	r1, 800a10e <__sflush_r+0xae>
 800a0de:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a0e2:	4299      	cmp	r1, r3
 800a0e4:	d002      	beq.n	800a0ec <__sflush_r+0x8c>
 800a0e6:	4628      	mov	r0, r5
 800a0e8:	f7fe f9c2 	bl	8008470 <_free_r>
 800a0ec:	2300      	movs	r3, #0
 800a0ee:	6363      	str	r3, [r4, #52]	@ 0x34
 800a0f0:	e00d      	b.n	800a10e <__sflush_r+0xae>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4628      	mov	r0, r5
 800a0f6:	47b0      	blx	r6
 800a0f8:	4602      	mov	r2, r0
 800a0fa:	1c50      	adds	r0, r2, #1
 800a0fc:	d1c9      	bne.n	800a092 <__sflush_r+0x32>
 800a0fe:	682b      	ldr	r3, [r5, #0]
 800a100:	2b00      	cmp	r3, #0
 800a102:	d0c6      	beq.n	800a092 <__sflush_r+0x32>
 800a104:	2b1d      	cmp	r3, #29
 800a106:	d001      	beq.n	800a10c <__sflush_r+0xac>
 800a108:	2b16      	cmp	r3, #22
 800a10a:	d11e      	bne.n	800a14a <__sflush_r+0xea>
 800a10c:	602f      	str	r7, [r5, #0]
 800a10e:	2000      	movs	r0, #0
 800a110:	e022      	b.n	800a158 <__sflush_r+0xf8>
 800a112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a116:	b21b      	sxth	r3, r3
 800a118:	e01b      	b.n	800a152 <__sflush_r+0xf2>
 800a11a:	690f      	ldr	r7, [r1, #16]
 800a11c:	2f00      	cmp	r7, #0
 800a11e:	d0f6      	beq.n	800a10e <__sflush_r+0xae>
 800a120:	0793      	lsls	r3, r2, #30
 800a122:	680e      	ldr	r6, [r1, #0]
 800a124:	bf08      	it	eq
 800a126:	694b      	ldreq	r3, [r1, #20]
 800a128:	600f      	str	r7, [r1, #0]
 800a12a:	bf18      	it	ne
 800a12c:	2300      	movne	r3, #0
 800a12e:	eba6 0807 	sub.w	r8, r6, r7
 800a132:	608b      	str	r3, [r1, #8]
 800a134:	f1b8 0f00 	cmp.w	r8, #0
 800a138:	dde9      	ble.n	800a10e <__sflush_r+0xae>
 800a13a:	6a21      	ldr	r1, [r4, #32]
 800a13c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a13e:	4643      	mov	r3, r8
 800a140:	463a      	mov	r2, r7
 800a142:	4628      	mov	r0, r5
 800a144:	47b0      	blx	r6
 800a146:	2800      	cmp	r0, #0
 800a148:	dc08      	bgt.n	800a15c <__sflush_r+0xfc>
 800a14a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a14e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a152:	81a3      	strh	r3, [r4, #12]
 800a154:	f04f 30ff 	mov.w	r0, #4294967295
 800a158:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a15c:	4407      	add	r7, r0
 800a15e:	eba8 0800 	sub.w	r8, r8, r0
 800a162:	e7e7      	b.n	800a134 <__sflush_r+0xd4>
 800a164:	dfbffffe 	.word	0xdfbffffe

0800a168 <_fflush_r>:
 800a168:	b538      	push	{r3, r4, r5, lr}
 800a16a:	690b      	ldr	r3, [r1, #16]
 800a16c:	4605      	mov	r5, r0
 800a16e:	460c      	mov	r4, r1
 800a170:	b913      	cbnz	r3, 800a178 <_fflush_r+0x10>
 800a172:	2500      	movs	r5, #0
 800a174:	4628      	mov	r0, r5
 800a176:	bd38      	pop	{r3, r4, r5, pc}
 800a178:	b118      	cbz	r0, 800a182 <_fflush_r+0x1a>
 800a17a:	6a03      	ldr	r3, [r0, #32]
 800a17c:	b90b      	cbnz	r3, 800a182 <_fflush_r+0x1a>
 800a17e:	f7fd f93d 	bl	80073fc <__sinit>
 800a182:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a186:	2b00      	cmp	r3, #0
 800a188:	d0f3      	beq.n	800a172 <_fflush_r+0xa>
 800a18a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a18c:	07d0      	lsls	r0, r2, #31
 800a18e:	d404      	bmi.n	800a19a <_fflush_r+0x32>
 800a190:	0599      	lsls	r1, r3, #22
 800a192:	d402      	bmi.n	800a19a <_fflush_r+0x32>
 800a194:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a196:	f7fd fae2 	bl	800775e <__retarget_lock_acquire_recursive>
 800a19a:	4628      	mov	r0, r5
 800a19c:	4621      	mov	r1, r4
 800a19e:	f7ff ff5f 	bl	800a060 <__sflush_r>
 800a1a2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a1a4:	07da      	lsls	r2, r3, #31
 800a1a6:	4605      	mov	r5, r0
 800a1a8:	d4e4      	bmi.n	800a174 <_fflush_r+0xc>
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	059b      	lsls	r3, r3, #22
 800a1ae:	d4e1      	bmi.n	800a174 <_fflush_r+0xc>
 800a1b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a1b2:	f7fd fad5 	bl	8007760 <__retarget_lock_release_recursive>
 800a1b6:	e7dd      	b.n	800a174 <_fflush_r+0xc>

0800a1b8 <fiprintf>:
 800a1b8:	b40e      	push	{r1, r2, r3}
 800a1ba:	b503      	push	{r0, r1, lr}
 800a1bc:	4601      	mov	r1, r0
 800a1be:	ab03      	add	r3, sp, #12
 800a1c0:	4805      	ldr	r0, [pc, #20]	@ (800a1d8 <fiprintf+0x20>)
 800a1c2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a1c6:	6800      	ldr	r0, [r0, #0]
 800a1c8:	9301      	str	r3, [sp, #4]
 800a1ca:	f000 f989 	bl	800a4e0 <_vfiprintf_r>
 800a1ce:	b002      	add	sp, #8
 800a1d0:	f85d eb04 	ldr.w	lr, [sp], #4
 800a1d4:	b003      	add	sp, #12
 800a1d6:	4770      	bx	lr
 800a1d8:	200001c4 	.word	0x200001c4

0800a1dc <__sccl>:
 800a1dc:	b570      	push	{r4, r5, r6, lr}
 800a1de:	780b      	ldrb	r3, [r1, #0]
 800a1e0:	4604      	mov	r4, r0
 800a1e2:	2b5e      	cmp	r3, #94	@ 0x5e
 800a1e4:	bf0b      	itete	eq
 800a1e6:	784b      	ldrbeq	r3, [r1, #1]
 800a1e8:	1c4a      	addne	r2, r1, #1
 800a1ea:	1c8a      	addeq	r2, r1, #2
 800a1ec:	2100      	movne	r1, #0
 800a1ee:	bf08      	it	eq
 800a1f0:	2101      	moveq	r1, #1
 800a1f2:	3801      	subs	r0, #1
 800a1f4:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a1f8:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a1fc:	42a8      	cmp	r0, r5
 800a1fe:	d1fb      	bne.n	800a1f8 <__sccl+0x1c>
 800a200:	b90b      	cbnz	r3, 800a206 <__sccl+0x2a>
 800a202:	1e50      	subs	r0, r2, #1
 800a204:	bd70      	pop	{r4, r5, r6, pc}
 800a206:	f081 0101 	eor.w	r1, r1, #1
 800a20a:	54e1      	strb	r1, [r4, r3]
 800a20c:	4610      	mov	r0, r2
 800a20e:	4602      	mov	r2, r0
 800a210:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a214:	2d2d      	cmp	r5, #45	@ 0x2d
 800a216:	d005      	beq.n	800a224 <__sccl+0x48>
 800a218:	2d5d      	cmp	r5, #93	@ 0x5d
 800a21a:	d016      	beq.n	800a24a <__sccl+0x6e>
 800a21c:	2d00      	cmp	r5, #0
 800a21e:	d0f1      	beq.n	800a204 <__sccl+0x28>
 800a220:	462b      	mov	r3, r5
 800a222:	e7f2      	b.n	800a20a <__sccl+0x2e>
 800a224:	7846      	ldrb	r6, [r0, #1]
 800a226:	2e5d      	cmp	r6, #93	@ 0x5d
 800a228:	d0fa      	beq.n	800a220 <__sccl+0x44>
 800a22a:	42b3      	cmp	r3, r6
 800a22c:	dcf8      	bgt.n	800a220 <__sccl+0x44>
 800a22e:	3002      	adds	r0, #2
 800a230:	461a      	mov	r2, r3
 800a232:	3201      	adds	r2, #1
 800a234:	4296      	cmp	r6, r2
 800a236:	54a1      	strb	r1, [r4, r2]
 800a238:	dcfb      	bgt.n	800a232 <__sccl+0x56>
 800a23a:	1af2      	subs	r2, r6, r3
 800a23c:	3a01      	subs	r2, #1
 800a23e:	1c5d      	adds	r5, r3, #1
 800a240:	42b3      	cmp	r3, r6
 800a242:	bfa8      	it	ge
 800a244:	2200      	movge	r2, #0
 800a246:	18ab      	adds	r3, r5, r2
 800a248:	e7e1      	b.n	800a20e <__sccl+0x32>
 800a24a:	4610      	mov	r0, r2
 800a24c:	e7da      	b.n	800a204 <__sccl+0x28>

0800a24e <__submore>:
 800a24e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a252:	460c      	mov	r4, r1
 800a254:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a256:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a25a:	4299      	cmp	r1, r3
 800a25c:	d11d      	bne.n	800a29a <__submore+0x4c>
 800a25e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a262:	f7fe fcb3 	bl	8008bcc <_malloc_r>
 800a266:	b918      	cbnz	r0, 800a270 <__submore+0x22>
 800a268:	f04f 30ff 	mov.w	r0, #4294967295
 800a26c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a270:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a274:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a276:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a27a:	6360      	str	r0, [r4, #52]	@ 0x34
 800a27c:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a280:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a284:	f880 33fe 	strb.w	r3, [r0, #1022]	@ 0x3fe
 800a288:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a28c:	f880 33fd 	strb.w	r3, [r0, #1021]	@ 0x3fd
 800a290:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a294:	6020      	str	r0, [r4, #0]
 800a296:	2000      	movs	r0, #0
 800a298:	e7e8      	b.n	800a26c <__submore+0x1e>
 800a29a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a29c:	0077      	lsls	r7, r6, #1
 800a29e:	463a      	mov	r2, r7
 800a2a0:	f000 f855 	bl	800a34e <_realloc_r>
 800a2a4:	4605      	mov	r5, r0
 800a2a6:	2800      	cmp	r0, #0
 800a2a8:	d0de      	beq.n	800a268 <__submore+0x1a>
 800a2aa:	eb00 0806 	add.w	r8, r0, r6
 800a2ae:	4601      	mov	r1, r0
 800a2b0:	4632      	mov	r2, r6
 800a2b2:	4640      	mov	r0, r8
 800a2b4:	f7fd fa55 	bl	8007762 <memcpy>
 800a2b8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a2bc:	f8c4 8000 	str.w	r8, [r4]
 800a2c0:	e7e9      	b.n	800a296 <__submore+0x48>

0800a2c2 <memmove>:
 800a2c2:	4288      	cmp	r0, r1
 800a2c4:	b510      	push	{r4, lr}
 800a2c6:	eb01 0402 	add.w	r4, r1, r2
 800a2ca:	d902      	bls.n	800a2d2 <memmove+0x10>
 800a2cc:	4284      	cmp	r4, r0
 800a2ce:	4623      	mov	r3, r4
 800a2d0:	d807      	bhi.n	800a2e2 <memmove+0x20>
 800a2d2:	1e43      	subs	r3, r0, #1
 800a2d4:	42a1      	cmp	r1, r4
 800a2d6:	d008      	beq.n	800a2ea <memmove+0x28>
 800a2d8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a2dc:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a2e0:	e7f8      	b.n	800a2d4 <memmove+0x12>
 800a2e2:	4402      	add	r2, r0
 800a2e4:	4601      	mov	r1, r0
 800a2e6:	428a      	cmp	r2, r1
 800a2e8:	d100      	bne.n	800a2ec <memmove+0x2a>
 800a2ea:	bd10      	pop	{r4, pc}
 800a2ec:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a2f0:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a2f4:	e7f7      	b.n	800a2e6 <memmove+0x24>
	...

0800a2f8 <_sbrk_r>:
 800a2f8:	b538      	push	{r3, r4, r5, lr}
 800a2fa:	4d06      	ldr	r5, [pc, #24]	@ (800a314 <_sbrk_r+0x1c>)
 800a2fc:	2300      	movs	r3, #0
 800a2fe:	4604      	mov	r4, r0
 800a300:	4608      	mov	r0, r1
 800a302:	602b      	str	r3, [r5, #0]
 800a304:	f7f7 fee2 	bl	80020cc <_sbrk>
 800a308:	1c43      	adds	r3, r0, #1
 800a30a:	d102      	bne.n	800a312 <_sbrk_r+0x1a>
 800a30c:	682b      	ldr	r3, [r5, #0]
 800a30e:	b103      	cbz	r3, 800a312 <_sbrk_r+0x1a>
 800a310:	6023      	str	r3, [r4, #0]
 800a312:	bd38      	pop	{r3, r4, r5, pc}
 800a314:	2000094c 	.word	0x2000094c

0800a318 <abort>:
 800a318:	b508      	push	{r3, lr}
 800a31a:	2006      	movs	r0, #6
 800a31c:	f000 fab4 	bl	800a888 <raise>
 800a320:	2001      	movs	r0, #1
 800a322:	f7f7 fe5b 	bl	8001fdc <_exit>

0800a326 <_calloc_r>:
 800a326:	b570      	push	{r4, r5, r6, lr}
 800a328:	fba1 5402 	umull	r5, r4, r1, r2
 800a32c:	b93c      	cbnz	r4, 800a33e <_calloc_r+0x18>
 800a32e:	4629      	mov	r1, r5
 800a330:	f7fe fc4c 	bl	8008bcc <_malloc_r>
 800a334:	4606      	mov	r6, r0
 800a336:	b928      	cbnz	r0, 800a344 <_calloc_r+0x1e>
 800a338:	2600      	movs	r6, #0
 800a33a:	4630      	mov	r0, r6
 800a33c:	bd70      	pop	{r4, r5, r6, pc}
 800a33e:	220c      	movs	r2, #12
 800a340:	6002      	str	r2, [r0, #0]
 800a342:	e7f9      	b.n	800a338 <_calloc_r+0x12>
 800a344:	462a      	mov	r2, r5
 800a346:	4621      	mov	r1, r4
 800a348:	f7fd f91d 	bl	8007586 <memset>
 800a34c:	e7f5      	b.n	800a33a <_calloc_r+0x14>

0800a34e <_realloc_r>:
 800a34e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a352:	4680      	mov	r8, r0
 800a354:	4615      	mov	r5, r2
 800a356:	460c      	mov	r4, r1
 800a358:	b921      	cbnz	r1, 800a364 <_realloc_r+0x16>
 800a35a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a35e:	4611      	mov	r1, r2
 800a360:	f7fe bc34 	b.w	8008bcc <_malloc_r>
 800a364:	b92a      	cbnz	r2, 800a372 <_realloc_r+0x24>
 800a366:	f7fe f883 	bl	8008470 <_free_r>
 800a36a:	2400      	movs	r4, #0
 800a36c:	4620      	mov	r0, r4
 800a36e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a372:	f000 faa5 	bl	800a8c0 <_malloc_usable_size_r>
 800a376:	4285      	cmp	r5, r0
 800a378:	4606      	mov	r6, r0
 800a37a:	d802      	bhi.n	800a382 <_realloc_r+0x34>
 800a37c:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a380:	d8f4      	bhi.n	800a36c <_realloc_r+0x1e>
 800a382:	4629      	mov	r1, r5
 800a384:	4640      	mov	r0, r8
 800a386:	f7fe fc21 	bl	8008bcc <_malloc_r>
 800a38a:	4607      	mov	r7, r0
 800a38c:	2800      	cmp	r0, #0
 800a38e:	d0ec      	beq.n	800a36a <_realloc_r+0x1c>
 800a390:	42b5      	cmp	r5, r6
 800a392:	462a      	mov	r2, r5
 800a394:	4621      	mov	r1, r4
 800a396:	bf28      	it	cs
 800a398:	4632      	movcs	r2, r6
 800a39a:	f7fd f9e2 	bl	8007762 <memcpy>
 800a39e:	4621      	mov	r1, r4
 800a3a0:	4640      	mov	r0, r8
 800a3a2:	f7fe f865 	bl	8008470 <_free_r>
 800a3a6:	463c      	mov	r4, r7
 800a3a8:	e7e0      	b.n	800a36c <_realloc_r+0x1e>
	...

0800a3ac <_strtoul_l.constprop.0>:
 800a3ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a3b0:	4e34      	ldr	r6, [pc, #208]	@ (800a484 <_strtoul_l.constprop.0+0xd8>)
 800a3b2:	4686      	mov	lr, r0
 800a3b4:	460d      	mov	r5, r1
 800a3b6:	4628      	mov	r0, r5
 800a3b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a3bc:	5d37      	ldrb	r7, [r6, r4]
 800a3be:	f017 0708 	ands.w	r7, r7, #8
 800a3c2:	d1f8      	bne.n	800a3b6 <_strtoul_l.constprop.0+0xa>
 800a3c4:	2c2d      	cmp	r4, #45	@ 0x2d
 800a3c6:	d12f      	bne.n	800a428 <_strtoul_l.constprop.0+0x7c>
 800a3c8:	782c      	ldrb	r4, [r5, #0]
 800a3ca:	2701      	movs	r7, #1
 800a3cc:	1c85      	adds	r5, r0, #2
 800a3ce:	f033 0010 	bics.w	r0, r3, #16
 800a3d2:	d109      	bne.n	800a3e8 <_strtoul_l.constprop.0+0x3c>
 800a3d4:	2c30      	cmp	r4, #48	@ 0x30
 800a3d6:	d12c      	bne.n	800a432 <_strtoul_l.constprop.0+0x86>
 800a3d8:	7828      	ldrb	r0, [r5, #0]
 800a3da:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a3de:	2858      	cmp	r0, #88	@ 0x58
 800a3e0:	d127      	bne.n	800a432 <_strtoul_l.constprop.0+0x86>
 800a3e2:	786c      	ldrb	r4, [r5, #1]
 800a3e4:	2310      	movs	r3, #16
 800a3e6:	3502      	adds	r5, #2
 800a3e8:	f04f 38ff 	mov.w	r8, #4294967295
 800a3ec:	2600      	movs	r6, #0
 800a3ee:	fbb8 f8f3 	udiv	r8, r8, r3
 800a3f2:	fb03 f908 	mul.w	r9, r3, r8
 800a3f6:	ea6f 0909 	mvn.w	r9, r9
 800a3fa:	4630      	mov	r0, r6
 800a3fc:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a400:	f1bc 0f09 	cmp.w	ip, #9
 800a404:	d81c      	bhi.n	800a440 <_strtoul_l.constprop.0+0x94>
 800a406:	4664      	mov	r4, ip
 800a408:	42a3      	cmp	r3, r4
 800a40a:	dd2a      	ble.n	800a462 <_strtoul_l.constprop.0+0xb6>
 800a40c:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a410:	d007      	beq.n	800a422 <_strtoul_l.constprop.0+0x76>
 800a412:	4580      	cmp	r8, r0
 800a414:	d322      	bcc.n	800a45c <_strtoul_l.constprop.0+0xb0>
 800a416:	d101      	bne.n	800a41c <_strtoul_l.constprop.0+0x70>
 800a418:	45a1      	cmp	r9, r4
 800a41a:	db1f      	blt.n	800a45c <_strtoul_l.constprop.0+0xb0>
 800a41c:	fb00 4003 	mla	r0, r0, r3, r4
 800a420:	2601      	movs	r6, #1
 800a422:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a426:	e7e9      	b.n	800a3fc <_strtoul_l.constprop.0+0x50>
 800a428:	2c2b      	cmp	r4, #43	@ 0x2b
 800a42a:	bf04      	itt	eq
 800a42c:	782c      	ldrbeq	r4, [r5, #0]
 800a42e:	1c85      	addeq	r5, r0, #2
 800a430:	e7cd      	b.n	800a3ce <_strtoul_l.constprop.0+0x22>
 800a432:	2b00      	cmp	r3, #0
 800a434:	d1d8      	bne.n	800a3e8 <_strtoul_l.constprop.0+0x3c>
 800a436:	2c30      	cmp	r4, #48	@ 0x30
 800a438:	bf0c      	ite	eq
 800a43a:	2308      	moveq	r3, #8
 800a43c:	230a      	movne	r3, #10
 800a43e:	e7d3      	b.n	800a3e8 <_strtoul_l.constprop.0+0x3c>
 800a440:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a444:	f1bc 0f19 	cmp.w	ip, #25
 800a448:	d801      	bhi.n	800a44e <_strtoul_l.constprop.0+0xa2>
 800a44a:	3c37      	subs	r4, #55	@ 0x37
 800a44c:	e7dc      	b.n	800a408 <_strtoul_l.constprop.0+0x5c>
 800a44e:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a452:	f1bc 0f19 	cmp.w	ip, #25
 800a456:	d804      	bhi.n	800a462 <_strtoul_l.constprop.0+0xb6>
 800a458:	3c57      	subs	r4, #87	@ 0x57
 800a45a:	e7d5      	b.n	800a408 <_strtoul_l.constprop.0+0x5c>
 800a45c:	f04f 36ff 	mov.w	r6, #4294967295
 800a460:	e7df      	b.n	800a422 <_strtoul_l.constprop.0+0x76>
 800a462:	1c73      	adds	r3, r6, #1
 800a464:	d106      	bne.n	800a474 <_strtoul_l.constprop.0+0xc8>
 800a466:	2322      	movs	r3, #34	@ 0x22
 800a468:	f8ce 3000 	str.w	r3, [lr]
 800a46c:	4630      	mov	r0, r6
 800a46e:	b932      	cbnz	r2, 800a47e <_strtoul_l.constprop.0+0xd2>
 800a470:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a474:	b107      	cbz	r7, 800a478 <_strtoul_l.constprop.0+0xcc>
 800a476:	4240      	negs	r0, r0
 800a478:	2a00      	cmp	r2, #0
 800a47a:	d0f9      	beq.n	800a470 <_strtoul_l.constprop.0+0xc4>
 800a47c:	b106      	cbz	r6, 800a480 <_strtoul_l.constprop.0+0xd4>
 800a47e:	1e69      	subs	r1, r5, #1
 800a480:	6011      	str	r1, [r2, #0]
 800a482:	e7f5      	b.n	800a470 <_strtoul_l.constprop.0+0xc4>
 800a484:	0800ca31 	.word	0x0800ca31

0800a488 <_strtoul_r>:
 800a488:	f7ff bf90 	b.w	800a3ac <_strtoul_l.constprop.0>

0800a48c <__sfputc_r>:
 800a48c:	6893      	ldr	r3, [r2, #8]
 800a48e:	3b01      	subs	r3, #1
 800a490:	2b00      	cmp	r3, #0
 800a492:	b410      	push	{r4}
 800a494:	6093      	str	r3, [r2, #8]
 800a496:	da08      	bge.n	800a4aa <__sfputc_r+0x1e>
 800a498:	6994      	ldr	r4, [r2, #24]
 800a49a:	42a3      	cmp	r3, r4
 800a49c:	db01      	blt.n	800a4a2 <__sfputc_r+0x16>
 800a49e:	290a      	cmp	r1, #10
 800a4a0:	d103      	bne.n	800a4aa <__sfputc_r+0x1e>
 800a4a2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4a6:	f000 b933 	b.w	800a710 <__swbuf_r>
 800a4aa:	6813      	ldr	r3, [r2, #0]
 800a4ac:	1c58      	adds	r0, r3, #1
 800a4ae:	6010      	str	r0, [r2, #0]
 800a4b0:	7019      	strb	r1, [r3, #0]
 800a4b2:	4608      	mov	r0, r1
 800a4b4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a4b8:	4770      	bx	lr

0800a4ba <__sfputs_r>:
 800a4ba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4bc:	4606      	mov	r6, r0
 800a4be:	460f      	mov	r7, r1
 800a4c0:	4614      	mov	r4, r2
 800a4c2:	18d5      	adds	r5, r2, r3
 800a4c4:	42ac      	cmp	r4, r5
 800a4c6:	d101      	bne.n	800a4cc <__sfputs_r+0x12>
 800a4c8:	2000      	movs	r0, #0
 800a4ca:	e007      	b.n	800a4dc <__sfputs_r+0x22>
 800a4cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a4d0:	463a      	mov	r2, r7
 800a4d2:	4630      	mov	r0, r6
 800a4d4:	f7ff ffda 	bl	800a48c <__sfputc_r>
 800a4d8:	1c43      	adds	r3, r0, #1
 800a4da:	d1f3      	bne.n	800a4c4 <__sfputs_r+0xa>
 800a4dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a4e0 <_vfiprintf_r>:
 800a4e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4e4:	460d      	mov	r5, r1
 800a4e6:	b09d      	sub	sp, #116	@ 0x74
 800a4e8:	4614      	mov	r4, r2
 800a4ea:	4698      	mov	r8, r3
 800a4ec:	4606      	mov	r6, r0
 800a4ee:	b118      	cbz	r0, 800a4f8 <_vfiprintf_r+0x18>
 800a4f0:	6a03      	ldr	r3, [r0, #32]
 800a4f2:	b90b      	cbnz	r3, 800a4f8 <_vfiprintf_r+0x18>
 800a4f4:	f7fc ff82 	bl	80073fc <__sinit>
 800a4f8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a4fa:	07d9      	lsls	r1, r3, #31
 800a4fc:	d405      	bmi.n	800a50a <_vfiprintf_r+0x2a>
 800a4fe:	89ab      	ldrh	r3, [r5, #12]
 800a500:	059a      	lsls	r2, r3, #22
 800a502:	d402      	bmi.n	800a50a <_vfiprintf_r+0x2a>
 800a504:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a506:	f7fd f92a 	bl	800775e <__retarget_lock_acquire_recursive>
 800a50a:	89ab      	ldrh	r3, [r5, #12]
 800a50c:	071b      	lsls	r3, r3, #28
 800a50e:	d501      	bpl.n	800a514 <_vfiprintf_r+0x34>
 800a510:	692b      	ldr	r3, [r5, #16]
 800a512:	b99b      	cbnz	r3, 800a53c <_vfiprintf_r+0x5c>
 800a514:	4629      	mov	r1, r5
 800a516:	4630      	mov	r0, r6
 800a518:	f000 f938 	bl	800a78c <__swsetup_r>
 800a51c:	b170      	cbz	r0, 800a53c <_vfiprintf_r+0x5c>
 800a51e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a520:	07dc      	lsls	r4, r3, #31
 800a522:	d504      	bpl.n	800a52e <_vfiprintf_r+0x4e>
 800a524:	f04f 30ff 	mov.w	r0, #4294967295
 800a528:	b01d      	add	sp, #116	@ 0x74
 800a52a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a52e:	89ab      	ldrh	r3, [r5, #12]
 800a530:	0598      	lsls	r0, r3, #22
 800a532:	d4f7      	bmi.n	800a524 <_vfiprintf_r+0x44>
 800a534:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a536:	f7fd f913 	bl	8007760 <__retarget_lock_release_recursive>
 800a53a:	e7f3      	b.n	800a524 <_vfiprintf_r+0x44>
 800a53c:	2300      	movs	r3, #0
 800a53e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a540:	2320      	movs	r3, #32
 800a542:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a546:	f8cd 800c 	str.w	r8, [sp, #12]
 800a54a:	2330      	movs	r3, #48	@ 0x30
 800a54c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a6fc <_vfiprintf_r+0x21c>
 800a550:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a554:	f04f 0901 	mov.w	r9, #1
 800a558:	4623      	mov	r3, r4
 800a55a:	469a      	mov	sl, r3
 800a55c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a560:	b10a      	cbz	r2, 800a566 <_vfiprintf_r+0x86>
 800a562:	2a25      	cmp	r2, #37	@ 0x25
 800a564:	d1f9      	bne.n	800a55a <_vfiprintf_r+0x7a>
 800a566:	ebba 0b04 	subs.w	fp, sl, r4
 800a56a:	d00b      	beq.n	800a584 <_vfiprintf_r+0xa4>
 800a56c:	465b      	mov	r3, fp
 800a56e:	4622      	mov	r2, r4
 800a570:	4629      	mov	r1, r5
 800a572:	4630      	mov	r0, r6
 800a574:	f7ff ffa1 	bl	800a4ba <__sfputs_r>
 800a578:	3001      	adds	r0, #1
 800a57a:	f000 80a7 	beq.w	800a6cc <_vfiprintf_r+0x1ec>
 800a57e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a580:	445a      	add	r2, fp
 800a582:	9209      	str	r2, [sp, #36]	@ 0x24
 800a584:	f89a 3000 	ldrb.w	r3, [sl]
 800a588:	2b00      	cmp	r3, #0
 800a58a:	f000 809f 	beq.w	800a6cc <_vfiprintf_r+0x1ec>
 800a58e:	2300      	movs	r3, #0
 800a590:	f04f 32ff 	mov.w	r2, #4294967295
 800a594:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a598:	f10a 0a01 	add.w	sl, sl, #1
 800a59c:	9304      	str	r3, [sp, #16]
 800a59e:	9307      	str	r3, [sp, #28]
 800a5a0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a5a4:	931a      	str	r3, [sp, #104]	@ 0x68
 800a5a6:	4654      	mov	r4, sl
 800a5a8:	2205      	movs	r2, #5
 800a5aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a5ae:	4853      	ldr	r0, [pc, #332]	@ (800a6fc <_vfiprintf_r+0x21c>)
 800a5b0:	f7f5 fe16 	bl	80001e0 <memchr>
 800a5b4:	9a04      	ldr	r2, [sp, #16]
 800a5b6:	b9d8      	cbnz	r0, 800a5f0 <_vfiprintf_r+0x110>
 800a5b8:	06d1      	lsls	r1, r2, #27
 800a5ba:	bf44      	itt	mi
 800a5bc:	2320      	movmi	r3, #32
 800a5be:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5c2:	0713      	lsls	r3, r2, #28
 800a5c4:	bf44      	itt	mi
 800a5c6:	232b      	movmi	r3, #43	@ 0x2b
 800a5c8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a5cc:	f89a 3000 	ldrb.w	r3, [sl]
 800a5d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a5d2:	d015      	beq.n	800a600 <_vfiprintf_r+0x120>
 800a5d4:	9a07      	ldr	r2, [sp, #28]
 800a5d6:	4654      	mov	r4, sl
 800a5d8:	2000      	movs	r0, #0
 800a5da:	f04f 0c0a 	mov.w	ip, #10
 800a5de:	4621      	mov	r1, r4
 800a5e0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a5e4:	3b30      	subs	r3, #48	@ 0x30
 800a5e6:	2b09      	cmp	r3, #9
 800a5e8:	d94b      	bls.n	800a682 <_vfiprintf_r+0x1a2>
 800a5ea:	b1b0      	cbz	r0, 800a61a <_vfiprintf_r+0x13a>
 800a5ec:	9207      	str	r2, [sp, #28]
 800a5ee:	e014      	b.n	800a61a <_vfiprintf_r+0x13a>
 800a5f0:	eba0 0308 	sub.w	r3, r0, r8
 800a5f4:	fa09 f303 	lsl.w	r3, r9, r3
 800a5f8:	4313      	orrs	r3, r2
 800a5fa:	9304      	str	r3, [sp, #16]
 800a5fc:	46a2      	mov	sl, r4
 800a5fe:	e7d2      	b.n	800a5a6 <_vfiprintf_r+0xc6>
 800a600:	9b03      	ldr	r3, [sp, #12]
 800a602:	1d19      	adds	r1, r3, #4
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	9103      	str	r1, [sp, #12]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	bfbb      	ittet	lt
 800a60c:	425b      	neglt	r3, r3
 800a60e:	f042 0202 	orrlt.w	r2, r2, #2
 800a612:	9307      	strge	r3, [sp, #28]
 800a614:	9307      	strlt	r3, [sp, #28]
 800a616:	bfb8      	it	lt
 800a618:	9204      	strlt	r2, [sp, #16]
 800a61a:	7823      	ldrb	r3, [r4, #0]
 800a61c:	2b2e      	cmp	r3, #46	@ 0x2e
 800a61e:	d10a      	bne.n	800a636 <_vfiprintf_r+0x156>
 800a620:	7863      	ldrb	r3, [r4, #1]
 800a622:	2b2a      	cmp	r3, #42	@ 0x2a
 800a624:	d132      	bne.n	800a68c <_vfiprintf_r+0x1ac>
 800a626:	9b03      	ldr	r3, [sp, #12]
 800a628:	1d1a      	adds	r2, r3, #4
 800a62a:	681b      	ldr	r3, [r3, #0]
 800a62c:	9203      	str	r2, [sp, #12]
 800a62e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a632:	3402      	adds	r4, #2
 800a634:	9305      	str	r3, [sp, #20]
 800a636:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a70c <_vfiprintf_r+0x22c>
 800a63a:	7821      	ldrb	r1, [r4, #0]
 800a63c:	2203      	movs	r2, #3
 800a63e:	4650      	mov	r0, sl
 800a640:	f7f5 fdce 	bl	80001e0 <memchr>
 800a644:	b138      	cbz	r0, 800a656 <_vfiprintf_r+0x176>
 800a646:	9b04      	ldr	r3, [sp, #16]
 800a648:	eba0 000a 	sub.w	r0, r0, sl
 800a64c:	2240      	movs	r2, #64	@ 0x40
 800a64e:	4082      	lsls	r2, r0
 800a650:	4313      	orrs	r3, r2
 800a652:	3401      	adds	r4, #1
 800a654:	9304      	str	r3, [sp, #16]
 800a656:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a65a:	4829      	ldr	r0, [pc, #164]	@ (800a700 <_vfiprintf_r+0x220>)
 800a65c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a660:	2206      	movs	r2, #6
 800a662:	f7f5 fdbd 	bl	80001e0 <memchr>
 800a666:	2800      	cmp	r0, #0
 800a668:	d03f      	beq.n	800a6ea <_vfiprintf_r+0x20a>
 800a66a:	4b26      	ldr	r3, [pc, #152]	@ (800a704 <_vfiprintf_r+0x224>)
 800a66c:	bb1b      	cbnz	r3, 800a6b6 <_vfiprintf_r+0x1d6>
 800a66e:	9b03      	ldr	r3, [sp, #12]
 800a670:	3307      	adds	r3, #7
 800a672:	f023 0307 	bic.w	r3, r3, #7
 800a676:	3308      	adds	r3, #8
 800a678:	9303      	str	r3, [sp, #12]
 800a67a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a67c:	443b      	add	r3, r7
 800a67e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a680:	e76a      	b.n	800a558 <_vfiprintf_r+0x78>
 800a682:	fb0c 3202 	mla	r2, ip, r2, r3
 800a686:	460c      	mov	r4, r1
 800a688:	2001      	movs	r0, #1
 800a68a:	e7a8      	b.n	800a5de <_vfiprintf_r+0xfe>
 800a68c:	2300      	movs	r3, #0
 800a68e:	3401      	adds	r4, #1
 800a690:	9305      	str	r3, [sp, #20]
 800a692:	4619      	mov	r1, r3
 800a694:	f04f 0c0a 	mov.w	ip, #10
 800a698:	4620      	mov	r0, r4
 800a69a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a69e:	3a30      	subs	r2, #48	@ 0x30
 800a6a0:	2a09      	cmp	r2, #9
 800a6a2:	d903      	bls.n	800a6ac <_vfiprintf_r+0x1cc>
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d0c6      	beq.n	800a636 <_vfiprintf_r+0x156>
 800a6a8:	9105      	str	r1, [sp, #20]
 800a6aa:	e7c4      	b.n	800a636 <_vfiprintf_r+0x156>
 800a6ac:	fb0c 2101 	mla	r1, ip, r1, r2
 800a6b0:	4604      	mov	r4, r0
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	e7f0      	b.n	800a698 <_vfiprintf_r+0x1b8>
 800a6b6:	ab03      	add	r3, sp, #12
 800a6b8:	9300      	str	r3, [sp, #0]
 800a6ba:	462a      	mov	r2, r5
 800a6bc:	4b12      	ldr	r3, [pc, #72]	@ (800a708 <_vfiprintf_r+0x228>)
 800a6be:	a904      	add	r1, sp, #16
 800a6c0:	4630      	mov	r0, r6
 800a6c2:	f7fc f843 	bl	800674c <_printf_float>
 800a6c6:	4607      	mov	r7, r0
 800a6c8:	1c78      	adds	r0, r7, #1
 800a6ca:	d1d6      	bne.n	800a67a <_vfiprintf_r+0x19a>
 800a6cc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a6ce:	07d9      	lsls	r1, r3, #31
 800a6d0:	d405      	bmi.n	800a6de <_vfiprintf_r+0x1fe>
 800a6d2:	89ab      	ldrh	r3, [r5, #12]
 800a6d4:	059a      	lsls	r2, r3, #22
 800a6d6:	d402      	bmi.n	800a6de <_vfiprintf_r+0x1fe>
 800a6d8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a6da:	f7fd f841 	bl	8007760 <__retarget_lock_release_recursive>
 800a6de:	89ab      	ldrh	r3, [r5, #12]
 800a6e0:	065b      	lsls	r3, r3, #25
 800a6e2:	f53f af1f 	bmi.w	800a524 <_vfiprintf_r+0x44>
 800a6e6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a6e8:	e71e      	b.n	800a528 <_vfiprintf_r+0x48>
 800a6ea:	ab03      	add	r3, sp, #12
 800a6ec:	9300      	str	r3, [sp, #0]
 800a6ee:	462a      	mov	r2, r5
 800a6f0:	4b05      	ldr	r3, [pc, #20]	@ (800a708 <_vfiprintf_r+0x228>)
 800a6f2:	a904      	add	r1, sp, #16
 800a6f4:	4630      	mov	r0, r6
 800a6f6:	f7fc fac1 	bl	8006c7c <_printf_i>
 800a6fa:	e7e4      	b.n	800a6c6 <_vfiprintf_r+0x1e6>
 800a6fc:	0800cb31 	.word	0x0800cb31
 800a700:	0800cb3b 	.word	0x0800cb3b
 800a704:	0800674d 	.word	0x0800674d
 800a708:	0800a4bb 	.word	0x0800a4bb
 800a70c:	0800cb37 	.word	0x0800cb37

0800a710 <__swbuf_r>:
 800a710:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a712:	460e      	mov	r6, r1
 800a714:	4614      	mov	r4, r2
 800a716:	4605      	mov	r5, r0
 800a718:	b118      	cbz	r0, 800a722 <__swbuf_r+0x12>
 800a71a:	6a03      	ldr	r3, [r0, #32]
 800a71c:	b90b      	cbnz	r3, 800a722 <__swbuf_r+0x12>
 800a71e:	f7fc fe6d 	bl	80073fc <__sinit>
 800a722:	69a3      	ldr	r3, [r4, #24]
 800a724:	60a3      	str	r3, [r4, #8]
 800a726:	89a3      	ldrh	r3, [r4, #12]
 800a728:	071a      	lsls	r2, r3, #28
 800a72a:	d501      	bpl.n	800a730 <__swbuf_r+0x20>
 800a72c:	6923      	ldr	r3, [r4, #16]
 800a72e:	b943      	cbnz	r3, 800a742 <__swbuf_r+0x32>
 800a730:	4621      	mov	r1, r4
 800a732:	4628      	mov	r0, r5
 800a734:	f000 f82a 	bl	800a78c <__swsetup_r>
 800a738:	b118      	cbz	r0, 800a742 <__swbuf_r+0x32>
 800a73a:	f04f 37ff 	mov.w	r7, #4294967295
 800a73e:	4638      	mov	r0, r7
 800a740:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a742:	6823      	ldr	r3, [r4, #0]
 800a744:	6922      	ldr	r2, [r4, #16]
 800a746:	1a98      	subs	r0, r3, r2
 800a748:	6963      	ldr	r3, [r4, #20]
 800a74a:	b2f6      	uxtb	r6, r6
 800a74c:	4283      	cmp	r3, r0
 800a74e:	4637      	mov	r7, r6
 800a750:	dc05      	bgt.n	800a75e <__swbuf_r+0x4e>
 800a752:	4621      	mov	r1, r4
 800a754:	4628      	mov	r0, r5
 800a756:	f7ff fd07 	bl	800a168 <_fflush_r>
 800a75a:	2800      	cmp	r0, #0
 800a75c:	d1ed      	bne.n	800a73a <__swbuf_r+0x2a>
 800a75e:	68a3      	ldr	r3, [r4, #8]
 800a760:	3b01      	subs	r3, #1
 800a762:	60a3      	str	r3, [r4, #8]
 800a764:	6823      	ldr	r3, [r4, #0]
 800a766:	1c5a      	adds	r2, r3, #1
 800a768:	6022      	str	r2, [r4, #0]
 800a76a:	701e      	strb	r6, [r3, #0]
 800a76c:	6962      	ldr	r2, [r4, #20]
 800a76e:	1c43      	adds	r3, r0, #1
 800a770:	429a      	cmp	r2, r3
 800a772:	d004      	beq.n	800a77e <__swbuf_r+0x6e>
 800a774:	89a3      	ldrh	r3, [r4, #12]
 800a776:	07db      	lsls	r3, r3, #31
 800a778:	d5e1      	bpl.n	800a73e <__swbuf_r+0x2e>
 800a77a:	2e0a      	cmp	r6, #10
 800a77c:	d1df      	bne.n	800a73e <__swbuf_r+0x2e>
 800a77e:	4621      	mov	r1, r4
 800a780:	4628      	mov	r0, r5
 800a782:	f7ff fcf1 	bl	800a168 <_fflush_r>
 800a786:	2800      	cmp	r0, #0
 800a788:	d0d9      	beq.n	800a73e <__swbuf_r+0x2e>
 800a78a:	e7d6      	b.n	800a73a <__swbuf_r+0x2a>

0800a78c <__swsetup_r>:
 800a78c:	b538      	push	{r3, r4, r5, lr}
 800a78e:	4b29      	ldr	r3, [pc, #164]	@ (800a834 <__swsetup_r+0xa8>)
 800a790:	4605      	mov	r5, r0
 800a792:	6818      	ldr	r0, [r3, #0]
 800a794:	460c      	mov	r4, r1
 800a796:	b118      	cbz	r0, 800a7a0 <__swsetup_r+0x14>
 800a798:	6a03      	ldr	r3, [r0, #32]
 800a79a:	b90b      	cbnz	r3, 800a7a0 <__swsetup_r+0x14>
 800a79c:	f7fc fe2e 	bl	80073fc <__sinit>
 800a7a0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a7a4:	0719      	lsls	r1, r3, #28
 800a7a6:	d422      	bmi.n	800a7ee <__swsetup_r+0x62>
 800a7a8:	06da      	lsls	r2, r3, #27
 800a7aa:	d407      	bmi.n	800a7bc <__swsetup_r+0x30>
 800a7ac:	2209      	movs	r2, #9
 800a7ae:	602a      	str	r2, [r5, #0]
 800a7b0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a7b4:	81a3      	strh	r3, [r4, #12]
 800a7b6:	f04f 30ff 	mov.w	r0, #4294967295
 800a7ba:	e033      	b.n	800a824 <__swsetup_r+0x98>
 800a7bc:	0758      	lsls	r0, r3, #29
 800a7be:	d512      	bpl.n	800a7e6 <__swsetup_r+0x5a>
 800a7c0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a7c2:	b141      	cbz	r1, 800a7d6 <__swsetup_r+0x4a>
 800a7c4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a7c8:	4299      	cmp	r1, r3
 800a7ca:	d002      	beq.n	800a7d2 <__swsetup_r+0x46>
 800a7cc:	4628      	mov	r0, r5
 800a7ce:	f7fd fe4f 	bl	8008470 <_free_r>
 800a7d2:	2300      	movs	r3, #0
 800a7d4:	6363      	str	r3, [r4, #52]	@ 0x34
 800a7d6:	89a3      	ldrh	r3, [r4, #12]
 800a7d8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a7dc:	81a3      	strh	r3, [r4, #12]
 800a7de:	2300      	movs	r3, #0
 800a7e0:	6063      	str	r3, [r4, #4]
 800a7e2:	6923      	ldr	r3, [r4, #16]
 800a7e4:	6023      	str	r3, [r4, #0]
 800a7e6:	89a3      	ldrh	r3, [r4, #12]
 800a7e8:	f043 0308 	orr.w	r3, r3, #8
 800a7ec:	81a3      	strh	r3, [r4, #12]
 800a7ee:	6923      	ldr	r3, [r4, #16]
 800a7f0:	b94b      	cbnz	r3, 800a806 <__swsetup_r+0x7a>
 800a7f2:	89a3      	ldrh	r3, [r4, #12]
 800a7f4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a7f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a7fc:	d003      	beq.n	800a806 <__swsetup_r+0x7a>
 800a7fe:	4621      	mov	r1, r4
 800a800:	4628      	mov	r0, r5
 800a802:	f000 f88b 	bl	800a91c <__smakebuf_r>
 800a806:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a80a:	f013 0201 	ands.w	r2, r3, #1
 800a80e:	d00a      	beq.n	800a826 <__swsetup_r+0x9a>
 800a810:	2200      	movs	r2, #0
 800a812:	60a2      	str	r2, [r4, #8]
 800a814:	6962      	ldr	r2, [r4, #20]
 800a816:	4252      	negs	r2, r2
 800a818:	61a2      	str	r2, [r4, #24]
 800a81a:	6922      	ldr	r2, [r4, #16]
 800a81c:	b942      	cbnz	r2, 800a830 <__swsetup_r+0xa4>
 800a81e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a822:	d1c5      	bne.n	800a7b0 <__swsetup_r+0x24>
 800a824:	bd38      	pop	{r3, r4, r5, pc}
 800a826:	0799      	lsls	r1, r3, #30
 800a828:	bf58      	it	pl
 800a82a:	6962      	ldrpl	r2, [r4, #20]
 800a82c:	60a2      	str	r2, [r4, #8]
 800a82e:	e7f4      	b.n	800a81a <__swsetup_r+0x8e>
 800a830:	2000      	movs	r0, #0
 800a832:	e7f7      	b.n	800a824 <__swsetup_r+0x98>
 800a834:	200001c4 	.word	0x200001c4

0800a838 <_raise_r>:
 800a838:	291f      	cmp	r1, #31
 800a83a:	b538      	push	{r3, r4, r5, lr}
 800a83c:	4605      	mov	r5, r0
 800a83e:	460c      	mov	r4, r1
 800a840:	d904      	bls.n	800a84c <_raise_r+0x14>
 800a842:	2316      	movs	r3, #22
 800a844:	6003      	str	r3, [r0, #0]
 800a846:	f04f 30ff 	mov.w	r0, #4294967295
 800a84a:	bd38      	pop	{r3, r4, r5, pc}
 800a84c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a84e:	b112      	cbz	r2, 800a856 <_raise_r+0x1e>
 800a850:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a854:	b94b      	cbnz	r3, 800a86a <_raise_r+0x32>
 800a856:	4628      	mov	r0, r5
 800a858:	f000 f830 	bl	800a8bc <_getpid_r>
 800a85c:	4622      	mov	r2, r4
 800a85e:	4601      	mov	r1, r0
 800a860:	4628      	mov	r0, r5
 800a862:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a866:	f000 b817 	b.w	800a898 <_kill_r>
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d00a      	beq.n	800a884 <_raise_r+0x4c>
 800a86e:	1c59      	adds	r1, r3, #1
 800a870:	d103      	bne.n	800a87a <_raise_r+0x42>
 800a872:	2316      	movs	r3, #22
 800a874:	6003      	str	r3, [r0, #0]
 800a876:	2001      	movs	r0, #1
 800a878:	e7e7      	b.n	800a84a <_raise_r+0x12>
 800a87a:	2100      	movs	r1, #0
 800a87c:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a880:	4620      	mov	r0, r4
 800a882:	4798      	blx	r3
 800a884:	2000      	movs	r0, #0
 800a886:	e7e0      	b.n	800a84a <_raise_r+0x12>

0800a888 <raise>:
 800a888:	4b02      	ldr	r3, [pc, #8]	@ (800a894 <raise+0xc>)
 800a88a:	4601      	mov	r1, r0
 800a88c:	6818      	ldr	r0, [r3, #0]
 800a88e:	f7ff bfd3 	b.w	800a838 <_raise_r>
 800a892:	bf00      	nop
 800a894:	200001c4 	.word	0x200001c4

0800a898 <_kill_r>:
 800a898:	b538      	push	{r3, r4, r5, lr}
 800a89a:	4d07      	ldr	r5, [pc, #28]	@ (800a8b8 <_kill_r+0x20>)
 800a89c:	2300      	movs	r3, #0
 800a89e:	4604      	mov	r4, r0
 800a8a0:	4608      	mov	r0, r1
 800a8a2:	4611      	mov	r1, r2
 800a8a4:	602b      	str	r3, [r5, #0]
 800a8a6:	f7f7 fb89 	bl	8001fbc <_kill>
 800a8aa:	1c43      	adds	r3, r0, #1
 800a8ac:	d102      	bne.n	800a8b4 <_kill_r+0x1c>
 800a8ae:	682b      	ldr	r3, [r5, #0]
 800a8b0:	b103      	cbz	r3, 800a8b4 <_kill_r+0x1c>
 800a8b2:	6023      	str	r3, [r4, #0]
 800a8b4:	bd38      	pop	{r3, r4, r5, pc}
 800a8b6:	bf00      	nop
 800a8b8:	2000094c 	.word	0x2000094c

0800a8bc <_getpid_r>:
 800a8bc:	f7f7 bb76 	b.w	8001fac <_getpid>

0800a8c0 <_malloc_usable_size_r>:
 800a8c0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800a8c4:	1f18      	subs	r0, r3, #4
 800a8c6:	2b00      	cmp	r3, #0
 800a8c8:	bfbc      	itt	lt
 800a8ca:	580b      	ldrlt	r3, [r1, r0]
 800a8cc:	18c0      	addlt	r0, r0, r3
 800a8ce:	4770      	bx	lr

0800a8d0 <__swhatbuf_r>:
 800a8d0:	b570      	push	{r4, r5, r6, lr}
 800a8d2:	460c      	mov	r4, r1
 800a8d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a8d8:	2900      	cmp	r1, #0
 800a8da:	b096      	sub	sp, #88	@ 0x58
 800a8dc:	4615      	mov	r5, r2
 800a8de:	461e      	mov	r6, r3
 800a8e0:	da0d      	bge.n	800a8fe <__swhatbuf_r+0x2e>
 800a8e2:	89a3      	ldrh	r3, [r4, #12]
 800a8e4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a8e8:	f04f 0100 	mov.w	r1, #0
 800a8ec:	bf14      	ite	ne
 800a8ee:	2340      	movne	r3, #64	@ 0x40
 800a8f0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a8f4:	2000      	movs	r0, #0
 800a8f6:	6031      	str	r1, [r6, #0]
 800a8f8:	602b      	str	r3, [r5, #0]
 800a8fa:	b016      	add	sp, #88	@ 0x58
 800a8fc:	bd70      	pop	{r4, r5, r6, pc}
 800a8fe:	466a      	mov	r2, sp
 800a900:	f000 f848 	bl	800a994 <_fstat_r>
 800a904:	2800      	cmp	r0, #0
 800a906:	dbec      	blt.n	800a8e2 <__swhatbuf_r+0x12>
 800a908:	9901      	ldr	r1, [sp, #4]
 800a90a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a90e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a912:	4259      	negs	r1, r3
 800a914:	4159      	adcs	r1, r3
 800a916:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a91a:	e7eb      	b.n	800a8f4 <__swhatbuf_r+0x24>

0800a91c <__smakebuf_r>:
 800a91c:	898b      	ldrh	r3, [r1, #12]
 800a91e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a920:	079d      	lsls	r5, r3, #30
 800a922:	4606      	mov	r6, r0
 800a924:	460c      	mov	r4, r1
 800a926:	d507      	bpl.n	800a938 <__smakebuf_r+0x1c>
 800a928:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a92c:	6023      	str	r3, [r4, #0]
 800a92e:	6123      	str	r3, [r4, #16]
 800a930:	2301      	movs	r3, #1
 800a932:	6163      	str	r3, [r4, #20]
 800a934:	b003      	add	sp, #12
 800a936:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a938:	ab01      	add	r3, sp, #4
 800a93a:	466a      	mov	r2, sp
 800a93c:	f7ff ffc8 	bl	800a8d0 <__swhatbuf_r>
 800a940:	9f00      	ldr	r7, [sp, #0]
 800a942:	4605      	mov	r5, r0
 800a944:	4639      	mov	r1, r7
 800a946:	4630      	mov	r0, r6
 800a948:	f7fe f940 	bl	8008bcc <_malloc_r>
 800a94c:	b948      	cbnz	r0, 800a962 <__smakebuf_r+0x46>
 800a94e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a952:	059a      	lsls	r2, r3, #22
 800a954:	d4ee      	bmi.n	800a934 <__smakebuf_r+0x18>
 800a956:	f023 0303 	bic.w	r3, r3, #3
 800a95a:	f043 0302 	orr.w	r3, r3, #2
 800a95e:	81a3      	strh	r3, [r4, #12]
 800a960:	e7e2      	b.n	800a928 <__smakebuf_r+0xc>
 800a962:	89a3      	ldrh	r3, [r4, #12]
 800a964:	6020      	str	r0, [r4, #0]
 800a966:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a96a:	81a3      	strh	r3, [r4, #12]
 800a96c:	9b01      	ldr	r3, [sp, #4]
 800a96e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a972:	b15b      	cbz	r3, 800a98c <__smakebuf_r+0x70>
 800a974:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a978:	4630      	mov	r0, r6
 800a97a:	f000 f81d 	bl	800a9b8 <_isatty_r>
 800a97e:	b128      	cbz	r0, 800a98c <__smakebuf_r+0x70>
 800a980:	89a3      	ldrh	r3, [r4, #12]
 800a982:	f023 0303 	bic.w	r3, r3, #3
 800a986:	f043 0301 	orr.w	r3, r3, #1
 800a98a:	81a3      	strh	r3, [r4, #12]
 800a98c:	89a3      	ldrh	r3, [r4, #12]
 800a98e:	431d      	orrs	r5, r3
 800a990:	81a5      	strh	r5, [r4, #12]
 800a992:	e7cf      	b.n	800a934 <__smakebuf_r+0x18>

0800a994 <_fstat_r>:
 800a994:	b538      	push	{r3, r4, r5, lr}
 800a996:	4d07      	ldr	r5, [pc, #28]	@ (800a9b4 <_fstat_r+0x20>)
 800a998:	2300      	movs	r3, #0
 800a99a:	4604      	mov	r4, r0
 800a99c:	4608      	mov	r0, r1
 800a99e:	4611      	mov	r1, r2
 800a9a0:	602b      	str	r3, [r5, #0]
 800a9a2:	f7f7 fb6b 	bl	800207c <_fstat>
 800a9a6:	1c43      	adds	r3, r0, #1
 800a9a8:	d102      	bne.n	800a9b0 <_fstat_r+0x1c>
 800a9aa:	682b      	ldr	r3, [r5, #0]
 800a9ac:	b103      	cbz	r3, 800a9b0 <_fstat_r+0x1c>
 800a9ae:	6023      	str	r3, [r4, #0]
 800a9b0:	bd38      	pop	{r3, r4, r5, pc}
 800a9b2:	bf00      	nop
 800a9b4:	2000094c 	.word	0x2000094c

0800a9b8 <_isatty_r>:
 800a9b8:	b538      	push	{r3, r4, r5, lr}
 800a9ba:	4d06      	ldr	r5, [pc, #24]	@ (800a9d4 <_isatty_r+0x1c>)
 800a9bc:	2300      	movs	r3, #0
 800a9be:	4604      	mov	r4, r0
 800a9c0:	4608      	mov	r0, r1
 800a9c2:	602b      	str	r3, [r5, #0]
 800a9c4:	f7f7 fb6a 	bl	800209c <_isatty>
 800a9c8:	1c43      	adds	r3, r0, #1
 800a9ca:	d102      	bne.n	800a9d2 <_isatty_r+0x1a>
 800a9cc:	682b      	ldr	r3, [r5, #0]
 800a9ce:	b103      	cbz	r3, 800a9d2 <_isatty_r+0x1a>
 800a9d0:	6023      	str	r3, [r4, #0]
 800a9d2:	bd38      	pop	{r3, r4, r5, pc}
 800a9d4:	2000094c 	.word	0x2000094c

0800a9d8 <acos>:
 800a9d8:	b538      	push	{r3, r4, r5, lr}
 800a9da:	ed2d 8b02 	vpush	{d8}
 800a9de:	ec55 4b10 	vmov	r4, r5, d0
 800a9e2:	f000 fa3d 	bl	800ae60 <__ieee754_acos>
 800a9e6:	4622      	mov	r2, r4
 800a9e8:	462b      	mov	r3, r5
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	4629      	mov	r1, r5
 800a9ee:	eeb0 8a40 	vmov.f32	s16, s0
 800a9f2:	eef0 8a60 	vmov.f32	s17, s1
 800a9f6:	f7f6 f8a1 	bl	8000b3c <__aeabi_dcmpun>
 800a9fa:	b9a8      	cbnz	r0, 800aa28 <acos+0x50>
 800a9fc:	ec45 4b10 	vmov	d0, r4, r5
 800aa00:	f000 f8ba 	bl	800ab78 <fabs>
 800aa04:	4b0c      	ldr	r3, [pc, #48]	@ (800aa38 <acos+0x60>)
 800aa06:	ec51 0b10 	vmov	r0, r1, d0
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f7f6 f88c 	bl	8000b28 <__aeabi_dcmpgt>
 800aa10:	b150      	cbz	r0, 800aa28 <acos+0x50>
 800aa12:	f7fc fe79 	bl	8007708 <__errno>
 800aa16:	ecbd 8b02 	vpop	{d8}
 800aa1a:	2321      	movs	r3, #33	@ 0x21
 800aa1c:	6003      	str	r3, [r0, #0]
 800aa1e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aa22:	4806      	ldr	r0, [pc, #24]	@ (800aa3c <acos+0x64>)
 800aa24:	f7fc beac 	b.w	8007780 <nan>
 800aa28:	eeb0 0a48 	vmov.f32	s0, s16
 800aa2c:	eef0 0a68 	vmov.f32	s1, s17
 800aa30:	ecbd 8b02 	vpop	{d8}
 800aa34:	bd38      	pop	{r3, r4, r5, pc}
 800aa36:	bf00      	nop
 800aa38:	3ff00000 	.word	0x3ff00000
 800aa3c:	0800c803 	.word	0x0800c803

0800aa40 <pow>:
 800aa40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa42:	ed2d 8b02 	vpush	{d8}
 800aa46:	eeb0 8a40 	vmov.f32	s16, s0
 800aa4a:	eef0 8a60 	vmov.f32	s17, s1
 800aa4e:	ec55 4b11 	vmov	r4, r5, d1
 800aa52:	f000 fc61 	bl	800b318 <__ieee754_pow>
 800aa56:	4622      	mov	r2, r4
 800aa58:	462b      	mov	r3, r5
 800aa5a:	4620      	mov	r0, r4
 800aa5c:	4629      	mov	r1, r5
 800aa5e:	ec57 6b10 	vmov	r6, r7, d0
 800aa62:	f7f6 f86b 	bl	8000b3c <__aeabi_dcmpun>
 800aa66:	2800      	cmp	r0, #0
 800aa68:	d13b      	bne.n	800aae2 <pow+0xa2>
 800aa6a:	ec51 0b18 	vmov	r0, r1, d8
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2300      	movs	r3, #0
 800aa72:	f7f6 f831 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa76:	b1b8      	cbz	r0, 800aaa8 <pow+0x68>
 800aa78:	2200      	movs	r2, #0
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	4620      	mov	r0, r4
 800aa7e:	4629      	mov	r1, r5
 800aa80:	f7f6 f82a 	bl	8000ad8 <__aeabi_dcmpeq>
 800aa84:	2800      	cmp	r0, #0
 800aa86:	d146      	bne.n	800ab16 <pow+0xd6>
 800aa88:	ec45 4b10 	vmov	d0, r4, r5
 800aa8c:	f000 f8f2 	bl	800ac74 <finite>
 800aa90:	b338      	cbz	r0, 800aae2 <pow+0xa2>
 800aa92:	2200      	movs	r2, #0
 800aa94:	2300      	movs	r3, #0
 800aa96:	4620      	mov	r0, r4
 800aa98:	4629      	mov	r1, r5
 800aa9a:	f7f6 f827 	bl	8000aec <__aeabi_dcmplt>
 800aa9e:	b300      	cbz	r0, 800aae2 <pow+0xa2>
 800aaa0:	f7fc fe32 	bl	8007708 <__errno>
 800aaa4:	2322      	movs	r3, #34	@ 0x22
 800aaa6:	e01b      	b.n	800aae0 <pow+0xa0>
 800aaa8:	ec47 6b10 	vmov	d0, r6, r7
 800aaac:	f000 f8e2 	bl	800ac74 <finite>
 800aab0:	b9e0      	cbnz	r0, 800aaec <pow+0xac>
 800aab2:	eeb0 0a48 	vmov.f32	s0, s16
 800aab6:	eef0 0a68 	vmov.f32	s1, s17
 800aaba:	f000 f8db 	bl	800ac74 <finite>
 800aabe:	b1a8      	cbz	r0, 800aaec <pow+0xac>
 800aac0:	ec45 4b10 	vmov	d0, r4, r5
 800aac4:	f000 f8d6 	bl	800ac74 <finite>
 800aac8:	b180      	cbz	r0, 800aaec <pow+0xac>
 800aaca:	4632      	mov	r2, r6
 800aacc:	463b      	mov	r3, r7
 800aace:	4630      	mov	r0, r6
 800aad0:	4639      	mov	r1, r7
 800aad2:	f7f6 f833 	bl	8000b3c <__aeabi_dcmpun>
 800aad6:	2800      	cmp	r0, #0
 800aad8:	d0e2      	beq.n	800aaa0 <pow+0x60>
 800aada:	f7fc fe15 	bl	8007708 <__errno>
 800aade:	2321      	movs	r3, #33	@ 0x21
 800aae0:	6003      	str	r3, [r0, #0]
 800aae2:	ecbd 8b02 	vpop	{d8}
 800aae6:	ec47 6b10 	vmov	d0, r6, r7
 800aaea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaec:	2200      	movs	r2, #0
 800aaee:	2300      	movs	r3, #0
 800aaf0:	4630      	mov	r0, r6
 800aaf2:	4639      	mov	r1, r7
 800aaf4:	f7f5 fff0 	bl	8000ad8 <__aeabi_dcmpeq>
 800aaf8:	2800      	cmp	r0, #0
 800aafa:	d0f2      	beq.n	800aae2 <pow+0xa2>
 800aafc:	eeb0 0a48 	vmov.f32	s0, s16
 800ab00:	eef0 0a68 	vmov.f32	s1, s17
 800ab04:	f000 f8b6 	bl	800ac74 <finite>
 800ab08:	2800      	cmp	r0, #0
 800ab0a:	d0ea      	beq.n	800aae2 <pow+0xa2>
 800ab0c:	ec45 4b10 	vmov	d0, r4, r5
 800ab10:	f000 f8b0 	bl	800ac74 <finite>
 800ab14:	e7c3      	b.n	800aa9e <pow+0x5e>
 800ab16:	4f01      	ldr	r7, [pc, #4]	@ (800ab1c <pow+0xdc>)
 800ab18:	2600      	movs	r6, #0
 800ab1a:	e7e2      	b.n	800aae2 <pow+0xa2>
 800ab1c:	3ff00000 	.word	0x3ff00000

0800ab20 <sqrt>:
 800ab20:	b538      	push	{r3, r4, r5, lr}
 800ab22:	ed2d 8b02 	vpush	{d8}
 800ab26:	ec55 4b10 	vmov	r4, r5, d0
 800ab2a:	f000 f8b9 	bl	800aca0 <__ieee754_sqrt>
 800ab2e:	4622      	mov	r2, r4
 800ab30:	462b      	mov	r3, r5
 800ab32:	4620      	mov	r0, r4
 800ab34:	4629      	mov	r1, r5
 800ab36:	eeb0 8a40 	vmov.f32	s16, s0
 800ab3a:	eef0 8a60 	vmov.f32	s17, s1
 800ab3e:	f7f5 fffd 	bl	8000b3c <__aeabi_dcmpun>
 800ab42:	b990      	cbnz	r0, 800ab6a <sqrt+0x4a>
 800ab44:	2200      	movs	r2, #0
 800ab46:	2300      	movs	r3, #0
 800ab48:	4620      	mov	r0, r4
 800ab4a:	4629      	mov	r1, r5
 800ab4c:	f7f5 ffce 	bl	8000aec <__aeabi_dcmplt>
 800ab50:	b158      	cbz	r0, 800ab6a <sqrt+0x4a>
 800ab52:	f7fc fdd9 	bl	8007708 <__errno>
 800ab56:	2321      	movs	r3, #33	@ 0x21
 800ab58:	6003      	str	r3, [r0, #0]
 800ab5a:	2200      	movs	r2, #0
 800ab5c:	2300      	movs	r3, #0
 800ab5e:	4610      	mov	r0, r2
 800ab60:	4619      	mov	r1, r3
 800ab62:	f7f5 fe7b 	bl	800085c <__aeabi_ddiv>
 800ab66:	ec41 0b18 	vmov	d8, r0, r1
 800ab6a:	eeb0 0a48 	vmov.f32	s0, s16
 800ab6e:	eef0 0a68 	vmov.f32	s1, s17
 800ab72:	ecbd 8b02 	vpop	{d8}
 800ab76:	bd38      	pop	{r3, r4, r5, pc}

0800ab78 <fabs>:
 800ab78:	ec51 0b10 	vmov	r0, r1, d0
 800ab7c:	4602      	mov	r2, r0
 800ab7e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ab82:	ec43 2b10 	vmov	d0, r2, r3
 800ab86:	4770      	bx	lr

0800ab88 <powf>:
 800ab88:	b508      	push	{r3, lr}
 800ab8a:	ed2d 8b04 	vpush	{d8-d9}
 800ab8e:	eeb0 8a60 	vmov.f32	s16, s1
 800ab92:	eeb0 9a40 	vmov.f32	s18, s0
 800ab96:	f001 f903 	bl	800bda0 <__ieee754_powf>
 800ab9a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ab9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aba2:	eef0 8a40 	vmov.f32	s17, s0
 800aba6:	d63e      	bvs.n	800ac26 <powf+0x9e>
 800aba8:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800abac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abb0:	d112      	bne.n	800abd8 <powf+0x50>
 800abb2:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800abb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abba:	d039      	beq.n	800ac30 <powf+0xa8>
 800abbc:	eeb0 0a48 	vmov.f32	s0, s16
 800abc0:	f000 f863 	bl	800ac8a <finitef>
 800abc4:	b378      	cbz	r0, 800ac26 <powf+0x9e>
 800abc6:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800abca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abce:	d52a      	bpl.n	800ac26 <powf+0x9e>
 800abd0:	f7fc fd9a 	bl	8007708 <__errno>
 800abd4:	2322      	movs	r3, #34	@ 0x22
 800abd6:	e014      	b.n	800ac02 <powf+0x7a>
 800abd8:	f000 f857 	bl	800ac8a <finitef>
 800abdc:	b998      	cbnz	r0, 800ac06 <powf+0x7e>
 800abde:	eeb0 0a49 	vmov.f32	s0, s18
 800abe2:	f000 f852 	bl	800ac8a <finitef>
 800abe6:	b170      	cbz	r0, 800ac06 <powf+0x7e>
 800abe8:	eeb0 0a48 	vmov.f32	s0, s16
 800abec:	f000 f84d 	bl	800ac8a <finitef>
 800abf0:	b148      	cbz	r0, 800ac06 <powf+0x7e>
 800abf2:	eef4 8a68 	vcmp.f32	s17, s17
 800abf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800abfa:	d7e9      	bvc.n	800abd0 <powf+0x48>
 800abfc:	f7fc fd84 	bl	8007708 <__errno>
 800ac00:	2321      	movs	r3, #33	@ 0x21
 800ac02:	6003      	str	r3, [r0, #0]
 800ac04:	e00f      	b.n	800ac26 <powf+0x9e>
 800ac06:	eef5 8a40 	vcmp.f32	s17, #0.0
 800ac0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac0e:	d10a      	bne.n	800ac26 <powf+0x9e>
 800ac10:	eeb0 0a49 	vmov.f32	s0, s18
 800ac14:	f000 f839 	bl	800ac8a <finitef>
 800ac18:	b128      	cbz	r0, 800ac26 <powf+0x9e>
 800ac1a:	eeb0 0a48 	vmov.f32	s0, s16
 800ac1e:	f000 f834 	bl	800ac8a <finitef>
 800ac22:	2800      	cmp	r0, #0
 800ac24:	d1d4      	bne.n	800abd0 <powf+0x48>
 800ac26:	eeb0 0a68 	vmov.f32	s0, s17
 800ac2a:	ecbd 8b04 	vpop	{d8-d9}
 800ac2e:	bd08      	pop	{r3, pc}
 800ac30:	eef7 8a00 	vmov.f32	s17, #112	@ 0x3f800000  1.0
 800ac34:	e7f7      	b.n	800ac26 <powf+0x9e>
	...

0800ac38 <sqrtf>:
 800ac38:	b508      	push	{r3, lr}
 800ac3a:	ed2d 8b02 	vpush	{d8}
 800ac3e:	eeb0 8a40 	vmov.f32	s16, s0
 800ac42:	f000 f907 	bl	800ae54 <__ieee754_sqrtf>
 800ac46:	eeb4 8a48 	vcmp.f32	s16, s16
 800ac4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac4e:	d60c      	bvs.n	800ac6a <sqrtf+0x32>
 800ac50:	eddf 8a07 	vldr	s17, [pc, #28]	@ 800ac70 <sqrtf+0x38>
 800ac54:	eeb4 8ae8 	vcmpe.f32	s16, s17
 800ac58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ac5c:	d505      	bpl.n	800ac6a <sqrtf+0x32>
 800ac5e:	f7fc fd53 	bl	8007708 <__errno>
 800ac62:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 800ac66:	2321      	movs	r3, #33	@ 0x21
 800ac68:	6003      	str	r3, [r0, #0]
 800ac6a:	ecbd 8b02 	vpop	{d8}
 800ac6e:	bd08      	pop	{r3, pc}
 800ac70:	00000000 	.word	0x00000000

0800ac74 <finite>:
 800ac74:	b082      	sub	sp, #8
 800ac76:	ed8d 0b00 	vstr	d0, [sp]
 800ac7a:	9801      	ldr	r0, [sp, #4]
 800ac7c:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800ac80:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800ac84:	0fc0      	lsrs	r0, r0, #31
 800ac86:	b002      	add	sp, #8
 800ac88:	4770      	bx	lr

0800ac8a <finitef>:
 800ac8a:	ee10 3a10 	vmov	r3, s0
 800ac8e:	f023 4000 	bic.w	r0, r3, #2147483648	@ 0x80000000
 800ac92:	f1b0 4fff 	cmp.w	r0, #2139095040	@ 0x7f800000
 800ac96:	bfac      	ite	ge
 800ac98:	2000      	movge	r0, #0
 800ac9a:	2001      	movlt	r0, #1
 800ac9c:	4770      	bx	lr
	...

0800aca0 <__ieee754_sqrt>:
 800aca0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aca4:	4a68      	ldr	r2, [pc, #416]	@ (800ae48 <__ieee754_sqrt+0x1a8>)
 800aca6:	ec55 4b10 	vmov	r4, r5, d0
 800acaa:	43aa      	bics	r2, r5
 800acac:	462b      	mov	r3, r5
 800acae:	4621      	mov	r1, r4
 800acb0:	d110      	bne.n	800acd4 <__ieee754_sqrt+0x34>
 800acb2:	4622      	mov	r2, r4
 800acb4:	4620      	mov	r0, r4
 800acb6:	4629      	mov	r1, r5
 800acb8:	f7f5 fca6 	bl	8000608 <__aeabi_dmul>
 800acbc:	4602      	mov	r2, r0
 800acbe:	460b      	mov	r3, r1
 800acc0:	4620      	mov	r0, r4
 800acc2:	4629      	mov	r1, r5
 800acc4:	f7f5 faea 	bl	800029c <__adddf3>
 800acc8:	4604      	mov	r4, r0
 800acca:	460d      	mov	r5, r1
 800accc:	ec45 4b10 	vmov	d0, r4, r5
 800acd0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acd4:	2d00      	cmp	r5, #0
 800acd6:	dc0e      	bgt.n	800acf6 <__ieee754_sqrt+0x56>
 800acd8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800acdc:	4322      	orrs	r2, r4
 800acde:	d0f5      	beq.n	800accc <__ieee754_sqrt+0x2c>
 800ace0:	b19d      	cbz	r5, 800ad0a <__ieee754_sqrt+0x6a>
 800ace2:	4622      	mov	r2, r4
 800ace4:	4620      	mov	r0, r4
 800ace6:	4629      	mov	r1, r5
 800ace8:	f7f5 fad6 	bl	8000298 <__aeabi_dsub>
 800acec:	4602      	mov	r2, r0
 800acee:	460b      	mov	r3, r1
 800acf0:	f7f5 fdb4 	bl	800085c <__aeabi_ddiv>
 800acf4:	e7e8      	b.n	800acc8 <__ieee754_sqrt+0x28>
 800acf6:	152a      	asrs	r2, r5, #20
 800acf8:	d115      	bne.n	800ad26 <__ieee754_sqrt+0x86>
 800acfa:	2000      	movs	r0, #0
 800acfc:	e009      	b.n	800ad12 <__ieee754_sqrt+0x72>
 800acfe:	0acb      	lsrs	r3, r1, #11
 800ad00:	3a15      	subs	r2, #21
 800ad02:	0549      	lsls	r1, r1, #21
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	d0fa      	beq.n	800acfe <__ieee754_sqrt+0x5e>
 800ad08:	e7f7      	b.n	800acfa <__ieee754_sqrt+0x5a>
 800ad0a:	462a      	mov	r2, r5
 800ad0c:	e7fa      	b.n	800ad04 <__ieee754_sqrt+0x64>
 800ad0e:	005b      	lsls	r3, r3, #1
 800ad10:	3001      	adds	r0, #1
 800ad12:	02dc      	lsls	r4, r3, #11
 800ad14:	d5fb      	bpl.n	800ad0e <__ieee754_sqrt+0x6e>
 800ad16:	1e44      	subs	r4, r0, #1
 800ad18:	1b12      	subs	r2, r2, r4
 800ad1a:	f1c0 0420 	rsb	r4, r0, #32
 800ad1e:	fa21 f404 	lsr.w	r4, r1, r4
 800ad22:	4323      	orrs	r3, r4
 800ad24:	4081      	lsls	r1, r0
 800ad26:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ad2a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800ad2e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800ad32:	07d2      	lsls	r2, r2, #31
 800ad34:	bf5c      	itt	pl
 800ad36:	005b      	lslpl	r3, r3, #1
 800ad38:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800ad3c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ad40:	bf58      	it	pl
 800ad42:	0049      	lslpl	r1, r1, #1
 800ad44:	2600      	movs	r6, #0
 800ad46:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800ad4a:	106d      	asrs	r5, r5, #1
 800ad4c:	0049      	lsls	r1, r1, #1
 800ad4e:	2016      	movs	r0, #22
 800ad50:	4632      	mov	r2, r6
 800ad52:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800ad56:	1917      	adds	r7, r2, r4
 800ad58:	429f      	cmp	r7, r3
 800ad5a:	bfde      	ittt	le
 800ad5c:	193a      	addle	r2, r7, r4
 800ad5e:	1bdb      	suble	r3, r3, r7
 800ad60:	1936      	addle	r6, r6, r4
 800ad62:	0fcf      	lsrs	r7, r1, #31
 800ad64:	3801      	subs	r0, #1
 800ad66:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800ad6a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ad6e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800ad72:	d1f0      	bne.n	800ad56 <__ieee754_sqrt+0xb6>
 800ad74:	4604      	mov	r4, r0
 800ad76:	2720      	movs	r7, #32
 800ad78:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800ad7c:	429a      	cmp	r2, r3
 800ad7e:	eb00 0e0c 	add.w	lr, r0, ip
 800ad82:	db02      	blt.n	800ad8a <__ieee754_sqrt+0xea>
 800ad84:	d113      	bne.n	800adae <__ieee754_sqrt+0x10e>
 800ad86:	458e      	cmp	lr, r1
 800ad88:	d811      	bhi.n	800adae <__ieee754_sqrt+0x10e>
 800ad8a:	f1be 0f00 	cmp.w	lr, #0
 800ad8e:	eb0e 000c 	add.w	r0, lr, ip
 800ad92:	da42      	bge.n	800ae1a <__ieee754_sqrt+0x17a>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	db40      	blt.n	800ae1a <__ieee754_sqrt+0x17a>
 800ad98:	f102 0801 	add.w	r8, r2, #1
 800ad9c:	1a9b      	subs	r3, r3, r2
 800ad9e:	458e      	cmp	lr, r1
 800ada0:	bf88      	it	hi
 800ada2:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800ada6:	eba1 010e 	sub.w	r1, r1, lr
 800adaa:	4464      	add	r4, ip
 800adac:	4642      	mov	r2, r8
 800adae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800adb2:	3f01      	subs	r7, #1
 800adb4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800adb8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800adbc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800adc0:	d1dc      	bne.n	800ad7c <__ieee754_sqrt+0xdc>
 800adc2:	4319      	orrs	r1, r3
 800adc4:	d01b      	beq.n	800adfe <__ieee754_sqrt+0x15e>
 800adc6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ae4c <__ieee754_sqrt+0x1ac>
 800adca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ae50 <__ieee754_sqrt+0x1b0>
 800adce:	e9da 0100 	ldrd	r0, r1, [sl]
 800add2:	e9db 2300 	ldrd	r2, r3, [fp]
 800add6:	f7f5 fa5f 	bl	8000298 <__aeabi_dsub>
 800adda:	e9da 8900 	ldrd	r8, r9, [sl]
 800adde:	4602      	mov	r2, r0
 800ade0:	460b      	mov	r3, r1
 800ade2:	4640      	mov	r0, r8
 800ade4:	4649      	mov	r1, r9
 800ade6:	f7f5 fe8b 	bl	8000b00 <__aeabi_dcmple>
 800adea:	b140      	cbz	r0, 800adfe <__ieee754_sqrt+0x15e>
 800adec:	f1b4 3fff 	cmp.w	r4, #4294967295
 800adf0:	e9da 0100 	ldrd	r0, r1, [sl]
 800adf4:	e9db 2300 	ldrd	r2, r3, [fp]
 800adf8:	d111      	bne.n	800ae1e <__ieee754_sqrt+0x17e>
 800adfa:	3601      	adds	r6, #1
 800adfc:	463c      	mov	r4, r7
 800adfe:	1072      	asrs	r2, r6, #1
 800ae00:	0863      	lsrs	r3, r4, #1
 800ae02:	07f1      	lsls	r1, r6, #31
 800ae04:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ae08:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ae0c:	bf48      	it	mi
 800ae0e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ae12:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ae16:	4618      	mov	r0, r3
 800ae18:	e756      	b.n	800acc8 <__ieee754_sqrt+0x28>
 800ae1a:	4690      	mov	r8, r2
 800ae1c:	e7be      	b.n	800ad9c <__ieee754_sqrt+0xfc>
 800ae1e:	f7f5 fa3d 	bl	800029c <__adddf3>
 800ae22:	e9da 8900 	ldrd	r8, r9, [sl]
 800ae26:	4602      	mov	r2, r0
 800ae28:	460b      	mov	r3, r1
 800ae2a:	4640      	mov	r0, r8
 800ae2c:	4649      	mov	r1, r9
 800ae2e:	f7f5 fe5d 	bl	8000aec <__aeabi_dcmplt>
 800ae32:	b120      	cbz	r0, 800ae3e <__ieee754_sqrt+0x19e>
 800ae34:	1ca0      	adds	r0, r4, #2
 800ae36:	bf08      	it	eq
 800ae38:	3601      	addeq	r6, #1
 800ae3a:	3402      	adds	r4, #2
 800ae3c:	e7df      	b.n	800adfe <__ieee754_sqrt+0x15e>
 800ae3e:	1c63      	adds	r3, r4, #1
 800ae40:	f023 0401 	bic.w	r4, r3, #1
 800ae44:	e7db      	b.n	800adfe <__ieee754_sqrt+0x15e>
 800ae46:	bf00      	nop
 800ae48:	7ff00000 	.word	0x7ff00000
 800ae4c:	20000220 	.word	0x20000220
 800ae50:	20000218 	.word	0x20000218

0800ae54 <__ieee754_sqrtf>:
 800ae54:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800ae58:	4770      	bx	lr
 800ae5a:	0000      	movs	r0, r0
 800ae5c:	0000      	movs	r0, r0
	...

0800ae60 <__ieee754_acos>:
 800ae60:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae64:	ec55 4b10 	vmov	r4, r5, d0
 800ae68:	49b7      	ldr	r1, [pc, #732]	@ (800b148 <__ieee754_acos+0x2e8>)
 800ae6a:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800ae6e:	428b      	cmp	r3, r1
 800ae70:	d919      	bls.n	800aea6 <__ieee754_acos+0x46>
 800ae72:	f103 4340 	add.w	r3, r3, #3221225472	@ 0xc0000000
 800ae76:	f503 1380 	add.w	r3, r3, #1048576	@ 0x100000
 800ae7a:	4323      	orrs	r3, r4
 800ae7c:	d106      	bne.n	800ae8c <__ieee754_acos+0x2c>
 800ae7e:	2d00      	cmp	r5, #0
 800ae80:	f340 8210 	ble.w	800b2a4 <__ieee754_acos+0x444>
 800ae84:	ed9f 0b94 	vldr	d0, [pc, #592]	@ 800b0d8 <__ieee754_acos+0x278>
 800ae88:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae8c:	4622      	mov	r2, r4
 800ae8e:	462b      	mov	r3, r5
 800ae90:	4620      	mov	r0, r4
 800ae92:	4629      	mov	r1, r5
 800ae94:	f7f5 fa00 	bl	8000298 <__aeabi_dsub>
 800ae98:	4602      	mov	r2, r0
 800ae9a:	460b      	mov	r3, r1
 800ae9c:	f7f5 fcde 	bl	800085c <__aeabi_ddiv>
 800aea0:	ec41 0b10 	vmov	d0, r0, r1
 800aea4:	e7f0      	b.n	800ae88 <__ieee754_acos+0x28>
 800aea6:	49a9      	ldr	r1, [pc, #676]	@ (800b14c <__ieee754_acos+0x2ec>)
 800aea8:	428b      	cmp	r3, r1
 800aeaa:	f200 8085 	bhi.w	800afb8 <__ieee754_acos+0x158>
 800aeae:	4aa8      	ldr	r2, [pc, #672]	@ (800b150 <__ieee754_acos+0x2f0>)
 800aeb0:	4293      	cmp	r3, r2
 800aeb2:	f240 81fa 	bls.w	800b2aa <__ieee754_acos+0x44a>
 800aeb6:	4622      	mov	r2, r4
 800aeb8:	462b      	mov	r3, r5
 800aeba:	4620      	mov	r0, r4
 800aebc:	4629      	mov	r1, r5
 800aebe:	f7f5 fba3 	bl	8000608 <__aeabi_dmul>
 800aec2:	a387      	add	r3, pc, #540	@ (adr r3, 800b0e0 <__ieee754_acos+0x280>)
 800aec4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aec8:	4606      	mov	r6, r0
 800aeca:	460f      	mov	r7, r1
 800aecc:	f7f5 fb9c 	bl	8000608 <__aeabi_dmul>
 800aed0:	a385      	add	r3, pc, #532	@ (adr r3, 800b0e8 <__ieee754_acos+0x288>)
 800aed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aed6:	f7f5 f9e1 	bl	800029c <__adddf3>
 800aeda:	4632      	mov	r2, r6
 800aedc:	463b      	mov	r3, r7
 800aede:	f7f5 fb93 	bl	8000608 <__aeabi_dmul>
 800aee2:	a383      	add	r3, pc, #524	@ (adr r3, 800b0f0 <__ieee754_acos+0x290>)
 800aee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aee8:	f7f5 f9d6 	bl	8000298 <__aeabi_dsub>
 800aeec:	4632      	mov	r2, r6
 800aeee:	463b      	mov	r3, r7
 800aef0:	f7f5 fb8a 	bl	8000608 <__aeabi_dmul>
 800aef4:	a380      	add	r3, pc, #512	@ (adr r3, 800b0f8 <__ieee754_acos+0x298>)
 800aef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aefa:	f7f5 f9cf 	bl	800029c <__adddf3>
 800aefe:	4632      	mov	r2, r6
 800af00:	463b      	mov	r3, r7
 800af02:	f7f5 fb81 	bl	8000608 <__aeabi_dmul>
 800af06:	a37e      	add	r3, pc, #504	@ (adr r3, 800b100 <__ieee754_acos+0x2a0>)
 800af08:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af0c:	f7f5 f9c4 	bl	8000298 <__aeabi_dsub>
 800af10:	4632      	mov	r2, r6
 800af12:	463b      	mov	r3, r7
 800af14:	f7f5 fb78 	bl	8000608 <__aeabi_dmul>
 800af18:	a37b      	add	r3, pc, #492	@ (adr r3, 800b108 <__ieee754_acos+0x2a8>)
 800af1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af1e:	f7f5 f9bd 	bl	800029c <__adddf3>
 800af22:	4632      	mov	r2, r6
 800af24:	463b      	mov	r3, r7
 800af26:	f7f5 fb6f 	bl	8000608 <__aeabi_dmul>
 800af2a:	a379      	add	r3, pc, #484	@ (adr r3, 800b110 <__ieee754_acos+0x2b0>)
 800af2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af30:	4680      	mov	r8, r0
 800af32:	4689      	mov	r9, r1
 800af34:	4630      	mov	r0, r6
 800af36:	4639      	mov	r1, r7
 800af38:	f7f5 fb66 	bl	8000608 <__aeabi_dmul>
 800af3c:	a376      	add	r3, pc, #472	@ (adr r3, 800b118 <__ieee754_acos+0x2b8>)
 800af3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af42:	f7f5 f9a9 	bl	8000298 <__aeabi_dsub>
 800af46:	4632      	mov	r2, r6
 800af48:	463b      	mov	r3, r7
 800af4a:	f7f5 fb5d 	bl	8000608 <__aeabi_dmul>
 800af4e:	a374      	add	r3, pc, #464	@ (adr r3, 800b120 <__ieee754_acos+0x2c0>)
 800af50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af54:	f7f5 f9a2 	bl	800029c <__adddf3>
 800af58:	4632      	mov	r2, r6
 800af5a:	463b      	mov	r3, r7
 800af5c:	f7f5 fb54 	bl	8000608 <__aeabi_dmul>
 800af60:	a371      	add	r3, pc, #452	@ (adr r3, 800b128 <__ieee754_acos+0x2c8>)
 800af62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800af66:	f7f5 f997 	bl	8000298 <__aeabi_dsub>
 800af6a:	4632      	mov	r2, r6
 800af6c:	463b      	mov	r3, r7
 800af6e:	f7f5 fb4b 	bl	8000608 <__aeabi_dmul>
 800af72:	4b78      	ldr	r3, [pc, #480]	@ (800b154 <__ieee754_acos+0x2f4>)
 800af74:	2200      	movs	r2, #0
 800af76:	f7f5 f991 	bl	800029c <__adddf3>
 800af7a:	4602      	mov	r2, r0
 800af7c:	460b      	mov	r3, r1
 800af7e:	4640      	mov	r0, r8
 800af80:	4649      	mov	r1, r9
 800af82:	f7f5 fc6b 	bl	800085c <__aeabi_ddiv>
 800af86:	4622      	mov	r2, r4
 800af88:	462b      	mov	r3, r5
 800af8a:	f7f5 fb3d 	bl	8000608 <__aeabi_dmul>
 800af8e:	4602      	mov	r2, r0
 800af90:	460b      	mov	r3, r1
 800af92:	a167      	add	r1, pc, #412	@ (adr r1, 800b130 <__ieee754_acos+0x2d0>)
 800af94:	e9d1 0100 	ldrd	r0, r1, [r1]
 800af98:	f7f5 f97e 	bl	8000298 <__aeabi_dsub>
 800af9c:	4602      	mov	r2, r0
 800af9e:	460b      	mov	r3, r1
 800afa0:	4620      	mov	r0, r4
 800afa2:	4629      	mov	r1, r5
 800afa4:	f7f5 f978 	bl	8000298 <__aeabi_dsub>
 800afa8:	4602      	mov	r2, r0
 800afaa:	460b      	mov	r3, r1
 800afac:	a162      	add	r1, pc, #392	@ (adr r1, 800b138 <__ieee754_acos+0x2d8>)
 800afae:	e9d1 0100 	ldrd	r0, r1, [r1]
 800afb2:	f7f5 f971 	bl	8000298 <__aeabi_dsub>
 800afb6:	e773      	b.n	800aea0 <__ieee754_acos+0x40>
 800afb8:	2d00      	cmp	r5, #0
 800afba:	f280 80cf 	bge.w	800b15c <__ieee754_acos+0x2fc>
 800afbe:	4b65      	ldr	r3, [pc, #404]	@ (800b154 <__ieee754_acos+0x2f4>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	4620      	mov	r0, r4
 800afc4:	4629      	mov	r1, r5
 800afc6:	f7f5 f969 	bl	800029c <__adddf3>
 800afca:	4b63      	ldr	r3, [pc, #396]	@ (800b158 <__ieee754_acos+0x2f8>)
 800afcc:	2200      	movs	r2, #0
 800afce:	f7f5 fb1b 	bl	8000608 <__aeabi_dmul>
 800afd2:	a343      	add	r3, pc, #268	@ (adr r3, 800b0e0 <__ieee754_acos+0x280>)
 800afd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afd8:	4604      	mov	r4, r0
 800afda:	460d      	mov	r5, r1
 800afdc:	f7f5 fb14 	bl	8000608 <__aeabi_dmul>
 800afe0:	a341      	add	r3, pc, #260	@ (adr r3, 800b0e8 <__ieee754_acos+0x288>)
 800afe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800afe6:	f7f5 f959 	bl	800029c <__adddf3>
 800afea:	4622      	mov	r2, r4
 800afec:	462b      	mov	r3, r5
 800afee:	f7f5 fb0b 	bl	8000608 <__aeabi_dmul>
 800aff2:	a33f      	add	r3, pc, #252	@ (adr r3, 800b0f0 <__ieee754_acos+0x290>)
 800aff4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aff8:	f7f5 f94e 	bl	8000298 <__aeabi_dsub>
 800affc:	4622      	mov	r2, r4
 800affe:	462b      	mov	r3, r5
 800b000:	f7f5 fb02 	bl	8000608 <__aeabi_dmul>
 800b004:	a33c      	add	r3, pc, #240	@ (adr r3, 800b0f8 <__ieee754_acos+0x298>)
 800b006:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b00a:	f7f5 f947 	bl	800029c <__adddf3>
 800b00e:	4622      	mov	r2, r4
 800b010:	462b      	mov	r3, r5
 800b012:	f7f5 faf9 	bl	8000608 <__aeabi_dmul>
 800b016:	a33a      	add	r3, pc, #232	@ (adr r3, 800b100 <__ieee754_acos+0x2a0>)
 800b018:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b01c:	f7f5 f93c 	bl	8000298 <__aeabi_dsub>
 800b020:	4622      	mov	r2, r4
 800b022:	462b      	mov	r3, r5
 800b024:	f7f5 faf0 	bl	8000608 <__aeabi_dmul>
 800b028:	a337      	add	r3, pc, #220	@ (adr r3, 800b108 <__ieee754_acos+0x2a8>)
 800b02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b02e:	f7f5 f935 	bl	800029c <__adddf3>
 800b032:	4622      	mov	r2, r4
 800b034:	462b      	mov	r3, r5
 800b036:	f7f5 fae7 	bl	8000608 <__aeabi_dmul>
 800b03a:	a335      	add	r3, pc, #212	@ (adr r3, 800b110 <__ieee754_acos+0x2b0>)
 800b03c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b040:	4606      	mov	r6, r0
 800b042:	460f      	mov	r7, r1
 800b044:	4620      	mov	r0, r4
 800b046:	4629      	mov	r1, r5
 800b048:	f7f5 fade 	bl	8000608 <__aeabi_dmul>
 800b04c:	a332      	add	r3, pc, #200	@ (adr r3, 800b118 <__ieee754_acos+0x2b8>)
 800b04e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b052:	f7f5 f921 	bl	8000298 <__aeabi_dsub>
 800b056:	4622      	mov	r2, r4
 800b058:	462b      	mov	r3, r5
 800b05a:	f7f5 fad5 	bl	8000608 <__aeabi_dmul>
 800b05e:	a330      	add	r3, pc, #192	@ (adr r3, 800b120 <__ieee754_acos+0x2c0>)
 800b060:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b064:	f7f5 f91a 	bl	800029c <__adddf3>
 800b068:	4622      	mov	r2, r4
 800b06a:	462b      	mov	r3, r5
 800b06c:	f7f5 facc 	bl	8000608 <__aeabi_dmul>
 800b070:	a32d      	add	r3, pc, #180	@ (adr r3, 800b128 <__ieee754_acos+0x2c8>)
 800b072:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b076:	f7f5 f90f 	bl	8000298 <__aeabi_dsub>
 800b07a:	4622      	mov	r2, r4
 800b07c:	462b      	mov	r3, r5
 800b07e:	f7f5 fac3 	bl	8000608 <__aeabi_dmul>
 800b082:	4b34      	ldr	r3, [pc, #208]	@ (800b154 <__ieee754_acos+0x2f4>)
 800b084:	2200      	movs	r2, #0
 800b086:	f7f5 f909 	bl	800029c <__adddf3>
 800b08a:	ec45 4b10 	vmov	d0, r4, r5
 800b08e:	4680      	mov	r8, r0
 800b090:	4689      	mov	r9, r1
 800b092:	f7ff fe05 	bl	800aca0 <__ieee754_sqrt>
 800b096:	ec55 4b10 	vmov	r4, r5, d0
 800b09a:	4642      	mov	r2, r8
 800b09c:	464b      	mov	r3, r9
 800b09e:	4630      	mov	r0, r6
 800b0a0:	4639      	mov	r1, r7
 800b0a2:	f7f5 fbdb 	bl	800085c <__aeabi_ddiv>
 800b0a6:	4622      	mov	r2, r4
 800b0a8:	462b      	mov	r3, r5
 800b0aa:	f7f5 faad 	bl	8000608 <__aeabi_dmul>
 800b0ae:	a320      	add	r3, pc, #128	@ (adr r3, 800b130 <__ieee754_acos+0x2d0>)
 800b0b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0b4:	f7f5 f8f0 	bl	8000298 <__aeabi_dsub>
 800b0b8:	4622      	mov	r2, r4
 800b0ba:	462b      	mov	r3, r5
 800b0bc:	f7f5 f8ee 	bl	800029c <__adddf3>
 800b0c0:	4602      	mov	r2, r0
 800b0c2:	460b      	mov	r3, r1
 800b0c4:	f7f5 f8ea 	bl	800029c <__adddf3>
 800b0c8:	4602      	mov	r2, r0
 800b0ca:	460b      	mov	r3, r1
 800b0cc:	a11c      	add	r1, pc, #112	@ (adr r1, 800b140 <__ieee754_acos+0x2e0>)
 800b0ce:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0d2:	e76e      	b.n	800afb2 <__ieee754_acos+0x152>
 800b0d4:	f3af 8000 	nop.w
	...
 800b0e0:	0dfdf709 	.word	0x0dfdf709
 800b0e4:	3f023de1 	.word	0x3f023de1
 800b0e8:	7501b288 	.word	0x7501b288
 800b0ec:	3f49efe0 	.word	0x3f49efe0
 800b0f0:	b5688f3b 	.word	0xb5688f3b
 800b0f4:	3fa48228 	.word	0x3fa48228
 800b0f8:	0e884455 	.word	0x0e884455
 800b0fc:	3fc9c155 	.word	0x3fc9c155
 800b100:	03eb6f7d 	.word	0x03eb6f7d
 800b104:	3fd4d612 	.word	0x3fd4d612
 800b108:	55555555 	.word	0x55555555
 800b10c:	3fc55555 	.word	0x3fc55555
 800b110:	b12e9282 	.word	0xb12e9282
 800b114:	3fb3b8c5 	.word	0x3fb3b8c5
 800b118:	1b8d0159 	.word	0x1b8d0159
 800b11c:	3fe6066c 	.word	0x3fe6066c
 800b120:	9c598ac8 	.word	0x9c598ac8
 800b124:	40002ae5 	.word	0x40002ae5
 800b128:	1c8a2d4b 	.word	0x1c8a2d4b
 800b12c:	40033a27 	.word	0x40033a27
 800b130:	33145c07 	.word	0x33145c07
 800b134:	3c91a626 	.word	0x3c91a626
 800b138:	54442d18 	.word	0x54442d18
 800b13c:	3ff921fb 	.word	0x3ff921fb
 800b140:	54442d18 	.word	0x54442d18
 800b144:	400921fb 	.word	0x400921fb
 800b148:	3fefffff 	.word	0x3fefffff
 800b14c:	3fdfffff 	.word	0x3fdfffff
 800b150:	3c600000 	.word	0x3c600000
 800b154:	3ff00000 	.word	0x3ff00000
 800b158:	3fe00000 	.word	0x3fe00000
 800b15c:	4622      	mov	r2, r4
 800b15e:	462b      	mov	r3, r5
 800b160:	496b      	ldr	r1, [pc, #428]	@ (800b310 <__ieee754_acos+0x4b0>)
 800b162:	2000      	movs	r0, #0
 800b164:	f7f5 f898 	bl	8000298 <__aeabi_dsub>
 800b168:	4b6a      	ldr	r3, [pc, #424]	@ (800b314 <__ieee754_acos+0x4b4>)
 800b16a:	2200      	movs	r2, #0
 800b16c:	f7f5 fa4c 	bl	8000608 <__aeabi_dmul>
 800b170:	4604      	mov	r4, r0
 800b172:	460d      	mov	r5, r1
 800b174:	ec45 4b10 	vmov	d0, r4, r5
 800b178:	f7ff fd92 	bl	800aca0 <__ieee754_sqrt>
 800b17c:	a34c      	add	r3, pc, #304	@ (adr r3, 800b2b0 <__ieee754_acos+0x450>)
 800b17e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b182:	4620      	mov	r0, r4
 800b184:	4629      	mov	r1, r5
 800b186:	ec59 8b10 	vmov	r8, r9, d0
 800b18a:	f7f5 fa3d 	bl	8000608 <__aeabi_dmul>
 800b18e:	a34a      	add	r3, pc, #296	@ (adr r3, 800b2b8 <__ieee754_acos+0x458>)
 800b190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b194:	f7f5 f882 	bl	800029c <__adddf3>
 800b198:	4622      	mov	r2, r4
 800b19a:	462b      	mov	r3, r5
 800b19c:	f7f5 fa34 	bl	8000608 <__aeabi_dmul>
 800b1a0:	a347      	add	r3, pc, #284	@ (adr r3, 800b2c0 <__ieee754_acos+0x460>)
 800b1a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1a6:	f7f5 f877 	bl	8000298 <__aeabi_dsub>
 800b1aa:	4622      	mov	r2, r4
 800b1ac:	462b      	mov	r3, r5
 800b1ae:	f7f5 fa2b 	bl	8000608 <__aeabi_dmul>
 800b1b2:	a345      	add	r3, pc, #276	@ (adr r3, 800b2c8 <__ieee754_acos+0x468>)
 800b1b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1b8:	f7f5 f870 	bl	800029c <__adddf3>
 800b1bc:	4622      	mov	r2, r4
 800b1be:	462b      	mov	r3, r5
 800b1c0:	f7f5 fa22 	bl	8000608 <__aeabi_dmul>
 800b1c4:	a342      	add	r3, pc, #264	@ (adr r3, 800b2d0 <__ieee754_acos+0x470>)
 800b1c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ca:	f7f5 f865 	bl	8000298 <__aeabi_dsub>
 800b1ce:	4622      	mov	r2, r4
 800b1d0:	462b      	mov	r3, r5
 800b1d2:	f7f5 fa19 	bl	8000608 <__aeabi_dmul>
 800b1d6:	a340      	add	r3, pc, #256	@ (adr r3, 800b2d8 <__ieee754_acos+0x478>)
 800b1d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1dc:	f7f5 f85e 	bl	800029c <__adddf3>
 800b1e0:	4622      	mov	r2, r4
 800b1e2:	462b      	mov	r3, r5
 800b1e4:	f7f5 fa10 	bl	8000608 <__aeabi_dmul>
 800b1e8:	a33d      	add	r3, pc, #244	@ (adr r3, 800b2e0 <__ieee754_acos+0x480>)
 800b1ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ee:	4682      	mov	sl, r0
 800b1f0:	468b      	mov	fp, r1
 800b1f2:	4620      	mov	r0, r4
 800b1f4:	4629      	mov	r1, r5
 800b1f6:	f7f5 fa07 	bl	8000608 <__aeabi_dmul>
 800b1fa:	a33b      	add	r3, pc, #236	@ (adr r3, 800b2e8 <__ieee754_acos+0x488>)
 800b1fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b200:	f7f5 f84a 	bl	8000298 <__aeabi_dsub>
 800b204:	4622      	mov	r2, r4
 800b206:	462b      	mov	r3, r5
 800b208:	f7f5 f9fe 	bl	8000608 <__aeabi_dmul>
 800b20c:	a338      	add	r3, pc, #224	@ (adr r3, 800b2f0 <__ieee754_acos+0x490>)
 800b20e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b212:	f7f5 f843 	bl	800029c <__adddf3>
 800b216:	4622      	mov	r2, r4
 800b218:	462b      	mov	r3, r5
 800b21a:	f7f5 f9f5 	bl	8000608 <__aeabi_dmul>
 800b21e:	a336      	add	r3, pc, #216	@ (adr r3, 800b2f8 <__ieee754_acos+0x498>)
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f838 	bl	8000298 <__aeabi_dsub>
 800b228:	4622      	mov	r2, r4
 800b22a:	462b      	mov	r3, r5
 800b22c:	f7f5 f9ec 	bl	8000608 <__aeabi_dmul>
 800b230:	4b37      	ldr	r3, [pc, #220]	@ (800b310 <__ieee754_acos+0x4b0>)
 800b232:	2200      	movs	r2, #0
 800b234:	f7f5 f832 	bl	800029c <__adddf3>
 800b238:	4602      	mov	r2, r0
 800b23a:	460b      	mov	r3, r1
 800b23c:	4650      	mov	r0, sl
 800b23e:	4659      	mov	r1, fp
 800b240:	f7f5 fb0c 	bl	800085c <__aeabi_ddiv>
 800b244:	4642      	mov	r2, r8
 800b246:	464b      	mov	r3, r9
 800b248:	f7f5 f9de 	bl	8000608 <__aeabi_dmul>
 800b24c:	2600      	movs	r6, #0
 800b24e:	4682      	mov	sl, r0
 800b250:	468b      	mov	fp, r1
 800b252:	4632      	mov	r2, r6
 800b254:	464b      	mov	r3, r9
 800b256:	4630      	mov	r0, r6
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 f9d5 	bl	8000608 <__aeabi_dmul>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4620      	mov	r0, r4
 800b264:	4629      	mov	r1, r5
 800b266:	f7f5 f817 	bl	8000298 <__aeabi_dsub>
 800b26a:	4632      	mov	r2, r6
 800b26c:	4604      	mov	r4, r0
 800b26e:	460d      	mov	r5, r1
 800b270:	464b      	mov	r3, r9
 800b272:	4640      	mov	r0, r8
 800b274:	4649      	mov	r1, r9
 800b276:	f7f5 f811 	bl	800029c <__adddf3>
 800b27a:	4602      	mov	r2, r0
 800b27c:	460b      	mov	r3, r1
 800b27e:	4620      	mov	r0, r4
 800b280:	4629      	mov	r1, r5
 800b282:	f7f5 faeb 	bl	800085c <__aeabi_ddiv>
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4650      	mov	r0, sl
 800b28c:	4659      	mov	r1, fp
 800b28e:	f7f5 f805 	bl	800029c <__adddf3>
 800b292:	4632      	mov	r2, r6
 800b294:	464b      	mov	r3, r9
 800b296:	f7f5 f801 	bl	800029c <__adddf3>
 800b29a:	4602      	mov	r2, r0
 800b29c:	460b      	mov	r3, r1
 800b29e:	f7f4 fffd 	bl	800029c <__adddf3>
 800b2a2:	e5fd      	b.n	800aea0 <__ieee754_acos+0x40>
 800b2a4:	ed9f 0b16 	vldr	d0, [pc, #88]	@ 800b300 <__ieee754_acos+0x4a0>
 800b2a8:	e5ee      	b.n	800ae88 <__ieee754_acos+0x28>
 800b2aa:	ed9f 0b17 	vldr	d0, [pc, #92]	@ 800b308 <__ieee754_acos+0x4a8>
 800b2ae:	e5eb      	b.n	800ae88 <__ieee754_acos+0x28>
 800b2b0:	0dfdf709 	.word	0x0dfdf709
 800b2b4:	3f023de1 	.word	0x3f023de1
 800b2b8:	7501b288 	.word	0x7501b288
 800b2bc:	3f49efe0 	.word	0x3f49efe0
 800b2c0:	b5688f3b 	.word	0xb5688f3b
 800b2c4:	3fa48228 	.word	0x3fa48228
 800b2c8:	0e884455 	.word	0x0e884455
 800b2cc:	3fc9c155 	.word	0x3fc9c155
 800b2d0:	03eb6f7d 	.word	0x03eb6f7d
 800b2d4:	3fd4d612 	.word	0x3fd4d612
 800b2d8:	55555555 	.word	0x55555555
 800b2dc:	3fc55555 	.word	0x3fc55555
 800b2e0:	b12e9282 	.word	0xb12e9282
 800b2e4:	3fb3b8c5 	.word	0x3fb3b8c5
 800b2e8:	1b8d0159 	.word	0x1b8d0159
 800b2ec:	3fe6066c 	.word	0x3fe6066c
 800b2f0:	9c598ac8 	.word	0x9c598ac8
 800b2f4:	40002ae5 	.word	0x40002ae5
 800b2f8:	1c8a2d4b 	.word	0x1c8a2d4b
 800b2fc:	40033a27 	.word	0x40033a27
 800b300:	54442d18 	.word	0x54442d18
 800b304:	400921fb 	.word	0x400921fb
 800b308:	54442d18 	.word	0x54442d18
 800b30c:	3ff921fb 	.word	0x3ff921fb
 800b310:	3ff00000 	.word	0x3ff00000
 800b314:	3fe00000 	.word	0x3fe00000

0800b318 <__ieee754_pow>:
 800b318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b31c:	b091      	sub	sp, #68	@ 0x44
 800b31e:	ed8d 1b00 	vstr	d1, [sp]
 800b322:	e9dd 1900 	ldrd	r1, r9, [sp]
 800b326:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800b32a:	ea5a 0001 	orrs.w	r0, sl, r1
 800b32e:	ec57 6b10 	vmov	r6, r7, d0
 800b332:	d113      	bne.n	800b35c <__ieee754_pow+0x44>
 800b334:	19b3      	adds	r3, r6, r6
 800b336:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800b33a:	4152      	adcs	r2, r2
 800b33c:	4298      	cmp	r0, r3
 800b33e:	4b98      	ldr	r3, [pc, #608]	@ (800b5a0 <__ieee754_pow+0x288>)
 800b340:	4193      	sbcs	r3, r2
 800b342:	f080 84ea 	bcs.w	800bd1a <__ieee754_pow+0xa02>
 800b346:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b34a:	4630      	mov	r0, r6
 800b34c:	4639      	mov	r1, r7
 800b34e:	f7f4 ffa5 	bl	800029c <__adddf3>
 800b352:	ec41 0b10 	vmov	d0, r0, r1
 800b356:	b011      	add	sp, #68	@ 0x44
 800b358:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b35c:	4a91      	ldr	r2, [pc, #580]	@ (800b5a4 <__ieee754_pow+0x28c>)
 800b35e:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800b362:	4590      	cmp	r8, r2
 800b364:	463d      	mov	r5, r7
 800b366:	4633      	mov	r3, r6
 800b368:	d806      	bhi.n	800b378 <__ieee754_pow+0x60>
 800b36a:	d101      	bne.n	800b370 <__ieee754_pow+0x58>
 800b36c:	2e00      	cmp	r6, #0
 800b36e:	d1ea      	bne.n	800b346 <__ieee754_pow+0x2e>
 800b370:	4592      	cmp	sl, r2
 800b372:	d801      	bhi.n	800b378 <__ieee754_pow+0x60>
 800b374:	d10e      	bne.n	800b394 <__ieee754_pow+0x7c>
 800b376:	b169      	cbz	r1, 800b394 <__ieee754_pow+0x7c>
 800b378:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800b37c:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800b380:	431d      	orrs	r5, r3
 800b382:	d1e0      	bne.n	800b346 <__ieee754_pow+0x2e>
 800b384:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b388:	18db      	adds	r3, r3, r3
 800b38a:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800b38e:	4152      	adcs	r2, r2
 800b390:	429d      	cmp	r5, r3
 800b392:	e7d4      	b.n	800b33e <__ieee754_pow+0x26>
 800b394:	2d00      	cmp	r5, #0
 800b396:	46c3      	mov	fp, r8
 800b398:	da3a      	bge.n	800b410 <__ieee754_pow+0xf8>
 800b39a:	4a83      	ldr	r2, [pc, #524]	@ (800b5a8 <__ieee754_pow+0x290>)
 800b39c:	4592      	cmp	sl, r2
 800b39e:	d84d      	bhi.n	800b43c <__ieee754_pow+0x124>
 800b3a0:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800b3a4:	4592      	cmp	sl, r2
 800b3a6:	f240 84c7 	bls.w	800bd38 <__ieee754_pow+0xa20>
 800b3aa:	ea4f 522a 	mov.w	r2, sl, asr #20
 800b3ae:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800b3b2:	2a14      	cmp	r2, #20
 800b3b4:	dd0f      	ble.n	800b3d6 <__ieee754_pow+0xbe>
 800b3b6:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800b3ba:	fa21 f402 	lsr.w	r4, r1, r2
 800b3be:	fa04 f202 	lsl.w	r2, r4, r2
 800b3c2:	428a      	cmp	r2, r1
 800b3c4:	f040 84b8 	bne.w	800bd38 <__ieee754_pow+0xa20>
 800b3c8:	f004 0401 	and.w	r4, r4, #1
 800b3cc:	f1c4 0402 	rsb	r4, r4, #2
 800b3d0:	2900      	cmp	r1, #0
 800b3d2:	d158      	bne.n	800b486 <__ieee754_pow+0x16e>
 800b3d4:	e00e      	b.n	800b3f4 <__ieee754_pow+0xdc>
 800b3d6:	2900      	cmp	r1, #0
 800b3d8:	d154      	bne.n	800b484 <__ieee754_pow+0x16c>
 800b3da:	f1c2 0214 	rsb	r2, r2, #20
 800b3de:	fa4a f402 	asr.w	r4, sl, r2
 800b3e2:	fa04 f202 	lsl.w	r2, r4, r2
 800b3e6:	4552      	cmp	r2, sl
 800b3e8:	f040 84a3 	bne.w	800bd32 <__ieee754_pow+0xa1a>
 800b3ec:	f004 0401 	and.w	r4, r4, #1
 800b3f0:	f1c4 0402 	rsb	r4, r4, #2
 800b3f4:	4a6d      	ldr	r2, [pc, #436]	@ (800b5ac <__ieee754_pow+0x294>)
 800b3f6:	4592      	cmp	sl, r2
 800b3f8:	d12e      	bne.n	800b458 <__ieee754_pow+0x140>
 800b3fa:	f1b9 0f00 	cmp.w	r9, #0
 800b3fe:	f280 8494 	bge.w	800bd2a <__ieee754_pow+0xa12>
 800b402:	496a      	ldr	r1, [pc, #424]	@ (800b5ac <__ieee754_pow+0x294>)
 800b404:	4632      	mov	r2, r6
 800b406:	463b      	mov	r3, r7
 800b408:	2000      	movs	r0, #0
 800b40a:	f7f5 fa27 	bl	800085c <__aeabi_ddiv>
 800b40e:	e7a0      	b.n	800b352 <__ieee754_pow+0x3a>
 800b410:	2400      	movs	r4, #0
 800b412:	bbc1      	cbnz	r1, 800b486 <__ieee754_pow+0x16e>
 800b414:	4a63      	ldr	r2, [pc, #396]	@ (800b5a4 <__ieee754_pow+0x28c>)
 800b416:	4592      	cmp	sl, r2
 800b418:	d1ec      	bne.n	800b3f4 <__ieee754_pow+0xdc>
 800b41a:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800b41e:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800b422:	431a      	orrs	r2, r3
 800b424:	f000 8479 	beq.w	800bd1a <__ieee754_pow+0xa02>
 800b428:	4b61      	ldr	r3, [pc, #388]	@ (800b5b0 <__ieee754_pow+0x298>)
 800b42a:	4598      	cmp	r8, r3
 800b42c:	d908      	bls.n	800b440 <__ieee754_pow+0x128>
 800b42e:	f1b9 0f00 	cmp.w	r9, #0
 800b432:	f2c0 8476 	blt.w	800bd22 <__ieee754_pow+0xa0a>
 800b436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b43a:	e78a      	b.n	800b352 <__ieee754_pow+0x3a>
 800b43c:	2402      	movs	r4, #2
 800b43e:	e7e8      	b.n	800b412 <__ieee754_pow+0xfa>
 800b440:	f1b9 0f00 	cmp.w	r9, #0
 800b444:	f04f 0000 	mov.w	r0, #0
 800b448:	f04f 0100 	mov.w	r1, #0
 800b44c:	da81      	bge.n	800b352 <__ieee754_pow+0x3a>
 800b44e:	e9dd 0300 	ldrd	r0, r3, [sp]
 800b452:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800b456:	e77c      	b.n	800b352 <__ieee754_pow+0x3a>
 800b458:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800b45c:	d106      	bne.n	800b46c <__ieee754_pow+0x154>
 800b45e:	4632      	mov	r2, r6
 800b460:	463b      	mov	r3, r7
 800b462:	4630      	mov	r0, r6
 800b464:	4639      	mov	r1, r7
 800b466:	f7f5 f8cf 	bl	8000608 <__aeabi_dmul>
 800b46a:	e772      	b.n	800b352 <__ieee754_pow+0x3a>
 800b46c:	4a51      	ldr	r2, [pc, #324]	@ (800b5b4 <__ieee754_pow+0x29c>)
 800b46e:	4591      	cmp	r9, r2
 800b470:	d109      	bne.n	800b486 <__ieee754_pow+0x16e>
 800b472:	2d00      	cmp	r5, #0
 800b474:	db07      	blt.n	800b486 <__ieee754_pow+0x16e>
 800b476:	ec47 6b10 	vmov	d0, r6, r7
 800b47a:	b011      	add	sp, #68	@ 0x44
 800b47c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b480:	f7ff bc0e 	b.w	800aca0 <__ieee754_sqrt>
 800b484:	2400      	movs	r4, #0
 800b486:	ec47 6b10 	vmov	d0, r6, r7
 800b48a:	9302      	str	r3, [sp, #8]
 800b48c:	f7ff fb74 	bl	800ab78 <fabs>
 800b490:	9b02      	ldr	r3, [sp, #8]
 800b492:	ec51 0b10 	vmov	r0, r1, d0
 800b496:	bb53      	cbnz	r3, 800b4ee <__ieee754_pow+0x1d6>
 800b498:	4b44      	ldr	r3, [pc, #272]	@ (800b5ac <__ieee754_pow+0x294>)
 800b49a:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800b49e:	429a      	cmp	r2, r3
 800b4a0:	d002      	beq.n	800b4a8 <__ieee754_pow+0x190>
 800b4a2:	f1b8 0f00 	cmp.w	r8, #0
 800b4a6:	d122      	bne.n	800b4ee <__ieee754_pow+0x1d6>
 800b4a8:	f1b9 0f00 	cmp.w	r9, #0
 800b4ac:	da05      	bge.n	800b4ba <__ieee754_pow+0x1a2>
 800b4ae:	4602      	mov	r2, r0
 800b4b0:	460b      	mov	r3, r1
 800b4b2:	2000      	movs	r0, #0
 800b4b4:	493d      	ldr	r1, [pc, #244]	@ (800b5ac <__ieee754_pow+0x294>)
 800b4b6:	f7f5 f9d1 	bl	800085c <__aeabi_ddiv>
 800b4ba:	2d00      	cmp	r5, #0
 800b4bc:	f6bf af49 	bge.w	800b352 <__ieee754_pow+0x3a>
 800b4c0:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800b4c4:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800b4c8:	ea58 0804 	orrs.w	r8, r8, r4
 800b4cc:	d108      	bne.n	800b4e0 <__ieee754_pow+0x1c8>
 800b4ce:	4602      	mov	r2, r0
 800b4d0:	460b      	mov	r3, r1
 800b4d2:	4610      	mov	r0, r2
 800b4d4:	4619      	mov	r1, r3
 800b4d6:	f7f4 fedf 	bl	8000298 <__aeabi_dsub>
 800b4da:	4602      	mov	r2, r0
 800b4dc:	460b      	mov	r3, r1
 800b4de:	e794      	b.n	800b40a <__ieee754_pow+0xf2>
 800b4e0:	2c01      	cmp	r4, #1
 800b4e2:	f47f af36 	bne.w	800b352 <__ieee754_pow+0x3a>
 800b4e6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b4ea:	4619      	mov	r1, r3
 800b4ec:	e731      	b.n	800b352 <__ieee754_pow+0x3a>
 800b4ee:	0feb      	lsrs	r3, r5, #31
 800b4f0:	3b01      	subs	r3, #1
 800b4f2:	ea53 0204 	orrs.w	r2, r3, r4
 800b4f6:	d102      	bne.n	800b4fe <__ieee754_pow+0x1e6>
 800b4f8:	4632      	mov	r2, r6
 800b4fa:	463b      	mov	r3, r7
 800b4fc:	e7e9      	b.n	800b4d2 <__ieee754_pow+0x1ba>
 800b4fe:	3c01      	subs	r4, #1
 800b500:	431c      	orrs	r4, r3
 800b502:	d016      	beq.n	800b532 <__ieee754_pow+0x21a>
 800b504:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800b590 <__ieee754_pow+0x278>
 800b508:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800b50c:	ed8d 7b02 	vstr	d7, [sp, #8]
 800b510:	f240 8112 	bls.w	800b738 <__ieee754_pow+0x420>
 800b514:	4b28      	ldr	r3, [pc, #160]	@ (800b5b8 <__ieee754_pow+0x2a0>)
 800b516:	459a      	cmp	sl, r3
 800b518:	4b25      	ldr	r3, [pc, #148]	@ (800b5b0 <__ieee754_pow+0x298>)
 800b51a:	d916      	bls.n	800b54a <__ieee754_pow+0x232>
 800b51c:	4598      	cmp	r8, r3
 800b51e:	d80b      	bhi.n	800b538 <__ieee754_pow+0x220>
 800b520:	f1b9 0f00 	cmp.w	r9, #0
 800b524:	da0b      	bge.n	800b53e <__ieee754_pow+0x226>
 800b526:	2000      	movs	r0, #0
 800b528:	b011      	add	sp, #68	@ 0x44
 800b52a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b52e:	f000 bfc3 	b.w	800c4b8 <__math_oflow>
 800b532:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800b598 <__ieee754_pow+0x280>
 800b536:	e7e7      	b.n	800b508 <__ieee754_pow+0x1f0>
 800b538:	f1b9 0f00 	cmp.w	r9, #0
 800b53c:	dcf3      	bgt.n	800b526 <__ieee754_pow+0x20e>
 800b53e:	2000      	movs	r0, #0
 800b540:	b011      	add	sp, #68	@ 0x44
 800b542:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b546:	f000 bfaf 	b.w	800c4a8 <__math_uflow>
 800b54a:	4598      	cmp	r8, r3
 800b54c:	d20c      	bcs.n	800b568 <__ieee754_pow+0x250>
 800b54e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b552:	2200      	movs	r2, #0
 800b554:	2300      	movs	r3, #0
 800b556:	f7f5 fac9 	bl	8000aec <__aeabi_dcmplt>
 800b55a:	3800      	subs	r0, #0
 800b55c:	bf18      	it	ne
 800b55e:	2001      	movne	r0, #1
 800b560:	f1b9 0f00 	cmp.w	r9, #0
 800b564:	daec      	bge.n	800b540 <__ieee754_pow+0x228>
 800b566:	e7df      	b.n	800b528 <__ieee754_pow+0x210>
 800b568:	4b10      	ldr	r3, [pc, #64]	@ (800b5ac <__ieee754_pow+0x294>)
 800b56a:	4598      	cmp	r8, r3
 800b56c:	f04f 0200 	mov.w	r2, #0
 800b570:	d924      	bls.n	800b5bc <__ieee754_pow+0x2a4>
 800b572:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b576:	2300      	movs	r3, #0
 800b578:	f7f5 fab8 	bl	8000aec <__aeabi_dcmplt>
 800b57c:	3800      	subs	r0, #0
 800b57e:	bf18      	it	ne
 800b580:	2001      	movne	r0, #1
 800b582:	f1b9 0f00 	cmp.w	r9, #0
 800b586:	dccf      	bgt.n	800b528 <__ieee754_pow+0x210>
 800b588:	e7da      	b.n	800b540 <__ieee754_pow+0x228>
 800b58a:	bf00      	nop
 800b58c:	f3af 8000 	nop.w
 800b590:	00000000 	.word	0x00000000
 800b594:	3ff00000 	.word	0x3ff00000
 800b598:	00000000 	.word	0x00000000
 800b59c:	bff00000 	.word	0xbff00000
 800b5a0:	fff00000 	.word	0xfff00000
 800b5a4:	7ff00000 	.word	0x7ff00000
 800b5a8:	433fffff 	.word	0x433fffff
 800b5ac:	3ff00000 	.word	0x3ff00000
 800b5b0:	3fefffff 	.word	0x3fefffff
 800b5b4:	3fe00000 	.word	0x3fe00000
 800b5b8:	43f00000 	.word	0x43f00000
 800b5bc:	4b5a      	ldr	r3, [pc, #360]	@ (800b728 <__ieee754_pow+0x410>)
 800b5be:	f7f4 fe6b 	bl	8000298 <__aeabi_dsub>
 800b5c2:	a351      	add	r3, pc, #324	@ (adr r3, 800b708 <__ieee754_pow+0x3f0>)
 800b5c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5c8:	4604      	mov	r4, r0
 800b5ca:	460d      	mov	r5, r1
 800b5cc:	f7f5 f81c 	bl	8000608 <__aeabi_dmul>
 800b5d0:	a34f      	add	r3, pc, #316	@ (adr r3, 800b710 <__ieee754_pow+0x3f8>)
 800b5d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5d6:	4606      	mov	r6, r0
 800b5d8:	460f      	mov	r7, r1
 800b5da:	4620      	mov	r0, r4
 800b5dc:	4629      	mov	r1, r5
 800b5de:	f7f5 f813 	bl	8000608 <__aeabi_dmul>
 800b5e2:	4b52      	ldr	r3, [pc, #328]	@ (800b72c <__ieee754_pow+0x414>)
 800b5e4:	4682      	mov	sl, r0
 800b5e6:	468b      	mov	fp, r1
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	4620      	mov	r0, r4
 800b5ec:	4629      	mov	r1, r5
 800b5ee:	f7f5 f80b 	bl	8000608 <__aeabi_dmul>
 800b5f2:	4602      	mov	r2, r0
 800b5f4:	460b      	mov	r3, r1
 800b5f6:	a148      	add	r1, pc, #288	@ (adr r1, 800b718 <__ieee754_pow+0x400>)
 800b5f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b5fc:	f7f4 fe4c 	bl	8000298 <__aeabi_dsub>
 800b600:	4622      	mov	r2, r4
 800b602:	462b      	mov	r3, r5
 800b604:	f7f5 f800 	bl	8000608 <__aeabi_dmul>
 800b608:	4602      	mov	r2, r0
 800b60a:	460b      	mov	r3, r1
 800b60c:	2000      	movs	r0, #0
 800b60e:	4948      	ldr	r1, [pc, #288]	@ (800b730 <__ieee754_pow+0x418>)
 800b610:	f7f4 fe42 	bl	8000298 <__aeabi_dsub>
 800b614:	4622      	mov	r2, r4
 800b616:	4680      	mov	r8, r0
 800b618:	4689      	mov	r9, r1
 800b61a:	462b      	mov	r3, r5
 800b61c:	4620      	mov	r0, r4
 800b61e:	4629      	mov	r1, r5
 800b620:	f7f4 fff2 	bl	8000608 <__aeabi_dmul>
 800b624:	4602      	mov	r2, r0
 800b626:	460b      	mov	r3, r1
 800b628:	4640      	mov	r0, r8
 800b62a:	4649      	mov	r1, r9
 800b62c:	f7f4 ffec 	bl	8000608 <__aeabi_dmul>
 800b630:	a33b      	add	r3, pc, #236	@ (adr r3, 800b720 <__ieee754_pow+0x408>)
 800b632:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b636:	f7f4 ffe7 	bl	8000608 <__aeabi_dmul>
 800b63a:	4602      	mov	r2, r0
 800b63c:	460b      	mov	r3, r1
 800b63e:	4650      	mov	r0, sl
 800b640:	4659      	mov	r1, fp
 800b642:	f7f4 fe29 	bl	8000298 <__aeabi_dsub>
 800b646:	4602      	mov	r2, r0
 800b648:	460b      	mov	r3, r1
 800b64a:	4680      	mov	r8, r0
 800b64c:	4689      	mov	r9, r1
 800b64e:	4630      	mov	r0, r6
 800b650:	4639      	mov	r1, r7
 800b652:	f7f4 fe23 	bl	800029c <__adddf3>
 800b656:	2400      	movs	r4, #0
 800b658:	4632      	mov	r2, r6
 800b65a:	463b      	mov	r3, r7
 800b65c:	4620      	mov	r0, r4
 800b65e:	460d      	mov	r5, r1
 800b660:	f7f4 fe1a 	bl	8000298 <__aeabi_dsub>
 800b664:	4602      	mov	r2, r0
 800b666:	460b      	mov	r3, r1
 800b668:	4640      	mov	r0, r8
 800b66a:	4649      	mov	r1, r9
 800b66c:	f7f4 fe14 	bl	8000298 <__aeabi_dsub>
 800b670:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b674:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800b678:	2300      	movs	r3, #0
 800b67a:	9304      	str	r3, [sp, #16]
 800b67c:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800b680:	4606      	mov	r6, r0
 800b682:	460f      	mov	r7, r1
 800b684:	4652      	mov	r2, sl
 800b686:	465b      	mov	r3, fp
 800b688:	e9dd 0100 	ldrd	r0, r1, [sp]
 800b68c:	f7f4 fe04 	bl	8000298 <__aeabi_dsub>
 800b690:	4622      	mov	r2, r4
 800b692:	462b      	mov	r3, r5
 800b694:	f7f4 ffb8 	bl	8000608 <__aeabi_dmul>
 800b698:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b69c:	4680      	mov	r8, r0
 800b69e:	4689      	mov	r9, r1
 800b6a0:	4630      	mov	r0, r6
 800b6a2:	4639      	mov	r1, r7
 800b6a4:	f7f4 ffb0 	bl	8000608 <__aeabi_dmul>
 800b6a8:	4602      	mov	r2, r0
 800b6aa:	460b      	mov	r3, r1
 800b6ac:	4640      	mov	r0, r8
 800b6ae:	4649      	mov	r1, r9
 800b6b0:	f7f4 fdf4 	bl	800029c <__adddf3>
 800b6b4:	4652      	mov	r2, sl
 800b6b6:	465b      	mov	r3, fp
 800b6b8:	4606      	mov	r6, r0
 800b6ba:	460f      	mov	r7, r1
 800b6bc:	4620      	mov	r0, r4
 800b6be:	4629      	mov	r1, r5
 800b6c0:	f7f4 ffa2 	bl	8000608 <__aeabi_dmul>
 800b6c4:	460b      	mov	r3, r1
 800b6c6:	4602      	mov	r2, r0
 800b6c8:	4680      	mov	r8, r0
 800b6ca:	4689      	mov	r9, r1
 800b6cc:	4630      	mov	r0, r6
 800b6ce:	4639      	mov	r1, r7
 800b6d0:	f7f4 fde4 	bl	800029c <__adddf3>
 800b6d4:	4b17      	ldr	r3, [pc, #92]	@ (800b734 <__ieee754_pow+0x41c>)
 800b6d6:	4299      	cmp	r1, r3
 800b6d8:	4604      	mov	r4, r0
 800b6da:	460d      	mov	r5, r1
 800b6dc:	468a      	mov	sl, r1
 800b6de:	468b      	mov	fp, r1
 800b6e0:	f340 82ef 	ble.w	800bcc2 <__ieee754_pow+0x9aa>
 800b6e4:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800b6e8:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800b6ec:	4303      	orrs	r3, r0
 800b6ee:	f000 81e8 	beq.w	800bac2 <__ieee754_pow+0x7aa>
 800b6f2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6f6:	2200      	movs	r2, #0
 800b6f8:	2300      	movs	r3, #0
 800b6fa:	f7f5 f9f7 	bl	8000aec <__aeabi_dcmplt>
 800b6fe:	3800      	subs	r0, #0
 800b700:	bf18      	it	ne
 800b702:	2001      	movne	r0, #1
 800b704:	e710      	b.n	800b528 <__ieee754_pow+0x210>
 800b706:	bf00      	nop
 800b708:	60000000 	.word	0x60000000
 800b70c:	3ff71547 	.word	0x3ff71547
 800b710:	f85ddf44 	.word	0xf85ddf44
 800b714:	3e54ae0b 	.word	0x3e54ae0b
 800b718:	55555555 	.word	0x55555555
 800b71c:	3fd55555 	.word	0x3fd55555
 800b720:	652b82fe 	.word	0x652b82fe
 800b724:	3ff71547 	.word	0x3ff71547
 800b728:	3ff00000 	.word	0x3ff00000
 800b72c:	3fd00000 	.word	0x3fd00000
 800b730:	3fe00000 	.word	0x3fe00000
 800b734:	408fffff 	.word	0x408fffff
 800b738:	4bd5      	ldr	r3, [pc, #852]	@ (800ba90 <__ieee754_pow+0x778>)
 800b73a:	402b      	ands	r3, r5
 800b73c:	2200      	movs	r2, #0
 800b73e:	b92b      	cbnz	r3, 800b74c <__ieee754_pow+0x434>
 800b740:	4bd4      	ldr	r3, [pc, #848]	@ (800ba94 <__ieee754_pow+0x77c>)
 800b742:	f7f4 ff61 	bl	8000608 <__aeabi_dmul>
 800b746:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800b74a:	468b      	mov	fp, r1
 800b74c:	ea4f 532b 	mov.w	r3, fp, asr #20
 800b750:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800b754:	4413      	add	r3, r2
 800b756:	930a      	str	r3, [sp, #40]	@ 0x28
 800b758:	4bcf      	ldr	r3, [pc, #828]	@ (800ba98 <__ieee754_pow+0x780>)
 800b75a:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800b75e:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800b762:	459b      	cmp	fp, r3
 800b764:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800b768:	dd08      	ble.n	800b77c <__ieee754_pow+0x464>
 800b76a:	4bcc      	ldr	r3, [pc, #816]	@ (800ba9c <__ieee754_pow+0x784>)
 800b76c:	459b      	cmp	fp, r3
 800b76e:	f340 81a5 	ble.w	800babc <__ieee754_pow+0x7a4>
 800b772:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b774:	3301      	adds	r3, #1
 800b776:	930a      	str	r3, [sp, #40]	@ 0x28
 800b778:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800b77c:	f04f 0a00 	mov.w	sl, #0
 800b780:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800b784:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b786:	4bc6      	ldr	r3, [pc, #792]	@ (800baa0 <__ieee754_pow+0x788>)
 800b788:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b78c:	ed93 7b00 	vldr	d7, [r3]
 800b790:	4629      	mov	r1, r5
 800b792:	ec53 2b17 	vmov	r2, r3, d7
 800b796:	ed8d 7b06 	vstr	d7, [sp, #24]
 800b79a:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b79e:	f7f4 fd7b 	bl	8000298 <__aeabi_dsub>
 800b7a2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b7a6:	4606      	mov	r6, r0
 800b7a8:	460f      	mov	r7, r1
 800b7aa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b7ae:	f7f4 fd75 	bl	800029c <__adddf3>
 800b7b2:	4602      	mov	r2, r0
 800b7b4:	460b      	mov	r3, r1
 800b7b6:	2000      	movs	r0, #0
 800b7b8:	49ba      	ldr	r1, [pc, #744]	@ (800baa4 <__ieee754_pow+0x78c>)
 800b7ba:	f7f5 f84f 	bl	800085c <__aeabi_ddiv>
 800b7be:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800b7c2:	4602      	mov	r2, r0
 800b7c4:	460b      	mov	r3, r1
 800b7c6:	4630      	mov	r0, r6
 800b7c8:	4639      	mov	r1, r7
 800b7ca:	f7f4 ff1d 	bl	8000608 <__aeabi_dmul>
 800b7ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b7d2:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800b7d6:	106d      	asrs	r5, r5, #1
 800b7d8:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800b7dc:	f04f 0b00 	mov.w	fp, #0
 800b7e0:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800b7e4:	4661      	mov	r1, ip
 800b7e6:	2200      	movs	r2, #0
 800b7e8:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800b7ec:	4658      	mov	r0, fp
 800b7ee:	46e1      	mov	r9, ip
 800b7f0:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800b7f4:	4614      	mov	r4, r2
 800b7f6:	461d      	mov	r5, r3
 800b7f8:	f7f4 ff06 	bl	8000608 <__aeabi_dmul>
 800b7fc:	4602      	mov	r2, r0
 800b7fe:	460b      	mov	r3, r1
 800b800:	4630      	mov	r0, r6
 800b802:	4639      	mov	r1, r7
 800b804:	f7f4 fd48 	bl	8000298 <__aeabi_dsub>
 800b808:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b80c:	4606      	mov	r6, r0
 800b80e:	460f      	mov	r7, r1
 800b810:	4620      	mov	r0, r4
 800b812:	4629      	mov	r1, r5
 800b814:	f7f4 fd40 	bl	8000298 <__aeabi_dsub>
 800b818:	4602      	mov	r2, r0
 800b81a:	460b      	mov	r3, r1
 800b81c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b820:	f7f4 fd3a 	bl	8000298 <__aeabi_dsub>
 800b824:	465a      	mov	r2, fp
 800b826:	464b      	mov	r3, r9
 800b828:	f7f4 feee 	bl	8000608 <__aeabi_dmul>
 800b82c:	4602      	mov	r2, r0
 800b82e:	460b      	mov	r3, r1
 800b830:	4630      	mov	r0, r6
 800b832:	4639      	mov	r1, r7
 800b834:	f7f4 fd30 	bl	8000298 <__aeabi_dsub>
 800b838:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800b83c:	f7f4 fee4 	bl	8000608 <__aeabi_dmul>
 800b840:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b844:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b848:	4610      	mov	r0, r2
 800b84a:	4619      	mov	r1, r3
 800b84c:	f7f4 fedc 	bl	8000608 <__aeabi_dmul>
 800b850:	a37d      	add	r3, pc, #500	@ (adr r3, 800ba48 <__ieee754_pow+0x730>)
 800b852:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b856:	4604      	mov	r4, r0
 800b858:	460d      	mov	r5, r1
 800b85a:	f7f4 fed5 	bl	8000608 <__aeabi_dmul>
 800b85e:	a37c      	add	r3, pc, #496	@ (adr r3, 800ba50 <__ieee754_pow+0x738>)
 800b860:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b864:	f7f4 fd1a 	bl	800029c <__adddf3>
 800b868:	4622      	mov	r2, r4
 800b86a:	462b      	mov	r3, r5
 800b86c:	f7f4 fecc 	bl	8000608 <__aeabi_dmul>
 800b870:	a379      	add	r3, pc, #484	@ (adr r3, 800ba58 <__ieee754_pow+0x740>)
 800b872:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b876:	f7f4 fd11 	bl	800029c <__adddf3>
 800b87a:	4622      	mov	r2, r4
 800b87c:	462b      	mov	r3, r5
 800b87e:	f7f4 fec3 	bl	8000608 <__aeabi_dmul>
 800b882:	a377      	add	r3, pc, #476	@ (adr r3, 800ba60 <__ieee754_pow+0x748>)
 800b884:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b888:	f7f4 fd08 	bl	800029c <__adddf3>
 800b88c:	4622      	mov	r2, r4
 800b88e:	462b      	mov	r3, r5
 800b890:	f7f4 feba 	bl	8000608 <__aeabi_dmul>
 800b894:	a374      	add	r3, pc, #464	@ (adr r3, 800ba68 <__ieee754_pow+0x750>)
 800b896:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b89a:	f7f4 fcff 	bl	800029c <__adddf3>
 800b89e:	4622      	mov	r2, r4
 800b8a0:	462b      	mov	r3, r5
 800b8a2:	f7f4 feb1 	bl	8000608 <__aeabi_dmul>
 800b8a6:	a372      	add	r3, pc, #456	@ (adr r3, 800ba70 <__ieee754_pow+0x758>)
 800b8a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b8ac:	f7f4 fcf6 	bl	800029c <__adddf3>
 800b8b0:	4622      	mov	r2, r4
 800b8b2:	4606      	mov	r6, r0
 800b8b4:	460f      	mov	r7, r1
 800b8b6:	462b      	mov	r3, r5
 800b8b8:	4620      	mov	r0, r4
 800b8ba:	4629      	mov	r1, r5
 800b8bc:	f7f4 fea4 	bl	8000608 <__aeabi_dmul>
 800b8c0:	4602      	mov	r2, r0
 800b8c2:	460b      	mov	r3, r1
 800b8c4:	4630      	mov	r0, r6
 800b8c6:	4639      	mov	r1, r7
 800b8c8:	f7f4 fe9e 	bl	8000608 <__aeabi_dmul>
 800b8cc:	465a      	mov	r2, fp
 800b8ce:	4604      	mov	r4, r0
 800b8d0:	460d      	mov	r5, r1
 800b8d2:	464b      	mov	r3, r9
 800b8d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800b8d8:	f7f4 fce0 	bl	800029c <__adddf3>
 800b8dc:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800b8e0:	f7f4 fe92 	bl	8000608 <__aeabi_dmul>
 800b8e4:	4622      	mov	r2, r4
 800b8e6:	462b      	mov	r3, r5
 800b8e8:	f7f4 fcd8 	bl	800029c <__adddf3>
 800b8ec:	465a      	mov	r2, fp
 800b8ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b8f2:	464b      	mov	r3, r9
 800b8f4:	4658      	mov	r0, fp
 800b8f6:	4649      	mov	r1, r9
 800b8f8:	f7f4 fe86 	bl	8000608 <__aeabi_dmul>
 800b8fc:	4b6a      	ldr	r3, [pc, #424]	@ (800baa8 <__ieee754_pow+0x790>)
 800b8fe:	2200      	movs	r2, #0
 800b900:	4606      	mov	r6, r0
 800b902:	460f      	mov	r7, r1
 800b904:	f7f4 fcca 	bl	800029c <__adddf3>
 800b908:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800b90c:	f7f4 fcc6 	bl	800029c <__adddf3>
 800b910:	46d8      	mov	r8, fp
 800b912:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800b916:	460d      	mov	r5, r1
 800b918:	465a      	mov	r2, fp
 800b91a:	460b      	mov	r3, r1
 800b91c:	4640      	mov	r0, r8
 800b91e:	4649      	mov	r1, r9
 800b920:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800b924:	f7f4 fe70 	bl	8000608 <__aeabi_dmul>
 800b928:	465c      	mov	r4, fp
 800b92a:	4680      	mov	r8, r0
 800b92c:	4689      	mov	r9, r1
 800b92e:	4b5e      	ldr	r3, [pc, #376]	@ (800baa8 <__ieee754_pow+0x790>)
 800b930:	2200      	movs	r2, #0
 800b932:	4620      	mov	r0, r4
 800b934:	4629      	mov	r1, r5
 800b936:	f7f4 fcaf 	bl	8000298 <__aeabi_dsub>
 800b93a:	4632      	mov	r2, r6
 800b93c:	463b      	mov	r3, r7
 800b93e:	f7f4 fcab 	bl	8000298 <__aeabi_dsub>
 800b942:	4602      	mov	r2, r0
 800b944:	460b      	mov	r3, r1
 800b946:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b94a:	f7f4 fca5 	bl	8000298 <__aeabi_dsub>
 800b94e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b952:	f7f4 fe59 	bl	8000608 <__aeabi_dmul>
 800b956:	4622      	mov	r2, r4
 800b958:	4606      	mov	r6, r0
 800b95a:	460f      	mov	r7, r1
 800b95c:	462b      	mov	r3, r5
 800b95e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800b962:	f7f4 fe51 	bl	8000608 <__aeabi_dmul>
 800b966:	4602      	mov	r2, r0
 800b968:	460b      	mov	r3, r1
 800b96a:	4630      	mov	r0, r6
 800b96c:	4639      	mov	r1, r7
 800b96e:	f7f4 fc95 	bl	800029c <__adddf3>
 800b972:	4606      	mov	r6, r0
 800b974:	460f      	mov	r7, r1
 800b976:	4602      	mov	r2, r0
 800b978:	460b      	mov	r3, r1
 800b97a:	4640      	mov	r0, r8
 800b97c:	4649      	mov	r1, r9
 800b97e:	f7f4 fc8d 	bl	800029c <__adddf3>
 800b982:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800b986:	a33c      	add	r3, pc, #240	@ (adr r3, 800ba78 <__ieee754_pow+0x760>)
 800b988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b98c:	4658      	mov	r0, fp
 800b98e:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800b992:	460d      	mov	r5, r1
 800b994:	f7f4 fe38 	bl	8000608 <__aeabi_dmul>
 800b998:	465c      	mov	r4, fp
 800b99a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b99e:	4642      	mov	r2, r8
 800b9a0:	464b      	mov	r3, r9
 800b9a2:	4620      	mov	r0, r4
 800b9a4:	4629      	mov	r1, r5
 800b9a6:	f7f4 fc77 	bl	8000298 <__aeabi_dsub>
 800b9aa:	4602      	mov	r2, r0
 800b9ac:	460b      	mov	r3, r1
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	4639      	mov	r1, r7
 800b9b2:	f7f4 fc71 	bl	8000298 <__aeabi_dsub>
 800b9b6:	a332      	add	r3, pc, #200	@ (adr r3, 800ba80 <__ieee754_pow+0x768>)
 800b9b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9bc:	f7f4 fe24 	bl	8000608 <__aeabi_dmul>
 800b9c0:	a331      	add	r3, pc, #196	@ (adr r3, 800ba88 <__ieee754_pow+0x770>)
 800b9c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9c6:	4606      	mov	r6, r0
 800b9c8:	460f      	mov	r7, r1
 800b9ca:	4620      	mov	r0, r4
 800b9cc:	4629      	mov	r1, r5
 800b9ce:	f7f4 fe1b 	bl	8000608 <__aeabi_dmul>
 800b9d2:	4602      	mov	r2, r0
 800b9d4:	460b      	mov	r3, r1
 800b9d6:	4630      	mov	r0, r6
 800b9d8:	4639      	mov	r1, r7
 800b9da:	f7f4 fc5f 	bl	800029c <__adddf3>
 800b9de:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9e0:	4b32      	ldr	r3, [pc, #200]	@ (800baac <__ieee754_pow+0x794>)
 800b9e2:	4413      	add	r3, r2
 800b9e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b9e8:	f7f4 fc58 	bl	800029c <__adddf3>
 800b9ec:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800b9f0:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800b9f2:	f7f4 fd9f 	bl	8000534 <__aeabi_i2d>
 800b9f6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800b9f8:	4b2d      	ldr	r3, [pc, #180]	@ (800bab0 <__ieee754_pow+0x798>)
 800b9fa:	4413      	add	r3, r2
 800b9fc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ba00:	4606      	mov	r6, r0
 800ba02:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ba06:	460f      	mov	r7, r1
 800ba08:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ba0c:	f7f4 fc46 	bl	800029c <__adddf3>
 800ba10:	4642      	mov	r2, r8
 800ba12:	464b      	mov	r3, r9
 800ba14:	f7f4 fc42 	bl	800029c <__adddf3>
 800ba18:	4632      	mov	r2, r6
 800ba1a:	463b      	mov	r3, r7
 800ba1c:	f7f4 fc3e 	bl	800029c <__adddf3>
 800ba20:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ba24:	4632      	mov	r2, r6
 800ba26:	463b      	mov	r3, r7
 800ba28:	4658      	mov	r0, fp
 800ba2a:	460d      	mov	r5, r1
 800ba2c:	f7f4 fc34 	bl	8000298 <__aeabi_dsub>
 800ba30:	4642      	mov	r2, r8
 800ba32:	464b      	mov	r3, r9
 800ba34:	f7f4 fc30 	bl	8000298 <__aeabi_dsub>
 800ba38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ba3c:	f7f4 fc2c 	bl	8000298 <__aeabi_dsub>
 800ba40:	465c      	mov	r4, fp
 800ba42:	4602      	mov	r2, r0
 800ba44:	e036      	b.n	800bab4 <__ieee754_pow+0x79c>
 800ba46:	bf00      	nop
 800ba48:	4a454eef 	.word	0x4a454eef
 800ba4c:	3fca7e28 	.word	0x3fca7e28
 800ba50:	93c9db65 	.word	0x93c9db65
 800ba54:	3fcd864a 	.word	0x3fcd864a
 800ba58:	a91d4101 	.word	0xa91d4101
 800ba5c:	3fd17460 	.word	0x3fd17460
 800ba60:	518f264d 	.word	0x518f264d
 800ba64:	3fd55555 	.word	0x3fd55555
 800ba68:	db6fabff 	.word	0xdb6fabff
 800ba6c:	3fdb6db6 	.word	0x3fdb6db6
 800ba70:	33333303 	.word	0x33333303
 800ba74:	3fe33333 	.word	0x3fe33333
 800ba78:	e0000000 	.word	0xe0000000
 800ba7c:	3feec709 	.word	0x3feec709
 800ba80:	dc3a03fd 	.word	0xdc3a03fd
 800ba84:	3feec709 	.word	0x3feec709
 800ba88:	145b01f5 	.word	0x145b01f5
 800ba8c:	be3e2fe0 	.word	0xbe3e2fe0
 800ba90:	7ff00000 	.word	0x7ff00000
 800ba94:	43400000 	.word	0x43400000
 800ba98:	0003988e 	.word	0x0003988e
 800ba9c:	000bb679 	.word	0x000bb679
 800baa0:	0800cb80 	.word	0x0800cb80
 800baa4:	3ff00000 	.word	0x3ff00000
 800baa8:	40080000 	.word	0x40080000
 800baac:	0800cb60 	.word	0x0800cb60
 800bab0:	0800cb70 	.word	0x0800cb70
 800bab4:	460b      	mov	r3, r1
 800bab6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800baba:	e5d7      	b.n	800b66c <__ieee754_pow+0x354>
 800babc:	f04f 0a01 	mov.w	sl, #1
 800bac0:	e65e      	b.n	800b780 <__ieee754_pow+0x468>
 800bac2:	a3b4      	add	r3, pc, #720	@ (adr r3, 800bd94 <__ieee754_pow+0xa7c>)
 800bac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bac8:	4630      	mov	r0, r6
 800baca:	4639      	mov	r1, r7
 800bacc:	f7f4 fbe6 	bl	800029c <__adddf3>
 800bad0:	4642      	mov	r2, r8
 800bad2:	e9cd 0100 	strd	r0, r1, [sp]
 800bad6:	464b      	mov	r3, r9
 800bad8:	4620      	mov	r0, r4
 800bada:	4629      	mov	r1, r5
 800badc:	f7f4 fbdc 	bl	8000298 <__aeabi_dsub>
 800bae0:	4602      	mov	r2, r0
 800bae2:	460b      	mov	r3, r1
 800bae4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bae8:	f7f5 f81e 	bl	8000b28 <__aeabi_dcmpgt>
 800baec:	2800      	cmp	r0, #0
 800baee:	f47f ae00 	bne.w	800b6f2 <__ieee754_pow+0x3da>
 800baf2:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800baf6:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800bafa:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800bafe:	fa43 fa0a 	asr.w	sl, r3, sl
 800bb02:	44da      	add	sl, fp
 800bb04:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800bb08:	489d      	ldr	r0, [pc, #628]	@ (800bd80 <__ieee754_pow+0xa68>)
 800bb0a:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800bb0e:	4108      	asrs	r0, r1
 800bb10:	ea00 030a 	and.w	r3, r0, sl
 800bb14:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800bb18:	f1c1 0114 	rsb	r1, r1, #20
 800bb1c:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800bb20:	fa4a fa01 	asr.w	sl, sl, r1
 800bb24:	f1bb 0f00 	cmp.w	fp, #0
 800bb28:	4640      	mov	r0, r8
 800bb2a:	4649      	mov	r1, r9
 800bb2c:	f04f 0200 	mov.w	r2, #0
 800bb30:	bfb8      	it	lt
 800bb32:	f1ca 0a00 	rsblt	sl, sl, #0
 800bb36:	f7f4 fbaf 	bl	8000298 <__aeabi_dsub>
 800bb3a:	4680      	mov	r8, r0
 800bb3c:	4689      	mov	r9, r1
 800bb3e:	4632      	mov	r2, r6
 800bb40:	463b      	mov	r3, r7
 800bb42:	4640      	mov	r0, r8
 800bb44:	4649      	mov	r1, r9
 800bb46:	f7f4 fba9 	bl	800029c <__adddf3>
 800bb4a:	2400      	movs	r4, #0
 800bb4c:	a37c      	add	r3, pc, #496	@ (adr r3, 800bd40 <__ieee754_pow+0xa28>)
 800bb4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb52:	4620      	mov	r0, r4
 800bb54:	460d      	mov	r5, r1
 800bb56:	f7f4 fd57 	bl	8000608 <__aeabi_dmul>
 800bb5a:	4642      	mov	r2, r8
 800bb5c:	e9cd 0100 	strd	r0, r1, [sp]
 800bb60:	464b      	mov	r3, r9
 800bb62:	4620      	mov	r0, r4
 800bb64:	4629      	mov	r1, r5
 800bb66:	f7f4 fb97 	bl	8000298 <__aeabi_dsub>
 800bb6a:	4602      	mov	r2, r0
 800bb6c:	460b      	mov	r3, r1
 800bb6e:	4630      	mov	r0, r6
 800bb70:	4639      	mov	r1, r7
 800bb72:	f7f4 fb91 	bl	8000298 <__aeabi_dsub>
 800bb76:	a374      	add	r3, pc, #464	@ (adr r3, 800bd48 <__ieee754_pow+0xa30>)
 800bb78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb7c:	f7f4 fd44 	bl	8000608 <__aeabi_dmul>
 800bb80:	a373      	add	r3, pc, #460	@ (adr r3, 800bd50 <__ieee754_pow+0xa38>)
 800bb82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bb86:	4680      	mov	r8, r0
 800bb88:	4689      	mov	r9, r1
 800bb8a:	4620      	mov	r0, r4
 800bb8c:	4629      	mov	r1, r5
 800bb8e:	f7f4 fd3b 	bl	8000608 <__aeabi_dmul>
 800bb92:	4602      	mov	r2, r0
 800bb94:	460b      	mov	r3, r1
 800bb96:	4640      	mov	r0, r8
 800bb98:	4649      	mov	r1, r9
 800bb9a:	f7f4 fb7f 	bl	800029c <__adddf3>
 800bb9e:	4604      	mov	r4, r0
 800bba0:	460d      	mov	r5, r1
 800bba2:	4602      	mov	r2, r0
 800bba4:	460b      	mov	r3, r1
 800bba6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bbaa:	f7f4 fb77 	bl	800029c <__adddf3>
 800bbae:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bbb2:	4680      	mov	r8, r0
 800bbb4:	4689      	mov	r9, r1
 800bbb6:	f7f4 fb6f 	bl	8000298 <__aeabi_dsub>
 800bbba:	4602      	mov	r2, r0
 800bbbc:	460b      	mov	r3, r1
 800bbbe:	4620      	mov	r0, r4
 800bbc0:	4629      	mov	r1, r5
 800bbc2:	f7f4 fb69 	bl	8000298 <__aeabi_dsub>
 800bbc6:	4642      	mov	r2, r8
 800bbc8:	4606      	mov	r6, r0
 800bbca:	460f      	mov	r7, r1
 800bbcc:	464b      	mov	r3, r9
 800bbce:	4640      	mov	r0, r8
 800bbd0:	4649      	mov	r1, r9
 800bbd2:	f7f4 fd19 	bl	8000608 <__aeabi_dmul>
 800bbd6:	a360      	add	r3, pc, #384	@ (adr r3, 800bd58 <__ieee754_pow+0xa40>)
 800bbd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbdc:	4604      	mov	r4, r0
 800bbde:	460d      	mov	r5, r1
 800bbe0:	f7f4 fd12 	bl	8000608 <__aeabi_dmul>
 800bbe4:	a35e      	add	r3, pc, #376	@ (adr r3, 800bd60 <__ieee754_pow+0xa48>)
 800bbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbea:	f7f4 fb55 	bl	8000298 <__aeabi_dsub>
 800bbee:	4622      	mov	r2, r4
 800bbf0:	462b      	mov	r3, r5
 800bbf2:	f7f4 fd09 	bl	8000608 <__aeabi_dmul>
 800bbf6:	a35c      	add	r3, pc, #368	@ (adr r3, 800bd68 <__ieee754_pow+0xa50>)
 800bbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bbfc:	f7f4 fb4e 	bl	800029c <__adddf3>
 800bc00:	4622      	mov	r2, r4
 800bc02:	462b      	mov	r3, r5
 800bc04:	f7f4 fd00 	bl	8000608 <__aeabi_dmul>
 800bc08:	a359      	add	r3, pc, #356	@ (adr r3, 800bd70 <__ieee754_pow+0xa58>)
 800bc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc0e:	f7f4 fb43 	bl	8000298 <__aeabi_dsub>
 800bc12:	4622      	mov	r2, r4
 800bc14:	462b      	mov	r3, r5
 800bc16:	f7f4 fcf7 	bl	8000608 <__aeabi_dmul>
 800bc1a:	a357      	add	r3, pc, #348	@ (adr r3, 800bd78 <__ieee754_pow+0xa60>)
 800bc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bc20:	f7f4 fb3c 	bl	800029c <__adddf3>
 800bc24:	4622      	mov	r2, r4
 800bc26:	462b      	mov	r3, r5
 800bc28:	f7f4 fcee 	bl	8000608 <__aeabi_dmul>
 800bc2c:	4602      	mov	r2, r0
 800bc2e:	460b      	mov	r3, r1
 800bc30:	4640      	mov	r0, r8
 800bc32:	4649      	mov	r1, r9
 800bc34:	f7f4 fb30 	bl	8000298 <__aeabi_dsub>
 800bc38:	4604      	mov	r4, r0
 800bc3a:	460d      	mov	r5, r1
 800bc3c:	4602      	mov	r2, r0
 800bc3e:	460b      	mov	r3, r1
 800bc40:	4640      	mov	r0, r8
 800bc42:	4649      	mov	r1, r9
 800bc44:	f7f4 fce0 	bl	8000608 <__aeabi_dmul>
 800bc48:	2200      	movs	r2, #0
 800bc4a:	e9cd 0100 	strd	r0, r1, [sp]
 800bc4e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800bc52:	4620      	mov	r0, r4
 800bc54:	4629      	mov	r1, r5
 800bc56:	f7f4 fb1f 	bl	8000298 <__aeabi_dsub>
 800bc5a:	4602      	mov	r2, r0
 800bc5c:	460b      	mov	r3, r1
 800bc5e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc62:	f7f4 fdfb 	bl	800085c <__aeabi_ddiv>
 800bc66:	4632      	mov	r2, r6
 800bc68:	4604      	mov	r4, r0
 800bc6a:	460d      	mov	r5, r1
 800bc6c:	463b      	mov	r3, r7
 800bc6e:	4640      	mov	r0, r8
 800bc70:	4649      	mov	r1, r9
 800bc72:	f7f4 fcc9 	bl	8000608 <__aeabi_dmul>
 800bc76:	4632      	mov	r2, r6
 800bc78:	463b      	mov	r3, r7
 800bc7a:	f7f4 fb0f 	bl	800029c <__adddf3>
 800bc7e:	4602      	mov	r2, r0
 800bc80:	460b      	mov	r3, r1
 800bc82:	4620      	mov	r0, r4
 800bc84:	4629      	mov	r1, r5
 800bc86:	f7f4 fb07 	bl	8000298 <__aeabi_dsub>
 800bc8a:	4642      	mov	r2, r8
 800bc8c:	464b      	mov	r3, r9
 800bc8e:	f7f4 fb03 	bl	8000298 <__aeabi_dsub>
 800bc92:	460b      	mov	r3, r1
 800bc94:	4602      	mov	r2, r0
 800bc96:	493b      	ldr	r1, [pc, #236]	@ (800bd84 <__ieee754_pow+0xa6c>)
 800bc98:	2000      	movs	r0, #0
 800bc9a:	f7f4 fafd 	bl	8000298 <__aeabi_dsub>
 800bc9e:	ec41 0b10 	vmov	d0, r0, r1
 800bca2:	ee10 3a90 	vmov	r3, s1
 800bca6:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800bcaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bcae:	da30      	bge.n	800bd12 <__ieee754_pow+0x9fa>
 800bcb0:	4650      	mov	r0, sl
 800bcb2:	f000 fb4d 	bl	800c350 <scalbn>
 800bcb6:	ec51 0b10 	vmov	r0, r1, d0
 800bcba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bcbe:	f7ff bbd2 	b.w	800b466 <__ieee754_pow+0x14e>
 800bcc2:	4c31      	ldr	r4, [pc, #196]	@ (800bd88 <__ieee754_pow+0xa70>)
 800bcc4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bcc8:	42a3      	cmp	r3, r4
 800bcca:	d91a      	bls.n	800bd02 <__ieee754_pow+0x9ea>
 800bccc:	4b2f      	ldr	r3, [pc, #188]	@ (800bd8c <__ieee754_pow+0xa74>)
 800bcce:	440b      	add	r3, r1
 800bcd0:	4303      	orrs	r3, r0
 800bcd2:	d009      	beq.n	800bce8 <__ieee754_pow+0x9d0>
 800bcd4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bcd8:	2200      	movs	r2, #0
 800bcda:	2300      	movs	r3, #0
 800bcdc:	f7f4 ff06 	bl	8000aec <__aeabi_dcmplt>
 800bce0:	3800      	subs	r0, #0
 800bce2:	bf18      	it	ne
 800bce4:	2001      	movne	r0, #1
 800bce6:	e42b      	b.n	800b540 <__ieee754_pow+0x228>
 800bce8:	4642      	mov	r2, r8
 800bcea:	464b      	mov	r3, r9
 800bcec:	f7f4 fad4 	bl	8000298 <__aeabi_dsub>
 800bcf0:	4632      	mov	r2, r6
 800bcf2:	463b      	mov	r3, r7
 800bcf4:	f7f4 ff0e 	bl	8000b14 <__aeabi_dcmpge>
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d1eb      	bne.n	800bcd4 <__ieee754_pow+0x9bc>
 800bcfc:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800bd9c <__ieee754_pow+0xa84>
 800bd00:	e6f7      	b.n	800baf2 <__ieee754_pow+0x7da>
 800bd02:	469a      	mov	sl, r3
 800bd04:	4b22      	ldr	r3, [pc, #136]	@ (800bd90 <__ieee754_pow+0xa78>)
 800bd06:	459a      	cmp	sl, r3
 800bd08:	f63f aef3 	bhi.w	800baf2 <__ieee754_pow+0x7da>
 800bd0c:	f8dd a010 	ldr.w	sl, [sp, #16]
 800bd10:	e715      	b.n	800bb3e <__ieee754_pow+0x826>
 800bd12:	ec51 0b10 	vmov	r0, r1, d0
 800bd16:	4619      	mov	r1, r3
 800bd18:	e7cf      	b.n	800bcba <__ieee754_pow+0x9a2>
 800bd1a:	491a      	ldr	r1, [pc, #104]	@ (800bd84 <__ieee754_pow+0xa6c>)
 800bd1c:	2000      	movs	r0, #0
 800bd1e:	f7ff bb18 	b.w	800b352 <__ieee754_pow+0x3a>
 800bd22:	2000      	movs	r0, #0
 800bd24:	2100      	movs	r1, #0
 800bd26:	f7ff bb14 	b.w	800b352 <__ieee754_pow+0x3a>
 800bd2a:	4630      	mov	r0, r6
 800bd2c:	4639      	mov	r1, r7
 800bd2e:	f7ff bb10 	b.w	800b352 <__ieee754_pow+0x3a>
 800bd32:	460c      	mov	r4, r1
 800bd34:	f7ff bb5e 	b.w	800b3f4 <__ieee754_pow+0xdc>
 800bd38:	2400      	movs	r4, #0
 800bd3a:	f7ff bb49 	b.w	800b3d0 <__ieee754_pow+0xb8>
 800bd3e:	bf00      	nop
 800bd40:	00000000 	.word	0x00000000
 800bd44:	3fe62e43 	.word	0x3fe62e43
 800bd48:	fefa39ef 	.word	0xfefa39ef
 800bd4c:	3fe62e42 	.word	0x3fe62e42
 800bd50:	0ca86c39 	.word	0x0ca86c39
 800bd54:	be205c61 	.word	0xbe205c61
 800bd58:	72bea4d0 	.word	0x72bea4d0
 800bd5c:	3e663769 	.word	0x3e663769
 800bd60:	c5d26bf1 	.word	0xc5d26bf1
 800bd64:	3ebbbd41 	.word	0x3ebbbd41
 800bd68:	af25de2c 	.word	0xaf25de2c
 800bd6c:	3f11566a 	.word	0x3f11566a
 800bd70:	16bebd93 	.word	0x16bebd93
 800bd74:	3f66c16c 	.word	0x3f66c16c
 800bd78:	5555553e 	.word	0x5555553e
 800bd7c:	3fc55555 	.word	0x3fc55555
 800bd80:	fff00000 	.word	0xfff00000
 800bd84:	3ff00000 	.word	0x3ff00000
 800bd88:	4090cbff 	.word	0x4090cbff
 800bd8c:	3f6f3400 	.word	0x3f6f3400
 800bd90:	3fe00000 	.word	0x3fe00000
 800bd94:	652b82fe 	.word	0x652b82fe
 800bd98:	3c971547 	.word	0x3c971547
 800bd9c:	4090cc00 	.word	0x4090cc00

0800bda0 <__ieee754_powf>:
 800bda0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bda4:	ee10 4a90 	vmov	r4, s1
 800bda8:	f034 4900 	bics.w	r9, r4, #2147483648	@ 0x80000000
 800bdac:	ed2d 8b02 	vpush	{d8}
 800bdb0:	ee10 6a10 	vmov	r6, s0
 800bdb4:	eeb0 8a40 	vmov.f32	s16, s0
 800bdb8:	eef0 8a60 	vmov.f32	s17, s1
 800bdbc:	d10c      	bne.n	800bdd8 <__ieee754_powf+0x38>
 800bdbe:	f486 0680 	eor.w	r6, r6, #4194304	@ 0x400000
 800bdc2:	0076      	lsls	r6, r6, #1
 800bdc4:	f516 0f00 	cmn.w	r6, #8388608	@ 0x800000
 800bdc8:	f240 829c 	bls.w	800c304 <__ieee754_powf+0x564>
 800bdcc:	ee38 0a28 	vadd.f32	s0, s16, s17
 800bdd0:	ecbd 8b02 	vpop	{d8}
 800bdd4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bdd8:	f026 4800 	bic.w	r8, r6, #2147483648	@ 0x80000000
 800bddc:	f1b8 4fff 	cmp.w	r8, #2139095040	@ 0x7f800000
 800bde0:	d802      	bhi.n	800bde8 <__ieee754_powf+0x48>
 800bde2:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800bde6:	d908      	bls.n	800bdfa <__ieee754_powf+0x5a>
 800bde8:	f1b6 5f7e 	cmp.w	r6, #1065353216	@ 0x3f800000
 800bdec:	d1ee      	bne.n	800bdcc <__ieee754_powf+0x2c>
 800bdee:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 800bdf2:	0064      	lsls	r4, r4, #1
 800bdf4:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 800bdf8:	e7e6      	b.n	800bdc8 <__ieee754_powf+0x28>
 800bdfa:	2e00      	cmp	r6, #0
 800bdfc:	da1e      	bge.n	800be3c <__ieee754_powf+0x9c>
 800bdfe:	f1b9 4f97 	cmp.w	r9, #1266679808	@ 0x4b800000
 800be02:	d22b      	bcs.n	800be5c <__ieee754_powf+0xbc>
 800be04:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800be08:	d332      	bcc.n	800be70 <__ieee754_powf+0xd0>
 800be0a:	ea4f 53e9 	mov.w	r3, r9, asr #23
 800be0e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 800be12:	fa49 f503 	asr.w	r5, r9, r3
 800be16:	fa05 f303 	lsl.w	r3, r5, r3
 800be1a:	454b      	cmp	r3, r9
 800be1c:	d126      	bne.n	800be6c <__ieee754_powf+0xcc>
 800be1e:	f005 0501 	and.w	r5, r5, #1
 800be22:	f1c5 0502 	rsb	r5, r5, #2
 800be26:	f1b9 5f7e 	cmp.w	r9, #1065353216	@ 0x3f800000
 800be2a:	d122      	bne.n	800be72 <__ieee754_powf+0xd2>
 800be2c:	2c00      	cmp	r4, #0
 800be2e:	f280 826f 	bge.w	800c310 <__ieee754_powf+0x570>
 800be32:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800be36:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800be3a:	e7c9      	b.n	800bdd0 <__ieee754_powf+0x30>
 800be3c:	2500      	movs	r5, #0
 800be3e:	f1b9 4fff 	cmp.w	r9, #2139095040	@ 0x7f800000
 800be42:	d1f0      	bne.n	800be26 <__ieee754_powf+0x86>
 800be44:	f1b8 5f7e 	cmp.w	r8, #1065353216	@ 0x3f800000
 800be48:	f000 825c 	beq.w	800c304 <__ieee754_powf+0x564>
 800be4c:	d908      	bls.n	800be60 <__ieee754_powf+0xc0>
 800be4e:	ed9f 0ad8 	vldr	s0, [pc, #864]	@ 800c1b0 <__ieee754_powf+0x410>
 800be52:	2c00      	cmp	r4, #0
 800be54:	bfa8      	it	ge
 800be56:	eeb0 0a68 	vmovge.f32	s0, s17
 800be5a:	e7b9      	b.n	800bdd0 <__ieee754_powf+0x30>
 800be5c:	2502      	movs	r5, #2
 800be5e:	e7ee      	b.n	800be3e <__ieee754_powf+0x9e>
 800be60:	2c00      	cmp	r4, #0
 800be62:	f280 8252 	bge.w	800c30a <__ieee754_powf+0x56a>
 800be66:	eeb1 0a68 	vneg.f32	s0, s17
 800be6a:	e7b1      	b.n	800bdd0 <__ieee754_powf+0x30>
 800be6c:	2500      	movs	r5, #0
 800be6e:	e7da      	b.n	800be26 <__ieee754_powf+0x86>
 800be70:	2500      	movs	r5, #0
 800be72:	f1b4 4f80 	cmp.w	r4, #1073741824	@ 0x40000000
 800be76:	d102      	bne.n	800be7e <__ieee754_powf+0xde>
 800be78:	ee28 0a08 	vmul.f32	s0, s16, s16
 800be7c:	e7a8      	b.n	800bdd0 <__ieee754_powf+0x30>
 800be7e:	f1b4 5f7c 	cmp.w	r4, #1056964608	@ 0x3f000000
 800be82:	d109      	bne.n	800be98 <__ieee754_powf+0xf8>
 800be84:	2e00      	cmp	r6, #0
 800be86:	db07      	blt.n	800be98 <__ieee754_powf+0xf8>
 800be88:	eeb0 0a48 	vmov.f32	s0, s16
 800be8c:	ecbd 8b02 	vpop	{d8}
 800be90:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be94:	f7fe bfde 	b.w	800ae54 <__ieee754_sqrtf>
 800be98:	eeb0 0a48 	vmov.f32	s0, s16
 800be9c:	f000 fa50 	bl	800c340 <fabsf>
 800bea0:	f026 4340 	bic.w	r3, r6, #3221225472	@ 0xc0000000
 800bea4:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 800bea8:	4647      	mov	r7, r8
 800beaa:	d002      	beq.n	800beb2 <__ieee754_powf+0x112>
 800beac:	f1b8 0f00 	cmp.w	r8, #0
 800beb0:	d117      	bne.n	800bee2 <__ieee754_powf+0x142>
 800beb2:	2c00      	cmp	r4, #0
 800beb4:	bfbc      	itt	lt
 800beb6:	eef7 7a00 	vmovlt.f32	s15, #112	@ 0x3f800000  1.0
 800beba:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800bebe:	2e00      	cmp	r6, #0
 800bec0:	da86      	bge.n	800bdd0 <__ieee754_powf+0x30>
 800bec2:	f1a8 587e 	sub.w	r8, r8, #1065353216	@ 0x3f800000
 800bec6:	ea58 0805 	orrs.w	r8, r8, r5
 800beca:	d104      	bne.n	800bed6 <__ieee754_powf+0x136>
 800becc:	ee70 7a40 	vsub.f32	s15, s0, s0
 800bed0:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800bed4:	e77c      	b.n	800bdd0 <__ieee754_powf+0x30>
 800bed6:	2d01      	cmp	r5, #1
 800bed8:	f47f af7a 	bne.w	800bdd0 <__ieee754_powf+0x30>
 800bedc:	eeb1 0a40 	vneg.f32	s0, s0
 800bee0:	e776      	b.n	800bdd0 <__ieee754_powf+0x30>
 800bee2:	0ff0      	lsrs	r0, r6, #31
 800bee4:	3801      	subs	r0, #1
 800bee6:	ea55 0300 	orrs.w	r3, r5, r0
 800beea:	d104      	bne.n	800bef6 <__ieee754_powf+0x156>
 800beec:	ee38 8a48 	vsub.f32	s16, s16, s16
 800bef0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800bef4:	e76c      	b.n	800bdd0 <__ieee754_powf+0x30>
 800bef6:	f1b9 4f9a 	cmp.w	r9, #1291845632	@ 0x4d000000
 800befa:	d973      	bls.n	800bfe4 <__ieee754_powf+0x244>
 800befc:	4bad      	ldr	r3, [pc, #692]	@ (800c1b4 <__ieee754_powf+0x414>)
 800befe:	4598      	cmp	r8, r3
 800bf00:	d808      	bhi.n	800bf14 <__ieee754_powf+0x174>
 800bf02:	2c00      	cmp	r4, #0
 800bf04:	da0b      	bge.n	800bf1e <__ieee754_powf+0x17e>
 800bf06:	2000      	movs	r0, #0
 800bf08:	ecbd 8b02 	vpop	{d8}
 800bf0c:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf10:	f000 bb60 	b.w	800c5d4 <__math_oflowf>
 800bf14:	4ba8      	ldr	r3, [pc, #672]	@ (800c1b8 <__ieee754_powf+0x418>)
 800bf16:	4598      	cmp	r8, r3
 800bf18:	d908      	bls.n	800bf2c <__ieee754_powf+0x18c>
 800bf1a:	2c00      	cmp	r4, #0
 800bf1c:	dcf3      	bgt.n	800bf06 <__ieee754_powf+0x166>
 800bf1e:	2000      	movs	r0, #0
 800bf20:	ecbd 8b02 	vpop	{d8}
 800bf24:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf28:	f000 bb4e 	b.w	800c5c8 <__math_uflowf>
 800bf2c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800bf30:	ee30 0a67 	vsub.f32	s0, s0, s15
 800bf34:	eddf 6aa1 	vldr	s13, [pc, #644]	@ 800c1bc <__ieee754_powf+0x41c>
 800bf38:	eef5 7a00 	vmov.f32	s15, #80	@ 0x3e800000  0.250
 800bf3c:	eee0 6a67 	vfms.f32	s13, s0, s15
 800bf40:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800bf44:	eee6 7ac0 	vfms.f32	s15, s13, s0
 800bf48:	ee20 7a00 	vmul.f32	s14, s0, s0
 800bf4c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800bf50:	eddf 7a9b 	vldr	s15, [pc, #620]	@ 800c1c0 <__ieee754_powf+0x420>
 800bf54:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800bf58:	ed9f 7a9a 	vldr	s14, [pc, #616]	@ 800c1c4 <__ieee754_powf+0x424>
 800bf5c:	eee0 7a07 	vfma.f32	s15, s0, s14
 800bf60:	ed9f 7a99 	vldr	s14, [pc, #612]	@ 800c1c8 <__ieee754_powf+0x428>
 800bf64:	eef0 6a67 	vmov.f32	s13, s15
 800bf68:	eee0 6a07 	vfma.f32	s13, s0, s14
 800bf6c:	ee16 3a90 	vmov	r3, s13
 800bf70:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800bf74:	f023 030f 	bic.w	r3, r3, #15
 800bf78:	ee06 3a90 	vmov	s13, r3
 800bf7c:	eee0 6a47 	vfms.f32	s13, s0, s14
 800bf80:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800bf84:	3d01      	subs	r5, #1
 800bf86:	f424 647f 	bic.w	r4, r4, #4080	@ 0xff0
 800bf8a:	4305      	orrs	r5, r0
 800bf8c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800bf90:	f024 040f 	bic.w	r4, r4, #15
 800bf94:	eebf 8a00 	vmov.f32	s16, #240	@ 0xbf800000 -1.0
 800bf98:	bf18      	it	ne
 800bf9a:	eeb0 8a47 	vmovne.f32	s16, s14
 800bf9e:	ee07 4a10 	vmov	s14, r4
 800bfa2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800bfa6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800bfaa:	ee07 3a90 	vmov	s15, r3
 800bfae:	eee7 0a27 	vfma.f32	s1, s14, s15
 800bfb2:	ee07 4a10 	vmov	s14, r4
 800bfb6:	ee67 7a87 	vmul.f32	s15, s15, s14
 800bfba:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800bfbe:	ee17 1a10 	vmov	r1, s14
 800bfc2:	2900      	cmp	r1, #0
 800bfc4:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800bfc8:	f340 80dd 	ble.w	800c186 <__ieee754_powf+0x3e6>
 800bfcc:	f1b3 4f86 	cmp.w	r3, #1124073472	@ 0x43000000
 800bfd0:	f240 80ca 	bls.w	800c168 <__ieee754_powf+0x3c8>
 800bfd4:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bfd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfdc:	bf4c      	ite	mi
 800bfde:	2001      	movmi	r0, #1
 800bfe0:	2000      	movpl	r0, #0
 800bfe2:	e791      	b.n	800bf08 <__ieee754_powf+0x168>
 800bfe4:	f016 4fff 	tst.w	r6, #2139095040	@ 0x7f800000
 800bfe8:	bf01      	itttt	eq
 800bfea:	eddf 7a78 	vldreq	s15, [pc, #480]	@ 800c1cc <__ieee754_powf+0x42c>
 800bfee:	ee60 7a27 	vmuleq.f32	s15, s0, s15
 800bff2:	f06f 0317 	mvneq.w	r3, #23
 800bff6:	ee17 7a90 	vmoveq	r7, s15
 800bffa:	ea4f 52e7 	mov.w	r2, r7, asr #23
 800bffe:	bf18      	it	ne
 800c000:	2300      	movne	r3, #0
 800c002:	3a7f      	subs	r2, #127	@ 0x7f
 800c004:	441a      	add	r2, r3
 800c006:	4b72      	ldr	r3, [pc, #456]	@ (800c1d0 <__ieee754_powf+0x430>)
 800c008:	f3c7 0716 	ubfx	r7, r7, #0, #23
 800c00c:	429f      	cmp	r7, r3
 800c00e:	f047 517e 	orr.w	r1, r7, #1065353216	@ 0x3f800000
 800c012:	dd06      	ble.n	800c022 <__ieee754_powf+0x282>
 800c014:	4b6f      	ldr	r3, [pc, #444]	@ (800c1d4 <__ieee754_powf+0x434>)
 800c016:	429f      	cmp	r7, r3
 800c018:	f340 80a4 	ble.w	800c164 <__ieee754_powf+0x3c4>
 800c01c:	3201      	adds	r2, #1
 800c01e:	f5a1 0100 	sub.w	r1, r1, #8388608	@ 0x800000
 800c022:	2600      	movs	r6, #0
 800c024:	4b6c      	ldr	r3, [pc, #432]	@ (800c1d8 <__ieee754_powf+0x438>)
 800c026:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 800c02a:	ee07 1a10 	vmov	s14, r1
 800c02e:	edd3 5a00 	vldr	s11, [r3]
 800c032:	4b6a      	ldr	r3, [pc, #424]	@ (800c1dc <__ieee754_powf+0x43c>)
 800c034:	ee75 7a87 	vadd.f32	s15, s11, s14
 800c038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c03c:	eec6 4aa7 	vdiv.f32	s9, s13, s15
 800c040:	1049      	asrs	r1, r1, #1
 800c042:	f041 5100 	orr.w	r1, r1, #536870912	@ 0x20000000
 800c046:	f501 2180 	add.w	r1, r1, #262144	@ 0x40000
 800c04a:	eb01 5146 	add.w	r1, r1, r6, lsl #21
 800c04e:	ee37 6a65 	vsub.f32	s12, s14, s11
 800c052:	ee07 1a90 	vmov	s15, r1
 800c056:	ee26 5a24 	vmul.f32	s10, s12, s9
 800c05a:	ee77 5ae5 	vsub.f32	s11, s15, s11
 800c05e:	ee15 7a10 	vmov	r7, s10
 800c062:	401f      	ands	r7, r3
 800c064:	ee06 7a90 	vmov	s13, r7
 800c068:	eea6 6ae7 	vfms.f32	s12, s13, s15
 800c06c:	ee37 7a65 	vsub.f32	s14, s14, s11
 800c070:	ee65 7a05 	vmul.f32	s15, s10, s10
 800c074:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800c078:	eddf 5a59 	vldr	s11, [pc, #356]	@ 800c1e0 <__ieee754_powf+0x440>
 800c07c:	ed9f 7a59 	vldr	s14, [pc, #356]	@ 800c1e4 <__ieee754_powf+0x444>
 800c080:	eee7 5a87 	vfma.f32	s11, s15, s14
 800c084:	ed9f 7a58 	vldr	s14, [pc, #352]	@ 800c1e8 <__ieee754_powf+0x448>
 800c088:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c08c:	eddf 5a4b 	vldr	s11, [pc, #300]	@ 800c1bc <__ieee754_powf+0x41c>
 800c090:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c094:	ed9f 7a55 	vldr	s14, [pc, #340]	@ 800c1ec <__ieee754_powf+0x44c>
 800c098:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800c09c:	eddf 5a54 	vldr	s11, [pc, #336]	@ 800c1f0 <__ieee754_powf+0x450>
 800c0a0:	ee26 6a24 	vmul.f32	s12, s12, s9
 800c0a4:	eee7 5a27 	vfma.f32	s11, s14, s15
 800c0a8:	ee35 7a26 	vadd.f32	s14, s10, s13
 800c0ac:	ee67 4aa7 	vmul.f32	s9, s15, s15
 800c0b0:	ee27 7a06 	vmul.f32	s14, s14, s12
 800c0b4:	eef0 7a08 	vmov.f32	s15, #8	@ 0x40400000  3.0
 800c0b8:	eea4 7aa5 	vfma.f32	s14, s9, s11
 800c0bc:	eef0 5a67 	vmov.f32	s11, s15
 800c0c0:	eee6 5aa6 	vfma.f32	s11, s13, s13
 800c0c4:	ee75 5a87 	vadd.f32	s11, s11, s14
 800c0c8:	ee15 1a90 	vmov	r1, s11
 800c0cc:	4019      	ands	r1, r3
 800c0ce:	ee05 1a90 	vmov	s11, r1
 800c0d2:	ee75 7ae7 	vsub.f32	s15, s11, s15
 800c0d6:	eee6 7ae6 	vfms.f32	s15, s13, s13
 800c0da:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c0de:	ee67 7a85 	vmul.f32	s15, s15, s10
 800c0e2:	eee6 7a25 	vfma.f32	s15, s12, s11
 800c0e6:	eeb0 6a67 	vmov.f32	s12, s15
 800c0ea:	eea6 6aa5 	vfma.f32	s12, s13, s11
 800c0ee:	ee16 1a10 	vmov	r1, s12
 800c0f2:	4019      	ands	r1, r3
 800c0f4:	ee06 1a10 	vmov	s12, r1
 800c0f8:	eeb0 7a46 	vmov.f32	s14, s12
 800c0fc:	eea6 7ae5 	vfms.f32	s14, s13, s11
 800c100:	493c      	ldr	r1, [pc, #240]	@ (800c1f4 <__ieee754_powf+0x454>)
 800c102:	eb01 0186 	add.w	r1, r1, r6, lsl #2
 800c106:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c10a:	ed9f 7a3b 	vldr	s14, [pc, #236]	@ 800c1f8 <__ieee754_powf+0x458>
 800c10e:	eddf 5a3b 	vldr	s11, [pc, #236]	@ 800c1fc <__ieee754_powf+0x45c>
 800c112:	ee67 7a87 	vmul.f32	s15, s15, s14
 800c116:	ed9f 7a3a 	vldr	s14, [pc, #232]	@ 800c200 <__ieee754_powf+0x460>
 800c11a:	eee6 7a07 	vfma.f32	s15, s12, s14
 800c11e:	ed91 7a00 	vldr	s14, [r1]
 800c122:	ee77 7a87 	vadd.f32	s15, s15, s14
 800c126:	ee07 2a10 	vmov	s14, r2
 800c12a:	eef0 6a67 	vmov.f32	s13, s15
 800c12e:	4a35      	ldr	r2, [pc, #212]	@ (800c204 <__ieee754_powf+0x464>)
 800c130:	eee6 6a25 	vfma.f32	s13, s12, s11
 800c134:	eb02 0286 	add.w	r2, r2, r6, lsl #2
 800c138:	ed92 5a00 	vldr	s10, [r2]
 800c13c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c140:	ee76 6a85 	vadd.f32	s13, s13, s10
 800c144:	ee76 6a87 	vadd.f32	s13, s13, s14
 800c148:	ee16 2a90 	vmov	r2, s13
 800c14c:	4013      	ands	r3, r2
 800c14e:	ee06 3a90 	vmov	s13, r3
 800c152:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800c156:	ee37 7a45 	vsub.f32	s14, s14, s10
 800c15a:	eea6 7a65 	vfms.f32	s14, s12, s11
 800c15e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c162:	e70f      	b.n	800bf84 <__ieee754_powf+0x1e4>
 800c164:	2601      	movs	r6, #1
 800c166:	e75d      	b.n	800c024 <__ieee754_powf+0x284>
 800c168:	d152      	bne.n	800c210 <__ieee754_powf+0x470>
 800c16a:	eddf 6a27 	vldr	s13, [pc, #156]	@ 800c208 <__ieee754_powf+0x468>
 800c16e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c172:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800c176:	eef4 6ac7 	vcmpe.f32	s13, s14
 800c17a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c17e:	f73f af29 	bgt.w	800bfd4 <__ieee754_powf+0x234>
 800c182:	2386      	movs	r3, #134	@ 0x86
 800c184:	e048      	b.n	800c218 <__ieee754_powf+0x478>
 800c186:	4a21      	ldr	r2, [pc, #132]	@ (800c20c <__ieee754_powf+0x46c>)
 800c188:	4293      	cmp	r3, r2
 800c18a:	d907      	bls.n	800c19c <__ieee754_powf+0x3fc>
 800c18c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c190:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c194:	bf4c      	ite	mi
 800c196:	2001      	movmi	r0, #1
 800c198:	2000      	movpl	r0, #0
 800c19a:	e6c1      	b.n	800bf20 <__ieee754_powf+0x180>
 800c19c:	d138      	bne.n	800c210 <__ieee754_powf+0x470>
 800c19e:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c1a2:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800c1a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1aa:	dbea      	blt.n	800c182 <__ieee754_powf+0x3e2>
 800c1ac:	e7ee      	b.n	800c18c <__ieee754_powf+0x3ec>
 800c1ae:	bf00      	nop
 800c1b0:	00000000 	.word	0x00000000
 800c1b4:	3f7ffff3 	.word	0x3f7ffff3
 800c1b8:	3f800007 	.word	0x3f800007
 800c1bc:	3eaaaaab 	.word	0x3eaaaaab
 800c1c0:	3fb8aa3b 	.word	0x3fb8aa3b
 800c1c4:	36eca570 	.word	0x36eca570
 800c1c8:	3fb8aa00 	.word	0x3fb8aa00
 800c1cc:	4b800000 	.word	0x4b800000
 800c1d0:	001cc471 	.word	0x001cc471
 800c1d4:	005db3d6 	.word	0x005db3d6
 800c1d8:	0800cba0 	.word	0x0800cba0
 800c1dc:	fffff000 	.word	0xfffff000
 800c1e0:	3e6c3255 	.word	0x3e6c3255
 800c1e4:	3e53f142 	.word	0x3e53f142
 800c1e8:	3e8ba305 	.word	0x3e8ba305
 800c1ec:	3edb6db7 	.word	0x3edb6db7
 800c1f0:	3f19999a 	.word	0x3f19999a
 800c1f4:	0800cb90 	.word	0x0800cb90
 800c1f8:	3f76384f 	.word	0x3f76384f
 800c1fc:	3f763800 	.word	0x3f763800
 800c200:	369dc3a0 	.word	0x369dc3a0
 800c204:	0800cb98 	.word	0x0800cb98
 800c208:	3338aa3c 	.word	0x3338aa3c
 800c20c:	43160000 	.word	0x43160000
 800c210:	f1b3 5f7c 	cmp.w	r3, #1056964608	@ 0x3f000000
 800c214:	d971      	bls.n	800c2fa <__ieee754_powf+0x55a>
 800c216:	15db      	asrs	r3, r3, #23
 800c218:	3b7e      	subs	r3, #126	@ 0x7e
 800c21a:	f44f 0000 	mov.w	r0, #8388608	@ 0x800000
 800c21e:	4118      	asrs	r0, r3
 800c220:	4408      	add	r0, r1
 800c222:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800c226:	4a3c      	ldr	r2, [pc, #240]	@ (800c318 <__ieee754_powf+0x578>)
 800c228:	3b7f      	subs	r3, #127	@ 0x7f
 800c22a:	411a      	asrs	r2, r3
 800c22c:	4002      	ands	r2, r0
 800c22e:	ee07 2a10 	vmov	s14, r2
 800c232:	f3c0 0016 	ubfx	r0, r0, #0, #23
 800c236:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 800c23a:	f1c3 0317 	rsb	r3, r3, #23
 800c23e:	4118      	asrs	r0, r3
 800c240:	2900      	cmp	r1, #0
 800c242:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800c246:	bfb8      	it	lt
 800c248:	4240      	neglt	r0, r0
 800c24a:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800c24e:	eddf 6a33 	vldr	s13, [pc, #204]	@ 800c31c <__ieee754_powf+0x57c>
 800c252:	ed9f 6a33 	vldr	s12, [pc, #204]	@ 800c320 <__ieee754_powf+0x580>
 800c256:	ee17 3a10 	vmov	r3, s14
 800c25a:	f423 637f 	bic.w	r3, r3, #4080	@ 0xff0
 800c25e:	f023 030f 	bic.w	r3, r3, #15
 800c262:	ee07 3a10 	vmov	s14, r3
 800c266:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c26a:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c26e:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800c272:	eddf 7a2c 	vldr	s15, [pc, #176]	@ 800c324 <__ieee754_powf+0x584>
 800c276:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c27a:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800c27e:	eef0 6a67 	vmov.f32	s13, s15
 800c282:	eee7 6a06 	vfma.f32	s13, s14, s12
 800c286:	eef0 5a66 	vmov.f32	s11, s13
 800c28a:	eee7 5a46 	vfms.f32	s11, s14, s12
 800c28e:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800c292:	ee77 7ae5 	vsub.f32	s15, s15, s11
 800c296:	ed9f 6a24 	vldr	s12, [pc, #144]	@ 800c328 <__ieee754_powf+0x588>
 800c29a:	eddf 5a24 	vldr	s11, [pc, #144]	@ 800c32c <__ieee754_powf+0x58c>
 800c29e:	eea7 6a25 	vfma.f32	s12, s14, s11
 800c2a2:	eddf 5a23 	vldr	s11, [pc, #140]	@ 800c330 <__ieee754_powf+0x590>
 800c2a6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c2aa:	ed9f 6a22 	vldr	s12, [pc, #136]	@ 800c334 <__ieee754_powf+0x594>
 800c2ae:	eea5 6a87 	vfma.f32	s12, s11, s14
 800c2b2:	eddf 5a21 	vldr	s11, [pc, #132]	@ 800c338 <__ieee754_powf+0x598>
 800c2b6:	eee6 5a07 	vfma.f32	s11, s12, s14
 800c2ba:	eeb0 6a66 	vmov.f32	s12, s13
 800c2be:	eea5 6ac7 	vfms.f32	s12, s11, s14
 800c2c2:	eeb0 7a00 	vmov.f32	s14, #0	@ 0x40000000  2.0
 800c2c6:	ee66 5a86 	vmul.f32	s11, s13, s12
 800c2ca:	ee36 6a47 	vsub.f32	s12, s12, s14
 800c2ce:	eee6 7aa7 	vfma.f32	s15, s13, s15
 800c2d2:	ee85 7a86 	vdiv.f32	s14, s11, s12
 800c2d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800c2da:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800c2de:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c2e2:	ee10 3a10 	vmov	r3, s0
 800c2e6:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800c2ea:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800c2ee:	da06      	bge.n	800c2fe <__ieee754_powf+0x55e>
 800c2f0:	f000 f8ea 	bl	800c4c8 <scalbnf>
 800c2f4:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c2f8:	e56a      	b.n	800bdd0 <__ieee754_powf+0x30>
 800c2fa:	2000      	movs	r0, #0
 800c2fc:	e7a5      	b.n	800c24a <__ieee754_powf+0x4aa>
 800c2fe:	ee00 3a10 	vmov	s0, r3
 800c302:	e7f7      	b.n	800c2f4 <__ieee754_powf+0x554>
 800c304:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 800c308:	e562      	b.n	800bdd0 <__ieee754_powf+0x30>
 800c30a:	ed9f 0a0c 	vldr	s0, [pc, #48]	@ 800c33c <__ieee754_powf+0x59c>
 800c30e:	e55f      	b.n	800bdd0 <__ieee754_powf+0x30>
 800c310:	eeb0 0a48 	vmov.f32	s0, s16
 800c314:	e55c      	b.n	800bdd0 <__ieee754_powf+0x30>
 800c316:	bf00      	nop
 800c318:	ff800000 	.word	0xff800000
 800c31c:	3f317218 	.word	0x3f317218
 800c320:	3f317200 	.word	0x3f317200
 800c324:	35bfbe8c 	.word	0x35bfbe8c
 800c328:	b5ddea0e 	.word	0xb5ddea0e
 800c32c:	3331bb4c 	.word	0x3331bb4c
 800c330:	388ab355 	.word	0x388ab355
 800c334:	bb360b61 	.word	0xbb360b61
 800c338:	3e2aaaab 	.word	0x3e2aaaab
 800c33c:	00000000 	.word	0x00000000

0800c340 <fabsf>:
 800c340:	ee10 3a10 	vmov	r3, s0
 800c344:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c348:	ee00 3a10 	vmov	s0, r3
 800c34c:	4770      	bx	lr
	...

0800c350 <scalbn>:
 800c350:	b570      	push	{r4, r5, r6, lr}
 800c352:	ec55 4b10 	vmov	r4, r5, d0
 800c356:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c35a:	4606      	mov	r6, r0
 800c35c:	462b      	mov	r3, r5
 800c35e:	b991      	cbnz	r1, 800c386 <scalbn+0x36>
 800c360:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c364:	4323      	orrs	r3, r4
 800c366:	d03d      	beq.n	800c3e4 <scalbn+0x94>
 800c368:	4b35      	ldr	r3, [pc, #212]	@ (800c440 <scalbn+0xf0>)
 800c36a:	4620      	mov	r0, r4
 800c36c:	4629      	mov	r1, r5
 800c36e:	2200      	movs	r2, #0
 800c370:	f7f4 f94a 	bl	8000608 <__aeabi_dmul>
 800c374:	4b33      	ldr	r3, [pc, #204]	@ (800c444 <scalbn+0xf4>)
 800c376:	429e      	cmp	r6, r3
 800c378:	4604      	mov	r4, r0
 800c37a:	460d      	mov	r5, r1
 800c37c:	da0f      	bge.n	800c39e <scalbn+0x4e>
 800c37e:	a328      	add	r3, pc, #160	@ (adr r3, 800c420 <scalbn+0xd0>)
 800c380:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c384:	e01e      	b.n	800c3c4 <scalbn+0x74>
 800c386:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c38a:	4291      	cmp	r1, r2
 800c38c:	d10b      	bne.n	800c3a6 <scalbn+0x56>
 800c38e:	4622      	mov	r2, r4
 800c390:	4620      	mov	r0, r4
 800c392:	4629      	mov	r1, r5
 800c394:	f7f3 ff82 	bl	800029c <__adddf3>
 800c398:	4604      	mov	r4, r0
 800c39a:	460d      	mov	r5, r1
 800c39c:	e022      	b.n	800c3e4 <scalbn+0x94>
 800c39e:	460b      	mov	r3, r1
 800c3a0:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c3a4:	3936      	subs	r1, #54	@ 0x36
 800c3a6:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c3aa:	4296      	cmp	r6, r2
 800c3ac:	dd0d      	ble.n	800c3ca <scalbn+0x7a>
 800c3ae:	2d00      	cmp	r5, #0
 800c3b0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c428 <scalbn+0xd8>)
 800c3b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3b6:	da02      	bge.n	800c3be <scalbn+0x6e>
 800c3b8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c430 <scalbn+0xe0>)
 800c3ba:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3be:	a31a      	add	r3, pc, #104	@ (adr r3, 800c428 <scalbn+0xd8>)
 800c3c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c4:	f7f4 f920 	bl	8000608 <__aeabi_dmul>
 800c3c8:	e7e6      	b.n	800c398 <scalbn+0x48>
 800c3ca:	1872      	adds	r2, r6, r1
 800c3cc:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c3d0:	428a      	cmp	r2, r1
 800c3d2:	dcec      	bgt.n	800c3ae <scalbn+0x5e>
 800c3d4:	2a00      	cmp	r2, #0
 800c3d6:	dd08      	ble.n	800c3ea <scalbn+0x9a>
 800c3d8:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c3dc:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c3e0:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c3e4:	ec45 4b10 	vmov	d0, r4, r5
 800c3e8:	bd70      	pop	{r4, r5, r6, pc}
 800c3ea:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c3ee:	da08      	bge.n	800c402 <scalbn+0xb2>
 800c3f0:	2d00      	cmp	r5, #0
 800c3f2:	a10b      	add	r1, pc, #44	@ (adr r1, 800c420 <scalbn+0xd0>)
 800c3f4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c3f8:	dac1      	bge.n	800c37e <scalbn+0x2e>
 800c3fa:	a10f      	add	r1, pc, #60	@ (adr r1, 800c438 <scalbn+0xe8>)
 800c3fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c400:	e7bd      	b.n	800c37e <scalbn+0x2e>
 800c402:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c406:	3236      	adds	r2, #54	@ 0x36
 800c408:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c40c:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c410:	4620      	mov	r0, r4
 800c412:	4b0d      	ldr	r3, [pc, #52]	@ (800c448 <scalbn+0xf8>)
 800c414:	4629      	mov	r1, r5
 800c416:	2200      	movs	r2, #0
 800c418:	e7d4      	b.n	800c3c4 <scalbn+0x74>
 800c41a:	bf00      	nop
 800c41c:	f3af 8000 	nop.w
 800c420:	c2f8f359 	.word	0xc2f8f359
 800c424:	01a56e1f 	.word	0x01a56e1f
 800c428:	8800759c 	.word	0x8800759c
 800c42c:	7e37e43c 	.word	0x7e37e43c
 800c430:	8800759c 	.word	0x8800759c
 800c434:	fe37e43c 	.word	0xfe37e43c
 800c438:	c2f8f359 	.word	0xc2f8f359
 800c43c:	81a56e1f 	.word	0x81a56e1f
 800c440:	43500000 	.word	0x43500000
 800c444:	ffff3cb0 	.word	0xffff3cb0
 800c448:	3c900000 	.word	0x3c900000

0800c44c <with_errno>:
 800c44c:	b510      	push	{r4, lr}
 800c44e:	ed2d 8b02 	vpush	{d8}
 800c452:	eeb0 8a40 	vmov.f32	s16, s0
 800c456:	eef0 8a60 	vmov.f32	s17, s1
 800c45a:	4604      	mov	r4, r0
 800c45c:	f7fb f954 	bl	8007708 <__errno>
 800c460:	eeb0 0a48 	vmov.f32	s0, s16
 800c464:	eef0 0a68 	vmov.f32	s1, s17
 800c468:	ecbd 8b02 	vpop	{d8}
 800c46c:	6004      	str	r4, [r0, #0]
 800c46e:	bd10      	pop	{r4, pc}

0800c470 <xflow>:
 800c470:	4603      	mov	r3, r0
 800c472:	b507      	push	{r0, r1, r2, lr}
 800c474:	ec51 0b10 	vmov	r0, r1, d0
 800c478:	b183      	cbz	r3, 800c49c <xflow+0x2c>
 800c47a:	4602      	mov	r2, r0
 800c47c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c480:	e9cd 2300 	strd	r2, r3, [sp]
 800c484:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c488:	f7f4 f8be 	bl	8000608 <__aeabi_dmul>
 800c48c:	ec41 0b10 	vmov	d0, r0, r1
 800c490:	2022      	movs	r0, #34	@ 0x22
 800c492:	b003      	add	sp, #12
 800c494:	f85d eb04 	ldr.w	lr, [sp], #4
 800c498:	f7ff bfd8 	b.w	800c44c <with_errno>
 800c49c:	4602      	mov	r2, r0
 800c49e:	460b      	mov	r3, r1
 800c4a0:	e7ee      	b.n	800c480 <xflow+0x10>
 800c4a2:	0000      	movs	r0, r0
 800c4a4:	0000      	movs	r0, r0
	...

0800c4a8 <__math_uflow>:
 800c4a8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c4b0 <__math_uflow+0x8>
 800c4ac:	f7ff bfe0 	b.w	800c470 <xflow>
 800c4b0:	00000000 	.word	0x00000000
 800c4b4:	10000000 	.word	0x10000000

0800c4b8 <__math_oflow>:
 800c4b8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c4c0 <__math_oflow+0x8>
 800c4bc:	f7ff bfd8 	b.w	800c470 <xflow>
 800c4c0:	00000000 	.word	0x00000000
 800c4c4:	70000000 	.word	0x70000000

0800c4c8 <scalbnf>:
 800c4c8:	ee10 3a10 	vmov	r3, s0
 800c4cc:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 800c4d0:	d02b      	beq.n	800c52a <scalbnf+0x62>
 800c4d2:	f1b2 4fff 	cmp.w	r2, #2139095040	@ 0x7f800000
 800c4d6:	d302      	bcc.n	800c4de <scalbnf+0x16>
 800c4d8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c4dc:	4770      	bx	lr
 800c4de:	f013 4fff 	tst.w	r3, #2139095040	@ 0x7f800000
 800c4e2:	d123      	bne.n	800c52c <scalbnf+0x64>
 800c4e4:	4b24      	ldr	r3, [pc, #144]	@ (800c578 <scalbnf+0xb0>)
 800c4e6:	eddf 7a25 	vldr	s15, [pc, #148]	@ 800c57c <scalbnf+0xb4>
 800c4ea:	4298      	cmp	r0, r3
 800c4ec:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c4f0:	db17      	blt.n	800c522 <scalbnf+0x5a>
 800c4f2:	ee10 3a10 	vmov	r3, s0
 800c4f6:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800c4fa:	3a19      	subs	r2, #25
 800c4fc:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800c500:	4288      	cmp	r0, r1
 800c502:	dd15      	ble.n	800c530 <scalbnf+0x68>
 800c504:	eddf 7a1e 	vldr	s15, [pc, #120]	@ 800c580 <scalbnf+0xb8>
 800c508:	eddf 6a1e 	vldr	s13, [pc, #120]	@ 800c584 <scalbnf+0xbc>
 800c50c:	ee10 3a10 	vmov	r3, s0
 800c510:	eeb0 7a67 	vmov.f32	s14, s15
 800c514:	2b00      	cmp	r3, #0
 800c516:	bfb8      	it	lt
 800c518:	eef0 7a66 	vmovlt.f32	s15, s13
 800c51c:	ee27 0a87 	vmul.f32	s0, s15, s14
 800c520:	4770      	bx	lr
 800c522:	eddf 7a19 	vldr	s15, [pc, #100]	@ 800c588 <scalbnf+0xc0>
 800c526:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c52a:	4770      	bx	lr
 800c52c:	0dd2      	lsrs	r2, r2, #23
 800c52e:	e7e5      	b.n	800c4fc <scalbnf+0x34>
 800c530:	4410      	add	r0, r2
 800c532:	28fe      	cmp	r0, #254	@ 0xfe
 800c534:	dce6      	bgt.n	800c504 <scalbnf+0x3c>
 800c536:	2800      	cmp	r0, #0
 800c538:	dd06      	ble.n	800c548 <scalbnf+0x80>
 800c53a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c53e:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c542:	ee00 3a10 	vmov	s0, r3
 800c546:	4770      	bx	lr
 800c548:	f110 0f16 	cmn.w	r0, #22
 800c54c:	da09      	bge.n	800c562 <scalbnf+0x9a>
 800c54e:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 800c588 <scalbnf+0xc0>
 800c552:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 800c58c <scalbnf+0xc4>
 800c556:	ee10 3a10 	vmov	r3, s0
 800c55a:	eeb0 7a67 	vmov.f32	s14, s15
 800c55e:	2b00      	cmp	r3, #0
 800c560:	e7d9      	b.n	800c516 <scalbnf+0x4e>
 800c562:	3019      	adds	r0, #25
 800c564:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c568:	ea43 53c0 	orr.w	r3, r3, r0, lsl #23
 800c56c:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 800c590 <scalbnf+0xc8>
 800c570:	ee07 3a90 	vmov	s15, r3
 800c574:	e7d7      	b.n	800c526 <scalbnf+0x5e>
 800c576:	bf00      	nop
 800c578:	ffff3cb0 	.word	0xffff3cb0
 800c57c:	4c000000 	.word	0x4c000000
 800c580:	7149f2ca 	.word	0x7149f2ca
 800c584:	f149f2ca 	.word	0xf149f2ca
 800c588:	0da24260 	.word	0x0da24260
 800c58c:	8da24260 	.word	0x8da24260
 800c590:	33000000 	.word	0x33000000

0800c594 <with_errnof>:
 800c594:	b510      	push	{r4, lr}
 800c596:	ed2d 8b02 	vpush	{d8}
 800c59a:	eeb0 8a40 	vmov.f32	s16, s0
 800c59e:	4604      	mov	r4, r0
 800c5a0:	f7fb f8b2 	bl	8007708 <__errno>
 800c5a4:	eeb0 0a48 	vmov.f32	s0, s16
 800c5a8:	ecbd 8b02 	vpop	{d8}
 800c5ac:	6004      	str	r4, [r0, #0]
 800c5ae:	bd10      	pop	{r4, pc}

0800c5b0 <xflowf>:
 800c5b0:	b130      	cbz	r0, 800c5c0 <xflowf+0x10>
 800c5b2:	eef1 7a40 	vneg.f32	s15, s0
 800c5b6:	ee27 0a80 	vmul.f32	s0, s15, s0
 800c5ba:	2022      	movs	r0, #34	@ 0x22
 800c5bc:	f7ff bfea 	b.w	800c594 <with_errnof>
 800c5c0:	eef0 7a40 	vmov.f32	s15, s0
 800c5c4:	e7f7      	b.n	800c5b6 <xflowf+0x6>
	...

0800c5c8 <__math_uflowf>:
 800c5c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c5d0 <__math_uflowf+0x8>
 800c5cc:	f7ff bff0 	b.w	800c5b0 <xflowf>
 800c5d0:	10000000 	.word	0x10000000

0800c5d4 <__math_oflowf>:
 800c5d4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800c5dc <__math_oflowf+0x8>
 800c5d8:	f7ff bfea 	b.w	800c5b0 <xflowf>
 800c5dc:	70000000 	.word	0x70000000

0800c5e0 <_init>:
 800c5e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5e2:	bf00      	nop
 800c5e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5e6:	bc08      	pop	{r3}
 800c5e8:	469e      	mov	lr, r3
 800c5ea:	4770      	bx	lr

0800c5ec <_fini>:
 800c5ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c5ee:	bf00      	nop
 800c5f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c5f2:	bc08      	pop	{r3}
 800c5f4:	469e      	mov	lr, r3
 800c5f6:	4770      	bx	lr
