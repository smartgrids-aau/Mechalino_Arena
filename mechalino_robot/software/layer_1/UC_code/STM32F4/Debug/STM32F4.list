
STM32F4.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000091e4  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001b8  08009388  08009388  00019388  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009540  08009540  00020100  2**0
                  CONTENTS
  4 .ARM          00000008  08009540  08009540  00019540  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009548  08009548  00020100  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009548  08009548  00019548  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800954c  0800954c  0001954c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000100  20000000  08009550  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000031c  20000100  08009650  00020100  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000041c  08009650  0002041c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020100  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020130  2**0
                  CONTENTS, READONLY
 13 .debug_info   00012001  00000000  00000000  00020173  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000028a4  00000000  00000000  00032174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00034a18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000c5d  00000000  00000000  000359c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000174d6  00000000  00000000  00036625  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00014bb8  00000000  00000000  0004dafb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0008feef  00000000  00000000  000626b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004be0  00000000  00000000  000f25a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000095  00000000  00000000  000f7184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000100 	.word	0x20000100
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800936c 	.word	0x0800936c

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000104 	.word	0x20000104
 80001dc:	0800936c 	.word	0x0800936c

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	; 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_uldivmod>:
 8000bb8:	b953      	cbnz	r3, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bba:	b94a      	cbnz	r2, 8000bd0 <__aeabi_uldivmod+0x18>
 8000bbc:	2900      	cmp	r1, #0
 8000bbe:	bf08      	it	eq
 8000bc0:	2800      	cmpeq	r0, #0
 8000bc2:	bf1c      	itt	ne
 8000bc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bcc:	f000 b970 	b.w	8000eb0 <__aeabi_idiv0>
 8000bd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd8:	f000 f806 	bl	8000be8 <__udivmoddi4>
 8000bdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be4:	b004      	add	sp, #16
 8000be6:	4770      	bx	lr

08000be8 <__udivmoddi4>:
 8000be8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bec:	9e08      	ldr	r6, [sp, #32]
 8000bee:	460d      	mov	r5, r1
 8000bf0:	4604      	mov	r4, r0
 8000bf2:	460f      	mov	r7, r1
 8000bf4:	2b00      	cmp	r3, #0
 8000bf6:	d14a      	bne.n	8000c8e <__udivmoddi4+0xa6>
 8000bf8:	428a      	cmp	r2, r1
 8000bfa:	4694      	mov	ip, r2
 8000bfc:	d965      	bls.n	8000cca <__udivmoddi4+0xe2>
 8000bfe:	fab2 f382 	clz	r3, r2
 8000c02:	b143      	cbz	r3, 8000c16 <__udivmoddi4+0x2e>
 8000c04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c08:	f1c3 0220 	rsb	r2, r3, #32
 8000c0c:	409f      	lsls	r7, r3
 8000c0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c12:	4317      	orrs	r7, r2
 8000c14:	409c      	lsls	r4, r3
 8000c16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c1a:	fa1f f58c 	uxth.w	r5, ip
 8000c1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c22:	0c22      	lsrs	r2, r4, #16
 8000c24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c2c:	fb01 f005 	mul.w	r0, r1, r5
 8000c30:	4290      	cmp	r0, r2
 8000c32:	d90a      	bls.n	8000c4a <__udivmoddi4+0x62>
 8000c34:	eb1c 0202 	adds.w	r2, ip, r2
 8000c38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c3c:	f080 811c 	bcs.w	8000e78 <__udivmoddi4+0x290>
 8000c40:	4290      	cmp	r0, r2
 8000c42:	f240 8119 	bls.w	8000e78 <__udivmoddi4+0x290>
 8000c46:	3902      	subs	r1, #2
 8000c48:	4462      	add	r2, ip
 8000c4a:	1a12      	subs	r2, r2, r0
 8000c4c:	b2a4      	uxth	r4, r4
 8000c4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000c5a:	fb00 f505 	mul.w	r5, r0, r5
 8000c5e:	42a5      	cmp	r5, r4
 8000c60:	d90a      	bls.n	8000c78 <__udivmoddi4+0x90>
 8000c62:	eb1c 0404 	adds.w	r4, ip, r4
 8000c66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c6a:	f080 8107 	bcs.w	8000e7c <__udivmoddi4+0x294>
 8000c6e:	42a5      	cmp	r5, r4
 8000c70:	f240 8104 	bls.w	8000e7c <__udivmoddi4+0x294>
 8000c74:	4464      	add	r4, ip
 8000c76:	3802      	subs	r0, #2
 8000c78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c7c:	1b64      	subs	r4, r4, r5
 8000c7e:	2100      	movs	r1, #0
 8000c80:	b11e      	cbz	r6, 8000c8a <__udivmoddi4+0xa2>
 8000c82:	40dc      	lsrs	r4, r3
 8000c84:	2300      	movs	r3, #0
 8000c86:	e9c6 4300 	strd	r4, r3, [r6]
 8000c8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c8e:	428b      	cmp	r3, r1
 8000c90:	d908      	bls.n	8000ca4 <__udivmoddi4+0xbc>
 8000c92:	2e00      	cmp	r6, #0
 8000c94:	f000 80ed 	beq.w	8000e72 <__udivmoddi4+0x28a>
 8000c98:	2100      	movs	r1, #0
 8000c9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000c9e:	4608      	mov	r0, r1
 8000ca0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca4:	fab3 f183 	clz	r1, r3
 8000ca8:	2900      	cmp	r1, #0
 8000caa:	d149      	bne.n	8000d40 <__udivmoddi4+0x158>
 8000cac:	42ab      	cmp	r3, r5
 8000cae:	d302      	bcc.n	8000cb6 <__udivmoddi4+0xce>
 8000cb0:	4282      	cmp	r2, r0
 8000cb2:	f200 80f8 	bhi.w	8000ea6 <__udivmoddi4+0x2be>
 8000cb6:	1a84      	subs	r4, r0, r2
 8000cb8:	eb65 0203 	sbc.w	r2, r5, r3
 8000cbc:	2001      	movs	r0, #1
 8000cbe:	4617      	mov	r7, r2
 8000cc0:	2e00      	cmp	r6, #0
 8000cc2:	d0e2      	beq.n	8000c8a <__udivmoddi4+0xa2>
 8000cc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000cc8:	e7df      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000cca:	b902      	cbnz	r2, 8000cce <__udivmoddi4+0xe6>
 8000ccc:	deff      	udf	#255	; 0xff
 8000cce:	fab2 f382 	clz	r3, r2
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	f040 8090 	bne.w	8000df8 <__udivmoddi4+0x210>
 8000cd8:	1a8a      	subs	r2, r1, r2
 8000cda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cde:	fa1f fe8c 	uxth.w	lr, ip
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000ce8:	fb07 2015 	mls	r0, r7, r5, r2
 8000cec:	0c22      	lsrs	r2, r4, #16
 8000cee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000cf2:	fb0e f005 	mul.w	r0, lr, r5
 8000cf6:	4290      	cmp	r0, r2
 8000cf8:	d908      	bls.n	8000d0c <__udivmoddi4+0x124>
 8000cfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000cfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d02:	d202      	bcs.n	8000d0a <__udivmoddi4+0x122>
 8000d04:	4290      	cmp	r0, r2
 8000d06:	f200 80cb 	bhi.w	8000ea0 <__udivmoddi4+0x2b8>
 8000d0a:	4645      	mov	r5, r8
 8000d0c:	1a12      	subs	r2, r2, r0
 8000d0e:	b2a4      	uxth	r4, r4
 8000d10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d14:	fb07 2210 	mls	r2, r7, r0, r2
 8000d18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d20:	45a6      	cmp	lr, r4
 8000d22:	d908      	bls.n	8000d36 <__udivmoddi4+0x14e>
 8000d24:	eb1c 0404 	adds.w	r4, ip, r4
 8000d28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d2c:	d202      	bcs.n	8000d34 <__udivmoddi4+0x14c>
 8000d2e:	45a6      	cmp	lr, r4
 8000d30:	f200 80bb 	bhi.w	8000eaa <__udivmoddi4+0x2c2>
 8000d34:	4610      	mov	r0, r2
 8000d36:	eba4 040e 	sub.w	r4, r4, lr
 8000d3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d3e:	e79f      	b.n	8000c80 <__udivmoddi4+0x98>
 8000d40:	f1c1 0720 	rsb	r7, r1, #32
 8000d44:	408b      	lsls	r3, r1
 8000d46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000d4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000d4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000d52:	fa20 f307 	lsr.w	r3, r0, r7
 8000d56:	40fd      	lsrs	r5, r7
 8000d58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000d5c:	4323      	orrs	r3, r4
 8000d5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000d62:	fa1f fe8c 	uxth.w	lr, ip
 8000d66:	fb09 5518 	mls	r5, r9, r8, r5
 8000d6a:	0c1c      	lsrs	r4, r3, #16
 8000d6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000d70:	fb08 f50e 	mul.w	r5, r8, lr
 8000d74:	42a5      	cmp	r5, r4
 8000d76:	fa02 f201 	lsl.w	r2, r2, r1
 8000d7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000d7e:	d90b      	bls.n	8000d98 <__udivmoddi4+0x1b0>
 8000d80:	eb1c 0404 	adds.w	r4, ip, r4
 8000d84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000d88:	f080 8088 	bcs.w	8000e9c <__udivmoddi4+0x2b4>
 8000d8c:	42a5      	cmp	r5, r4
 8000d8e:	f240 8085 	bls.w	8000e9c <__udivmoddi4+0x2b4>
 8000d92:	f1a8 0802 	sub.w	r8, r8, #2
 8000d96:	4464      	add	r4, ip
 8000d98:	1b64      	subs	r4, r4, r5
 8000d9a:	b29d      	uxth	r5, r3
 8000d9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da0:	fb09 4413 	mls	r4, r9, r3, r4
 8000da4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000da8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000dac:	45a6      	cmp	lr, r4
 8000dae:	d908      	bls.n	8000dc2 <__udivmoddi4+0x1da>
 8000db0:	eb1c 0404 	adds.w	r4, ip, r4
 8000db4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000db8:	d26c      	bcs.n	8000e94 <__udivmoddi4+0x2ac>
 8000dba:	45a6      	cmp	lr, r4
 8000dbc:	d96a      	bls.n	8000e94 <__udivmoddi4+0x2ac>
 8000dbe:	3b02      	subs	r3, #2
 8000dc0:	4464      	add	r4, ip
 8000dc2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000dc6:	fba3 9502 	umull	r9, r5, r3, r2
 8000dca:	eba4 040e 	sub.w	r4, r4, lr
 8000dce:	42ac      	cmp	r4, r5
 8000dd0:	46c8      	mov	r8, r9
 8000dd2:	46ae      	mov	lr, r5
 8000dd4:	d356      	bcc.n	8000e84 <__udivmoddi4+0x29c>
 8000dd6:	d053      	beq.n	8000e80 <__udivmoddi4+0x298>
 8000dd8:	b156      	cbz	r6, 8000df0 <__udivmoddi4+0x208>
 8000dda:	ebb0 0208 	subs.w	r2, r0, r8
 8000dde:	eb64 040e 	sbc.w	r4, r4, lr
 8000de2:	fa04 f707 	lsl.w	r7, r4, r7
 8000de6:	40ca      	lsrs	r2, r1
 8000de8:	40cc      	lsrs	r4, r1
 8000dea:	4317      	orrs	r7, r2
 8000dec:	e9c6 7400 	strd	r7, r4, [r6]
 8000df0:	4618      	mov	r0, r3
 8000df2:	2100      	movs	r1, #0
 8000df4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df8:	f1c3 0120 	rsb	r1, r3, #32
 8000dfc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e00:	fa20 f201 	lsr.w	r2, r0, r1
 8000e04:	fa25 f101 	lsr.w	r1, r5, r1
 8000e08:	409d      	lsls	r5, r3
 8000e0a:	432a      	orrs	r2, r5
 8000e0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e10:	fa1f fe8c 	uxth.w	lr, ip
 8000e14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e18:	fb07 1510 	mls	r5, r7, r0, r1
 8000e1c:	0c11      	lsrs	r1, r2, #16
 8000e1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e22:	fb00 f50e 	mul.w	r5, r0, lr
 8000e26:	428d      	cmp	r5, r1
 8000e28:	fa04 f403 	lsl.w	r4, r4, r3
 8000e2c:	d908      	bls.n	8000e40 <__udivmoddi4+0x258>
 8000e2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e36:	d22f      	bcs.n	8000e98 <__udivmoddi4+0x2b0>
 8000e38:	428d      	cmp	r5, r1
 8000e3a:	d92d      	bls.n	8000e98 <__udivmoddi4+0x2b0>
 8000e3c:	3802      	subs	r0, #2
 8000e3e:	4461      	add	r1, ip
 8000e40:	1b49      	subs	r1, r1, r5
 8000e42:	b292      	uxth	r2, r2
 8000e44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000e48:	fb07 1115 	mls	r1, r7, r5, r1
 8000e4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e50:	fb05 f10e 	mul.w	r1, r5, lr
 8000e54:	4291      	cmp	r1, r2
 8000e56:	d908      	bls.n	8000e6a <__udivmoddi4+0x282>
 8000e58:	eb1c 0202 	adds.w	r2, ip, r2
 8000e5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e60:	d216      	bcs.n	8000e90 <__udivmoddi4+0x2a8>
 8000e62:	4291      	cmp	r1, r2
 8000e64:	d914      	bls.n	8000e90 <__udivmoddi4+0x2a8>
 8000e66:	3d02      	subs	r5, #2
 8000e68:	4462      	add	r2, ip
 8000e6a:	1a52      	subs	r2, r2, r1
 8000e6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000e70:	e738      	b.n	8000ce4 <__udivmoddi4+0xfc>
 8000e72:	4631      	mov	r1, r6
 8000e74:	4630      	mov	r0, r6
 8000e76:	e708      	b.n	8000c8a <__udivmoddi4+0xa2>
 8000e78:	4639      	mov	r1, r7
 8000e7a:	e6e6      	b.n	8000c4a <__udivmoddi4+0x62>
 8000e7c:	4610      	mov	r0, r2
 8000e7e:	e6fb      	b.n	8000c78 <__udivmoddi4+0x90>
 8000e80:	4548      	cmp	r0, r9
 8000e82:	d2a9      	bcs.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e84:	ebb9 0802 	subs.w	r8, r9, r2
 8000e88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000e8c:	3b01      	subs	r3, #1
 8000e8e:	e7a3      	b.n	8000dd8 <__udivmoddi4+0x1f0>
 8000e90:	4645      	mov	r5, r8
 8000e92:	e7ea      	b.n	8000e6a <__udivmoddi4+0x282>
 8000e94:	462b      	mov	r3, r5
 8000e96:	e794      	b.n	8000dc2 <__udivmoddi4+0x1da>
 8000e98:	4640      	mov	r0, r8
 8000e9a:	e7d1      	b.n	8000e40 <__udivmoddi4+0x258>
 8000e9c:	46d0      	mov	r8, sl
 8000e9e:	e77b      	b.n	8000d98 <__udivmoddi4+0x1b0>
 8000ea0:	3d02      	subs	r5, #2
 8000ea2:	4462      	add	r2, ip
 8000ea4:	e732      	b.n	8000d0c <__udivmoddi4+0x124>
 8000ea6:	4608      	mov	r0, r1
 8000ea8:	e70a      	b.n	8000cc0 <__udivmoddi4+0xd8>
 8000eaa:	4464      	add	r4, ip
 8000eac:	3802      	subs	r0, #2
 8000eae:	e742      	b.n	8000d36 <__udivmoddi4+0x14e>

08000eb0 <__aeabi_idiv0>:
 8000eb0:	4770      	bx	lr
 8000eb2:	bf00      	nop

08000eb4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08a      	sub	sp, #40	; 0x28
 8000eb8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000eba:	f107 0314 	add.w	r3, r7, #20
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
 8000ec8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000eca:	2300      	movs	r3, #0
 8000ecc:	613b      	str	r3, [r7, #16]
 8000ece:	4b27      	ldr	r3, [pc, #156]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ed2:	4a26      	ldr	r2, [pc, #152]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ed4:	f043 0304 	orr.w	r3, r3, #4
 8000ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8000eda:	4b24      	ldr	r3, [pc, #144]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ede:	f003 0304 	and.w	r3, r3, #4
 8000ee2:	613b      	str	r3, [r7, #16]
 8000ee4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ee6:	2300      	movs	r3, #0
 8000ee8:	60fb      	str	r3, [r7, #12]
 8000eea:	4b20      	ldr	r3, [pc, #128]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000eee:	4a1f      	ldr	r2, [pc, #124]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ef6:	4b1d      	ldr	r3, [pc, #116]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000efe:	60fb      	str	r3, [r7, #12]
 8000f00:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f02:	2300      	movs	r3, #0
 8000f04:	60bb      	str	r3, [r7, #8]
 8000f06:	4b19      	ldr	r3, [pc, #100]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0a:	4a18      	ldr	r2, [pc, #96]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f0c:	f043 0302 	orr.w	r3, r3, #2
 8000f10:	6313      	str	r3, [r2, #48]	; 0x30
 8000f12:	4b16      	ldr	r3, [pc, #88]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f16:	f003 0302 	and.w	r3, r3, #2
 8000f1a:	60bb      	str	r3, [r7, #8]
 8000f1c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f1e:	2300      	movs	r3, #0
 8000f20:	607b      	str	r3, [r7, #4]
 8000f22:	4b12      	ldr	r3, [pc, #72]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f26:	4a11      	ldr	r2, [pc, #68]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f28:	f043 0301 	orr.w	r3, r3, #1
 8000f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000f2e:	4b0f      	ldr	r3, [pc, #60]	; (8000f6c <MX_GPIO_Init+0xb8>)
 8000f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f32:	f003 0301 	and.w	r3, r3, #1
 8000f36:	607b      	str	r3, [r7, #4]
 8000f38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000f40:	480b      	ldr	r0, [pc, #44]	; (8000f70 <MX_GPIO_Init+0xbc>)
 8000f42:	f002 f9e1 	bl	8003308 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8000f46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000f4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f4c:	2301      	movs	r3, #1
 8000f4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	2300      	movs	r3, #0
 8000f52:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f54:	2300      	movs	r3, #0
 8000f56:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8000f58:	f107 0314 	add.w	r3, r7, #20
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	4804      	ldr	r0, [pc, #16]	; (8000f70 <MX_GPIO_Init+0xbc>)
 8000f60:	f002 f84e 	bl	8003000 <HAL_GPIO_Init>

}
 8000f64:	bf00      	nop
 8000f66:	3728      	adds	r7, #40	; 0x28
 8000f68:	46bd      	mov	sp, r7
 8000f6a:	bd80      	pop	{r7, pc}
 8000f6c:	40023800 	.word	0x40023800
 8000f70:	40020800 	.word	0x40020800

08000f74 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f7a:	4a13      	ldr	r2, [pc, #76]	; (8000fc8 <MX_I2C1_Init+0x54>)
 8000f7c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f80:	4a12      	ldr	r2, [pc, #72]	; (8000fcc <MX_I2C1_Init+0x58>)
 8000f82:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000f84:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000f8a:	4b0e      	ldr	r3, [pc, #56]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f8c:	2200      	movs	r2, #0
 8000f8e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f90:	4b0c      	ldr	r3, [pc, #48]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f92:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000f96:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f98:	4b0a      	ldr	r3, [pc, #40]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f9e:	4b09      	ldr	r3, [pc, #36]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000faa:	4b06      	ldr	r3, [pc, #24]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fac:	2200      	movs	r2, #0
 8000fae:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000fb0:	4804      	ldr	r0, [pc, #16]	; (8000fc4 <MX_I2C1_Init+0x50>)
 8000fb2:	f002 f9dd 	bl	8003370 <HAL_I2C_Init>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000fbc:	f000 fefc 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	2000011c 	.word	0x2000011c
 8000fc8:	40005400 	.word	0x40005400
 8000fcc:	00061a80 	.word	0x00061a80

08000fd0 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	b08a      	sub	sp, #40	; 0x28
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fd8:	f107 0314 	add.w	r3, r7, #20
 8000fdc:	2200      	movs	r2, #0
 8000fde:	601a      	str	r2, [r3, #0]
 8000fe0:	605a      	str	r2, [r3, #4]
 8000fe2:	609a      	str	r2, [r3, #8]
 8000fe4:	60da      	str	r2, [r3, #12]
 8000fe6:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8000fe8:	687b      	ldr	r3, [r7, #4]
 8000fea:	681b      	ldr	r3, [r3, #0]
 8000fec:	4a1d      	ldr	r2, [pc, #116]	; (8001064 <HAL_I2C_MspInit+0x94>)
 8000fee:	4293      	cmp	r3, r2
 8000ff0:	d134      	bne.n	800105c <HAL_I2C_MspInit+0x8c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	613b      	str	r3, [r7, #16]
 8000ff6:	4b1c      	ldr	r3, [pc, #112]	; (8001068 <HAL_I2C_MspInit+0x98>)
 8000ff8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ffa:	4a1b      	ldr	r2, [pc, #108]	; (8001068 <HAL_I2C_MspInit+0x98>)
 8000ffc:	f043 0302 	orr.w	r3, r3, #2
 8001000:	6313      	str	r3, [r2, #48]	; 0x30
 8001002:	4b19      	ldr	r3, [pc, #100]	; (8001068 <HAL_I2C_MspInit+0x98>)
 8001004:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001006:	f003 0302 	and.w	r3, r3, #2
 800100a:	613b      	str	r3, [r7, #16]
 800100c:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800100e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001012:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001014:	2312      	movs	r3, #18
 8001016:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001018:	2300      	movs	r3, #0
 800101a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800101c:	2303      	movs	r3, #3
 800101e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001020:	2304      	movs	r3, #4
 8001022:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001024:	f107 0314 	add.w	r3, r7, #20
 8001028:	4619      	mov	r1, r3
 800102a:	4810      	ldr	r0, [pc, #64]	; (800106c <HAL_I2C_MspInit+0x9c>)
 800102c:	f001 ffe8 	bl	8003000 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
 8001034:	4b0c      	ldr	r3, [pc, #48]	; (8001068 <HAL_I2C_MspInit+0x98>)
 8001036:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001038:	4a0b      	ldr	r2, [pc, #44]	; (8001068 <HAL_I2C_MspInit+0x98>)
 800103a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800103e:	6413      	str	r3, [r2, #64]	; 0x40
 8001040:	4b09      	ldr	r3, [pc, #36]	; (8001068 <HAL_I2C_MspInit+0x98>)
 8001042:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001044:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001048:	60fb      	str	r3, [r7, #12]
 800104a:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800104c:	2200      	movs	r2, #0
 800104e:	2100      	movs	r1, #0
 8001050:	201f      	movs	r0, #31
 8001052:	f001 fefe 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001056:	201f      	movs	r0, #31
 8001058:	f001 ff17 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 800105c:	bf00      	nop
 800105e:	3728      	adds	r7, #40	; 0x28
 8001060:	46bd      	mov	sp, r7
 8001062:	bd80      	pop	{r7, pc}
 8001064:	40005400 	.word	0x40005400
 8001068:	40023800 	.word	0x40023800
 800106c:	40020400 	.word	0x40020400

08001070 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	4603      	mov	r3, r0
 8001078:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800107a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800107e:	2b00      	cmp	r3, #0
 8001080:	db0b      	blt.n	800109a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001082:	79fb      	ldrb	r3, [r7, #7]
 8001084:	f003 021f 	and.w	r2, r3, #31
 8001088:	4907      	ldr	r1, [pc, #28]	; (80010a8 <__NVIC_EnableIRQ+0x38>)
 800108a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800108e:	095b      	lsrs	r3, r3, #5
 8001090:	2001      	movs	r0, #1
 8001092:	fa00 f202 	lsl.w	r2, r0, r2
 8001096:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800109a:	bf00      	nop
 800109c:	370c      	adds	r7, #12
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	e000e100 	.word	0xe000e100

080010ac <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) //go inside each time caractere is send on serial
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
	static uint8_t length = 0;
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80010b4:	2201      	movs	r2, #1
 80010b6:	491b      	ldr	r1, [pc, #108]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010b8:	481b      	ldr	r0, [pc, #108]	; (8001128 <HAL_UART_RxCpltCallback+0x7c>)
 80010ba:	f006 f876 	bl	80071aa <HAL_UART_Receive_IT>
	if (!(((UART1_rxBuffer[0] == '\n') || (UART1_rxBuffer[0] == '\r'))
 80010be:	4b19      	ldr	r3, [pc, #100]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010c0:	781b      	ldrb	r3, [r3, #0]
 80010c2:	2b0a      	cmp	r3, #10
 80010c4:	d003      	beq.n	80010ce <HAL_UART_RxCpltCallback+0x22>
 80010c6:	4b17      	ldr	r3, [pc, #92]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	2b0d      	cmp	r3, #13
 80010cc:	d103      	bne.n	80010d6 <HAL_UART_RxCpltCallback+0x2a>
			&& (length == 0))) //if recive real data ( not just "\r\n")
 80010ce:	4b17      	ldr	r3, [pc, #92]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 80010d0:	781b      	ldrb	r3, [r3, #0]
	if (!(((UART1_rxBuffer[0] == '\n') || (UART1_rxBuffer[0] == '\r'))
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d022      	beq.n	800111c <HAL_UART_RxCpltCallback+0x70>
	{
		rx_buffer[length] = UART1_rxBuffer[0]; //copy the recived caractere on buffer
 80010d6:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 80010d8:	781b      	ldrb	r3, [r3, #0]
 80010da:	461a      	mov	r2, r3
 80010dc:	4b11      	ldr	r3, [pc, #68]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010de:	7819      	ldrb	r1, [r3, #0]
 80010e0:	4b13      	ldr	r3, [pc, #76]	; (8001130 <HAL_UART_RxCpltCallback+0x84>)
 80010e2:	5499      	strb	r1, [r3, r2]
		length++;
 80010e4:	4b11      	ldr	r3, [pc, #68]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	3301      	adds	r3, #1
 80010ea:	b2da      	uxtb	r2, r3
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 80010ee:	701a      	strb	r2, [r3, #0]
		if ((UART1_rxBuffer[0] == '\n') || (UART1_rxBuffer[0] == '\r')
 80010f0:	4b0c      	ldr	r3, [pc, #48]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010f2:	781b      	ldrb	r3, [r3, #0]
 80010f4:	2b0a      	cmp	r3, #10
 80010f6:	d007      	beq.n	8001108 <HAL_UART_RxCpltCallback+0x5c>
 80010f8:	4b0a      	ldr	r3, [pc, #40]	; (8001124 <HAL_UART_RxCpltCallback+0x78>)
 80010fa:	781b      	ldrb	r3, [r3, #0]
 80010fc:	2b0d      	cmp	r3, #13
 80010fe:	d003      	beq.n	8001108 <HAL_UART_RxCpltCallback+0x5c>
				|| (length == 20)) //if end of sending data, quit
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 8001102:	781b      	ldrb	r3, [r3, #0]
 8001104:	2b14      	cmp	r3, #20
 8001106:	d109      	bne.n	800111c <HAL_UART_RxCpltCallback+0x70>
				{
			if (length > 1)
 8001108:	4b08      	ldr	r3, [pc, #32]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 800110a:	781b      	ldrb	r3, [r3, #0]
 800110c:	2b01      	cmp	r3, #1
 800110e:	d902      	bls.n	8001116 <HAL_UART_RxCpltCallback+0x6a>
				USART_recive = 1; //message is complete recived
 8001110:	4b08      	ldr	r3, [pc, #32]	; (8001134 <HAL_UART_RxCpltCallback+0x88>)
 8001112:	2201      	movs	r2, #1
 8001114:	701a      	strb	r2, [r3, #0]
			length = 0;
 8001116:	4b05      	ldr	r3, [pc, #20]	; (800112c <HAL_UART_RxCpltCallback+0x80>)
 8001118:	2200      	movs	r2, #0
 800111a:	701a      	strb	r2, [r3, #0]
		}
	}
}
 800111c:	bf00      	nop
 800111e:	3708      	adds	r7, #8
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	20000188 	.word	0x20000188
 8001128:	2000028c 	.word	0x2000028c
 800112c:	200001f0 	.word	0x200001f0
 8001130:	20000170 	.word	0x20000170
 8001134:	20000184 	.word	0x20000184

08001138 <motor>:
void motor(int16_t MotL, int16_t MotR) //PWM mcontrole (1 ms -> backward / 1.5 ms -> no moove / 2 ms -> forward)
{
 8001138:	b480      	push	{r7}
 800113a:	b085      	sub	sp, #20
 800113c:	af00      	add	r7, sp, #0
 800113e:	4603      	mov	r3, r0
 8001140:	460a      	mov	r2, r1
 8001142:	80fb      	strh	r3, [r7, #6]
 8001144:	4613      	mov	r3, r2
 8001146:	80bb      	strh	r3, [r7, #4]
	uint32_t cntL, cntR;
	MotL = MotL + 100; //put an offset (0 to 200)
 8001148:	88fb      	ldrh	r3, [r7, #6]
 800114a:	3364      	adds	r3, #100	; 0x64
 800114c:	b29b      	uxth	r3, r3
 800114e:	80fb      	strh	r3, [r7, #6]
	MotR = MotR + 100; //put an offset (0 to 200)
 8001150:	88bb      	ldrh	r3, [r7, #4]
 8001152:	3364      	adds	r3, #100	; 0x64
 8001154:	b29b      	uxth	r3, r3
 8001156:	80bb      	strh	r3, [r7, #4]
	cntL = ((MotL * 2000) / 200) + 2000; //value of PWM start at 2000 and finish at 4000
 8001158:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800115c:	4613      	mov	r3, r2
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	4413      	add	r3, r2
 8001162:	005b      	lsls	r3, r3, #1
 8001164:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8001168:	60fb      	str	r3, [r7, #12]
	cntR = ((MotR * 2000) / 200) + 2000; //value of PWM start at 2000 and finish at 4000
 800116a:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 800116e:	4613      	mov	r3, r2
 8001170:	009b      	lsls	r3, r3, #2
 8001172:	4413      	add	r3, r2
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800117a:	60bb      	str	r3, [r7, #8]
	TIM1->CCR1 = cntL; //put value on TIMERs registers
 800117c:	4a06      	ldr	r2, [pc, #24]	; (8001198 <motor+0x60>)
 800117e:	68fb      	ldr	r3, [r7, #12]
 8001180:	6353      	str	r3, [r2, #52]	; 0x34
	TIM2->CCR3 = cntR; //put value on TIMERs registers
 8001182:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001186:	68bb      	ldr	r3, [r7, #8]
 8001188:	63d3      	str	r3, [r2, #60]	; 0x3c
}
 800118a:	bf00      	nop
 800118c:	3714      	adds	r7, #20
 800118e:	46bd      	mov	sp, r7
 8001190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001194:	4770      	bx	lr
 8001196:	bf00      	nop
 8001198:	40010000 	.word	0x40010000
 800119c:	00000000 	.word	0x00000000

080011a0 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 80011a0:	b5b0      	push	{r4, r5, r7, lr}
 80011a2:	b0c2      	sub	sp, #264	; 0x108
 80011a4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 80011a6:	f001 fce3 	bl	8002b70 <HAL_Init>

	/* USER CODE BEGIN Init */
	uint8_t action = 0;
 80011aa:	2300      	movs	r3, #0
 80011ac:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	char ReciveOrder = ' ';
 80011b0:	2320      	movs	r3, #32
 80011b2:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
	double angle, distance, derived;
	int16_t Argument = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
	int16_t delay;
	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 80011bc:	f000 fd92 	bl	8001ce4 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 80011c0:	f7ff fe78 	bl	8000eb4 <MX_GPIO_Init>
	MX_I2C1_Init();
 80011c4:	f7ff fed6 	bl	8000f74 <MX_I2C1_Init>
	MX_TIM1_Init();
 80011c8:	f001 fa7c 	bl	80026c4 <MX_TIM1_Init>
	MX_TIM2_Init();
 80011cc:	f001 fb1c 	bl	8002808 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 80011d0:	f001 fc2a 	bl	8002a28 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */

	HAL_Delay(100);
 80011d4:	2064      	movs	r0, #100	; 0x64
 80011d6:	f001 fd3d 	bl	8002c54 <HAL_Delay>

	while (MPU6050_Init(&hi2c1) == 1)
 80011da:	bf00      	nop
 80011dc:	48b4      	ldr	r0, [pc, #720]	; (80014b0 <main+0x310>)
 80011de:	f000 fdf0 	bl	8001dc2 <MPU6050_Init>
 80011e2:	4603      	mov	r3, r0
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d0f9      	beq.n	80011dc <main+0x3c>
		; //Init Accelerometer

	//Gpio (IR)
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODER0_Pos); //B0 in output
 80011e8:	4bb2      	ldr	r3, [pc, #712]	; (80014b4 <main+0x314>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4ab1      	ldr	r2, [pc, #708]	; (80014b4 <main+0x314>)
 80011ee:	f043 0302 	orr.w	r3, r3, #2
 80011f2:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODER1_Pos); //B1 in output
 80011f4:	4baf      	ldr	r3, [pc, #700]	; (80014b4 <main+0x314>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4aae      	ldr	r2, [pc, #696]	; (80014b4 <main+0x314>)
 80011fa:	f043 0308 	orr.w	r3, r3, #8
 80011fe:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODER3_Pos); //B3 in output
 8001200:	4bac      	ldr	r3, [pc, #688]	; (80014b4 <main+0x314>)
 8001202:	681b      	ldr	r3, [r3, #0]
 8001204:	4aab      	ldr	r2, [pc, #684]	; (80014b4 <main+0x314>)
 8001206:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800120a:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODER4_Pos); //B4 in output
 800120c:	4ba9      	ldr	r3, [pc, #676]	; (80014b4 <main+0x314>)
 800120e:	681b      	ldr	r3, [r3, #0]
 8001210:	4aa8      	ldr	r2, [pc, #672]	; (80014b4 <main+0x314>)
 8001212:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001216:	6013      	str	r3, [r2, #0]
	GPIOB->MODER |= (0x02 << GPIO_MODER_MODER5_Pos); //B5 in output
 8001218:	4ba6      	ldr	r3, [pc, #664]	; (80014b4 <main+0x314>)
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	4aa5      	ldr	r2, [pc, #660]	; (80014b4 <main+0x314>)
 800121e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001222:	6013      	str	r3, [r2, #0]

	GPIOB->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEED0_Pos); //B0 in  Very high speed
 8001224:	4ba3      	ldr	r3, [pc, #652]	; (80014b4 <main+0x314>)
 8001226:	689b      	ldr	r3, [r3, #8]
 8001228:	4aa2      	ldr	r2, [pc, #648]	; (80014b4 <main+0x314>)
 800122a:	f043 0303 	orr.w	r3, r3, #3
 800122e:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEED1_Pos); //B1 in  Very high speed
 8001230:	4ba0      	ldr	r3, [pc, #640]	; (80014b4 <main+0x314>)
 8001232:	689b      	ldr	r3, [r3, #8]
 8001234:	4a9f      	ldr	r2, [pc, #636]	; (80014b4 <main+0x314>)
 8001236:	f043 030c 	orr.w	r3, r3, #12
 800123a:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEED3_Pos); //B3 in  Very high speed
 800123c:	4b9d      	ldr	r3, [pc, #628]	; (80014b4 <main+0x314>)
 800123e:	689b      	ldr	r3, [r3, #8]
 8001240:	4a9c      	ldr	r2, [pc, #624]	; (80014b4 <main+0x314>)
 8001242:	f043 03c0 	orr.w	r3, r3, #192	; 0xc0
 8001246:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEED4_Pos); //B4 in  Very high speed
 8001248:	4b9a      	ldr	r3, [pc, #616]	; (80014b4 <main+0x314>)
 800124a:	689b      	ldr	r3, [r3, #8]
 800124c:	4a99      	ldr	r2, [pc, #612]	; (80014b4 <main+0x314>)
 800124e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8001252:	6093      	str	r3, [r2, #8]
	GPIOB->OSPEEDR |= (0x03 << GPIO_OSPEEDR_OSPEED5_Pos); //B5 in  Very high speed
 8001254:	4b97      	ldr	r3, [pc, #604]	; (80014b4 <main+0x314>)
 8001256:	689b      	ldr	r3, [r3, #8]
 8001258:	4a96      	ldr	r2, [pc, #600]	; (80014b4 <main+0x314>)
 800125a:	f443 6340 	orr.w	r3, r3, #3072	; 0xc00
 800125e:	6093      	str	r3, [r2, #8]

	GPIOB->ODR &= ~(GPIO_ODR_OD0 | GPIO_ODR_OD1 | GPIO_ODR_OD3 | GPIO_ODR_OD4
 8001260:	4b94      	ldr	r3, [pc, #592]	; (80014b4 <main+0x314>)
 8001262:	695b      	ldr	r3, [r3, #20]
 8001264:	4a93      	ldr	r2, [pc, #588]	; (80014b4 <main+0x314>)
 8001266:	f023 033b 	bic.w	r3, r3, #59	; 0x3b
 800126a:	6153      	str	r3, [r2, #20]
			| GPIO_ODR_OD5); //Put the pins B0,1,3,4,5 to 0

	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 800126c:	2201      	movs	r2, #1
 800126e:	4992      	ldr	r1, [pc, #584]	; (80014b8 <main+0x318>)
 8001270:	4892      	ldr	r0, [pc, #584]	; (80014bc <main+0x31c>)
 8001272:	f005 ff9a 	bl	80071aa <HAL_UART_Receive_IT>

	//init timer 1 (PWM) Left servo
	HAL_TIM_PWM_Init(&htim1);
 8001276:	4892      	ldr	r0, [pc, #584]	; (80014c0 <main+0x320>)
 8001278:	f005 f8de 	bl	8006438 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 800127c:	2100      	movs	r1, #0
 800127e:	4890      	ldr	r0, [pc, #576]	; (80014c0 <main+0x320>)
 8001280:	f005 f934 	bl	80064ec <HAL_TIM_PWM_Start>
	TIM1->CCMR1 = 0x60; //Configure in PWM mode
 8001284:	4b8f      	ldr	r3, [pc, #572]	; (80014c4 <main+0x324>)
 8001286:	2260      	movs	r2, #96	; 0x60
 8001288:	619a      	str	r2, [r3, #24]
	TIM1->PSC = 41; //(41+1)divide 84MHz/42 = 2MHz
 800128a:	4b8e      	ldr	r3, [pc, #568]	; (80014c4 <main+0x324>)
 800128c:	2229      	movs	r2, #41	; 0x29
 800128e:	629a      	str	r2, [r3, #40]	; 0x28
	TIM1->ARR = 40000; //PWM duty cycle -> 2MHz/40 000 = 50Hz
 8001290:	4b8c      	ldr	r3, [pc, #560]	; (80014c4 <main+0x324>)
 8001292:	f649 4240 	movw	r2, #40000	; 0x9c40
 8001296:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM1->CCR1 = 3000; //put PWM at 1.5ms (1/2 000 000)*3000 = 1.5ms state do nothing
 8001298:	4b8a      	ldr	r3, [pc, #552]	; (80014c4 <main+0x324>)
 800129a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800129e:	635a      	str	r2, [r3, #52]	; 0x34
	TIM1->CR1 = 0x01; // Turn on PWM
 80012a0:	4b88      	ldr	r3, [pc, #544]	; (80014c4 <main+0x324>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	601a      	str	r2, [r3, #0]

	//init timer 2 (PWM) Right servo
	HAL_TIM_PWM_Init(&htim2);
 80012a6:	4888      	ldr	r0, [pc, #544]	; (80014c8 <main+0x328>)
 80012a8:	f005 f8c6 	bl	8006438 <HAL_TIM_PWM_Init>
	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80012ac:	2108      	movs	r1, #8
 80012ae:	4886      	ldr	r0, [pc, #536]	; (80014c8 <main+0x328>)
 80012b0:	f005 f91c 	bl	80064ec <HAL_TIM_PWM_Start>
	TIM2->CCMR2 = 0x60; //Configure in PWM mode
 80012b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012b8:	2260      	movs	r2, #96	; 0x60
 80012ba:	61da      	str	r2, [r3, #28]
	TIM2->PSC = 41; //(41+1)divide 84MHz/42 = 2MHz
 80012bc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c0:	2229      	movs	r2, #41	; 0x29
 80012c2:	629a      	str	r2, [r3, #40]	; 0x28
	TIM2->ARR = 40000; //PWM duty cycle -> 2MHz/40 000 = 50Hz
 80012c4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012c8:	f649 4240 	movw	r2, #40000	; 0x9c40
 80012cc:	62da      	str	r2, [r3, #44]	; 0x2c
	TIM2->CCR3 = 3000; //put PWM at 1.5ms (1/2 000 000)*3000 = 1.5ms state do nothing
 80012ce:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012d2:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80012d6:	63da      	str	r2, [r3, #60]	; 0x3c
	TIM2->CR1 = 0x01; // Turn on PWM
 80012d8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80012dc:	2201      	movs	r2, #1
 80012de:	601a      	str	r2, [r3, #0]

	//init timer 11 (10ms) sampling accelerometer
	RCC->APB2ENR |= RCC_APB2ENR_TIM11EN; //Enable timer 11 clock
 80012e0:	4b7a      	ldr	r3, [pc, #488]	; (80014cc <main+0x32c>)
 80012e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012e4:	4a79      	ldr	r2, [pc, #484]	; (80014cc <main+0x32c>)
 80012e6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80012ea:	6453      	str	r3, [r2, #68]	; 0x44
	TIM11->CR1 |= TIM_CR1_OPM; //set timer on counter mode
 80012ec:	4b78      	ldr	r3, [pc, #480]	; (80014d0 <main+0x330>)
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a77      	ldr	r2, [pc, #476]	; (80014d0 <main+0x330>)
 80012f2:	f043 0308 	orr.w	r3, r3, #8
 80012f6:	6013      	str	r3, [r2, #0]
	TIM11->DIER |= TIM_DIER_UIE; //Enable interrupt of timer 11
 80012f8:	4b75      	ldr	r3, [pc, #468]	; (80014d0 <main+0x330>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	4a74      	ldr	r2, [pc, #464]	; (80014d0 <main+0x330>)
 80012fe:	f043 0301 	orr.w	r3, r3, #1
 8001302:	60d3      	str	r3, [r2, #12]
	TIM11->PSC = 83; //div by 83+1
 8001304:	4b72      	ldr	r3, [pc, #456]	; (80014d0 <main+0x330>)
 8001306:	2253      	movs	r2, #83	; 0x53
 8001308:	629a      	str	r2, [r3, #40]	; 0x28
	TIM11->ARR = 10000; //1000*10ms -> 10ms
 800130a:	4b71      	ldr	r3, [pc, #452]	; (80014d0 <main+0x330>)
 800130c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c

	NVIC_EnableIRQ(TIM1_TRG_COM_TIM11_IRQn); //enable unterrupt
 8001312:	201a      	movs	r0, #26
 8001314:	f7ff feac 	bl	8001070 <__NVIC_EnableIRQ>

	//init timer 10 (10ms) sampling accelerometer             /////////////////To be completed
	RCC->APB2ENR |= RCC_APB2ENR_TIM10EN; //Enable timer 10 clock
 8001318:	4b6c      	ldr	r3, [pc, #432]	; (80014cc <main+0x32c>)
 800131a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800131c:	4a6b      	ldr	r2, [pc, #428]	; (80014cc <main+0x32c>)
 800131e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001322:	6453      	str	r3, [r2, #68]	; 0x44
	TIM10->CR1 |= TIM_CR1_OPM; //set timer on counter mode
 8001324:	4b6b      	ldr	r3, [pc, #428]	; (80014d4 <main+0x334>)
 8001326:	681b      	ldr	r3, [r3, #0]
 8001328:	4a6a      	ldr	r2, [pc, #424]	; (80014d4 <main+0x334>)
 800132a:	f043 0308 	orr.w	r3, r3, #8
 800132e:	6013      	str	r3, [r2, #0]
	TIM10->DIER |= TIM_DIER_UIE; //Enable interrupt of timer 10
 8001330:	4b68      	ldr	r3, [pc, #416]	; (80014d4 <main+0x334>)
 8001332:	68db      	ldr	r3, [r3, #12]
 8001334:	4a67      	ldr	r2, [pc, #412]	; (80014d4 <main+0x334>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	60d3      	str	r3, [r2, #12]
	TIM10->PSC = 6; //div by 6+1
 800133c:	4b65      	ldr	r3, [pc, #404]	; (80014d4 <main+0x334>)
 800133e:	2206      	movs	r2, #6
 8001340:	629a      	str	r2, [r3, #40]	; 0x28
	TIM10->ARR = 150; // 12.5us -> 80 KHz
 8001342:	4b64      	ldr	r3, [pc, #400]	; (80014d4 <main+0x334>)
 8001344:	2296      	movs	r2, #150	; 0x96
 8001346:	62da      	str	r2, [r3, #44]	; 0x2c
	NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn); //enable unterrupt     ////////////////////
 8001348:	2019      	movs	r0, #25
 800134a:	f7ff fe91 	bl	8001070 <__NVIC_EnableIRQ>
	//TIM10->CR1 |= TIM_CR1_CEN;//Start sampling ADC

	//ADC Configurqtion
	//ADC1_0 pin A0
	GPIOA->MODER |= (0x03 << GPIO_MODER_MODE0_Pos);
 800134e:	4b62      	ldr	r3, [pc, #392]	; (80014d8 <main+0x338>)
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	4a61      	ldr	r2, [pc, #388]	; (80014d8 <main+0x338>)
 8001354:	f043 0303 	orr.w	r3, r3, #3
 8001358:	6013      	str	r3, [r2, #0]
	RCC->APB2ENR |= RCC_APB2ENR_ADC1EN;	//Enqble ADC clock source
 800135a:	4b5c      	ldr	r3, [pc, #368]	; (80014cc <main+0x32c>)
 800135c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800135e:	4a5b      	ldr	r2, [pc, #364]	; (80014cc <main+0x32c>)
 8001360:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001364:	6453      	str	r3, [r2, #68]	; 0x44
	ADC1->CR1 |= ADC_CR1_EOCIE;	//Enable End Of Convertion interrupt
 8001366:	4b5d      	ldr	r3, [pc, #372]	; (80014dc <main+0x33c>)
 8001368:	685b      	ldr	r3, [r3, #4]
 800136a:	4a5c      	ldr	r2, [pc, #368]	; (80014dc <main+0x33c>)
 800136c:	f043 0320 	orr.w	r3, r3, #32
 8001370:	6053      	str	r3, [r2, #4]
	ADC1->CR1 |= ADC_CR1_DISCEN;	//Enable discontinuous mode
 8001372:	4b5a      	ldr	r3, [pc, #360]	; (80014dc <main+0x33c>)
 8001374:	685b      	ldr	r3, [r3, #4]
 8001376:	4a59      	ldr	r2, [pc, #356]	; (80014dc <main+0x33c>)
 8001378:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800137c:	6053      	str	r3, [r2, #4]
	ADC1->CR2 |= ADC_CR2_ADON;	//Enable ADC
 800137e:	4b57      	ldr	r3, [pc, #348]	; (80014dc <main+0x33c>)
 8001380:	689b      	ldr	r3, [r3, #8]
 8001382:	4a56      	ldr	r2, [pc, #344]	; (80014dc <main+0x33c>)
 8001384:	f043 0301 	orr.w	r3, r3, #1
 8001388:	6093      	str	r3, [r2, #8]
	ADC1->SMPR2 = 0x02;
 800138a:	4b54      	ldr	r3, [pc, #336]	; (80014dc <main+0x33c>)
 800138c:	2202      	movs	r2, #2
 800138e:	611a      	str	r2, [r3, #16]
	//ADC1->CR2 |= ADC_CR2_SWSTART;//stqrt convertion
	//while((ADC1->SR & ADC_SR_EOC) == ADC_SR_EOC);//wait the end of convertion

	HAL_Delay(50);	//wait ESP8266 starting
 8001390:	2032      	movs	r0, #50	; 0x32
 8001392:	f001 fc5f 	bl	8002c54 <HAL_Delay>
	char data[200];
	int N = 50;
 8001396:	2332      	movs	r3, #50	; 0x32
 8001398:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
	double sm = 0.0;
 800139c:	f04f 0200 	mov.w	r2, #0
 80013a0:	f04f 0300 	mov.w	r3, #0
 80013a4:	e9c7 2336 	strd	r2, r3, [r7, #216]	; 0xd8
	double mean = 0.0;
 80013a8:	f04f 0200 	mov.w	r2, #0
 80013ac:	f04f 0300 	mov.w	r3, #0
 80013b0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
	double offset = 0.0;
 80013b4:	f04f 0200 	mov.w	r2, #0
 80013b8:	f04f 0300 	mov.w	r3, #0
 80013bc:	e9c7 2334 	strd	r2, r3, [r7, #208]	; 0xd0
	int8_t turnvalue = 0, calib, accel, decel;
 80013c0:	2300      	movs	r3, #0
 80013c2:	f887 30cf 	strb.w	r3, [r7, #207]	; 0xcf

	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		/////////////////////////// start
		if (USART_recive == 1)	//if complete message is recived
 80013c6:	4b46      	ldr	r3, [pc, #280]	; (80014e0 <main+0x340>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d115      	bne.n	80013fa <main+0x25a>
		{
			Argument = 0;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8a7 30cc 	strh.w	r3, [r7, #204]	; 0xcc
			ReciveOrder = rx_buffer[0];	//take the first argument
 80013d4:	4b43      	ldr	r3, [pc, #268]	; (80014e4 <main+0x344>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
			sscanf(&rx_buffer[1], "%d", &Argument);	//put the caractere chaine in number
 80013dc:	f107 03cc 	add.w	r3, r7, #204	; 0xcc
 80013e0:	461a      	mov	r2, r3
 80013e2:	4941      	ldr	r1, [pc, #260]	; (80014e8 <main+0x348>)
 80013e4:	4841      	ldr	r0, [pc, #260]	; (80014ec <main+0x34c>)
 80013e6:	f006 fe0b 	bl	8008000 <siscanf>
//		  Argument -= 10;
			USART_recive = 0;
 80013ea:	4b3d      	ldr	r3, [pc, #244]	; (80014e0 <main+0x340>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	701a      	strb	r2, [r3, #0]
			HAL_GPIO_TogglePin(GPIOC, GPIO_PIN_13);	//toggle debug pin
 80013f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80013f4:	483e      	ldr	r0, [pc, #248]	; (80014f0 <main+0x350>)
 80013f6:	f001 ffa0 	bl	800333a <HAL_GPIO_TogglePin>
		}

		switch (ReciveOrder) {
 80013fa:	f897 3106 	ldrb.w	r3, [r7, #262]	; 0x106
 80013fe:	3b30      	subs	r3, #48	; 0x30
 8001400:	2b22      	cmp	r3, #34	; 0x22
 8001402:	d87f      	bhi.n	8001504 <main+0x364>
 8001404:	a201      	add	r2, pc, #4	; (adr r2, 800140c <main+0x26c>)
 8001406:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800140a:	bf00      	nop
 800140c:	08001499 	.word	0x08001499
 8001410:	08001505 	.word	0x08001505
 8001414:	08001505 	.word	0x08001505
 8001418:	08001505 	.word	0x08001505
 800141c:	08001505 	.word	0x08001505
 8001420:	08001505 	.word	0x08001505
 8001424:	08001505 	.word	0x08001505
 8001428:	08001505 	.word	0x08001505
 800142c:	08001505 	.word	0x08001505
 8001430:	08001505 	.word	0x08001505
 8001434:	08001505 	.word	0x08001505
 8001438:	08001505 	.word	0x08001505
 800143c:	08001505 	.word	0x08001505
 8001440:	08001505 	.word	0x08001505
 8001444:	08001505 	.word	0x08001505
 8001448:	08001505 	.word	0x08001505
 800144c:	08001505 	.word	0x08001505
 8001450:	08001505 	.word	0x08001505
 8001454:	080014a9 	.word	0x080014a9
 8001458:	08001505 	.word	0x08001505
 800145c:	08001505 	.word	0x08001505
 8001460:	08001505 	.word	0x08001505
 8001464:	080014a1 	.word	0x080014a1
 8001468:	08001505 	.word	0x08001505
 800146c:	08001505 	.word	0x08001505
 8001470:	08001505 	.word	0x08001505
 8001474:	08001505 	.word	0x08001505
 8001478:	08001505 	.word	0x08001505
 800147c:	080014fd 	.word	0x080014fd
 8001480:	08001505 	.word	0x08001505
 8001484:	08001505 	.word	0x08001505
 8001488:	08001505 	.word	0x08001505
 800148c:	08001505 	.word	0x08001505
 8001490:	08001505 	.word	0x08001505
 8001494:	080014f5 	.word	0x080014f5
			case '0': {
				action = STOP;
 8001498:	2300      	movs	r3, #0
 800149a:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 800149e:	e031      	b.n	8001504 <main+0x364>
			}
			case 'F': {
				action = FORWARD;
 80014a0:	2301      	movs	r3, #1
 80014a2:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80014a6:	e02d      	b.n	8001504 <main+0x364>
			}
			case 'B': {
				action = BACkWARD;
 80014a8:	2302      	movs	r3, #2
 80014aa:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80014ae:	e029      	b.n	8001504 <main+0x364>
 80014b0:	2000011c 	.word	0x2000011c
 80014b4:	40020400 	.word	0x40020400
 80014b8:	20000188 	.word	0x20000188
 80014bc:	2000028c 	.word	0x2000028c
 80014c0:	200001fc 	.word	0x200001fc
 80014c4:	40010000 	.word	0x40010000
 80014c8:	20000244 	.word	0x20000244
 80014cc:	40023800 	.word	0x40023800
 80014d0:	40014800 	.word	0x40014800
 80014d4:	40014400 	.word	0x40014400
 80014d8:	40020000 	.word	0x40020000
 80014dc:	40012000 	.word	0x40012000
 80014e0:	20000184 	.word	0x20000184
 80014e4:	20000170 	.word	0x20000170
 80014e8:	08009388 	.word	0x08009388
 80014ec:	20000171 	.word	0x20000171
 80014f0:	40020800 	.word	0x40020800
			}
			case 'R': {
				action = TURN_RIGHT;
 80014f4:	2303      	movs	r3, #3
 80014f6:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 80014fa:	e003      	b.n	8001504 <main+0x364>
			}
			case 'L': {
				action = TURN_LEFT;
 80014fc:	2304      	movs	r3, #4
 80014fe:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
				break;
 8001502:	bf00      	nop
			}
		}
		switch (action) {
 8001504:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001508:	2b04      	cmp	r3, #4
 800150a:	f63f af5c 	bhi.w	80013c6 <main+0x226>
 800150e:	a201      	add	r2, pc, #4	; (adr r2, 8001514 <main+0x374>)
 8001510:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001514:	08001529 	.word	0x08001529
 8001518:	08001533 	.word	0x08001533
 800151c:	0800172d 	.word	0x0800172d
 8001520:	0800194d 	.word	0x0800194d
 8001524:	08001b1b 	.word	0x08001b1b
			case STOP: {
				motor(0, 0);	//motor do nothing
 8001528:	2100      	movs	r1, #0
 800152a:	2000      	movs	r0, #0
 800152c:	f7ff fe04 	bl	8001138 <motor>
				break;
 8001530:	e3c7      	b.n	8001cc2 <main+0xb22>
			}
			case FORWARD: {
				angle = 0;
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
				TIM11->CR1 |= TIM_CR1_CEN;
 800153e:	4baa      	ldr	r3, [pc, #680]	; (80017e8 <main+0x648>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4aa9      	ldr	r2, [pc, #676]	; (80017e8 <main+0x648>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6013      	str	r3, [r2, #0]

				calib = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				mean = 0;
 8001550:	f04f 0200 	mov.w	r2, #0
 8001554:	f04f 0300 	mov.w	r3, #0
 8001558:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
				while (calib < CALIB_NUNBER) {
 800155c:	e023      	b.n	80015a6 <main+0x406>
					if (interrupt10ms == 1) {
 800155e:	4ba3      	ldr	r3, [pc, #652]	; (80017ec <main+0x64c>)
 8001560:	781b      	ldrb	r3, [r3, #0]
 8001562:	2b01      	cmp	r3, #1
 8001564:	d11f      	bne.n	80015a6 <main+0x406>
						interrupt10ms = 0;
 8001566:	4ba1      	ldr	r3, [pc, #644]	; (80017ec <main+0x64c>)
 8001568:	2200      	movs	r2, #0
 800156a:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);
 800156c:	49a0      	ldr	r1, [pc, #640]	; (80017f0 <main+0x650>)
 800156e:	48a1      	ldr	r0, [pc, #644]	; (80017f4 <main+0x654>)
 8001570:	f000 fc7e 	bl	8001e70 <MPU6050_Read_All>
						mean += (MPU6050.Gz / 100);
 8001574:	4b9e      	ldr	r3, [pc, #632]	; (80017f0 <main+0x650>)
 8001576:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	4b9e      	ldr	r3, [pc, #632]	; (80017f8 <main+0x658>)
 8001580:	f7ff f96c 	bl	800085c <__aeabi_ddiv>
 8001584:	4602      	mov	r2, r0
 8001586:	460b      	mov	r3, r1
 8001588:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800158c:	f7fe fe86 	bl	800029c <__adddf3>
 8001590:	4602      	mov	r2, r0
 8001592:	460b      	mov	r3, r1
 8001594:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
						calib++;
 8001598:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 800159c:	b2db      	uxtb	r3, r3
 800159e:	3301      	adds	r3, #1
 80015a0:	b2db      	uxtb	r3, r3
 80015a2:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				while (calib < CALIB_NUNBER) {
 80015a6:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 80015aa:	2b63      	cmp	r3, #99	; 0x63
 80015ac:	ddd7      	ble.n	800155e <main+0x3be>
					}
				}
				mean = mean / CALIB_NUNBER;
 80015ae:	f04f 0200 	mov.w	r2, #0
 80015b2:	4b91      	ldr	r3, [pc, #580]	; (80017f8 <main+0x658>)
 80015b4:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80015b8:	f7ff f950 	bl	800085c <__aeabi_ddiv>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

				accel = 0;
 80015c4:	2300      	movs	r3, #0
 80015c6:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				decel = 0;
 80015ca:	2300      	movs	r3, #0
 80015cc:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				delay = 0;
 80015d0:	2300      	movs	r3, #0
 80015d2:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

				accel = Argument;
 80015d6:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80015da:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				while (accel!=0)
 80015de:	e090      	b.n	8001702 <main+0x562>
				{
					if (interrupt10ms == 1)
 80015e0:	4b82      	ldr	r3, [pc, #520]	; (80017ec <main+0x64c>)
 80015e2:	781b      	ldrb	r3, [r3, #0]
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	f040 8085 	bne.w	80016f4 <main+0x554>
					{
						if (decel)//SLOW-DOWN
 80015ea:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	d00c      	beq.n	800160c <main+0x46c>
						{
							accel -= ACCELERATION;
 80015f2:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b2db      	uxtb	r3, r3
 80015fa:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							if (accel < 20)
 80015fe:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001602:	2b13      	cmp	r3, #19
 8001604:	dc02      	bgt.n	800160c <main+0x46c>
							{
								accel = 0;
 8001606:	2300      	movs	r3, #0
 8001608:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							}
						}

						interrupt10ms = 0;
 800160c:	4b77      	ldr	r3, [pc, #476]	; (80017ec <main+0x64c>)
 800160e:	2200      	movs	r2, #0
 8001610:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);		//Read Accelerometer
 8001612:	4977      	ldr	r1, [pc, #476]	; (80017f0 <main+0x650>)
 8001614:	4877      	ldr	r0, [pc, #476]	; (80017f4 <main+0x654>)
 8001616:	f000 fc2b 	bl	8001e70 <MPU6050_Read_All>
						angle += ((MPU6050.Gz / 100) - mean) * COEFF_CORRE;
 800161a:	4b75      	ldr	r3, [pc, #468]	; (80017f0 <main+0x650>)
 800161c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001620:	f04f 0200 	mov.w	r2, #0
 8001624:	4b74      	ldr	r3, [pc, #464]	; (80017f8 <main+0x658>)
 8001626:	f7ff f919 	bl	800085c <__aeabi_ddiv>
 800162a:	4602      	mov	r2, r0
 800162c:	460b      	mov	r3, r1
 800162e:	4610      	mov	r0, r2
 8001630:	4619      	mov	r1, r3
 8001632:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001636:	f7fe fe2f 	bl	8000298 <__aeabi_dsub>
 800163a:	4602      	mov	r2, r0
 800163c:	460b      	mov	r3, r1
 800163e:	4610      	mov	r0, r2
 8001640:	4619      	mov	r1, r3
 8001642:	a367      	add	r3, pc, #412	; (adr r3, 80017e0 <main+0x640>)
 8001644:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001648:	f7fe ffde 	bl	8000608 <__aeabi_dmul>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001654:	f7fe fe22 	bl	800029c <__adddf3>
 8001658:	4602      	mov	r2, r0
 800165a:	460b      	mov	r3, r1
 800165c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
						if (angle < 0)			//robot turn right must turn left
 8001660:	f04f 0200 	mov.w	r2, #0
 8001664:	f04f 0300 	mov.w	r3, #0
 8001668:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800166c:	f7ff fa3e 	bl	8000aec <__aeabi_dcmplt>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d015      	beq.n	80016a2 <main+0x502>
						{
							motor(accel + (int8_t) angle, -accel);
 8001676:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800167a:	b21c      	sxth	r4, r3
 800167c:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001680:	f7ff fa72 	bl	8000b68 <__aeabi_d2iz>
 8001684:	4603      	mov	r3, r0
 8001686:	b25b      	sxtb	r3, r3
 8001688:	b21b      	sxth	r3, r3
 800168a:	4423      	add	r3, r4
 800168c:	b21b      	sxth	r3, r3
 800168e:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001692:	b292      	uxth	r2, r2
 8001694:	4252      	negs	r2, r2
 8001696:	b292      	uxth	r2, r2
 8001698:	b212      	sxth	r2, r2
 800169a:	4611      	mov	r1, r2
 800169c:	4618      	mov	r0, r3
 800169e:	f7ff fd4b 	bl	8001138 <motor>
						}
						if (angle > 0)							//turn left
 80016a2:	f04f 0200 	mov.w	r2, #0
 80016a6:	f04f 0300 	mov.w	r3, #0
 80016aa:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80016ae:	f7ff fa3b 	bl	8000b28 <__aeabi_dcmpgt>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d012      	beq.n	80016de <main+0x53e>
						{
							motor(accel, -accel + (int8_t) angle);
 80016b8:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80016bc:	b21c      	sxth	r4, r3
 80016be:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80016c2:	f7ff fa51 	bl	8000b68 <__aeabi_d2iz>
 80016c6:	4603      	mov	r3, r0
 80016c8:	b25b      	sxtb	r3, r3
 80016ca:	b21a      	sxth	r2, r3
 80016cc:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80016d0:	b21b      	sxth	r3, r3
 80016d2:	1ad3      	subs	r3, r2, r3
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	4619      	mov	r1, r3
 80016d8:	4620      	mov	r0, r4
 80016da:	f7ff fd2d 	bl	8001138 <motor>
						}

						if (accel == 100)
 80016de:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80016e2:	2b64      	cmp	r3, #100	; 0x64
 80016e4:	d106      	bne.n	80016f4 <main+0x554>
							delay++;
 80016e6:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	3301      	adds	r3, #1
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
					}

					if (USART_recive == 1)
 80016f4:	4b41      	ldr	r3, [pc, #260]	; (80017fc <main+0x65c>)
 80016f6:	781b      	ldrb	r3, [r3, #0]
 80016f8:	2b01      	cmp	r3, #1
 80016fa:	d102      	bne.n	8001702 <main+0x562>
						decel = 1;
 80016fc:	2301      	movs	r3, #1
 80016fe:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				while (accel!=0)
 8001702:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001706:	2b00      	cmp	r3, #0
 8001708:	f47f af6a 	bne.w	80015e0 <main+0x440>
				}
				interrupt10ms = 0;
 800170c:	4b37      	ldr	r3, [pc, #220]	; (80017ec <main+0x64c>)
 800170e:	2200      	movs	r2, #0
 8001710:	701a      	strb	r2, [r3, #0]
				TIM11->CR1 &= ~TIM_CR1_CEN;				//Disable Counter
 8001712:	4b35      	ldr	r3, [pc, #212]	; (80017e8 <main+0x648>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a34      	ldr	r2, [pc, #208]	; (80017e8 <main+0x648>)
 8001718:	f023 0301 	bic.w	r3, r3, #1
 800171c:	6013      	str	r3, [r2, #0]
				TIM11->CNT = 0;							//reset Counter
 800171e:	4b32      	ldr	r3, [pc, #200]	; (80017e8 <main+0x648>)
 8001720:	2200      	movs	r2, #0
 8001722:	625a      	str	r2, [r3, #36]	; 0x24
				ReciveOrder = '0';
 8001724:	2330      	movs	r3, #48	; 0x30
 8001726:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 800172a:	e2ca      	b.n	8001cc2 <main+0xb22>
			}
			case BACkWARD: {
				angle = 0;
 800172c:	f04f 0200 	mov.w	r2, #0
 8001730:	f04f 0300 	mov.w	r3, #0
 8001734:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
				TIM11->CR1 |= TIM_CR1_CEN;
 8001738:	4b2b      	ldr	r3, [pc, #172]	; (80017e8 <main+0x648>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a2a      	ldr	r2, [pc, #168]	; (80017e8 <main+0x648>)
 800173e:	f043 0301 	orr.w	r3, r3, #1
 8001742:	6013      	str	r3, [r2, #0]

				calib = 0;
 8001744:	2300      	movs	r3, #0
 8001746:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				mean = 0;
 800174a:	f04f 0200 	mov.w	r2, #0
 800174e:	f04f 0300 	mov.w	r3, #0
 8001752:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
				while (calib < CALIB_NUNBER) {
 8001756:	e023      	b.n	80017a0 <main+0x600>
					if (interrupt10ms == 1) {
 8001758:	4b24      	ldr	r3, [pc, #144]	; (80017ec <main+0x64c>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	2b01      	cmp	r3, #1
 800175e:	d11f      	bne.n	80017a0 <main+0x600>
						interrupt10ms = 0;
 8001760:	4b22      	ldr	r3, [pc, #136]	; (80017ec <main+0x64c>)
 8001762:	2200      	movs	r2, #0
 8001764:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);
 8001766:	4922      	ldr	r1, [pc, #136]	; (80017f0 <main+0x650>)
 8001768:	4822      	ldr	r0, [pc, #136]	; (80017f4 <main+0x654>)
 800176a:	f000 fb81 	bl	8001e70 <MPU6050_Read_All>
						mean += (MPU6050.Gz / 100);
 800176e:	4b20      	ldr	r3, [pc, #128]	; (80017f0 <main+0x650>)
 8001770:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001774:	f04f 0200 	mov.w	r2, #0
 8001778:	4b1f      	ldr	r3, [pc, #124]	; (80017f8 <main+0x658>)
 800177a:	f7ff f86f 	bl	800085c <__aeabi_ddiv>
 800177e:	4602      	mov	r2, r0
 8001780:	460b      	mov	r3, r1
 8001782:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001786:	f7fe fd89 	bl	800029c <__adddf3>
 800178a:	4602      	mov	r2, r0
 800178c:	460b      	mov	r3, r1
 800178e:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
						calib++;
 8001792:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001796:	b2db      	uxtb	r3, r3
 8001798:	3301      	adds	r3, #1
 800179a:	b2db      	uxtb	r3, r3
 800179c:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				while (calib < CALIB_NUNBER) {
 80017a0:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 80017a4:	2b63      	cmp	r3, #99	; 0x63
 80017a6:	ddd7      	ble.n	8001758 <main+0x5b8>
					}
				}
				mean = mean / CALIB_NUNBER;
 80017a8:	f04f 0200 	mov.w	r2, #0
 80017ac:	4b12      	ldr	r3, [pc, #72]	; (80017f8 <main+0x658>)
 80017ae:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80017b2:	f7ff f853 	bl	800085c <__aeabi_ddiv>
 80017b6:	4602      	mov	r2, r0
 80017b8:	460b      	mov	r3, r1
 80017ba:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

				accel = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				decel = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				delay = 0;
 80017ca:	2300      	movs	r3, #0
 80017cc:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6

				accel = Argument;
 80017d0:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 80017d4:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				while (accel!=0)
 80017d8:	e0a3      	b.n	8001922 <main+0x782>
 80017da:	bf00      	nop
 80017dc:	f3af 8000 	nop.w
 80017e0:	00000000 	.word	0x00000000
 80017e4:	4051c000 	.word	0x4051c000
 80017e8:	40014800 	.word	0x40014800
 80017ec:	2000018a 	.word	0x2000018a
 80017f0:	20000190 	.word	0x20000190
 80017f4:	2000011c 	.word	0x2000011c
 80017f8:	40590000 	.word	0x40590000
 80017fc:	20000184 	.word	0x20000184
				{
					if (interrupt10ms == 1)
 8001800:	4ba9      	ldr	r3, [pc, #676]	; (8001aa8 <main+0x908>)
 8001802:	781b      	ldrb	r3, [r3, #0]
 8001804:	2b01      	cmp	r3, #1
 8001806:	f040 8085 	bne.w	8001914 <main+0x774>
					{
						if (decel)//SLOW-DOWN
 800180a:	f997 30e5 	ldrsb.w	r3, [r7, #229]	; 0xe5
 800180e:	2b00      	cmp	r3, #0
 8001810:	d00c      	beq.n	800182c <main+0x68c>
						{
							accel -= ACCELERATION;
 8001812:	f897 30e6 	ldrb.w	r3, [r7, #230]	; 0xe6
 8001816:	3b01      	subs	r3, #1
 8001818:	b2db      	uxtb	r3, r3
 800181a:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							if (accel < 10)
 800181e:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001822:	2b09      	cmp	r3, #9
 8001824:	dc02      	bgt.n	800182c <main+0x68c>
							{
								accel = 0;
 8001826:	2300      	movs	r3, #0
 8001828:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							}
						}

						interrupt10ms = 0;
 800182c:	4b9e      	ldr	r3, [pc, #632]	; (8001aa8 <main+0x908>)
 800182e:	2200      	movs	r2, #0
 8001830:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);		//Read Accelerometer
 8001832:	499e      	ldr	r1, [pc, #632]	; (8001aac <main+0x90c>)
 8001834:	489e      	ldr	r0, [pc, #632]	; (8001ab0 <main+0x910>)
 8001836:	f000 fb1b 	bl	8001e70 <MPU6050_Read_All>
						angle += ((MPU6050.Gz / 100) - mean) * COEFF_CORRE;
 800183a:	4b9c      	ldr	r3, [pc, #624]	; (8001aac <main+0x90c>)
 800183c:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001840:	f04f 0200 	mov.w	r2, #0
 8001844:	4b9b      	ldr	r3, [pc, #620]	; (8001ab4 <main+0x914>)
 8001846:	f7ff f809 	bl	800085c <__aeabi_ddiv>
 800184a:	4602      	mov	r2, r0
 800184c:	460b      	mov	r3, r1
 800184e:	4610      	mov	r0, r2
 8001850:	4619      	mov	r1, r3
 8001852:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001856:	f7fe fd1f 	bl	8000298 <__aeabi_dsub>
 800185a:	4602      	mov	r2, r0
 800185c:	460b      	mov	r3, r1
 800185e:	4610      	mov	r0, r2
 8001860:	4619      	mov	r1, r3
 8001862:	a38f      	add	r3, pc, #572	; (adr r3, 8001aa0 <main+0x900>)
 8001864:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001868:	f7fe fece 	bl	8000608 <__aeabi_dmul>
 800186c:	4602      	mov	r2, r0
 800186e:	460b      	mov	r3, r1
 8001870:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001874:	f7fe fd12 	bl	800029c <__adddf3>
 8001878:	4602      	mov	r2, r0
 800187a:	460b      	mov	r3, r1
 800187c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
						if (angle < 0)			//robot turn right must turn left
 8001880:	f04f 0200 	mov.w	r2, #0
 8001884:	f04f 0300 	mov.w	r3, #0
 8001888:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 800188c:	f7ff f92e 	bl	8000aec <__aeabi_dcmplt>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	d015      	beq.n	80018c2 <main+0x722>
								{
							motor(-accel, accel  + (int8_t) angle);
 8001896:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 800189a:	b29b      	uxth	r3, r3
 800189c:	425b      	negs	r3, r3
 800189e:	b29b      	uxth	r3, r3
 80018a0:	b21d      	sxth	r5, r3
 80018a2:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80018a6:	b21c      	sxth	r4, r3
 80018a8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80018ac:	f7ff f95c 	bl	8000b68 <__aeabi_d2iz>
 80018b0:	4603      	mov	r3, r0
 80018b2:	b25b      	sxtb	r3, r3
 80018b4:	b21b      	sxth	r3, r3
 80018b6:	4423      	add	r3, r4
 80018b8:	b21b      	sxth	r3, r3
 80018ba:	4619      	mov	r1, r3
 80018bc:	4628      	mov	r0, r5
 80018be:	f7ff fc3b 	bl	8001138 <motor>
						}
						if (angle > 0)							//turn left
 80018c2:	f04f 0200 	mov.w	r2, #0
 80018c6:	f04f 0300 	mov.w	r3, #0
 80018ca:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80018ce:	f7ff f92b 	bl	8000b28 <__aeabi_dcmpgt>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d012      	beq.n	80018fe <main+0x75e>
								{
							motor(-accel  + (int8_t) angle, accel);
 80018d8:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 80018dc:	f7ff f944 	bl	8000b68 <__aeabi_d2iz>
 80018e0:	4603      	mov	r3, r0
 80018e2:	b25b      	sxtb	r3, r3
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80018ea:	b21b      	sxth	r3, r3
 80018ec:	1ad3      	subs	r3, r2, r3
 80018ee:	b21b      	sxth	r3, r3
 80018f0:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 80018f4:	b212      	sxth	r2, r2
 80018f6:	4611      	mov	r1, r2
 80018f8:	4618      	mov	r0, r3
 80018fa:	f7ff fc1d 	bl	8001138 <motor>
						}

						if (accel == 100)
 80018fe:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001902:	2b64      	cmp	r3, #100	; 0x64
 8001904:	d106      	bne.n	8001914 <main+0x774>
							delay++;
 8001906:	f9b7 30f6 	ldrsh.w	r3, [r7, #246]	; 0xf6
 800190a:	b29b      	uxth	r3, r3
 800190c:	3301      	adds	r3, #1
 800190e:	b29b      	uxth	r3, r3
 8001910:	f8a7 30f6 	strh.w	r3, [r7, #246]	; 0xf6
					}

					if (USART_recive == 1)
 8001914:	4b68      	ldr	r3, [pc, #416]	; (8001ab8 <main+0x918>)
 8001916:	781b      	ldrb	r3, [r3, #0]
 8001918:	2b01      	cmp	r3, #1
 800191a:	d102      	bne.n	8001922 <main+0x782>
						decel = 1;
 800191c:	2301      	movs	r3, #1
 800191e:	f887 30e5 	strb.w	r3, [r7, #229]	; 0xe5
				while (accel!=0)
 8001922:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001926:	2b00      	cmp	r3, #0
 8001928:	f47f af6a 	bne.w	8001800 <main+0x660>
				}
				interrupt10ms = 0;
 800192c:	4b5e      	ldr	r3, [pc, #376]	; (8001aa8 <main+0x908>)
 800192e:	2200      	movs	r2, #0
 8001930:	701a      	strb	r2, [r3, #0]
				TIM11->CR1 &= ~TIM_CR1_CEN;				//Disable Counter
 8001932:	4b62      	ldr	r3, [pc, #392]	; (8001abc <main+0x91c>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4a61      	ldr	r2, [pc, #388]	; (8001abc <main+0x91c>)
 8001938:	f023 0301 	bic.w	r3, r3, #1
 800193c:	6013      	str	r3, [r2, #0]
				TIM11->CNT = 0;							//reset Counter
 800193e:	4b5f      	ldr	r3, [pc, #380]	; (8001abc <main+0x91c>)
 8001940:	2200      	movs	r2, #0
 8001942:	625a      	str	r2, [r3, #36]	; 0x24
				ReciveOrder = '0';
 8001944:	2330      	movs	r3, #48	; 0x30
 8001946:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 800194a:	e1ba      	b.n	8001cc2 <main+0xb22>
			}
			case TURN_RIGHT: {
				TIM11->CR1 |= TIM_CR1_CEN;
 800194c:	4b5b      	ldr	r3, [pc, #364]	; (8001abc <main+0x91c>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	4a5a      	ldr	r2, [pc, #360]	; (8001abc <main+0x91c>)
 8001952:	f043 0301 	orr.w	r3, r3, #1
 8001956:	6013      	str	r3, [r2, #0]

				calib = 0;
 8001958:	2300      	movs	r3, #0
 800195a:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				mean = 0;
 800195e:	f04f 0200 	mov.w	r2, #0
 8001962:	f04f 0300 	mov.w	r3, #0
 8001966:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
				while (calib < CALIB_NUNBER) {
 800196a:	e023      	b.n	80019b4 <main+0x814>
					if (interrupt10ms == 1) {
 800196c:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <main+0x908>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d11f      	bne.n	80019b4 <main+0x814>
						interrupt10ms = 0;
 8001974:	4b4c      	ldr	r3, [pc, #304]	; (8001aa8 <main+0x908>)
 8001976:	2200      	movs	r2, #0
 8001978:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);
 800197a:	494c      	ldr	r1, [pc, #304]	; (8001aac <main+0x90c>)
 800197c:	484c      	ldr	r0, [pc, #304]	; (8001ab0 <main+0x910>)
 800197e:	f000 fa77 	bl	8001e70 <MPU6050_Read_All>
						mean += (MPU6050.Gz / 100);
 8001982:	4b4a      	ldr	r3, [pc, #296]	; (8001aac <main+0x90c>)
 8001984:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001988:	f04f 0200 	mov.w	r2, #0
 800198c:	4b49      	ldr	r3, [pc, #292]	; (8001ab4 <main+0x914>)
 800198e:	f7fe ff65 	bl	800085c <__aeabi_ddiv>
 8001992:	4602      	mov	r2, r0
 8001994:	460b      	mov	r3, r1
 8001996:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 800199a:	f7fe fc7f 	bl	800029c <__adddf3>
 800199e:	4602      	mov	r2, r0
 80019a0:	460b      	mov	r3, r1
 80019a2:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
						calib++;
 80019a6:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	3301      	adds	r3, #1
 80019ae:	b2db      	uxtb	r3, r3
 80019b0:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				while (calib < CALIB_NUNBER) {
 80019b4:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 80019b8:	2b63      	cmp	r3, #99	; 0x63
 80019ba:	ddd7      	ble.n	800196c <main+0x7cc>
					}
				}
				mean = mean / CALIB_NUNBER;
 80019bc:	f04f 0200 	mov.w	r2, #0
 80019c0:	4b3c      	ldr	r3, [pc, #240]	; (8001ab4 <main+0x914>)
 80019c2:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 80019c6:	f7fe ff49 	bl	800085c <__aeabi_ddiv>
 80019ca:	4602      	mov	r2, r0
 80019cc:	460b      	mov	r3, r1
 80019ce:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

				angle = 0;
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	f04f 0300 	mov.w	r3, #0
 80019da:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
				accel = 50;
 80019de:	2332      	movs	r3, #50	; 0x32
 80019e0:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				motor(accel, accel);
 80019e4:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 80019e8:	b21b      	sxth	r3, r3
 80019ea:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 80019ee:	b212      	sxth	r2, r2
 80019f0:	4611      	mov	r1, r2
 80019f2:	4618      	mov	r0, r3
 80019f4:	f7ff fba0 	bl	8001138 <motor>
				while(angle < Argument)
 80019f8:	e064      	b.n	8001ac4 <main+0x924>
				{
					if (interrupt10ms == 1)
 80019fa:	4b2b      	ldr	r3, [pc, #172]	; (8001aa8 <main+0x908>)
 80019fc:	781b      	ldrb	r3, [r3, #0]
 80019fe:	2b01      	cmp	r3, #1
 8001a00:	d142      	bne.n	8001a88 <main+0x8e8>
					{
						if ((Argument - angle) < 35)
 8001a02:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8001a06:	4618      	mov	r0, r3
 8001a08:	f7fe fd94 	bl	8000534 <__aeabi_i2d>
 8001a0c:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001a10:	f7fe fc42 	bl	8000298 <__aeabi_dsub>
 8001a14:	4602      	mov	r2, r0
 8001a16:	460b      	mov	r3, r1
 8001a18:	4610      	mov	r0, r2
 8001a1a:	4619      	mov	r1, r3
 8001a1c:	f04f 0200 	mov.w	r2, #0
 8001a20:	4b27      	ldr	r3, [pc, #156]	; (8001ac0 <main+0x920>)
 8001a22:	f7ff f863 	bl	8000aec <__aeabi_dcmplt>
 8001a26:	4603      	mov	r3, r0
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d00c      	beq.n	8001a46 <main+0x8a6>
						{
							accel = 25;
 8001a2c:	2319      	movs	r3, #25
 8001a2e:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							motor(accel, accel);
 8001a32:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001a36:	b21b      	sxth	r3, r3
 8001a38:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001a3c:	b212      	sxth	r2, r2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f7ff fb79 	bl	8001138 <motor>
						}
						MPU6050_Read_All(&hi2c1, &MPU6050);		//Read Accelerometer
 8001a46:	4919      	ldr	r1, [pc, #100]	; (8001aac <main+0x90c>)
 8001a48:	4819      	ldr	r0, [pc, #100]	; (8001ab0 <main+0x910>)
 8001a4a:	f000 fa11 	bl	8001e70 <MPU6050_Read_All>
						angle -= ((MPU6050.Gz / 100) - mean);
 8001a4e:	4b17      	ldr	r3, [pc, #92]	; (8001aac <main+0x90c>)
 8001a50:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001a54:	f04f 0200 	mov.w	r2, #0
 8001a58:	4b16      	ldr	r3, [pc, #88]	; (8001ab4 <main+0x914>)
 8001a5a:	f7fe feff 	bl	800085c <__aeabi_ddiv>
 8001a5e:	4602      	mov	r2, r0
 8001a60:	460b      	mov	r3, r1
 8001a62:	4610      	mov	r0, r2
 8001a64:	4619      	mov	r1, r3
 8001a66:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001a6a:	f7fe fc15 	bl	8000298 <__aeabi_dsub>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001a76:	f7fe fc0f 	bl	8000298 <__aeabi_dsub>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
						interrupt10ms = 0;
 8001a82:	4b09      	ldr	r3, [pc, #36]	; (8001aa8 <main+0x908>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	701a      	strb	r2, [r3, #0]
					}
					if (USART_recive == 1){
 8001a88:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <main+0x918>)
 8001a8a:	781b      	ldrb	r3, [r3, #0]
 8001a8c:	2b01      	cmp	r3, #1
 8001a8e:	d119      	bne.n	8001ac4 <main+0x924>
						motor(0, 0);
 8001a90:	2100      	movs	r1, #0
 8001a92:	2000      	movs	r0, #0
 8001a94:	f7ff fb50 	bl	8001138 <motor>
						break;
 8001a98:	e022      	b.n	8001ae0 <main+0x940>
 8001a9a:	bf00      	nop
 8001a9c:	f3af 8000 	nop.w
 8001aa0:	00000000 	.word	0x00000000
 8001aa4:	4051c000 	.word	0x4051c000
 8001aa8:	2000018a 	.word	0x2000018a
 8001aac:	20000190 	.word	0x20000190
 8001ab0:	2000011c 	.word	0x2000011c
 8001ab4:	40590000 	.word	0x40590000
 8001ab8:	20000184 	.word	0x20000184
 8001abc:	40014800 	.word	0x40014800
 8001ac0:	40418000 	.word	0x40418000
				while(angle < Argument)
 8001ac4:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fd33 	bl	8000534 <__aeabi_i2d>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001ad6:	f7ff f809 	bl	8000aec <__aeabi_dcmplt>
 8001ada:	4603      	mov	r3, r0
 8001adc:	2b00      	cmp	r3, #0
 8001ade:	d18c      	bne.n	80019fa <main+0x85a>
					}
				}
				accel = 0;
 8001ae0:	2300      	movs	r3, #0
 8001ae2:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				motor(accel, accel);
 8001ae6:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001aea:	b21b      	sxth	r3, r3
 8001aec:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001af0:	b212      	sxth	r2, r2
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f7ff fb1f 	bl	8001138 <motor>
				interrupt10ms = 0;
 8001afa:	4b73      	ldr	r3, [pc, #460]	; (8001cc8 <main+0xb28>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
				TIM11->CR1 &= ~TIM_CR1_CEN;				//Disable Counter
 8001b00:	4b72      	ldr	r3, [pc, #456]	; (8001ccc <main+0xb2c>)
 8001b02:	681b      	ldr	r3, [r3, #0]
 8001b04:	4a71      	ldr	r2, [pc, #452]	; (8001ccc <main+0xb2c>)
 8001b06:	f023 0301 	bic.w	r3, r3, #1
 8001b0a:	6013      	str	r3, [r2, #0]
				TIM11->CNT = 0;							//reset Counter
 8001b0c:	4b6f      	ldr	r3, [pc, #444]	; (8001ccc <main+0xb2c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	625a      	str	r2, [r3, #36]	; 0x24
				ReciveOrder = '0';
 8001b12:	2330      	movs	r3, #48	; 0x30
 8001b14:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8001b18:	e0d3      	b.n	8001cc2 <main+0xb22>
			}
			case TURN_LEFT: {
				TIM11->CR1 |= TIM_CR1_CEN;
 8001b1a:	4b6c      	ldr	r3, [pc, #432]	; (8001ccc <main+0xb2c>)
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	4a6b      	ldr	r2, [pc, #428]	; (8001ccc <main+0xb2c>)
 8001b20:	f043 0301 	orr.w	r3, r3, #1
 8001b24:	6013      	str	r3, [r2, #0]

				calib = 0;
 8001b26:	2300      	movs	r3, #0
 8001b28:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				mean = 0;
 8001b2c:	f04f 0200 	mov.w	r2, #0
 8001b30:	f04f 0300 	mov.w	r3, #0
 8001b34:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
				while (calib < CALIB_NUNBER) {
 8001b38:	e023      	b.n	8001b82 <main+0x9e2>
					if (interrupt10ms == 1) {
 8001b3a:	4b63      	ldr	r3, [pc, #396]	; (8001cc8 <main+0xb28>)
 8001b3c:	781b      	ldrb	r3, [r3, #0]
 8001b3e:	2b01      	cmp	r3, #1
 8001b40:	d11f      	bne.n	8001b82 <main+0x9e2>
						interrupt10ms = 0;
 8001b42:	4b61      	ldr	r3, [pc, #388]	; (8001cc8 <main+0xb28>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	701a      	strb	r2, [r3, #0]
						MPU6050_Read_All(&hi2c1, &MPU6050);
 8001b48:	4961      	ldr	r1, [pc, #388]	; (8001cd0 <main+0xb30>)
 8001b4a:	4862      	ldr	r0, [pc, #392]	; (8001cd4 <main+0xb34>)
 8001b4c:	f000 f990 	bl	8001e70 <MPU6050_Read_All>
						mean += (MPU6050.Gz / 100);
 8001b50:	4b5f      	ldr	r3, [pc, #380]	; (8001cd0 <main+0xb30>)
 8001b52:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001b56:	f04f 0200 	mov.w	r2, #0
 8001b5a:	4b5f      	ldr	r3, [pc, #380]	; (8001cd8 <main+0xb38>)
 8001b5c:	f7fe fe7e 	bl	800085c <__aeabi_ddiv>
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001b68:	f7fe fb98 	bl	800029c <__adddf3>
 8001b6c:	4602      	mov	r2, r0
 8001b6e:	460b      	mov	r3, r1
 8001b70:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8
						calib++;
 8001b74:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001b78:	b2db      	uxtb	r3, r3
 8001b7a:	3301      	adds	r3, #1
 8001b7c:	b2db      	uxtb	r3, r3
 8001b7e:	f887 30e7 	strb.w	r3, [r7, #231]	; 0xe7
				while (calib < CALIB_NUNBER) {
 8001b82:	f997 30e7 	ldrsb.w	r3, [r7, #231]	; 0xe7
 8001b86:	2b63      	cmp	r3, #99	; 0x63
 8001b88:	ddd7      	ble.n	8001b3a <main+0x99a>
					}
				}
				mean = mean / CALIB_NUNBER;
 8001b8a:	f04f 0200 	mov.w	r2, #0
 8001b8e:	4b52      	ldr	r3, [pc, #328]	; (8001cd8 <main+0xb38>)
 8001b90:	e9d7 013a 	ldrd	r0, r1, [r7, #232]	; 0xe8
 8001b94:	f7fe fe62 	bl	800085c <__aeabi_ddiv>
 8001b98:	4602      	mov	r2, r0
 8001b9a:	460b      	mov	r3, r1
 8001b9c:	e9c7 233a 	strd	r2, r3, [r7, #232]	; 0xe8

				angle = 0;
 8001ba0:	f04f 0200 	mov.w	r2, #0
 8001ba4:	f04f 0300 	mov.w	r3, #0
 8001ba8:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
				accel = -50;
 8001bac:	23ce      	movs	r3, #206	; 0xce
 8001bae:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				motor(accel, accel);
 8001bb2:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001bb6:	b21b      	sxth	r3, r3
 8001bb8:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001bbc:	b212      	sxth	r2, r2
 8001bbe:	4611      	mov	r1, r2
 8001bc0:	4618      	mov	r0, r3
 8001bc2:	f7ff fab9 	bl	8001138 <motor>
				while(angle < Argument)
 8001bc6:	e04f      	b.n	8001c68 <main+0xac8>
				{
					if (interrupt10ms == 1)
 8001bc8:	4b3f      	ldr	r3, [pc, #252]	; (8001cc8 <main+0xb28>)
 8001bca:	781b      	ldrb	r3, [r3, #0]
 8001bcc:	2b01      	cmp	r3, #1
 8001bce:	d142      	bne.n	8001c56 <main+0xab6>
					{
						if ((Argument - angle) < 35)
 8001bd0:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fcad 	bl	8000534 <__aeabi_i2d>
 8001bda:	e9d7 233e 	ldrd	r2, r3, [r7, #248]	; 0xf8
 8001bde:	f7fe fb5b 	bl	8000298 <__aeabi_dsub>
 8001be2:	4602      	mov	r2, r0
 8001be4:	460b      	mov	r3, r1
 8001be6:	4610      	mov	r0, r2
 8001be8:	4619      	mov	r1, r3
 8001bea:	f04f 0200 	mov.w	r2, #0
 8001bee:	4b3b      	ldr	r3, [pc, #236]	; (8001cdc <main+0xb3c>)
 8001bf0:	f7fe ff7c 	bl	8000aec <__aeabi_dcmplt>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d00c      	beq.n	8001c14 <main+0xa74>
						{
							accel = -25;
 8001bfa:	23e7      	movs	r3, #231	; 0xe7
 8001bfc:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
							motor(accel, accel);
 8001c00:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001c0a:	b212      	sxth	r2, r2
 8001c0c:	4611      	mov	r1, r2
 8001c0e:	4618      	mov	r0, r3
 8001c10:	f7ff fa92 	bl	8001138 <motor>
						}
						MPU6050_Read_All(&hi2c1, &MPU6050);		//Read Accelerometer
 8001c14:	492e      	ldr	r1, [pc, #184]	; (8001cd0 <main+0xb30>)
 8001c16:	482f      	ldr	r0, [pc, #188]	; (8001cd4 <main+0xb34>)
 8001c18:	f000 f92a 	bl	8001e70 <MPU6050_Read_All>
						angle += ((MPU6050.Gz / 100) - mean);
 8001c1c:	4b2c      	ldr	r3, [pc, #176]	; (8001cd0 <main+0xb30>)
 8001c1e:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 8001c22:	f04f 0200 	mov.w	r2, #0
 8001c26:	4b2c      	ldr	r3, [pc, #176]	; (8001cd8 <main+0xb38>)
 8001c28:	f7fe fe18 	bl	800085c <__aeabi_ddiv>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	460b      	mov	r3, r1
 8001c30:	4610      	mov	r0, r2
 8001c32:	4619      	mov	r1, r3
 8001c34:	e9d7 233a 	ldrd	r2, r3, [r7, #232]	; 0xe8
 8001c38:	f7fe fb2e 	bl	8000298 <__aeabi_dsub>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	460b      	mov	r3, r1
 8001c40:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001c44:	f7fe fb2a 	bl	800029c <__adddf3>
 8001c48:	4602      	mov	r2, r0
 8001c4a:	460b      	mov	r3, r1
 8001c4c:	e9c7 233e 	strd	r2, r3, [r7, #248]	; 0xf8
						interrupt10ms = 0;
 8001c50:	4b1d      	ldr	r3, [pc, #116]	; (8001cc8 <main+0xb28>)
 8001c52:	2200      	movs	r2, #0
 8001c54:	701a      	strb	r2, [r3, #0]
					}
					if (USART_recive == 1){
 8001c56:	4b22      	ldr	r3, [pc, #136]	; (8001ce0 <main+0xb40>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d104      	bne.n	8001c68 <main+0xac8>
						motor(0, 0);
 8001c5e:	2100      	movs	r1, #0
 8001c60:	2000      	movs	r0, #0
 8001c62:	f7ff fa69 	bl	8001138 <motor>
						break;
 8001c66:	e00d      	b.n	8001c84 <main+0xae4>
				while(angle < Argument)
 8001c68:	f9b7 30cc 	ldrsh.w	r3, [r7, #204]	; 0xcc
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	f7fe fc61 	bl	8000534 <__aeabi_i2d>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	e9d7 013e 	ldrd	r0, r1, [r7, #248]	; 0xf8
 8001c7a:	f7fe ff37 	bl	8000aec <__aeabi_dcmplt>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	2b00      	cmp	r3, #0
 8001c82:	d1a1      	bne.n	8001bc8 <main+0xa28>
					}
				}
				accel = 0;
 8001c84:	2300      	movs	r3, #0
 8001c86:	f887 30e6 	strb.w	r3, [r7, #230]	; 0xe6
				motor(accel, accel);
 8001c8a:	f997 30e6 	ldrsb.w	r3, [r7, #230]	; 0xe6
 8001c8e:	b21b      	sxth	r3, r3
 8001c90:	f997 20e6 	ldrsb.w	r2, [r7, #230]	; 0xe6
 8001c94:	b212      	sxth	r2, r2
 8001c96:	4611      	mov	r1, r2
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f7ff fa4d 	bl	8001138 <motor>
				interrupt10ms = 0;
 8001c9e:	4b0a      	ldr	r3, [pc, #40]	; (8001cc8 <main+0xb28>)
 8001ca0:	2200      	movs	r2, #0
 8001ca2:	701a      	strb	r2, [r3, #0]
				TIM11->CR1 &= ~TIM_CR1_CEN;				//Disable Counter
 8001ca4:	4b09      	ldr	r3, [pc, #36]	; (8001ccc <main+0xb2c>)
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	4a08      	ldr	r2, [pc, #32]	; (8001ccc <main+0xb2c>)
 8001caa:	f023 0301 	bic.w	r3, r3, #1
 8001cae:	6013      	str	r3, [r2, #0]
				TIM11->CNT = 0;							//reset Counter
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <main+0xb2c>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	625a      	str	r2, [r3, #36]	; 0x24
				ReciveOrder = '0';
 8001cb6:	2330      	movs	r3, #48	; 0x30
 8001cb8:	f887 3106 	strb.w	r3, [r7, #262]	; 0x106
				break;
 8001cbc:	bf00      	nop
 8001cbe:	f7ff bb82 	b.w	80013c6 <main+0x226>
		if (USART_recive == 1)	//if complete message is recived
 8001cc2:	f7ff bb80 	b.w	80013c6 <main+0x226>
 8001cc6:	bf00      	nop
 8001cc8:	2000018a 	.word	0x2000018a
 8001ccc:	40014800 	.word	0x40014800
 8001cd0:	20000190 	.word	0x20000190
 8001cd4:	2000011c 	.word	0x2000011c
 8001cd8:	40590000 	.word	0x40590000
 8001cdc:	40418000 	.word	0x40418000
 8001ce0:	20000184 	.word	0x20000184

08001ce4 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b094      	sub	sp, #80	; 0x50
 8001ce8:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001cea:	f107 0320 	add.w	r3, r7, #32
 8001cee:	2230      	movs	r2, #48	; 0x30
 8001cf0:	2100      	movs	r1, #0
 8001cf2:	4618      	mov	r0, r3
 8001cf4:	f006 f9b2 	bl	800805c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001cf8:	f107 030c 	add.w	r3, r7, #12
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]
 8001d04:	60da      	str	r2, [r3, #12]
 8001d06:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
 8001d0c:	4b28      	ldr	r3, [pc, #160]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d10:	4a27      	ldr	r2, [pc, #156]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d16:	6413      	str	r3, [r2, #64]	; 0x40
 8001d18:	4b25      	ldr	r3, [pc, #148]	; (8001db0 <SystemClock_Config+0xcc>)
 8001d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d1c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d20:	60bb      	str	r3, [r7, #8]
 8001d22:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001d24:	2300      	movs	r3, #0
 8001d26:	607b      	str	r3, [r7, #4]
 8001d28:	4b22      	ldr	r3, [pc, #136]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001d30:	4a20      	ldr	r2, [pc, #128]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d32:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001d36:	6013      	str	r3, [r2, #0]
 8001d38:	4b1e      	ldr	r3, [pc, #120]	; (8001db4 <SystemClock_Config+0xd0>)
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001d40:	607b      	str	r3, [r7, #4]
 8001d42:	687b      	ldr	r3, [r7, #4]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001d44:	2301      	movs	r3, #1
 8001d46:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001d48:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001d4c:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001d4e:	2302      	movs	r3, #2
 8001d50:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001d52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001d56:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 25;
 8001d58:	2319      	movs	r3, #25
 8001d5a:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 8001d5c:	23a8      	movs	r3, #168	; 0xa8
 8001d5e:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001d60:	2302      	movs	r3, #2
 8001d62:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001d64:	2304      	movs	r3, #4
 8001d66:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001d68:	f107 0320 	add.w	r3, r7, #32
 8001d6c:	4618      	mov	r0, r3
 8001d6e:	f003 fe63 	bl	8005a38 <HAL_RCC_OscConfig>
 8001d72:	4603      	mov	r3, r0
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d001      	beq.n	8001d7c <SystemClock_Config+0x98>
		Error_Handler();
 8001d78:	f000 f81e 	bl	8001db8 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001d7c:	230f      	movs	r3, #15
 8001d7e:	60fb      	str	r3, [r7, #12]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001d80:	2302      	movs	r3, #2
 8001d82:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001d84:	2300      	movs	r3, #0
 8001d86:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001d88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001d8c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001d8e:	2300      	movs	r3, #0
 8001d90:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001d92:	f107 030c 	add.w	r3, r7, #12
 8001d96:	2102      	movs	r1, #2
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f004 f8c5 	bl	8005f28 <HAL_RCC_ClockConfig>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	2b00      	cmp	r3, #0
 8001da2:	d001      	beq.n	8001da8 <SystemClock_Config+0xc4>
		Error_Handler();
 8001da4:	f000 f808 	bl	8001db8 <Error_Handler>
	}
}
 8001da8:	bf00      	nop
 8001daa:	3750      	adds	r7, #80	; 0x50
 8001dac:	46bd      	mov	sp, r7
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40023800 	.word	0x40023800
 8001db4:	40007000 	.word	0x40007000

08001db8 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001db8:	b480      	push	{r7}
 8001dba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dbc:	b672      	cpsid	i
}
 8001dbe:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();							//disable all interrupts
	while (1) {
 8001dc0:	e7fe      	b.n	8001dc0 <Error_Handler+0x8>

08001dc2 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001dc2:	b580      	push	{r7, lr}
 8001dc4:	b088      	sub	sp, #32
 8001dc6:	af04      	add	r7, sp, #16
 8001dc8:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001dca:	2364      	movs	r3, #100	; 0x64
 8001dcc:	9302      	str	r3, [sp, #8]
 8001dce:	2301      	movs	r3, #1
 8001dd0:	9301      	str	r3, [sp, #4]
 8001dd2:	f107 030f 	add.w	r3, r7, #15
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	2301      	movs	r3, #1
 8001dda:	2275      	movs	r2, #117	; 0x75
 8001ddc:	21d0      	movs	r1, #208	; 0xd0
 8001dde:	6878      	ldr	r0, [r7, #4]
 8001de0:	f001 fd04 	bl	80037ec <HAL_I2C_Mem_Read>

    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001de4:	7bfb      	ldrb	r3, [r7, #15]
 8001de6:	2b68      	cmp	r3, #104	; 0x68
 8001de8:	d13d      	bne.n	8001e66 <MPU6050_Init+0xa4>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001dea:	2300      	movs	r3, #0
 8001dec:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001dee:	2364      	movs	r3, #100	; 0x64
 8001df0:	9302      	str	r3, [sp, #8]
 8001df2:	2301      	movs	r3, #1
 8001df4:	9301      	str	r3, [sp, #4]
 8001df6:	f107 030e 	add.w	r3, r7, #14
 8001dfa:	9300      	str	r3, [sp, #0]
 8001dfc:	2301      	movs	r3, #1
 8001dfe:	226b      	movs	r2, #107	; 0x6b
 8001e00:	21d0      	movs	r1, #208	; 0xd0
 8001e02:	6878      	ldr	r0, [r7, #4]
 8001e04:	f001 fbf8 	bl	80035f8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001e08:	2307      	movs	r3, #7
 8001e0a:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001e0c:	2364      	movs	r3, #100	; 0x64
 8001e0e:	9302      	str	r3, [sp, #8]
 8001e10:	2301      	movs	r3, #1
 8001e12:	9301      	str	r3, [sp, #4]
 8001e14:	f107 030e 	add.w	r3, r7, #14
 8001e18:	9300      	str	r3, [sp, #0]
 8001e1a:	2301      	movs	r3, #1
 8001e1c:	2219      	movs	r2, #25
 8001e1e:	21d0      	movs	r1, #208	; 0xd0
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f001 fbe9 	bl	80035f8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001e26:	2300      	movs	r3, #0
 8001e28:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e2a:	2364      	movs	r3, #100	; 0x64
 8001e2c:	9302      	str	r3, [sp, #8]
 8001e2e:	2301      	movs	r3, #1
 8001e30:	9301      	str	r3, [sp, #4]
 8001e32:	f107 030e 	add.w	r3, r7, #14
 8001e36:	9300      	str	r3, [sp, #0]
 8001e38:	2301      	movs	r3, #1
 8001e3a:	221c      	movs	r2, #28
 8001e3c:	21d0      	movs	r1, #208	; 0xd0
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f001 fbda 	bl	80035f8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001e44:	2300      	movs	r3, #0
 8001e46:	73bb      	strb	r3, [r7, #14]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001e48:	2364      	movs	r3, #100	; 0x64
 8001e4a:	9302      	str	r3, [sp, #8]
 8001e4c:	2301      	movs	r3, #1
 8001e4e:	9301      	str	r3, [sp, #4]
 8001e50:	f107 030e 	add.w	r3, r7, #14
 8001e54:	9300      	str	r3, [sp, #0]
 8001e56:	2301      	movs	r3, #1
 8001e58:	221b      	movs	r2, #27
 8001e5a:	21d0      	movs	r1, #208	; 0xd0
 8001e5c:	6878      	ldr	r0, [r7, #4]
 8001e5e:	f001 fbcb 	bl	80035f8 <HAL_I2C_Mem_Write>
        return 0;
 8001e62:	2300      	movs	r3, #0
 8001e64:	e000      	b.n	8001e68 <MPU6050_Init+0xa6>
    }
    return 1;
 8001e66:	2301      	movs	r3, #1
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3710      	adds	r7, #16
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001e70:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e74:	b094      	sub	sp, #80	; 0x50
 8001e76:	af04      	add	r7, sp, #16
 8001e78:	6078      	str	r0, [r7, #4]
 8001e7a:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 8001e7c:	2364      	movs	r3, #100	; 0x64
 8001e7e:	9302      	str	r3, [sp, #8]
 8001e80:	230e      	movs	r3, #14
 8001e82:	9301      	str	r3, [sp, #4]
 8001e84:	f107 0308 	add.w	r3, r7, #8
 8001e88:	9300      	str	r3, [sp, #0]
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	223b      	movs	r2, #59	; 0x3b
 8001e8e:	21d0      	movs	r1, #208	; 0xd0
 8001e90:	6878      	ldr	r0, [r7, #4]
 8001e92:	f001 fcab 	bl	80037ec <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8001e96:	7a3b      	ldrb	r3, [r7, #8]
 8001e98:	021b      	lsls	r3, r3, #8
 8001e9a:	b21a      	sxth	r2, r3
 8001e9c:	7a7b      	ldrb	r3, [r7, #9]
 8001e9e:	b21b      	sxth	r3, r3
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	b21a      	sxth	r2, r3
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8001ea8:	7abb      	ldrb	r3, [r7, #10]
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	b21a      	sxth	r2, r3
 8001eae:	7afb      	ldrb	r3, [r7, #11]
 8001eb0:	b21b      	sxth	r3, r3
 8001eb2:	4313      	orrs	r3, r2
 8001eb4:	b21a      	sxth	r2, r3
 8001eb6:	683b      	ldr	r3, [r7, #0]
 8001eb8:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8001eba:	7b3b      	ldrb	r3, [r7, #12]
 8001ebc:	021b      	lsls	r3, r3, #8
 8001ebe:	b21a      	sxth	r2, r3
 8001ec0:	7b7b      	ldrb	r3, [r7, #13]
 8001ec2:	b21b      	sxth	r3, r3
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	b21a      	sxth	r2, r3
 8001ec8:	683b      	ldr	r3, [r7, #0]
 8001eca:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8001ecc:	7bbb      	ldrb	r3, [r7, #14]
 8001ece:	021b      	lsls	r3, r3, #8
 8001ed0:	b21a      	sxth	r2, r3
 8001ed2:	7bfb      	ldrb	r3, [r7, #15]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	4313      	orrs	r3, r2
 8001ed8:	86fb      	strh	r3, [r7, #54]	; 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8001eda:	7c3b      	ldrb	r3, [r7, #16]
 8001edc:	021b      	lsls	r3, r3, #8
 8001ede:	b21a      	sxth	r2, r3
 8001ee0:	7c7b      	ldrb	r3, [r7, #17]
 8001ee2:	b21b      	sxth	r3, r3
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	b21a      	sxth	r2, r3
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8001eec:	7cbb      	ldrb	r3, [r7, #18]
 8001eee:	021b      	lsls	r3, r3, #8
 8001ef0:	b21a      	sxth	r2, r3
 8001ef2:	7cfb      	ldrb	r3, [r7, #19]
 8001ef4:	b21b      	sxth	r3, r3
 8001ef6:	4313      	orrs	r3, r2
 8001ef8:	b21a      	sxth	r2, r3
 8001efa:	683b      	ldr	r3, [r7, #0]
 8001efc:	845a      	strh	r2, [r3, #34]	; 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8001efe:	7d3b      	ldrb	r3, [r7, #20]
 8001f00:	021b      	lsls	r3, r3, #8
 8001f02:	b21a      	sxth	r2, r3
 8001f04:	7d7b      	ldrb	r3, [r7, #21]
 8001f06:	b21b      	sxth	r3, r3
 8001f08:	4313      	orrs	r3, r2
 8001f0a:	b21a      	sxth	r2, r3
 8001f0c:	683b      	ldr	r3, [r7, #0]
 8001f0e:	849a      	strh	r2, [r3, #36]	; 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7fe fb0c 	bl	8000534 <__aeabi_i2d>
 8001f1c:	f04f 0200 	mov.w	r2, #0
 8001f20:	4bbd      	ldr	r3, [pc, #756]	; (8002218 <MPU6050_Read_All+0x3a8>)
 8001f22:	f7fe fc9b 	bl	800085c <__aeabi_ddiv>
 8001f26:	4602      	mov	r2, r0
 8001f28:	460b      	mov	r3, r1
 8001f2a:	6839      	ldr	r1, [r7, #0]
 8001f2c:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8001f30:	683b      	ldr	r3, [r7, #0]
 8001f32:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001f36:	4618      	mov	r0, r3
 8001f38:	f7fe fafc 	bl	8000534 <__aeabi_i2d>
 8001f3c:	f04f 0200 	mov.w	r2, #0
 8001f40:	4bb5      	ldr	r3, [pc, #724]	; (8002218 <MPU6050_Read_All+0x3a8>)
 8001f42:	f7fe fc8b 	bl	800085c <__aeabi_ddiv>
 8001f46:	4602      	mov	r2, r0
 8001f48:	460b      	mov	r3, r1
 8001f4a:	6839      	ldr	r1, [r7, #0]
 8001f4c:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001f56:	4618      	mov	r0, r3
 8001f58:	f7fe faec 	bl	8000534 <__aeabi_i2d>
 8001f5c:	a3a8      	add	r3, pc, #672	; (adr r3, 8002200 <MPU6050_Read_All+0x390>)
 8001f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f62:	f7fe fc7b 	bl	800085c <__aeabi_ddiv>
 8001f66:	4602      	mov	r2, r0
 8001f68:	460b      	mov	r3, r1
 8001f6a:	6839      	ldr	r1, [r7, #0]
 8001f6c:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8001f70:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8001f74:	ee07 3a90 	vmov	s15, r3
 8001f78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f7c:	eddf 6aa7 	vldr	s13, [pc, #668]	; 800221c <MPU6050_Read_All+0x3ac>
 8001f80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f84:	ed9f 7aa6 	vldr	s14, [pc, #664]	; 8002220 <MPU6050_Read_All+0x3b0>
 8001f88:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001f8c:	683b      	ldr	r3, [r7, #0]
 8001f8e:	edc3 7a10 	vstr	s15, [r3, #64]	; 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8001f98:	4618      	mov	r0, r3
 8001f9a:	f7fe facb 	bl	8000534 <__aeabi_i2d>
 8001f9e:	a39a      	add	r3, pc, #616	; (adr r3, 8002208 <MPU6050_Read_All+0x398>)
 8001fa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa4:	f7fe fc5a 	bl	800085c <__aeabi_ddiv>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	6839      	ldr	r1, [r7, #0]
 8001fae:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 8001fb2:	683b      	ldr	r3, [r7, #0]
 8001fb4:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	; 0x22
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fabb 	bl	8000534 <__aeabi_i2d>
 8001fbe:	a392      	add	r3, pc, #584	; (adr r3, 8002208 <MPU6050_Read_All+0x398>)
 8001fc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fc4:	f7fe fc4a 	bl	800085c <__aeabi_ddiv>
 8001fc8:	4602      	mov	r2, r0
 8001fca:	460b      	mov	r3, r1
 8001fcc:	6839      	ldr	r1, [r7, #0]
 8001fce:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	; 0x24
 8001fd8:	4618      	mov	r0, r3
 8001fda:	f7fe faab 	bl	8000534 <__aeabi_i2d>
 8001fde:	a38a      	add	r3, pc, #552	; (adr r3, 8002208 <MPU6050_Read_All+0x398>)
 8001fe0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fe4:	f7fe fc3a 	bl	800085c <__aeabi_ddiv>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	6839      	ldr	r1, [r7, #0]
 8001fee:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 8001ff2:	f000 fe23 	bl	8002c3c <HAL_GetTick>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	4b8a      	ldr	r3, [pc, #552]	; (8002224 <MPU6050_Read_All+0x3b4>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	1ad3      	subs	r3, r2, r3
 8001ffe:	4618      	mov	r0, r3
 8002000:	f7fe fa88 	bl	8000514 <__aeabi_ui2d>
 8002004:	f04f 0200 	mov.w	r2, #0
 8002008:	4b87      	ldr	r3, [pc, #540]	; (8002228 <MPU6050_Read_All+0x3b8>)
 800200a:	f7fe fc27 	bl	800085c <__aeabi_ddiv>
 800200e:	4602      	mov	r2, r0
 8002010:	460b      	mov	r3, r1
 8002012:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28
    timer = HAL_GetTick();
 8002016:	f000 fe11 	bl	8002c3c <HAL_GetTick>
 800201a:	4603      	mov	r3, r0
 800201c:	4a81      	ldr	r2, [pc, #516]	; (8002224 <MPU6050_Read_All+0x3b4>)
 800201e:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 8002020:	683b      	ldr	r3, [r7, #0]
 8002022:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002026:	461a      	mov	r2, r3
 8002028:	683b      	ldr	r3, [r7, #0]
 800202a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800202e:	fb03 f202 	mul.w	r2, r3, r2
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002038:	4619      	mov	r1, r3
 800203a:	683b      	ldr	r3, [r7, #0]
 800203c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8002040:	fb01 f303 	mul.w	r3, r1, r3
 8002044:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 8002046:	4618      	mov	r0, r3
 8002048:	f7fe fa74 	bl	8000534 <__aeabi_i2d>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	ec43 2b10 	vmov	d0, r2, r3
 8002054:	f006 fe12 	bl	8008c7c <sqrt>
 8002058:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 800205c:	f04f 0200 	mov.w	r2, #0
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002068:	f7fe fd36 	bl	8000ad8 <__aeabi_dcmpeq>
 800206c:	4603      	mov	r3, r0
 800206e:	2b00      	cmp	r3, #0
 8002070:	d11f      	bne.n	80020b2 <MPU6050_Read_All+0x242>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002072:	683b      	ldr	r3, [r7, #0]
 8002074:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8002078:	4618      	mov	r0, r3
 800207a:	f7fe fa5b 	bl	8000534 <__aeabi_i2d>
 800207e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002082:	f7fe fbeb 	bl	800085c <__aeabi_ddiv>
 8002086:	4602      	mov	r2, r0
 8002088:	460b      	mov	r3, r1
 800208a:	ec43 2b17 	vmov	d7, r2, r3
 800208e:	eeb0 0a47 	vmov.f32	s0, s14
 8002092:	eef0 0a67 	vmov.f32	s1, s15
 8002096:	f006 fe1f 	bl	8008cd8 <atan>
 800209a:	ec51 0b10 	vmov	r0, r1, d0
 800209e:	a35c      	add	r3, pc, #368	; (adr r3, 8002210 <MPU6050_Read_All+0x3a0>)
 80020a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020a4:	f7fe fab0 	bl	8000608 <__aeabi_dmul>
 80020a8:	4602      	mov	r2, r0
 80020aa:	460b      	mov	r3, r1
 80020ac:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
 80020b0:	e005      	b.n	80020be <MPU6050_Read_All+0x24e>
    }
    else
    {
        roll = 0.0;
 80020b2:	f04f 0200 	mov.w	r2, #0
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80020be:	683b      	ldr	r3, [r7, #0]
 80020c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80020c4:	425b      	negs	r3, r3
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7fe fa34 	bl	8000534 <__aeabi_i2d>
 80020cc:	4682      	mov	sl, r0
 80020ce:	468b      	mov	fp, r1
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80020d6:	4618      	mov	r0, r3
 80020d8:	f7fe fa2c 	bl	8000534 <__aeabi_i2d>
 80020dc:	4602      	mov	r2, r0
 80020de:	460b      	mov	r3, r1
 80020e0:	ec43 2b11 	vmov	d1, r2, r3
 80020e4:	ec4b ab10 	vmov	d0, sl, fp
 80020e8:	f006 fdc6 	bl	8008c78 <atan2>
 80020ec:	ec51 0b10 	vmov	r0, r1, d0
 80020f0:	a347      	add	r3, pc, #284	; (adr r3, 8002210 <MPU6050_Read_All+0x3a0>)
 80020f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020f6:	f7fe fa87 	bl	8000608 <__aeabi_dmul>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002102:	f04f 0200 	mov.w	r2, #0
 8002106:	4b49      	ldr	r3, [pc, #292]	; (800222c <MPU6050_Read_All+0x3bc>)
 8002108:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 800210c:	f7fe fcee 	bl	8000aec <__aeabi_dcmplt>
 8002110:	4603      	mov	r3, r0
 8002112:	2b00      	cmp	r3, #0
 8002114:	d00a      	beq.n	800212c <MPU6050_Read_All+0x2bc>
 8002116:	683b      	ldr	r3, [r7, #0]
 8002118:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 800211c:	f04f 0200 	mov.w	r2, #0
 8002120:	4b43      	ldr	r3, [pc, #268]	; (8002230 <MPU6050_Read_All+0x3c0>)
 8002122:	f7fe fd01 	bl	8000b28 <__aeabi_dcmpgt>
 8002126:	4603      	mov	r3, r0
 8002128:	2b00      	cmp	r3, #0
 800212a:	d114      	bne.n	8002156 <MPU6050_Read_All+0x2e6>
 800212c:	f04f 0200 	mov.w	r2, #0
 8002130:	4b3f      	ldr	r3, [pc, #252]	; (8002230 <MPU6050_Read_All+0x3c0>)
 8002132:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8002136:	f7fe fcf7 	bl	8000b28 <__aeabi_dcmpgt>
 800213a:	4603      	mov	r3, r0
 800213c:	2b00      	cmp	r3, #0
 800213e:	d015      	beq.n	800216c <MPU6050_Read_All+0x2fc>
 8002140:	683b      	ldr	r3, [r7, #0]
 8002142:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	; 0x50
 8002146:	f04f 0200 	mov.w	r2, #0
 800214a:	4b38      	ldr	r3, [pc, #224]	; (800222c <MPU6050_Read_All+0x3bc>)
 800214c:	f7fe fcce 	bl	8000aec <__aeabi_dcmplt>
 8002150:	4603      	mov	r3, r0
 8002152:	2b00      	cmp	r3, #0
 8002154:	d00a      	beq.n	800216c <MPU6050_Read_All+0x2fc>
    {
        KalmanY.angle = pitch;
 8002156:	4937      	ldr	r1, [pc, #220]	; (8002234 <MPU6050_Read_All+0x3c4>)
 8002158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800215c:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 8002160:	6839      	ldr	r1, [r7, #0]
 8002162:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002166:	e9c1 2314 	strd	r2, r3, [r1, #80]	; 0x50
 800216a:	e014      	b.n	8002196 <MPU6050_Read_All+0x326>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800216c:	683b      	ldr	r3, [r7, #0]
 800216e:	ed93 7b0c 	vldr	d7, [r3, #48]	; 0x30
 8002172:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 8002176:	eeb0 1a47 	vmov.f32	s2, s14
 800217a:	eef0 1a67 	vmov.f32	s3, s15
 800217e:	ed97 0b06 	vldr	d0, [r7, #24]
 8002182:	482c      	ldr	r0, [pc, #176]	; (8002234 <MPU6050_Read_All+0x3c4>)
 8002184:	f000 f85a 	bl	800223c <Kalman_getAngle>
 8002188:	eeb0 7a40 	vmov.f32	s14, s0
 800218c:	eef0 7a60 	vmov.f32	s15, s1
 8002190:	683b      	ldr	r3, [r7, #0]
 8002192:	ed83 7b14 	vstr	d7, [r3, #80]	; 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8002196:	683b      	ldr	r3, [r7, #0]
 8002198:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	; 0x50
 800219c:	4690      	mov	r8, r2
 800219e:	f023 4900 	bic.w	r9, r3, #2147483648	; 0x80000000
 80021a2:	f04f 0200 	mov.w	r2, #0
 80021a6:	4b22      	ldr	r3, [pc, #136]	; (8002230 <MPU6050_Read_All+0x3c0>)
 80021a8:	4640      	mov	r0, r8
 80021aa:	4649      	mov	r1, r9
 80021ac:	f7fe fcbc 	bl	8000b28 <__aeabi_dcmpgt>
 80021b0:	4603      	mov	r3, r0
 80021b2:	2b00      	cmp	r3, #0
 80021b4:	d008      	beq.n	80021c8 <MPU6050_Read_All+0x358>
        DataStruct->Gx = -DataStruct->Gx;
 80021b6:	683b      	ldr	r3, [r7, #0]
 80021b8:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 80021bc:	4614      	mov	r4, r2
 80021be:	f083 4500 	eor.w	r5, r3, #2147483648	; 0x80000000
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	e9c3 450a 	strd	r4, r5, [r3, #40]	; 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	ed93 7b0a 	vldr	d7, [r3, #40]	; 0x28
 80021ce:	ed97 2b0a 	vldr	d2, [r7, #40]	; 0x28
 80021d2:	eeb0 1a47 	vmov.f32	s2, s14
 80021d6:	eef0 1a67 	vmov.f32	s3, s15
 80021da:	ed97 0b0e 	vldr	d0, [r7, #56]	; 0x38
 80021de:	4816      	ldr	r0, [pc, #88]	; (8002238 <MPU6050_Read_All+0x3c8>)
 80021e0:	f000 f82c 	bl	800223c <Kalman_getAngle>
 80021e4:	eeb0 7a40 	vmov.f32	s14, s0
 80021e8:	eef0 7a60 	vmov.f32	s15, s1
 80021ec:	683b      	ldr	r3, [r7, #0]
 80021ee:	ed83 7b12 	vstr	d7, [r3, #72]	; 0x48
}
 80021f2:	bf00      	nop
 80021f4:	3740      	adds	r7, #64	; 0x40
 80021f6:	46bd      	mov	sp, r7
 80021f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80021fc:	f3af 8000 	nop.w
 8002200:	00000000 	.word	0x00000000
 8002204:	40cc2900 	.word	0x40cc2900
 8002208:	00000000 	.word	0x00000000
 800220c:	40606000 	.word	0x40606000
 8002210:	1a63c1f8 	.word	0x1a63c1f8
 8002214:	404ca5dc 	.word	0x404ca5dc
 8002218:	40d00000 	.word	0x40d00000
 800221c:	43aa0000 	.word	0x43aa0000
 8002220:	42121eb8 	.word	0x42121eb8
 8002224:	200001f4 	.word	0x200001f4
 8002228:	408f4000 	.word	0x408f4000
 800222c:	c0568000 	.word	0xc0568000
 8002230:	40568000 	.word	0x40568000
 8002234:	20000048 	.word	0x20000048
 8002238:	20000000 	.word	0x20000000

0800223c <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 800223c:	b5b0      	push	{r4, r5, r7, lr}
 800223e:	b096      	sub	sp, #88	; 0x58
 8002240:	af00      	add	r7, sp, #0
 8002242:	61f8      	str	r0, [r7, #28]
 8002244:	ed87 0b04 	vstr	d0, [r7, #16]
 8002248:	ed87 1b02 	vstr	d1, [r7, #8]
 800224c:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8002256:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800225a:	f7fe f81d 	bl	8000298 <__aeabi_dsub>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	e9c7 2314 	strd	r2, r3, [r7, #80]	; 0x50
    Kalman->angle += dt * rate;
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 800226c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8002270:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002274:	f7fe f9c8 	bl	8000608 <__aeabi_dmul>
 8002278:	4602      	mov	r2, r0
 800227a:	460b      	mov	r3, r1
 800227c:	4620      	mov	r0, r4
 800227e:	4629      	mov	r1, r5
 8002280:	f7fe f80c 	bl	800029c <__adddf3>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	69f9      	ldr	r1, [r7, #28]
 800228a:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 800228e:	69fb      	ldr	r3, [r7, #28]
 8002290:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002294:	69fb      	ldr	r3, [r7, #28]
 8002296:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800229a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800229e:	f7fe f9b3 	bl	8000608 <__aeabi_dmul>
 80022a2:	4602      	mov	r2, r0
 80022a4:	460b      	mov	r3, r1
 80022a6:	4610      	mov	r0, r2
 80022a8:	4619      	mov	r1, r3
 80022aa:	69fb      	ldr	r3, [r7, #28]
 80022ac:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 80022b0:	f7fd fff2 	bl	8000298 <__aeabi_dsub>
 80022b4:	4602      	mov	r2, r0
 80022b6:	460b      	mov	r3, r1
 80022b8:	4610      	mov	r0, r2
 80022ba:	4619      	mov	r1, r3
 80022bc:	69fb      	ldr	r3, [r7, #28]
 80022be:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	; 0x38
 80022c2:	f7fd ffe9 	bl	8000298 <__aeabi_dsub>
 80022c6:	4602      	mov	r2, r0
 80022c8:	460b      	mov	r3, r1
 80022ca:	4610      	mov	r0, r2
 80022cc:	4619      	mov	r1, r3
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80022d4:	f7fd ffe2 	bl	800029c <__adddf3>
 80022d8:	4602      	mov	r2, r0
 80022da:	460b      	mov	r3, r1
 80022dc:	4610      	mov	r0, r2
 80022de:	4619      	mov	r1, r3
 80022e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80022e4:	f7fe f990 	bl	8000608 <__aeabi_dmul>
 80022e8:	4602      	mov	r2, r0
 80022ea:	460b      	mov	r3, r1
 80022ec:	4620      	mov	r0, r4
 80022ee:	4629      	mov	r1, r5
 80022f0:	f7fd ffd4 	bl	800029c <__adddf3>
 80022f4:	4602      	mov	r2, r0
 80022f6:	460b      	mov	r3, r1
 80022f8:	69f9      	ldr	r1, [r7, #28]
 80022fa:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002304:	69fb      	ldr	r3, [r7, #28]
 8002306:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 800230a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800230e:	f7fe f97b 	bl	8000608 <__aeabi_dmul>
 8002312:	4602      	mov	r2, r0
 8002314:	460b      	mov	r3, r1
 8002316:	4620      	mov	r0, r4
 8002318:	4629      	mov	r1, r5
 800231a:	f7fd ffbd 	bl	8000298 <__aeabi_dsub>
 800231e:	4602      	mov	r2, r0
 8002320:	460b      	mov	r3, r1
 8002322:	69f9      	ldr	r1, [r7, #28]
 8002324:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002328:	69fb      	ldr	r3, [r7, #28]
 800232a:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 800232e:	69fb      	ldr	r3, [r7, #28]
 8002330:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	; 0x40
 8002334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002338:	f7fe f966 	bl	8000608 <__aeabi_dmul>
 800233c:	4602      	mov	r2, r0
 800233e:	460b      	mov	r3, r1
 8002340:	4620      	mov	r0, r4
 8002342:	4629      	mov	r1, r5
 8002344:	f7fd ffa8 	bl	8000298 <__aeabi_dsub>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	69f9      	ldr	r1, [r7, #28]
 800234e:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 800235e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002362:	f7fe f951 	bl	8000608 <__aeabi_dmul>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4620      	mov	r0, r4
 800236c:	4629      	mov	r1, r5
 800236e:	f7fd ff95 	bl	800029c <__adddf3>
 8002372:	4602      	mov	r2, r0
 8002374:	460b      	mov	r3, r1
 8002376:	69f9      	ldr	r1, [r7, #28]
 8002378:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 800237c:	69fb      	ldr	r3, [r7, #28]
 800237e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 8002382:	69fb      	ldr	r3, [r7, #28]
 8002384:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002388:	f7fd ff88 	bl	800029c <__adddf3>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	e9c7 2312 	strd	r2, r3, [r7, #72]	; 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 8002394:	69fb      	ldr	r3, [r7, #28]
 8002396:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	; 0x28
 800239a:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800239e:	f7fe fa5d 	bl	800085c <__aeabi_ddiv>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	; 0x38
 80023b0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80023b4:	f7fe fa52 	bl	800085c <__aeabi_ddiv>
 80023b8:	4602      	mov	r2, r0
 80023ba:	460b      	mov	r3, r1
 80023bc:	e9c7 230a 	strd	r2, r3, [r7, #40]	; 0x28

    double y = newAngle - Kalman->angle;
 80023c0:	69fb      	ldr	r3, [r7, #28]
 80023c2:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80023c6:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80023ca:	f7fd ff65 	bl	8000298 <__aeabi_dsub>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	e9c7 2310 	strd	r2, r3, [r7, #64]	; 0x40
    Kalman->angle += K[0] * y;
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80023dc:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80023e0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80023e4:	f7fe f910 	bl	8000608 <__aeabi_dmul>
 80023e8:	4602      	mov	r2, r0
 80023ea:	460b      	mov	r3, r1
 80023ec:	4620      	mov	r0, r4
 80023ee:	4629      	mov	r1, r5
 80023f0:	f7fd ff54 	bl	800029c <__adddf3>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	69f9      	ldr	r1, [r7, #28]
 80023fa:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 80023fe:	69fb      	ldr	r3, [r7, #28]
 8002400:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8002404:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002408:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800240c:	f7fe f8fc 	bl	8000608 <__aeabi_dmul>
 8002410:	4602      	mov	r2, r0
 8002412:	460b      	mov	r3, r1
 8002414:	4620      	mov	r0, r4
 8002416:	4629      	mov	r1, r5
 8002418:	f7fd ff40 	bl	800029c <__adddf3>
 800241c:	4602      	mov	r2, r0
 800241e:	460b      	mov	r3, r1
 8002420:	69f9      	ldr	r1, [r7, #28]
 8002422:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 8002426:	69fb      	ldr	r3, [r7, #28]
 8002428:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	; 0x28
 800242c:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38
    double P01_temp = Kalman->P[0][1];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	; 0x30
 8002436:	e9c7 230c 	strd	r2, r3, [r7, #48]	; 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 800243a:	69fb      	ldr	r3, [r7, #28]
 800243c:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	; 0x28
 8002440:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002444:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002448:	f7fe f8de 	bl	8000608 <__aeabi_dmul>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4620      	mov	r0, r4
 8002452:	4629      	mov	r1, r5
 8002454:	f7fd ff20 	bl	8000298 <__aeabi_dsub>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	69f9      	ldr	r1, [r7, #28]
 800245e:	e9c1 230a 	strd	r2, r3, [r1, #40]	; 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 8002462:	69fb      	ldr	r3, [r7, #28]
 8002464:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	; 0x30
 8002468:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800246c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8002470:	f7fe f8ca 	bl	8000608 <__aeabi_dmul>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4620      	mov	r0, r4
 800247a:	4629      	mov	r1, r5
 800247c:	f7fd ff0c 	bl	8000298 <__aeabi_dsub>
 8002480:	4602      	mov	r2, r0
 8002482:	460b      	mov	r3, r1
 8002484:	69f9      	ldr	r1, [r7, #28]
 8002486:	e9c1 230c 	strd	r2, r3, [r1, #48]	; 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	; 0x38
 8002490:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8002494:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002498:	f7fe f8b6 	bl	8000608 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fd fef8 	bl	8000298 <__aeabi_dsub>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	69f9      	ldr	r1, [r7, #28]
 80024ae:	e9c1 230e 	strd	r2, r3, [r1, #56]	; 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	; 0x40
 80024b8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80024bc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80024c0:	f7fe f8a2 	bl	8000608 <__aeabi_dmul>
 80024c4:	4602      	mov	r2, r0
 80024c6:	460b      	mov	r3, r1
 80024c8:	4620      	mov	r0, r4
 80024ca:	4629      	mov	r1, r5
 80024cc:	f7fd fee4 	bl	8000298 <__aeabi_dsub>
 80024d0:	4602      	mov	r2, r0
 80024d2:	460b      	mov	r3, r1
 80024d4:	69f9      	ldr	r1, [r7, #28]
 80024d6:	e9c1 2310 	strd	r2, r3, [r1, #64]	; 0x40

    return Kalman->angle;
 80024da:	69fb      	ldr	r3, [r7, #28]
 80024dc:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024e0:	ec43 2b17 	vmov	d7, r2, r3
};
 80024e4:	eeb0 0a47 	vmov.f32	s0, s14
 80024e8:	eef0 0a67 	vmov.f32	s1, s15
 80024ec:	3758      	adds	r7, #88	; 0x58
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bdb0      	pop	{r4, r5, r7, pc}
	...

080024f4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80024f4:	b480      	push	{r7}
 80024f6:	b083      	sub	sp, #12
 80024f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80024fa:	2300      	movs	r3, #0
 80024fc:	607b      	str	r3, [r7, #4]
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <HAL_MspInit+0x4c>)
 8002500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002502:	4a0f      	ldr	r2, [pc, #60]	; (8002540 <HAL_MspInit+0x4c>)
 8002504:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002508:	6453      	str	r3, [r2, #68]	; 0x44
 800250a:	4b0d      	ldr	r3, [pc, #52]	; (8002540 <HAL_MspInit+0x4c>)
 800250c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800250e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002512:	607b      	str	r3, [r7, #4]
 8002514:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002516:	2300      	movs	r3, #0
 8002518:	603b      	str	r3, [r7, #0]
 800251a:	4b09      	ldr	r3, [pc, #36]	; (8002540 <HAL_MspInit+0x4c>)
 800251c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800251e:	4a08      	ldr	r2, [pc, #32]	; (8002540 <HAL_MspInit+0x4c>)
 8002520:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002524:	6413      	str	r3, [r2, #64]	; 0x40
 8002526:	4b06      	ldr	r3, [pc, #24]	; (8002540 <HAL_MspInit+0x4c>)
 8002528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800252a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800252e:	603b      	str	r3, [r7, #0]
 8002530:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002532:	bf00      	nop
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr
 800253e:	bf00      	nop
 8002540:	40023800 	.word	0x40023800

08002544 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002544:	b480      	push	{r7}
 8002546:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002548:	e7fe      	b.n	8002548 <NMI_Handler+0x4>

0800254a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800254a:	b480      	push	{r7}
 800254c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800254e:	e7fe      	b.n	800254e <HardFault_Handler+0x4>

08002550 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002550:	b480      	push	{r7}
 8002552:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002554:	e7fe      	b.n	8002554 <MemManage_Handler+0x4>

08002556 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002556:	b480      	push	{r7}
 8002558:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800255a:	e7fe      	b.n	800255a <BusFault_Handler+0x4>

0800255c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800255c:	b480      	push	{r7}
 800255e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002560:	e7fe      	b.n	8002560 <UsageFault_Handler+0x4>

08002562 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002562:	b480      	push	{r7}
 8002564:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002566:	bf00      	nop
 8002568:	46bd      	mov	sp, r7
 800256a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800256e:	4770      	bx	lr

08002570 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002570:	b480      	push	{r7}
 8002572:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002574:	bf00      	nop
 8002576:	46bd      	mov	sp, r7
 8002578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800257c:	4770      	bx	lr

0800257e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800257e:	b480      	push	{r7}
 8002580:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002582:	bf00      	nop
 8002584:	46bd      	mov	sp, r7
 8002586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258a:	4770      	bx	lr

0800258c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002590:	f000 fb40 	bl	8002c14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002594:	bf00      	nop
 8002596:	bd80      	pop	{r7, pc}

08002598 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 800259c:	4802      	ldr	r0, [pc, #8]	; (80025a8 <I2C1_EV_IRQHandler+0x10>)
 800259e:	f001 fb4b 	bl	8003c38 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80025a2:	bf00      	nop
 80025a4:	bd80      	pop	{r7, pc}
 80025a6:	bf00      	nop
 80025a8:	2000011c 	.word	0x2000011c

080025ac <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80025b0:	4802      	ldr	r0, [pc, #8]	; (80025bc <USART1_IRQHandler+0x10>)
 80025b2:	f004 fe2b 	bl	800720c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */


//
  /* USER CODE END USART1_IRQn 1 */
}
 80025b6:	bf00      	nop
 80025b8:	bd80      	pop	{r7, pc}
 80025ba:	bf00      	nop
 80025bc:	2000028c 	.word	0x2000028c

080025c0 <TIM1_UP_TIM10_IRQHandler>:

/* USER CODE BEGIN 1 */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80025c0:	b580      	push	{r7, lr}
 80025c2:	af00      	add	r7, sp, #0
	if((TIM10->SR & TIM_SR_UIF) == TIM_SR_UIF)
 80025c4:	4b0a      	ldr	r3, [pc, #40]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80025c6:	691b      	ldr	r3, [r3, #16]
 80025c8:	f003 0301 	and.w	r3, r3, #1
 80025cc:	2b01      	cmp	r3, #1
 80025ce:	d10d      	bne.n	80025ec <TIM1_UP_TIM10_IRQHandler+0x2c>
	{
		TIM10->SR = 0;
 80025d0:	4b07      	ldr	r3, [pc, #28]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80025d2:	2200      	movs	r2, #0
 80025d4:	611a      	str	r2, [r3, #16]
	//interrupt10ms = 1;
	//if((ADC1->SR & ADC_SR_EOC) == ADC_SR_EOC)
	//	ADC1->CR2 |= ADC_CR2_SWSTART;
		TIM10->CR1 |= TIM_CR1_CEN;
 80025d6:	4b06      	ldr	r3, [pc, #24]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a05      	ldr	r2, [pc, #20]	; (80025f0 <TIM1_UP_TIM10_IRQHandler+0x30>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6013      	str	r3, [r2, #0]
		HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
 80025e2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025e6:	4803      	ldr	r0, [pc, #12]	; (80025f4 <TIM1_UP_TIM10_IRQHandler+0x34>)
 80025e8:	f000 fea7 	bl	800333a <HAL_GPIO_TogglePin>

	}



}
 80025ec:	bf00      	nop
 80025ee:	bd80      	pop	{r7, pc}
 80025f0:	40014400 	.word	0x40014400
 80025f4:	40020800 	.word	0x40020800

080025f8 <TIM1_TRG_COM_TIM11_IRQHandler>:

void TIM1_TRG_COM_TIM11_IRQHandler(void)
{
 80025f8:	b480      	push	{r7}
 80025fa:	af00      	add	r7, sp, #0
	if((TIM11->SR) & TIM_SR_UIF == TIM_SR_UIF)
 80025fc:	4b0b      	ldr	r3, [pc, #44]	; (800262c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 80025fe:	691b      	ldr	r3, [r3, #16]
 8002600:	f003 0301 	and.w	r3, r3, #1
 8002604:	2b00      	cmp	r3, #0
 8002606:	d002      	beq.n	800260e <TIM1_TRG_COM_TIM11_IRQHandler+0x16>
		TIM11->SR = 0;
 8002608:	4b08      	ldr	r3, [pc, #32]	; (800262c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 800260a:	2200      	movs	r2, #0
 800260c:	611a      	str	r2, [r3, #16]
	interrupt10ms = 1;
 800260e:	4b08      	ldr	r3, [pc, #32]	; (8002630 <TIM1_TRG_COM_TIM11_IRQHandler+0x38>)
 8002610:	2201      	movs	r2, #1
 8002612:	701a      	strb	r2, [r3, #0]
//	HAL_GPIO_TogglePin(GPIOC,GPIO_PIN_13);
	TIM11->CR1 |= TIM_CR1_CEN;
 8002614:	4b05      	ldr	r3, [pc, #20]	; (800262c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a04      	ldr	r2, [pc, #16]	; (800262c <TIM1_TRG_COM_TIM11_IRQHandler+0x34>)
 800261a:	f043 0301 	orr.w	r3, r3, #1
 800261e:	6013      	str	r3, [r2, #0]


}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	40014800 	.word	0x40014800
 8002630:	2000018a 	.word	0x2000018a

08002634 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002634:	b580      	push	{r7, lr}
 8002636:	b086      	sub	sp, #24
 8002638:	af00      	add	r7, sp, #0
 800263a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800263c:	4a14      	ldr	r2, [pc, #80]	; (8002690 <_sbrk+0x5c>)
 800263e:	4b15      	ldr	r3, [pc, #84]	; (8002694 <_sbrk+0x60>)
 8002640:	1ad3      	subs	r3, r2, r3
 8002642:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002648:	4b13      	ldr	r3, [pc, #76]	; (8002698 <_sbrk+0x64>)
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2b00      	cmp	r3, #0
 800264e:	d102      	bne.n	8002656 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002650:	4b11      	ldr	r3, [pc, #68]	; (8002698 <_sbrk+0x64>)
 8002652:	4a12      	ldr	r2, [pc, #72]	; (800269c <_sbrk+0x68>)
 8002654:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002656:	4b10      	ldr	r3, [pc, #64]	; (8002698 <_sbrk+0x64>)
 8002658:	681a      	ldr	r2, [r3, #0]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	4413      	add	r3, r2
 800265e:	693a      	ldr	r2, [r7, #16]
 8002660:	429a      	cmp	r2, r3
 8002662:	d207      	bcs.n	8002674 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002664:	f005 fd02 	bl	800806c <__errno>
 8002668:	4603      	mov	r3, r0
 800266a:	220c      	movs	r2, #12
 800266c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800266e:	f04f 33ff 	mov.w	r3, #4294967295
 8002672:	e009      	b.n	8002688 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002674:	4b08      	ldr	r3, [pc, #32]	; (8002698 <_sbrk+0x64>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <_sbrk+0x64>)
 800267c:	681a      	ldr	r2, [r3, #0]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	4413      	add	r3, r2
 8002682:	4a05      	ldr	r2, [pc, #20]	; (8002698 <_sbrk+0x64>)
 8002684:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002686:	68fb      	ldr	r3, [r7, #12]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3718      	adds	r7, #24
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	20010000 	.word	0x20010000
 8002694:	00000400 	.word	0x00000400
 8002698:	200001f8 	.word	0x200001f8
 800269c:	20000420 	.word	0x20000420

080026a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80026a0:	b480      	push	{r7}
 80026a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80026a4:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <SystemInit+0x20>)
 80026a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026aa:	4a05      	ldr	r2, [pc, #20]	; (80026c0 <SystemInit+0x20>)
 80026ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80026b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80026b4:	bf00      	nop
 80026b6:	46bd      	mov	sp, r7
 80026b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026bc:	4770      	bx	lr
 80026be:	bf00      	nop
 80026c0:	e000ed00 	.word	0xe000ed00

080026c4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim2;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b096      	sub	sp, #88	; 0x58
 80026c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 80026ca:	f107 0344 	add.w	r3, r7, #68	; 0x44
 80026ce:	2200      	movs	r2, #0
 80026d0:	601a      	str	r2, [r3, #0]
 80026d2:	605a      	str	r2, [r3, #4]
 80026d4:	609a      	str	r2, [r3, #8]
 80026d6:	60da      	str	r2, [r3, #12]
 80026d8:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80026da:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80026e4:	f107 0320 	add.w	r3, r7, #32
 80026e8:	2200      	movs	r2, #0
 80026ea:	601a      	str	r2, [r3, #0]
 80026ec:	605a      	str	r2, [r3, #4]
 80026ee:	609a      	str	r2, [r3, #8]
 80026f0:	60da      	str	r2, [r3, #12]
 80026f2:	611a      	str	r2, [r3, #16]
 80026f4:	615a      	str	r2, [r3, #20]
 80026f6:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80026f8:	463b      	mov	r3, r7
 80026fa:	2220      	movs	r2, #32
 80026fc:	2100      	movs	r1, #0
 80026fe:	4618      	mov	r0, r3
 8002700:	f005 fcac 	bl	800805c <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8002704:	4b3e      	ldr	r3, [pc, #248]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002706:	4a3f      	ldr	r2, [pc, #252]	; (8002804 <MX_TIM1_Init+0x140>)
 8002708:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 800270a:	4b3d      	ldr	r3, [pc, #244]	; (8002800 <MX_TIM1_Init+0x13c>)
 800270c:	2200      	movs	r2, #0
 800270e:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002710:	4b3b      	ldr	r3, [pc, #236]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002712:	2200      	movs	r2, #0
 8002714:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8002716:	4b3a      	ldr	r3, [pc, #232]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002718:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800271c:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800271e:	4b38      	ldr	r3, [pc, #224]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002720:	2200      	movs	r2, #0
 8002722:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8002724:	4b36      	ldr	r3, [pc, #216]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002726:	2200      	movs	r2, #0
 8002728:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800272a:	4b35      	ldr	r3, [pc, #212]	; (8002800 <MX_TIM1_Init+0x13c>)
 800272c:	2200      	movs	r2, #0
 800272e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8002730:	4833      	ldr	r0, [pc, #204]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002732:	f003 fdd9 	bl	80062e8 <HAL_TIM_Base_Init>
 8002736:	4603      	mov	r3, r0
 8002738:	2b00      	cmp	r3, #0
 800273a:	d001      	beq.n	8002740 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 800273c:	f7ff fb3c 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim1) != HAL_OK)
 8002740:	482f      	ldr	r0, [pc, #188]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002742:	f003 fe20 	bl	8006386 <HAL_TIM_OC_Init>
 8002746:	4603      	mov	r3, r0
 8002748:	2b00      	cmp	r3, #0
 800274a:	d001      	beq.n	8002750 <MX_TIM1_Init+0x8c>
  {
    Error_Handler();
 800274c:	f7ff fb34 	bl	8001db8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002750:	2306      	movs	r3, #6
 8002752:	647b      	str	r3, [r7, #68]	; 0x44
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002754:	2300      	movs	r3, #0
 8002756:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8002758:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800275c:	4619      	mov	r1, r3
 800275e:	4828      	ldr	r0, [pc, #160]	; (8002800 <MX_TIM1_Init+0x13c>)
 8002760:	f004 f892 	bl	8006888 <HAL_TIM_SlaveConfigSynchro>
 8002764:	4603      	mov	r3, r0
 8002766:	2b00      	cmp	r3, #0
 8002768:	d001      	beq.n	800276e <MX_TIM1_Init+0xaa>
  {
    Error_Handler();
 800276a:	f7ff fb25 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800276e:	2300      	movs	r3, #0
 8002770:	63fb      	str	r3, [r7, #60]	; 0x3c
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002772:	2300      	movs	r3, #0
 8002774:	643b      	str	r3, [r7, #64]	; 0x40
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8002776:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800277a:	4619      	mov	r1, r3
 800277c:	4820      	ldr	r0, [pc, #128]	; (8002800 <MX_TIM1_Init+0x13c>)
 800277e:	f004 fc07 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM1_Init+0xc8>
  {
    Error_Handler();
 8002788:	f7ff fb16 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TIMING;
 800278c:	2300      	movs	r3, #0
 800278e:	623b      	str	r3, [r7, #32]
  sConfigOC.Pulse = 0;
 8002790:	2300      	movs	r3, #0
 8002792:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8002794:	2300      	movs	r3, #0
 8002796:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8002798:	2300      	movs	r3, #0
 800279a:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800279c:	2300      	movs	r3, #0
 800279e:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80027a0:	2300      	movs	r3, #0
 80027a2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80027a4:	2300      	movs	r3, #0
 80027a6:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_TIM_OC_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027a8:	f107 0320 	add.w	r3, r7, #32
 80027ac:	2200      	movs	r2, #0
 80027ae:	4619      	mov	r1, r3
 80027b0:	4813      	ldr	r0, [pc, #76]	; (8002800 <MX_TIM1_Init+0x13c>)
 80027b2:	f003 ff4b 	bl	800664c <HAL_TIM_OC_ConfigChannel>
 80027b6:	4603      	mov	r3, r0
 80027b8:	2b00      	cmp	r3, #0
 80027ba:	d001      	beq.n	80027c0 <MX_TIM1_Init+0xfc>
  {
    Error_Handler();
 80027bc:	f7ff fafc 	bl	8001db8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80027c0:	2300      	movs	r3, #0
 80027c2:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80027c4:	2300      	movs	r3, #0
 80027c6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80027c8:	2300      	movs	r3, #0
 80027ca:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80027cc:	2300      	movs	r3, #0
 80027ce:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80027d0:	2300      	movs	r3, #0
 80027d2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80027d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80027d8:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80027da:	2300      	movs	r3, #0
 80027dc:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80027de:	463b      	mov	r3, r7
 80027e0:	4619      	mov	r1, r3
 80027e2:	4807      	ldr	r0, [pc, #28]	; (8002800 <MX_TIM1_Init+0x13c>)
 80027e4:	f004 fc42 	bl	800706c <HAL_TIMEx_ConfigBreakDeadTime>
 80027e8:	4603      	mov	r3, r0
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d001      	beq.n	80027f2 <MX_TIM1_Init+0x12e>
  {
    Error_Handler();
 80027ee:	f7ff fae3 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80027f2:	4803      	ldr	r0, [pc, #12]	; (8002800 <MX_TIM1_Init+0x13c>)
 80027f4:	f000 f8b6 	bl	8002964 <HAL_TIM_MspPostInit>

}
 80027f8:	bf00      	nop
 80027fa:	3758      	adds	r7, #88	; 0x58
 80027fc:	46bd      	mov	sp, r7
 80027fe:	bd80      	pop	{r7, pc}
 8002800:	200001fc 	.word	0x200001fc
 8002804:	40010000 	.word	0x40010000

08002808 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b08e      	sub	sp, #56	; 0x38
 800280c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800280e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002812:	2200      	movs	r2, #0
 8002814:	601a      	str	r2, [r3, #0]
 8002816:	605a      	str	r2, [r3, #4]
 8002818:	609a      	str	r2, [r3, #8]
 800281a:	60da      	str	r2, [r3, #12]
 800281c:	611a      	str	r2, [r3, #16]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281e:	f107 031c 	add.w	r3, r7, #28
 8002822:	2200      	movs	r2, #0
 8002824:	601a      	str	r2, [r3, #0]
 8002826:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8002828:	463b      	mov	r3, r7
 800282a:	2200      	movs	r2, #0
 800282c:	601a      	str	r2, [r3, #0]
 800282e:	605a      	str	r2, [r3, #4]
 8002830:	609a      	str	r2, [r3, #8]
 8002832:	60da      	str	r2, [r3, #12]
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	615a      	str	r2, [r3, #20]
 8002838:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800283a:	4b2e      	ldr	r3, [pc, #184]	; (80028f4 <MX_TIM2_Init+0xec>)
 800283c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002840:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8002842:	4b2c      	ldr	r3, [pc, #176]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002844:	2200      	movs	r2, #0
 8002846:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002848:	4b2a      	ldr	r3, [pc, #168]	; (80028f4 <MX_TIM2_Init+0xec>)
 800284a:	2200      	movs	r2, #0
 800284c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800284e:	4b29      	ldr	r3, [pc, #164]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002850:	f04f 32ff 	mov.w	r2, #4294967295
 8002854:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002856:	4b27      	ldr	r3, [pc, #156]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002858:	2200      	movs	r2, #0
 800285a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800285c:	4b25      	ldr	r3, [pc, #148]	; (80028f4 <MX_TIM2_Init+0xec>)
 800285e:	2200      	movs	r2, #0
 8002860:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002862:	4824      	ldr	r0, [pc, #144]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002864:	f003 fd40 	bl	80062e8 <HAL_TIM_Base_Init>
 8002868:	4603      	mov	r3, r0
 800286a:	2b00      	cmp	r3, #0
 800286c:	d001      	beq.n	8002872 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 800286e:	f7ff faa3 	bl	8001db8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8002872:	4820      	ldr	r0, [pc, #128]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002874:	f003 fde0 	bl	8006438 <HAL_TIM_PWM_Init>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d001      	beq.n	8002882 <MX_TIM2_Init+0x7a>
  {
    Error_Handler();
 800287e:	f7ff fa9b 	bl	8001db8 <Error_Handler>
  }
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8002882:	2306      	movs	r3, #6
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
  sSlaveConfig.InputTrigger = TIM_TS_ITR0;
 8002886:	2300      	movs	r3, #0
 8002888:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_SlaveConfigSynchro(&htim2, &sSlaveConfig) != HAL_OK)
 800288a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800288e:	4619      	mov	r1, r3
 8002890:	4818      	ldr	r0, [pc, #96]	; (80028f4 <MX_TIM2_Init+0xec>)
 8002892:	f003 fff9 	bl	8006888 <HAL_TIM_SlaveConfigSynchro>
 8002896:	4603      	mov	r3, r0
 8002898:	2b00      	cmp	r3, #0
 800289a:	d001      	beq.n	80028a0 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800289c:	f7ff fa8c 	bl	8001db8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80028a4:	2300      	movs	r3, #0
 80028a6:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80028a8:	f107 031c 	add.w	r3, r7, #28
 80028ac:	4619      	mov	r1, r3
 80028ae:	4811      	ldr	r0, [pc, #68]	; (80028f4 <MX_TIM2_Init+0xec>)
 80028b0:	f004 fb6e 	bl	8006f90 <HAL_TIMEx_MasterConfigSynchronization>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <MX_TIM2_Init+0xb6>
  {
    Error_Handler();
 80028ba:	f7ff fa7d 	bl	8001db8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80028be:	2360      	movs	r3, #96	; 0x60
 80028c0:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 0;
 80028c2:	2300      	movs	r3, #0
 80028c4:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80028ce:	463b      	mov	r3, r7
 80028d0:	2208      	movs	r2, #8
 80028d2:	4619      	mov	r1, r3
 80028d4:	4807      	ldr	r0, [pc, #28]	; (80028f4 <MX_TIM2_Init+0xec>)
 80028d6:	f003 ff15 	bl	8006704 <HAL_TIM_PWM_ConfigChannel>
 80028da:	4603      	mov	r3, r0
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d001      	beq.n	80028e4 <MX_TIM2_Init+0xdc>
  {
    Error_Handler();
 80028e0:	f7ff fa6a 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80028e4:	4803      	ldr	r0, [pc, #12]	; (80028f4 <MX_TIM2_Init+0xec>)
 80028e6:	f000 f83d 	bl	8002964 <HAL_TIM_MspPostInit>

}
 80028ea:	bf00      	nop
 80028ec:	3738      	adds	r7, #56	; 0x38
 80028ee:	46bd      	mov	sp, r7
 80028f0:	bd80      	pop	{r7, pc}
 80028f2:	bf00      	nop
 80028f4:	20000244 	.word	0x20000244

080028f8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	4a15      	ldr	r2, [pc, #84]	; (800295c <HAL_TIM_Base_MspInit+0x64>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d10e      	bne.n	8002928 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800290a:	2300      	movs	r3, #0
 800290c:	60fb      	str	r3, [r7, #12]
 800290e:	4b14      	ldr	r3, [pc, #80]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002910:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002912:	4a13      	ldr	r2, [pc, #76]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002914:	f043 0301 	orr.w	r3, r3, #1
 8002918:	6453      	str	r3, [r2, #68]	; 0x44
 800291a:	4b11      	ldr	r3, [pc, #68]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 800291c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800291e:	f003 0301 	and.w	r3, r3, #1
 8002922:	60fb      	str	r3, [r7, #12]
 8002924:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_TIM2_CLK_ENABLE();
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8002926:	e012      	b.n	800294e <HAL_TIM_Base_MspInit+0x56>
  else if(tim_baseHandle->Instance==TIM2)
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002930:	d10d      	bne.n	800294e <HAL_TIM_Base_MspInit+0x56>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002932:	2300      	movs	r3, #0
 8002934:	60bb      	str	r3, [r7, #8]
 8002936:	4b0a      	ldr	r3, [pc, #40]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	4a09      	ldr	r2, [pc, #36]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 800293c:	f043 0301 	orr.w	r3, r3, #1
 8002940:	6413      	str	r3, [r2, #64]	; 0x40
 8002942:	4b07      	ldr	r3, [pc, #28]	; (8002960 <HAL_TIM_Base_MspInit+0x68>)
 8002944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002946:	f003 0301 	and.w	r3, r3, #1
 800294a:	60bb      	str	r3, [r7, #8]
 800294c:	68bb      	ldr	r3, [r7, #8]
}
 800294e:	bf00      	nop
 8002950:	3714      	adds	r7, #20
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr
 800295a:	bf00      	nop
 800295c:	40010000 	.word	0x40010000
 8002960:	40023800 	.word	0x40023800

08002964 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08a      	sub	sp, #40	; 0x28
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 0314 	add.w	r3, r7, #20
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_TIM_MspPostInit+0xb4>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d11f      	bne.n	80029c6 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	613b      	str	r3, [r7, #16]
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 800298c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298e:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 8002990:	f043 0301 	orr.w	r3, r3, #1
 8002994:	6313      	str	r3, [r2, #48]	; 0x30
 8002996:	4b21      	ldr	r3, [pc, #132]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	f003 0301 	and.w	r3, r3, #1
 800299e:	613b      	str	r3, [r7, #16]
 80029a0:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80029a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80029a6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029a8:	2302      	movs	r3, #2
 80029aa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029ac:	2300      	movs	r3, #0
 80029ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029b0:	2300      	movs	r3, #0
 80029b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029b4:	2301      	movs	r3, #1
 80029b6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029b8:	f107 0314 	add.w	r3, r7, #20
 80029bc:	4619      	mov	r1, r3
 80029be:	4818      	ldr	r0, [pc, #96]	; (8002a20 <HAL_TIM_MspPostInit+0xbc>)
 80029c0:	f000 fb1e 	bl	8003000 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 80029c4:	e023      	b.n	8002a0e <HAL_TIM_MspPostInit+0xaa>
  else if(timHandle->Instance==TIM2)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80029ce:	d11e      	bne.n	8002a0e <HAL_TIM_MspPostInit+0xaa>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80029d0:	2300      	movs	r3, #0
 80029d2:	60fb      	str	r3, [r7, #12]
 80029d4:	4b11      	ldr	r3, [pc, #68]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029d8:	4a10      	ldr	r2, [pc, #64]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029da:	f043 0302 	orr.w	r3, r3, #2
 80029de:	6313      	str	r3, [r2, #48]	; 0x30
 80029e0:	4b0e      	ldr	r3, [pc, #56]	; (8002a1c <HAL_TIM_MspPostInit+0xb8>)
 80029e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e4:	f003 0302 	and.w	r3, r3, #2
 80029e8:	60fb      	str	r3, [r7, #12]
 80029ea:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80029ec:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029f2:	2302      	movs	r3, #2
 80029f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f6:	2300      	movs	r3, #0
 80029f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029fa:	2300      	movs	r3, #0
 80029fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80029fe:	2301      	movs	r3, #1
 8002a00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a02:	f107 0314 	add.w	r3, r7, #20
 8002a06:	4619      	mov	r1, r3
 8002a08:	4806      	ldr	r0, [pc, #24]	; (8002a24 <HAL_TIM_MspPostInit+0xc0>)
 8002a0a:	f000 faf9 	bl	8003000 <HAL_GPIO_Init>
}
 8002a0e:	bf00      	nop
 8002a10:	3728      	adds	r7, #40	; 0x28
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bd80      	pop	{r7, pc}
 8002a16:	bf00      	nop
 8002a18:	40010000 	.word	0x40010000
 8002a1c:	40023800 	.word	0x40023800
 8002a20:	40020000 	.word	0x40020000
 8002a24:	40020400 	.word	0x40020400

08002a28 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002a2c:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a2e:	4a12      	ldr	r2, [pc, #72]	; (8002a78 <MX_USART1_UART_Init+0x50>)
 8002a30:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8002a32:	4b10      	ldr	r3, [pc, #64]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a34:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002a38:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002a3a:	4b0e      	ldr	r3, [pc, #56]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8002a40:	4b0c      	ldr	r3, [pc, #48]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a42:	2200      	movs	r2, #0
 8002a44:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002a46:	4b0b      	ldr	r3, [pc, #44]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a48:	2200      	movs	r2, #0
 8002a4a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002a4c:	4b09      	ldr	r3, [pc, #36]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a4e:	220c      	movs	r2, #12
 8002a50:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002a52:	4b08      	ldr	r3, [pc, #32]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a54:	2200      	movs	r2, #0
 8002a56:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002a58:	4b06      	ldr	r3, [pc, #24]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002a5e:	4805      	ldr	r0, [pc, #20]	; (8002a74 <MX_USART1_UART_Init+0x4c>)
 8002a60:	f004 fb56 	bl	8007110 <HAL_UART_Init>
 8002a64:	4603      	mov	r3, r0
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8002a6a:	f7ff f9a5 	bl	8001db8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002a6e:	bf00      	nop
 8002a70:	bd80      	pop	{r7, pc}
 8002a72:	bf00      	nop
 8002a74:	2000028c 	.word	0x2000028c
 8002a78:	40011000 	.word	0x40011000

08002a7c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002a7c:	b580      	push	{r7, lr}
 8002a7e:	b08a      	sub	sp, #40	; 0x28
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a84:	f107 0314 	add.w	r3, r7, #20
 8002a88:	2200      	movs	r2, #0
 8002a8a:	601a      	str	r2, [r3, #0]
 8002a8c:	605a      	str	r2, [r3, #4]
 8002a8e:	609a      	str	r2, [r3, #8]
 8002a90:	60da      	str	r2, [r3, #12]
 8002a92:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	4a1d      	ldr	r2, [pc, #116]	; (8002b10 <HAL_UART_MspInit+0x94>)
 8002a9a:	4293      	cmp	r3, r2
 8002a9c:	d134      	bne.n	8002b08 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	613b      	str	r3, [r7, #16]
 8002aa2:	4b1c      	ldr	r3, [pc, #112]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa6:	4a1b      	ldr	r2, [pc, #108]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002aa8:	f043 0310 	orr.w	r3, r3, #16
 8002aac:	6453      	str	r3, [r2, #68]	; 0x44
 8002aae:	4b19      	ldr	r3, [pc, #100]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ab2:	f003 0310 	and.w	r3, r3, #16
 8002ab6:	613b      	str	r3, [r7, #16]
 8002ab8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aba:	2300      	movs	r3, #0
 8002abc:	60fb      	str	r3, [r7, #12]
 8002abe:	4b15      	ldr	r3, [pc, #84]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac2:	4a14      	ldr	r2, [pc, #80]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002ac4:	f043 0301 	orr.w	r3, r3, #1
 8002ac8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aca:	4b12      	ldr	r3, [pc, #72]	; (8002b14 <HAL_UART_MspInit+0x98>)
 8002acc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	60fb      	str	r3, [r7, #12]
 8002ad4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ad6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002ada:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002adc:	2302      	movs	r3, #2
 8002ade:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ae0:	2300      	movs	r3, #0
 8002ae2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ae4:	2303      	movs	r3, #3
 8002ae6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002ae8:	2307      	movs	r3, #7
 8002aea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aec:	f107 0314 	add.w	r3, r7, #20
 8002af0:	4619      	mov	r1, r3
 8002af2:	4809      	ldr	r0, [pc, #36]	; (8002b18 <HAL_UART_MspInit+0x9c>)
 8002af4:	f000 fa84 	bl	8003000 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002af8:	2200      	movs	r2, #0
 8002afa:	2100      	movs	r1, #0
 8002afc:	2025      	movs	r0, #37	; 0x25
 8002afe:	f000 f9a8 	bl	8002e52 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b02:	2025      	movs	r0, #37	; 0x25
 8002b04:	f000 f9c1 	bl	8002e8a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8002b08:	bf00      	nop
 8002b0a:	3728      	adds	r7, #40	; 0x28
 8002b0c:	46bd      	mov	sp, r7
 8002b0e:	bd80      	pop	{r7, pc}
 8002b10:	40011000 	.word	0x40011000
 8002b14:	40023800 	.word	0x40023800
 8002b18:	40020000 	.word	0x40020000

08002b1c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002b1c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b54 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002b20:	480d      	ldr	r0, [pc, #52]	; (8002b58 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002b22:	490e      	ldr	r1, [pc, #56]	; (8002b5c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002b24:	4a0e      	ldr	r2, [pc, #56]	; (8002b60 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002b26:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002b28:	e002      	b.n	8002b30 <LoopCopyDataInit>

08002b2a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002b2a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002b2c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002b2e:	3304      	adds	r3, #4

08002b30 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002b30:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002b32:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002b34:	d3f9      	bcc.n	8002b2a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002b36:	4a0b      	ldr	r2, [pc, #44]	; (8002b64 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002b38:	4c0b      	ldr	r4, [pc, #44]	; (8002b68 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002b3a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002b3c:	e001      	b.n	8002b42 <LoopFillZerobss>

08002b3e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002b3e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002b40:	3204      	adds	r2, #4

08002b42 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002b42:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002b44:	d3fb      	bcc.n	8002b3e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002b46:	f7ff fdab 	bl	80026a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b4a:	f005 fa95 	bl	8008078 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b4e:	f7fe fb27 	bl	80011a0 <main>
  bx  lr    
 8002b52:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002b54:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8002b58:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002b5c:	20000100 	.word	0x20000100
  ldr r2, =_sidata
 8002b60:	08009550 	.word	0x08009550
  ldr r2, =_sbss
 8002b64:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002b68:	2000041c 	.word	0x2000041c

08002b6c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b6c:	e7fe      	b.n	8002b6c <ADC_IRQHandler>
	...

08002b70 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b74:	4b0e      	ldr	r3, [pc, #56]	; (8002bb0 <HAL_Init+0x40>)
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	; (8002bb0 <HAL_Init+0x40>)
 8002b7a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b7e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b80:	4b0b      	ldr	r3, [pc, #44]	; (8002bb0 <HAL_Init+0x40>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a0a      	ldr	r2, [pc, #40]	; (8002bb0 <HAL_Init+0x40>)
 8002b86:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b8a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b8c:	4b08      	ldr	r3, [pc, #32]	; (8002bb0 <HAL_Init+0x40>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a07      	ldr	r2, [pc, #28]	; (8002bb0 <HAL_Init+0x40>)
 8002b92:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b96:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002b98:	2003      	movs	r0, #3
 8002b9a:	f000 f94f 	bl	8002e3c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002b9e:	200f      	movs	r0, #15
 8002ba0:	f000 f808 	bl	8002bb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ba4:	f7ff fca6 	bl	80024f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	40023c00 	.word	0x40023c00

08002bb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bbc:	4b12      	ldr	r3, [pc, #72]	; (8002c08 <HAL_InitTick+0x54>)
 8002bbe:	681a      	ldr	r2, [r3, #0]
 8002bc0:	4b12      	ldr	r3, [pc, #72]	; (8002c0c <HAL_InitTick+0x58>)
 8002bc2:	781b      	ldrb	r3, [r3, #0]
 8002bc4:	4619      	mov	r1, r3
 8002bc6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	f000 f967 	bl	8002ea6 <HAL_SYSTICK_Config>
 8002bd8:	4603      	mov	r3, r0
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d001      	beq.n	8002be2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e00e      	b.n	8002c00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	2b0f      	cmp	r3, #15
 8002be6:	d80a      	bhi.n	8002bfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002be8:	2200      	movs	r2, #0
 8002bea:	6879      	ldr	r1, [r7, #4]
 8002bec:	f04f 30ff 	mov.w	r0, #4294967295
 8002bf0:	f000 f92f 	bl	8002e52 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002bf4:	4a06      	ldr	r2, [pc, #24]	; (8002c10 <HAL_InitTick+0x5c>)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
 8002bfc:	e000      	b.n	8002c00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002bfe:	2301      	movs	r3, #1
}
 8002c00:	4618      	mov	r0, r3
 8002c02:	3708      	adds	r7, #8
 8002c04:	46bd      	mov	sp, r7
 8002c06:	bd80      	pop	{r7, pc}
 8002c08:	20000090 	.word	0x20000090
 8002c0c:	20000098 	.word	0x20000098
 8002c10:	20000094 	.word	0x20000094

08002c14 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c14:	b480      	push	{r7}
 8002c16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c18:	4b06      	ldr	r3, [pc, #24]	; (8002c34 <HAL_IncTick+0x20>)
 8002c1a:	781b      	ldrb	r3, [r3, #0]
 8002c1c:	461a      	mov	r2, r3
 8002c1e:	4b06      	ldr	r3, [pc, #24]	; (8002c38 <HAL_IncTick+0x24>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4413      	add	r3, r2
 8002c24:	4a04      	ldr	r2, [pc, #16]	; (8002c38 <HAL_IncTick+0x24>)
 8002c26:	6013      	str	r3, [r2, #0]
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr
 8002c32:	bf00      	nop
 8002c34:	20000098 	.word	0x20000098
 8002c38:	200002d0 	.word	0x200002d0

08002c3c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c40:	4b03      	ldr	r3, [pc, #12]	; (8002c50 <HAL_GetTick+0x14>)
 8002c42:	681b      	ldr	r3, [r3, #0]
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr
 8002c4e:	bf00      	nop
 8002c50:	200002d0 	.word	0x200002d0

08002c54 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	b084      	sub	sp, #16
 8002c58:	af00      	add	r7, sp, #0
 8002c5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff ffee 	bl	8002c3c <HAL_GetTick>
 8002c60:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002c66:	68fb      	ldr	r3, [r7, #12]
 8002c68:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c6c:	d005      	beq.n	8002c7a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002c6e:	4b0a      	ldr	r3, [pc, #40]	; (8002c98 <HAL_Delay+0x44>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	461a      	mov	r2, r3
 8002c74:	68fb      	ldr	r3, [r7, #12]
 8002c76:	4413      	add	r3, r2
 8002c78:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002c7a:	bf00      	nop
 8002c7c:	f7ff ffde 	bl	8002c3c <HAL_GetTick>
 8002c80:	4602      	mov	r2, r0
 8002c82:	68bb      	ldr	r3, [r7, #8]
 8002c84:	1ad3      	subs	r3, r2, r3
 8002c86:	68fa      	ldr	r2, [r7, #12]
 8002c88:	429a      	cmp	r2, r3
 8002c8a:	d8f7      	bhi.n	8002c7c <HAL_Delay+0x28>
  {
  }
}
 8002c8c:	bf00      	nop
 8002c8e:	bf00      	nop
 8002c90:	3710      	adds	r7, #16
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
 8002c96:	bf00      	nop
 8002c98:	20000098 	.word	0x20000098

08002c9c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b085      	sub	sp, #20
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	f003 0307 	and.w	r3, r3, #7
 8002caa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002cac:	4b0c      	ldr	r3, [pc, #48]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cae:	68db      	ldr	r3, [r3, #12]
 8002cb0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002cb2:	68ba      	ldr	r2, [r7, #8]
 8002cb4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002cb8:	4013      	ands	r3, r2
 8002cba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002cc4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002cc8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ccc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002cce:	4a04      	ldr	r2, [pc, #16]	; (8002ce0 <__NVIC_SetPriorityGrouping+0x44>)
 8002cd0:	68bb      	ldr	r3, [r7, #8]
 8002cd2:	60d3      	str	r3, [r2, #12]
}
 8002cd4:	bf00      	nop
 8002cd6:	3714      	adds	r7, #20
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr
 8002ce0:	e000ed00 	.word	0xe000ed00

08002ce4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ce8:	4b04      	ldr	r3, [pc, #16]	; (8002cfc <__NVIC_GetPriorityGrouping+0x18>)
 8002cea:	68db      	ldr	r3, [r3, #12]
 8002cec:	0a1b      	lsrs	r3, r3, #8
 8002cee:	f003 0307 	and.w	r3, r3, #7
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfa:	4770      	bx	lr
 8002cfc:	e000ed00 	.word	0xe000ed00

08002d00 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b480      	push	{r7}
 8002d02:	b083      	sub	sp, #12
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	db0b      	blt.n	8002d2a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d12:	79fb      	ldrb	r3, [r7, #7]
 8002d14:	f003 021f 	and.w	r2, r3, #31
 8002d18:	4907      	ldr	r1, [pc, #28]	; (8002d38 <__NVIC_EnableIRQ+0x38>)
 8002d1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d1e:	095b      	lsrs	r3, r3, #5
 8002d20:	2001      	movs	r0, #1
 8002d22:	fa00 f202 	lsl.w	r2, r0, r2
 8002d26:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d2a:	bf00      	nop
 8002d2c:	370c      	adds	r7, #12
 8002d2e:	46bd      	mov	sp, r7
 8002d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d34:	4770      	bx	lr
 8002d36:	bf00      	nop
 8002d38:	e000e100 	.word	0xe000e100

08002d3c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d3c:	b480      	push	{r7}
 8002d3e:	b083      	sub	sp, #12
 8002d40:	af00      	add	r7, sp, #0
 8002d42:	4603      	mov	r3, r0
 8002d44:	6039      	str	r1, [r7, #0]
 8002d46:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d48:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d4c:	2b00      	cmp	r3, #0
 8002d4e:	db0a      	blt.n	8002d66 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	b2da      	uxtb	r2, r3
 8002d54:	490c      	ldr	r1, [pc, #48]	; (8002d88 <__NVIC_SetPriority+0x4c>)
 8002d56:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5a:	0112      	lsls	r2, r2, #4
 8002d5c:	b2d2      	uxtb	r2, r2
 8002d5e:	440b      	add	r3, r1
 8002d60:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d64:	e00a      	b.n	8002d7c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	b2da      	uxtb	r2, r3
 8002d6a:	4908      	ldr	r1, [pc, #32]	; (8002d8c <__NVIC_SetPriority+0x50>)
 8002d6c:	79fb      	ldrb	r3, [r7, #7]
 8002d6e:	f003 030f 	and.w	r3, r3, #15
 8002d72:	3b04      	subs	r3, #4
 8002d74:	0112      	lsls	r2, r2, #4
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	440b      	add	r3, r1
 8002d7a:	761a      	strb	r2, [r3, #24]
}
 8002d7c:	bf00      	nop
 8002d7e:	370c      	adds	r7, #12
 8002d80:	46bd      	mov	sp, r7
 8002d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d86:	4770      	bx	lr
 8002d88:	e000e100 	.word	0xe000e100
 8002d8c:	e000ed00 	.word	0xe000ed00

08002d90 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d90:	b480      	push	{r7}
 8002d92:	b089      	sub	sp, #36	; 0x24
 8002d94:	af00      	add	r7, sp, #0
 8002d96:	60f8      	str	r0, [r7, #12]
 8002d98:	60b9      	str	r1, [r7, #8]
 8002d9a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f1c3 0307 	rsb	r3, r3, #7
 8002daa:	2b04      	cmp	r3, #4
 8002dac:	bf28      	it	cs
 8002dae:	2304      	movcs	r3, #4
 8002db0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002db2:	69fb      	ldr	r3, [r7, #28]
 8002db4:	3304      	adds	r3, #4
 8002db6:	2b06      	cmp	r3, #6
 8002db8:	d902      	bls.n	8002dc0 <NVIC_EncodePriority+0x30>
 8002dba:	69fb      	ldr	r3, [r7, #28]
 8002dbc:	3b03      	subs	r3, #3
 8002dbe:	e000      	b.n	8002dc2 <NVIC_EncodePriority+0x32>
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dc4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	fa02 f303 	lsl.w	r3, r2, r3
 8002dce:	43da      	mvns	r2, r3
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	401a      	ands	r2, r3
 8002dd4:	697b      	ldr	r3, [r7, #20]
 8002dd6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002dd8:	f04f 31ff 	mov.w	r1, #4294967295
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa01 f303 	lsl.w	r3, r1, r3
 8002de2:	43d9      	mvns	r1, r3
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002de8:	4313      	orrs	r3, r2
         );
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3724      	adds	r7, #36	; 0x24
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr
	...

08002df8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002df8:	b580      	push	{r7, lr}
 8002dfa:	b082      	sub	sp, #8
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	3b01      	subs	r3, #1
 8002e04:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e08:	d301      	bcc.n	8002e0e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e0a:	2301      	movs	r3, #1
 8002e0c:	e00f      	b.n	8002e2e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e0e:	4a0a      	ldr	r2, [pc, #40]	; (8002e38 <SysTick_Config+0x40>)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e16:	210f      	movs	r1, #15
 8002e18:	f04f 30ff 	mov.w	r0, #4294967295
 8002e1c:	f7ff ff8e 	bl	8002d3c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e20:	4b05      	ldr	r3, [pc, #20]	; (8002e38 <SysTick_Config+0x40>)
 8002e22:	2200      	movs	r2, #0
 8002e24:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e26:	4b04      	ldr	r3, [pc, #16]	; (8002e38 <SysTick_Config+0x40>)
 8002e28:	2207      	movs	r2, #7
 8002e2a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e2c:	2300      	movs	r3, #0
}
 8002e2e:	4618      	mov	r0, r3
 8002e30:	3708      	adds	r7, #8
 8002e32:	46bd      	mov	sp, r7
 8002e34:	bd80      	pop	{r7, pc}
 8002e36:	bf00      	nop
 8002e38:	e000e010 	.word	0xe000e010

08002e3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e3c:	b580      	push	{r7, lr}
 8002e3e:	b082      	sub	sp, #8
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e44:	6878      	ldr	r0, [r7, #4]
 8002e46:	f7ff ff29 	bl	8002c9c <__NVIC_SetPriorityGrouping>
}
 8002e4a:	bf00      	nop
 8002e4c:	3708      	adds	r7, #8
 8002e4e:	46bd      	mov	sp, r7
 8002e50:	bd80      	pop	{r7, pc}

08002e52 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e52:	b580      	push	{r7, lr}
 8002e54:	b086      	sub	sp, #24
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	4603      	mov	r3, r0
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e60:	2300      	movs	r3, #0
 8002e62:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e64:	f7ff ff3e 	bl	8002ce4 <__NVIC_GetPriorityGrouping>
 8002e68:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e6a:	687a      	ldr	r2, [r7, #4]
 8002e6c:	68b9      	ldr	r1, [r7, #8]
 8002e6e:	6978      	ldr	r0, [r7, #20]
 8002e70:	f7ff ff8e 	bl	8002d90 <NVIC_EncodePriority>
 8002e74:	4602      	mov	r2, r0
 8002e76:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e7a:	4611      	mov	r1, r2
 8002e7c:	4618      	mov	r0, r3
 8002e7e:	f7ff ff5d 	bl	8002d3c <__NVIC_SetPriority>
}
 8002e82:	bf00      	nop
 8002e84:	3718      	adds	r7, #24
 8002e86:	46bd      	mov	sp, r7
 8002e88:	bd80      	pop	{r7, pc}

08002e8a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e8a:	b580      	push	{r7, lr}
 8002e8c:	b082      	sub	sp, #8
 8002e8e:	af00      	add	r7, sp, #0
 8002e90:	4603      	mov	r3, r0
 8002e92:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e94:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff31 	bl	8002d00 <__NVIC_EnableIRQ>
}
 8002e9e:	bf00      	nop
 8002ea0:	3708      	adds	r7, #8
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	bd80      	pop	{r7, pc}

08002ea6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ea6:	b580      	push	{r7, lr}
 8002ea8:	b082      	sub	sp, #8
 8002eaa:	af00      	add	r7, sp, #0
 8002eac:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eae:	6878      	ldr	r0, [r7, #4]
 8002eb0:	f7ff ffa2 	bl	8002df8 <SysTick_Config>
 8002eb4:	4603      	mov	r3, r0
}
 8002eb6:	4618      	mov	r0, r3
 8002eb8:	3708      	adds	r7, #8
 8002eba:	46bd      	mov	sp, r7
 8002ebc:	bd80      	pop	{r7, pc}

08002ebe <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002ebe:	b580      	push	{r7, lr}
 8002ec0:	b084      	sub	sp, #16
 8002ec2:	af00      	add	r7, sp, #0
 8002ec4:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002eca:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002ecc:	f7ff feb6 	bl	8002c3c <HAL_GetTick>
 8002ed0:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d008      	beq.n	8002ef0 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	2280      	movs	r2, #128	; 0x80
 8002ee2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8002eec:	2301      	movs	r3, #1
 8002eee:	e052      	b.n	8002f96 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f022 0216 	bic.w	r2, r2, #22
 8002efe:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	695a      	ldr	r2, [r3, #20]
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002f0e:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d103      	bne.n	8002f20 <HAL_DMA_Abort+0x62>
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d007      	beq.n	8002f30 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681a      	ldr	r2, [r3, #0]
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f022 0208 	bic.w	r2, r2, #8
 8002f2e:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	681a      	ldr	r2, [r3, #0]
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	f022 0201 	bic.w	r2, r2, #1
 8002f3e:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f40:	e013      	b.n	8002f6a <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002f42:	f7ff fe7b 	bl	8002c3c <HAL_GetTick>
 8002f46:	4602      	mov	r2, r0
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	1ad3      	subs	r3, r2, r3
 8002f4c:	2b05      	cmp	r3, #5
 8002f4e:	d90c      	bls.n	8002f6a <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	2220      	movs	r2, #32
 8002f54:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2203      	movs	r2, #3
 8002f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	2200      	movs	r2, #0
 8002f62:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002f66:	2303      	movs	r3, #3
 8002f68:	e015      	b.n	8002f96 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f003 0301 	and.w	r3, r3, #1
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d1e4      	bne.n	8002f42 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f7c:	223f      	movs	r2, #63	; 0x3f
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	2201      	movs	r2, #1
 8002f88:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	2200      	movs	r2, #0
 8002f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	3710      	adds	r7, #16
 8002f9a:	46bd      	mov	sp, r7
 8002f9c:	bd80      	pop	{r7, pc}

08002f9e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002f9e:	b480      	push	{r7}
 8002fa0:	b083      	sub	sp, #12
 8002fa2:	af00      	add	r7, sp, #0
 8002fa4:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002fac:	b2db      	uxtb	r3, r3
 8002fae:	2b02      	cmp	r3, #2
 8002fb0:	d004      	beq.n	8002fbc <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2280      	movs	r2, #128	; 0x80
 8002fb6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e00c      	b.n	8002fd6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2205      	movs	r2, #5
 8002fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	681a      	ldr	r2, [r3, #0]
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	f022 0201 	bic.w	r2, r2, #1
 8002fd2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002fd4:	2300      	movs	r3, #0
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002fe2:	b480      	push	{r7}
 8002fe4:	b083      	sub	sp, #12
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ff0:	b2db      	uxtb	r3, r3
}
 8002ff2:	4618      	mov	r0, r3
 8002ff4:	370c      	adds	r7, #12
 8002ff6:	46bd      	mov	sp, r7
 8002ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003000:	b480      	push	{r7}
 8003002:	b089      	sub	sp, #36	; 0x24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
 8003008:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800300a:	2300      	movs	r3, #0
 800300c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800300e:	2300      	movs	r3, #0
 8003010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003012:	2300      	movs	r3, #0
 8003014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003016:	2300      	movs	r3, #0
 8003018:	61fb      	str	r3, [r7, #28]
 800301a:	e159      	b.n	80032d0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800301c:	2201      	movs	r2, #1
 800301e:	69fb      	ldr	r3, [r7, #28]
 8003020:	fa02 f303 	lsl.w	r3, r2, r3
 8003024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003026:	683b      	ldr	r3, [r7, #0]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	697a      	ldr	r2, [r7, #20]
 800302c:	4013      	ands	r3, r2
 800302e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003030:	693a      	ldr	r2, [r7, #16]
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	429a      	cmp	r2, r3
 8003036:	f040 8148 	bne.w	80032ca <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800303a:	683b      	ldr	r3, [r7, #0]
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f003 0303 	and.w	r3, r3, #3
 8003042:	2b01      	cmp	r3, #1
 8003044:	d005      	beq.n	8003052 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800304e:	2b02      	cmp	r3, #2
 8003050:	d130      	bne.n	80030b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	689b      	ldr	r3, [r3, #8]
 8003056:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	005b      	lsls	r3, r3, #1
 800305c:	2203      	movs	r2, #3
 800305e:	fa02 f303 	lsl.w	r3, r2, r3
 8003062:	43db      	mvns	r3, r3
 8003064:	69ba      	ldr	r2, [r7, #24]
 8003066:	4013      	ands	r3, r2
 8003068:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800306a:	683b      	ldr	r3, [r7, #0]
 800306c:	68da      	ldr	r2, [r3, #12]
 800306e:	69fb      	ldr	r3, [r7, #28]
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	fa02 f303 	lsl.w	r3, r2, r3
 8003076:	69ba      	ldr	r2, [r7, #24]
 8003078:	4313      	orrs	r3, r2
 800307a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69ba      	ldr	r2, [r7, #24]
 8003080:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003088:	2201      	movs	r2, #1
 800308a:	69fb      	ldr	r3, [r7, #28]
 800308c:	fa02 f303 	lsl.w	r3, r2, r3
 8003090:	43db      	mvns	r3, r3
 8003092:	69ba      	ldr	r2, [r7, #24]
 8003094:	4013      	ands	r3, r2
 8003096:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003098:	683b      	ldr	r3, [r7, #0]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	091b      	lsrs	r3, r3, #4
 800309e:	f003 0201 	and.w	r2, r3, #1
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	fa02 f303 	lsl.w	r3, r2, r3
 80030a8:	69ba      	ldr	r2, [r7, #24]
 80030aa:	4313      	orrs	r3, r2
 80030ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f003 0303 	and.w	r3, r3, #3
 80030bc:	2b03      	cmp	r3, #3
 80030be:	d017      	beq.n	80030f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	68db      	ldr	r3, [r3, #12]
 80030c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030c6:	69fb      	ldr	r3, [r7, #28]
 80030c8:	005b      	lsls	r3, r3, #1
 80030ca:	2203      	movs	r2, #3
 80030cc:	fa02 f303 	lsl.w	r3, r2, r3
 80030d0:	43db      	mvns	r3, r3
 80030d2:	69ba      	ldr	r2, [r7, #24]
 80030d4:	4013      	ands	r3, r2
 80030d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030d8:	683b      	ldr	r3, [r7, #0]
 80030da:	689a      	ldr	r2, [r3, #8]
 80030dc:	69fb      	ldr	r3, [r7, #28]
 80030de:	005b      	lsls	r3, r3, #1
 80030e0:	fa02 f303 	lsl.w	r3, r2, r3
 80030e4:	69ba      	ldr	r2, [r7, #24]
 80030e6:	4313      	orrs	r3, r2
 80030e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	69ba      	ldr	r2, [r7, #24]
 80030ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030f0:	683b      	ldr	r3, [r7, #0]
 80030f2:	685b      	ldr	r3, [r3, #4]
 80030f4:	f003 0303 	and.w	r3, r3, #3
 80030f8:	2b02      	cmp	r3, #2
 80030fa:	d123      	bne.n	8003144 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	08da      	lsrs	r2, r3, #3
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	3208      	adds	r2, #8
 8003104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003108:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800310a:	69fb      	ldr	r3, [r7, #28]
 800310c:	f003 0307 	and.w	r3, r3, #7
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	220f      	movs	r2, #15
 8003114:	fa02 f303 	lsl.w	r3, r2, r3
 8003118:	43db      	mvns	r3, r3
 800311a:	69ba      	ldr	r2, [r7, #24]
 800311c:	4013      	ands	r3, r2
 800311e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	691a      	ldr	r2, [r3, #16]
 8003124:	69fb      	ldr	r3, [r7, #28]
 8003126:	f003 0307 	and.w	r3, r3, #7
 800312a:	009b      	lsls	r3, r3, #2
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003136:	69fb      	ldr	r3, [r7, #28]
 8003138:	08da      	lsrs	r2, r3, #3
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	3208      	adds	r2, #8
 800313e:	69b9      	ldr	r1, [r7, #24]
 8003140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	005b      	lsls	r3, r3, #1
 800314e:	2203      	movs	r2, #3
 8003150:	fa02 f303 	lsl.w	r3, r2, r3
 8003154:	43db      	mvns	r3, r3
 8003156:	69ba      	ldr	r2, [r7, #24]
 8003158:	4013      	ands	r3, r2
 800315a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800315c:	683b      	ldr	r3, [r7, #0]
 800315e:	685b      	ldr	r3, [r3, #4]
 8003160:	f003 0203 	and.w	r2, r3, #3
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	005b      	lsls	r3, r3, #1
 8003168:	fa02 f303 	lsl.w	r3, r2, r3
 800316c:	69ba      	ldr	r2, [r7, #24]
 800316e:	4313      	orrs	r3, r2
 8003170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	69ba      	ldr	r2, [r7, #24]
 8003176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 80a2 	beq.w	80032ca <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	60fb      	str	r3, [r7, #12]
 800318a:	4b57      	ldr	r3, [pc, #348]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 800318c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800318e:	4a56      	ldr	r2, [pc, #344]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 8003190:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003194:	6453      	str	r3, [r2, #68]	; 0x44
 8003196:	4b54      	ldr	r3, [pc, #336]	; (80032e8 <HAL_GPIO_Init+0x2e8>)
 8003198:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800319a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800319e:	60fb      	str	r3, [r7, #12]
 80031a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031a2:	4a52      	ldr	r2, [pc, #328]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 80031a4:	69fb      	ldr	r3, [r7, #28]
 80031a6:	089b      	lsrs	r3, r3, #2
 80031a8:	3302      	adds	r3, #2
 80031aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	f003 0303 	and.w	r3, r3, #3
 80031b6:	009b      	lsls	r3, r3, #2
 80031b8:	220f      	movs	r2, #15
 80031ba:	fa02 f303 	lsl.w	r3, r2, r3
 80031be:	43db      	mvns	r3, r3
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	4013      	ands	r3, r2
 80031c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	4a49      	ldr	r2, [pc, #292]	; (80032f0 <HAL_GPIO_Init+0x2f0>)
 80031ca:	4293      	cmp	r3, r2
 80031cc:	d019      	beq.n	8003202 <HAL_GPIO_Init+0x202>
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	4a48      	ldr	r2, [pc, #288]	; (80032f4 <HAL_GPIO_Init+0x2f4>)
 80031d2:	4293      	cmp	r3, r2
 80031d4:	d013      	beq.n	80031fe <HAL_GPIO_Init+0x1fe>
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a47      	ldr	r2, [pc, #284]	; (80032f8 <HAL_GPIO_Init+0x2f8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00d      	beq.n	80031fa <HAL_GPIO_Init+0x1fa>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	4a46      	ldr	r2, [pc, #280]	; (80032fc <HAL_GPIO_Init+0x2fc>)
 80031e2:	4293      	cmp	r3, r2
 80031e4:	d007      	beq.n	80031f6 <HAL_GPIO_Init+0x1f6>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a45      	ldr	r2, [pc, #276]	; (8003300 <HAL_GPIO_Init+0x300>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d101      	bne.n	80031f2 <HAL_GPIO_Init+0x1f2>
 80031ee:	2304      	movs	r3, #4
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031f2:	2307      	movs	r3, #7
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x204>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x204>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x2ec>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b38      	ldr	r3, [pc, #224]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a2f      	ldr	r2, [pc, #188]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b2d      	ldr	r3, [pc, #180]	; (8003304 <HAL_GPIO_Init+0x304>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a24      	ldr	r2, [pc, #144]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b23      	ldr	r3, [pc, #140]	; (8003304 <HAL_GPIO_Init+0x304>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1a      	ldr	r2, [pc, #104]	; (8003304 <HAL_GPIO_Init+0x304>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b18      	ldr	r3, [pc, #96]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a0f      	ldr	r2, [pc, #60]	; (8003304 <HAL_GPIO_Init+0x304>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f aea2 	bls.w	800301c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40013c00 	.word	0x40013c00

08003308 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003308:	b480      	push	{r7}
 800330a:	b083      	sub	sp, #12
 800330c:	af00      	add	r7, sp, #0
 800330e:	6078      	str	r0, [r7, #4]
 8003310:	460b      	mov	r3, r1
 8003312:	807b      	strh	r3, [r7, #2]
 8003314:	4613      	mov	r3, r2
 8003316:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003318:	787b      	ldrb	r3, [r7, #1]
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800331e:	887a      	ldrh	r2, [r7, #2]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003324:	e003      	b.n	800332e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003326:	887b      	ldrh	r3, [r7, #2]
 8003328:	041a      	lsls	r2, r3, #16
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	619a      	str	r2, [r3, #24]
}
 800332e:	bf00      	nop
 8003330:	370c      	adds	r7, #12
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800333a:	b480      	push	{r7}
 800333c:	b085      	sub	sp, #20
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
 8003342:	460b      	mov	r3, r1
 8003344:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800334c:	887a      	ldrh	r2, [r7, #2]
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	4013      	ands	r3, r2
 8003352:	041a      	lsls	r2, r3, #16
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	43d9      	mvns	r1, r3
 8003358:	887b      	ldrh	r3, [r7, #2]
 800335a:	400b      	ands	r3, r1
 800335c:	431a      	orrs	r2, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	619a      	str	r2, [r3, #24]
}
 8003362:	bf00      	nop
 8003364:	3714      	adds	r7, #20
 8003366:	46bd      	mov	sp, r7
 8003368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800336c:	4770      	bx	lr
	...

08003370 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003370:	b580      	push	{r7, lr}
 8003372:	b084      	sub	sp, #16
 8003374:	af00      	add	r7, sp, #0
 8003376:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2b00      	cmp	r3, #0
 800337c:	d101      	bne.n	8003382 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800337e:	2301      	movs	r3, #1
 8003380:	e12b      	b.n	80035da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003388:	b2db      	uxtb	r3, r3
 800338a:	2b00      	cmp	r3, #0
 800338c:	d106      	bne.n	800339c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	2200      	movs	r2, #0
 8003392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003396:	6878      	ldr	r0, [r7, #4]
 8003398:	f7fd fe1a 	bl	8000fd0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	2224      	movs	r2, #36	; 0x24
 80033a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	681a      	ldr	r2, [r3, #0]
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f022 0201 	bic.w	r2, r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	681a      	ldr	r2, [r3, #0]
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80033c2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	681a      	ldr	r2, [r3, #0]
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033d2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033d4:	f002 ff60 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 80033d8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	685b      	ldr	r3, [r3, #4]
 80033de:	4a81      	ldr	r2, [pc, #516]	; (80035e4 <HAL_I2C_Init+0x274>)
 80033e0:	4293      	cmp	r3, r2
 80033e2:	d807      	bhi.n	80033f4 <HAL_I2C_Init+0x84>
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	4a80      	ldr	r2, [pc, #512]	; (80035e8 <HAL_I2C_Init+0x278>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	bf94      	ite	ls
 80033ec:	2301      	movls	r3, #1
 80033ee:	2300      	movhi	r3, #0
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	e006      	b.n	8003402 <HAL_I2C_Init+0x92>
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	4a7d      	ldr	r2, [pc, #500]	; (80035ec <HAL_I2C_Init+0x27c>)
 80033f8:	4293      	cmp	r3, r2
 80033fa:	bf94      	ite	ls
 80033fc:	2301      	movls	r3, #1
 80033fe:	2300      	movhi	r3, #0
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d001      	beq.n	800340a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003406:	2301      	movs	r3, #1
 8003408:	e0e7      	b.n	80035da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	4a78      	ldr	r2, [pc, #480]	; (80035f0 <HAL_I2C_Init+0x280>)
 800340e:	fba2 2303 	umull	r2, r3, r2, r3
 8003412:	0c9b      	lsrs	r3, r3, #18
 8003414:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	68ba      	ldr	r2, [r7, #8]
 8003426:	430a      	orrs	r2, r1
 8003428:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	685b      	ldr	r3, [r3, #4]
 8003438:	4a6a      	ldr	r2, [pc, #424]	; (80035e4 <HAL_I2C_Init+0x274>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d802      	bhi.n	8003444 <HAL_I2C_Init+0xd4>
 800343e:	68bb      	ldr	r3, [r7, #8]
 8003440:	3301      	adds	r3, #1
 8003442:	e009      	b.n	8003458 <HAL_I2C_Init+0xe8>
 8003444:	68bb      	ldr	r3, [r7, #8]
 8003446:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800344a:	fb02 f303 	mul.w	r3, r2, r3
 800344e:	4a69      	ldr	r2, [pc, #420]	; (80035f4 <HAL_I2C_Init+0x284>)
 8003450:	fba2 2303 	umull	r2, r3, r2, r3
 8003454:	099b      	lsrs	r3, r3, #6
 8003456:	3301      	adds	r3, #1
 8003458:	687a      	ldr	r2, [r7, #4]
 800345a:	6812      	ldr	r2, [r2, #0]
 800345c:	430b      	orrs	r3, r1
 800345e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	69db      	ldr	r3, [r3, #28]
 8003466:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800346a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	495c      	ldr	r1, [pc, #368]	; (80035e4 <HAL_I2C_Init+0x274>)
 8003474:	428b      	cmp	r3, r1
 8003476:	d819      	bhi.n	80034ac <HAL_I2C_Init+0x13c>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	1e59      	subs	r1, r3, #1
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	685b      	ldr	r3, [r3, #4]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fbb1 f3f3 	udiv	r3, r1, r3
 8003486:	1c59      	adds	r1, r3, #1
 8003488:	f640 73fc 	movw	r3, #4092	; 0xffc
 800348c:	400b      	ands	r3, r1
 800348e:	2b00      	cmp	r3, #0
 8003490:	d00a      	beq.n	80034a8 <HAL_I2C_Init+0x138>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	1e59      	subs	r1, r3, #1
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	005b      	lsls	r3, r3, #1
 800349c:	fbb1 f3f3 	udiv	r3, r1, r3
 80034a0:	3301      	adds	r3, #1
 80034a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a6:	e051      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034a8:	2304      	movs	r3, #4
 80034aa:	e04f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	689b      	ldr	r3, [r3, #8]
 80034b0:	2b00      	cmp	r3, #0
 80034b2:	d111      	bne.n	80034d8 <HAL_I2C_Init+0x168>
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	1e58      	subs	r0, r3, #1
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	6859      	ldr	r1, [r3, #4]
 80034bc:	460b      	mov	r3, r1
 80034be:	005b      	lsls	r3, r3, #1
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	e012      	b.n	80034fe <HAL_I2C_Init+0x18e>
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	1e58      	subs	r0, r3, #1
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6859      	ldr	r1, [r3, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	009b      	lsls	r3, r3, #2
 80034e4:	440b      	add	r3, r1
 80034e6:	0099      	lsls	r1, r3, #2
 80034e8:	440b      	add	r3, r1
 80034ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80034ee:	3301      	adds	r3, #1
 80034f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	bf0c      	ite	eq
 80034f8:	2301      	moveq	r3, #1
 80034fa:	2300      	movne	r3, #0
 80034fc:	b2db      	uxtb	r3, r3
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d001      	beq.n	8003506 <HAL_I2C_Init+0x196>
 8003502:	2301      	movs	r3, #1
 8003504:	e022      	b.n	800354c <HAL_I2C_Init+0x1dc>
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	689b      	ldr	r3, [r3, #8]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d10e      	bne.n	800352c <HAL_I2C_Init+0x1bc>
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	1e58      	subs	r0, r3, #1
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6859      	ldr	r1, [r3, #4]
 8003516:	460b      	mov	r3, r1
 8003518:	005b      	lsls	r3, r3, #1
 800351a:	440b      	add	r3, r1
 800351c:	fbb0 f3f3 	udiv	r3, r0, r3
 8003520:	3301      	adds	r3, #1
 8003522:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003526:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800352a:	e00f      	b.n	800354c <HAL_I2C_Init+0x1dc>
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	1e58      	subs	r0, r3, #1
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6859      	ldr	r1, [r3, #4]
 8003534:	460b      	mov	r3, r1
 8003536:	009b      	lsls	r3, r3, #2
 8003538:	440b      	add	r3, r1
 800353a:	0099      	lsls	r1, r3, #2
 800353c:	440b      	add	r3, r1
 800353e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003542:	3301      	adds	r3, #1
 8003544:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003548:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800354c:	6879      	ldr	r1, [r7, #4]
 800354e:	6809      	ldr	r1, [r1, #0]
 8003550:	4313      	orrs	r3, r2
 8003552:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69da      	ldr	r2, [r3, #28]
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6a1b      	ldr	r3, [r3, #32]
 8003566:	431a      	orrs	r2, r3
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	430a      	orrs	r2, r1
 800356e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	689b      	ldr	r3, [r3, #8]
 8003576:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800357a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	6911      	ldr	r1, [r2, #16]
 8003582:	687a      	ldr	r2, [r7, #4]
 8003584:	68d2      	ldr	r2, [r2, #12]
 8003586:	4311      	orrs	r1, r2
 8003588:	687a      	ldr	r2, [r7, #4]
 800358a:	6812      	ldr	r2, [r2, #0]
 800358c:	430b      	orrs	r3, r1
 800358e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	68db      	ldr	r3, [r3, #12]
 8003596:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	695a      	ldr	r2, [r3, #20]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	699b      	ldr	r3, [r3, #24]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	430a      	orrs	r2, r1
 80035aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	681a      	ldr	r2, [r3, #0]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	2200      	movs	r2, #0
 80035c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	2220      	movs	r2, #32
 80035c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035d8:	2300      	movs	r3, #0
}
 80035da:	4618      	mov	r0, r3
 80035dc:	3710      	adds	r7, #16
 80035de:	46bd      	mov	sp, r7
 80035e0:	bd80      	pop	{r7, pc}
 80035e2:	bf00      	nop
 80035e4:	000186a0 	.word	0x000186a0
 80035e8:	001e847f 	.word	0x001e847f
 80035ec:	003d08ff 	.word	0x003d08ff
 80035f0:	431bde83 	.word	0x431bde83
 80035f4:	10624dd3 	.word	0x10624dd3

080035f8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b088      	sub	sp, #32
 80035fc:	af02      	add	r7, sp, #8
 80035fe:	60f8      	str	r0, [r7, #12]
 8003600:	4608      	mov	r0, r1
 8003602:	4611      	mov	r1, r2
 8003604:	461a      	mov	r2, r3
 8003606:	4603      	mov	r3, r0
 8003608:	817b      	strh	r3, [r7, #10]
 800360a:	460b      	mov	r3, r1
 800360c:	813b      	strh	r3, [r7, #8]
 800360e:	4613      	mov	r3, r2
 8003610:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003612:	f7ff fb13 	bl	8002c3c <HAL_GetTick>
 8003616:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800361e:	b2db      	uxtb	r3, r3
 8003620:	2b20      	cmp	r3, #32
 8003622:	f040 80d9 	bne.w	80037d8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	2319      	movs	r3, #25
 800362c:	2201      	movs	r2, #1
 800362e:	496d      	ldr	r1, [pc, #436]	; (80037e4 <HAL_I2C_Mem_Write+0x1ec>)
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f001 ffd7 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 800363c:	2302      	movs	r3, #2
 800363e:	e0cc      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003646:	2b01      	cmp	r3, #1
 8003648:	d101      	bne.n	800364e <HAL_I2C_Mem_Write+0x56>
 800364a:	2302      	movs	r3, #2
 800364c:	e0c5      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	2201      	movs	r2, #1
 8003652:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0301 	and.w	r3, r3, #1
 8003660:	2b01      	cmp	r3, #1
 8003662:	d007      	beq.n	8003674 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f042 0201 	orr.w	r2, r2, #1
 8003672:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	681a      	ldr	r2, [r3, #0]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003682:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2221      	movs	r2, #33	; 0x21
 8003688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	2240      	movs	r2, #64	; 0x40
 8003690:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2200      	movs	r2, #0
 8003698:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	6a3a      	ldr	r2, [r7, #32]
 800369e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80036a4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80036aa:	b29a      	uxth	r2, r3
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	4a4d      	ldr	r2, [pc, #308]	; (80037e8 <HAL_I2C_Mem_Write+0x1f0>)
 80036b4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80036b6:	88f8      	ldrh	r0, [r7, #6]
 80036b8:	893a      	ldrh	r2, [r7, #8]
 80036ba:	8979      	ldrh	r1, [r7, #10]
 80036bc:	697b      	ldr	r3, [r7, #20]
 80036be:	9301      	str	r3, [sp, #4]
 80036c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036c2:	9300      	str	r3, [sp, #0]
 80036c4:	4603      	mov	r3, r0
 80036c6:	68f8      	ldr	r0, [r7, #12]
 80036c8:	f001 fd66 	bl	8005198 <I2C_RequestMemoryWrite>
 80036cc:	4603      	mov	r3, r0
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d052      	beq.n	8003778 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80036d2:	2301      	movs	r3, #1
 80036d4:	e081      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036d6:	697a      	ldr	r2, [r7, #20]
 80036d8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80036da:	68f8      	ldr	r0, [r7, #12]
 80036dc:	f002 f858 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 80036e0:	4603      	mov	r3, r0
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d00d      	beq.n	8003702 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ea:	2b04      	cmp	r3, #4
 80036ec:	d107      	bne.n	80036fe <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	681a      	ldr	r2, [r3, #0]
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036fc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036fe:	2301      	movs	r3, #1
 8003700:	e06b      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003702:	68fb      	ldr	r3, [r7, #12]
 8003704:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003706:	781a      	ldrb	r2, [r3, #0]
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003712:	1c5a      	adds	r2, r3, #1
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800371c:	3b01      	subs	r3, #1
 800371e:	b29a      	uxth	r2, r3
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003728:	b29b      	uxth	r3, r3
 800372a:	3b01      	subs	r3, #1
 800372c:	b29a      	uxth	r2, r3
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	695b      	ldr	r3, [r3, #20]
 8003738:	f003 0304 	and.w	r3, r3, #4
 800373c:	2b04      	cmp	r3, #4
 800373e:	d11b      	bne.n	8003778 <HAL_I2C_Mem_Write+0x180>
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003744:	2b00      	cmp	r3, #0
 8003746:	d017      	beq.n	8003778 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800374c:	781a      	ldrb	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003758:	1c5a      	adds	r2, r3, #1
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003762:	3b01      	subs	r3, #1
 8003764:	b29a      	uxth	r2, r3
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 800376a:	68fb      	ldr	r3, [r7, #12]
 800376c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800376e:	b29b      	uxth	r3, r3
 8003770:	3b01      	subs	r3, #1
 8003772:	b29a      	uxth	r2, r3
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800377c:	2b00      	cmp	r3, #0
 800377e:	d1aa      	bne.n	80036d6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003780:	697a      	ldr	r2, [r7, #20]
 8003782:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f002 f844 	bl	8005812 <I2C_WaitOnBTFFlagUntilTimeout>
 800378a:	4603      	mov	r3, r0
 800378c:	2b00      	cmp	r3, #0
 800378e:	d00d      	beq.n	80037ac <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003794:	2b04      	cmp	r3, #4
 8003796:	d107      	bne.n	80037a8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	681a      	ldr	r2, [r3, #0]
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037a6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80037a8:	2301      	movs	r3, #1
 80037aa:	e016      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80037ba:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2220      	movs	r2, #32
 80037c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	2200      	movs	r2, #0
 80037c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80037d4:	2300      	movs	r3, #0
 80037d6:	e000      	b.n	80037da <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80037d8:	2302      	movs	r3, #2
  }
}
 80037da:	4618      	mov	r0, r3
 80037dc:	3718      	adds	r7, #24
 80037de:	46bd      	mov	sp, r7
 80037e0:	bd80      	pop	{r7, pc}
 80037e2:	bf00      	nop
 80037e4:	00100002 	.word	0x00100002
 80037e8:	ffff0000 	.word	0xffff0000

080037ec <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80037ec:	b580      	push	{r7, lr}
 80037ee:	b08c      	sub	sp, #48	; 0x30
 80037f0:	af02      	add	r7, sp, #8
 80037f2:	60f8      	str	r0, [r7, #12]
 80037f4:	4608      	mov	r0, r1
 80037f6:	4611      	mov	r1, r2
 80037f8:	461a      	mov	r2, r3
 80037fa:	4603      	mov	r3, r0
 80037fc:	817b      	strh	r3, [r7, #10]
 80037fe:	460b      	mov	r3, r1
 8003800:	813b      	strh	r3, [r7, #8]
 8003802:	4613      	mov	r3, r2
 8003804:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003806:	f7ff fa19 	bl	8002c3c <HAL_GetTick>
 800380a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003812:	b2db      	uxtb	r3, r3
 8003814:	2b20      	cmp	r3, #32
 8003816:	f040 8208 	bne.w	8003c2a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800381a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800381c:	9300      	str	r3, [sp, #0]
 800381e:	2319      	movs	r3, #25
 8003820:	2201      	movs	r2, #1
 8003822:	497b      	ldr	r1, [pc, #492]	; (8003a10 <HAL_I2C_Mem_Read+0x224>)
 8003824:	68f8      	ldr	r0, [r7, #12]
 8003826:	f001 fedd 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 800382a:	4603      	mov	r3, r0
 800382c:	2b00      	cmp	r3, #0
 800382e:	d001      	beq.n	8003834 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003830:	2302      	movs	r3, #2
 8003832:	e1fb      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800383a:	2b01      	cmp	r3, #1
 800383c:	d101      	bne.n	8003842 <HAL_I2C_Mem_Read+0x56>
 800383e:	2302      	movs	r3, #2
 8003840:	e1f4      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	2201      	movs	r2, #1
 8003846:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f003 0301 	and.w	r3, r3, #1
 8003854:	2b01      	cmp	r3, #1
 8003856:	d007      	beq.n	8003868 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	681a      	ldr	r2, [r3, #0]
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	f042 0201 	orr.w	r2, r2, #1
 8003866:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	681a      	ldr	r2, [r3, #0]
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003876:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	2222      	movs	r2, #34	; 0x22
 800387c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	2240      	movs	r2, #64	; 0x40
 8003884:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	2200      	movs	r2, #0
 800388c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003892:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 8003898:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800389a:	68fb      	ldr	r3, [r7, #12]
 800389c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800389e:	b29a      	uxth	r2, r3
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a5b      	ldr	r2, [pc, #364]	; (8003a14 <HAL_I2C_Mem_Read+0x228>)
 80038a8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80038aa:	88f8      	ldrh	r0, [r7, #6]
 80038ac:	893a      	ldrh	r2, [r7, #8]
 80038ae:	8979      	ldrh	r1, [r7, #10]
 80038b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80038b2:	9301      	str	r3, [sp, #4]
 80038b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80038b6:	9300      	str	r3, [sp, #0]
 80038b8:	4603      	mov	r3, r0
 80038ba:	68f8      	ldr	r0, [r7, #12]
 80038bc:	f001 fd02 	bl	80052c4 <I2C_RequestMemoryRead>
 80038c0:	4603      	mov	r3, r0
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d001      	beq.n	80038ca <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80038c6:	2301      	movs	r3, #1
 80038c8:	e1b0      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d113      	bne.n	80038fa <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80038d2:	2300      	movs	r3, #0
 80038d4:	623b      	str	r3, [r7, #32]
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	695b      	ldr	r3, [r3, #20]
 80038dc:	623b      	str	r3, [r7, #32]
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	699b      	ldr	r3, [r3, #24]
 80038e4:	623b      	str	r3, [r7, #32]
 80038e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	681a      	ldr	r2, [r3, #0]
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038f6:	601a      	str	r2, [r3, #0]
 80038f8:	e184      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d11b      	bne.n	800393a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003910:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003912:	2300      	movs	r3, #0
 8003914:	61fb      	str	r3, [r7, #28]
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	695b      	ldr	r3, [r3, #20]
 800391c:	61fb      	str	r3, [r7, #28]
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	699b      	ldr	r3, [r3, #24]
 8003924:	61fb      	str	r3, [r7, #28]
 8003926:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	681a      	ldr	r2, [r3, #0]
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003936:	601a      	str	r2, [r3, #0]
 8003938:	e164      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800393e:	2b02      	cmp	r3, #2
 8003940:	d11b      	bne.n	800397a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	681a      	ldr	r2, [r3, #0]
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	681b      	ldr	r3, [r3, #0]
 800394c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003950:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	681a      	ldr	r2, [r3, #0]
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003960:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003962:	2300      	movs	r3, #0
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	695b      	ldr	r3, [r3, #20]
 800396c:	61bb      	str	r3, [r7, #24]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	699b      	ldr	r3, [r3, #24]
 8003974:	61bb      	str	r3, [r7, #24]
 8003976:	69bb      	ldr	r3, [r7, #24]
 8003978:	e144      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800397a:	2300      	movs	r3, #0
 800397c:	617b      	str	r3, [r7, #20]
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	695b      	ldr	r3, [r3, #20]
 8003984:	617b      	str	r3, [r7, #20]
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	699b      	ldr	r3, [r3, #24]
 800398c:	617b      	str	r3, [r7, #20]
 800398e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003990:	e138      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003996:	2b03      	cmp	r3, #3
 8003998:	f200 80f1 	bhi.w	8003b7e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d123      	bne.n	80039ec <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039a4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80039a6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80039a8:	68f8      	ldr	r0, [r7, #12]
 80039aa:	f001 ffa5 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d001      	beq.n	80039b8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80039b4:	2301      	movs	r3, #1
 80039b6:	e139      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	691a      	ldr	r2, [r3, #16]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039c2:	b2d2      	uxtb	r2, r2
 80039c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039ca:	1c5a      	adds	r2, r3, #1
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039d4:	3b01      	subs	r3, #1
 80039d6:	b29a      	uxth	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	3b01      	subs	r3, #1
 80039e4:	b29a      	uxth	r2, r3
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80039ea:	e10b      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d14e      	bne.n	8003a92 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80039f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039f6:	9300      	str	r3, [sp, #0]
 80039f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80039fa:	2200      	movs	r2, #0
 80039fc:	4906      	ldr	r1, [pc, #24]	; (8003a18 <HAL_I2C_Mem_Read+0x22c>)
 80039fe:	68f8      	ldr	r0, [r7, #12]
 8003a00:	f001 fdf0 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d008      	beq.n	8003a1c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	e10e      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
 8003a0e:	bf00      	nop
 8003a10:	00100002 	.word	0x00100002
 8003a14:	ffff0000 	.word	0xffff0000
 8003a18:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	681a      	ldr	r2, [r3, #0]
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	681b      	ldr	r3, [r3, #0]
 8003a26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a2a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	691a      	ldr	r2, [r3, #16]
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a36:	b2d2      	uxtb	r2, r2
 8003a38:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a3e:	1c5a      	adds	r2, r3, #1
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a48:	3b01      	subs	r3, #1
 8003a4a:	b29a      	uxth	r2, r3
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a54:	b29b      	uxth	r3, r3
 8003a56:	3b01      	subs	r3, #1
 8003a58:	b29a      	uxth	r2, r3
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003a5e:	68fb      	ldr	r3, [r7, #12]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	691a      	ldr	r2, [r3, #16]
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a68:	b2d2      	uxtb	r2, r2
 8003a6a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a70:	1c5a      	adds	r2, r3, #1
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a7a:	3b01      	subs	r3, #1
 8003a7c:	b29a      	uxth	r2, r3
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a86:	b29b      	uxth	r3, r3
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	b29a      	uxth	r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003a90:	e0b8      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003a92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a94:	9300      	str	r3, [sp, #0]
 8003a96:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003a98:	2200      	movs	r2, #0
 8003a9a:	4966      	ldr	r1, [pc, #408]	; (8003c34 <HAL_I2C_Mem_Read+0x448>)
 8003a9c:	68f8      	ldr	r0, [r7, #12]
 8003a9e:	f001 fda1 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003aa8:	2301      	movs	r3, #1
 8003aaa:	e0bf      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	681b      	ldr	r3, [r3, #0]
 8003ab0:	681a      	ldr	r2, [r3, #0]
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003aba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	691a      	ldr	r2, [r3, #16]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ac6:	b2d2      	uxtb	r2, r2
 8003ac8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ace:	1c5a      	adds	r2, r3, #1
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae4:	b29b      	uxth	r3, r3
 8003ae6:	3b01      	subs	r3, #1
 8003ae8:	b29a      	uxth	r2, r3
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003aee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af0:	9300      	str	r3, [sp, #0]
 8003af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003af4:	2200      	movs	r2, #0
 8003af6:	494f      	ldr	r1, [pc, #316]	; (8003c34 <HAL_I2C_Mem_Read+0x448>)
 8003af8:	68f8      	ldr	r0, [r7, #12]
 8003afa:	f001 fd73 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8003afe:	4603      	mov	r3, r0
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d001      	beq.n	8003b08 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003b04:	2301      	movs	r3, #1
 8003b06:	e091      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	691a      	ldr	r2, [r3, #16]
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	b2d2      	uxtb	r2, r2
 8003b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b2a:	1c5a      	adds	r2, r3, #1
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b34:	3b01      	subs	r3, #1
 8003b36:	b29a      	uxth	r2, r3
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b40:	b29b      	uxth	r3, r3
 8003b42:	3b01      	subs	r3, #1
 8003b44:	b29a      	uxth	r2, r3
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	691a      	ldr	r2, [r3, #16]
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	b2d2      	uxtb	r2, r2
 8003b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003b58:	68fb      	ldr	r3, [r7, #12]
 8003b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b5c:	1c5a      	adds	r2, r3, #1
 8003b5e:	68fb      	ldr	r3, [r7, #12]
 8003b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b66:	3b01      	subs	r3, #1
 8003b68:	b29a      	uxth	r2, r3
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b72:	b29b      	uxth	r3, r3
 8003b74:	3b01      	subs	r3, #1
 8003b76:	b29a      	uxth	r2, r3
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8003b7c:	e042      	b.n	8003c04 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003b80:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8003b82:	68f8      	ldr	r0, [r7, #12]
 8003b84:	f001 feb8 	bl	80058f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003b88:	4603      	mov	r3, r0
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d001      	beq.n	8003b92 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003b8e:	2301      	movs	r3, #1
 8003b90:	e04c      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9c:	b2d2      	uxtb	r2, r2
 8003b9e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba4:	1c5a      	adds	r2, r3, #1
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bba:	b29b      	uxth	r3, r3
 8003bbc:	3b01      	subs	r3, #1
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	695b      	ldr	r3, [r3, #20]
 8003bca:	f003 0304 	and.w	r3, r3, #4
 8003bce:	2b04      	cmp	r3, #4
 8003bd0:	d118      	bne.n	8003c04 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	691a      	ldr	r2, [r3, #16]
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003bdc:	b2d2      	uxtb	r2, r2
 8003bde:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003be4:	1c5a      	adds	r2, r3, #1
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bee:	3b01      	subs	r3, #1
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bfa:	b29b      	uxth	r3, r3
 8003bfc:	3b01      	subs	r3, #1
 8003bfe:	b29a      	uxth	r2, r3
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003c08:	2b00      	cmp	r3, #0
 8003c0a:	f47f aec2 	bne.w	8003992 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	2220      	movs	r2, #32
 8003c12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	2200      	movs	r2, #0
 8003c1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2200      	movs	r2, #0
 8003c22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003c26:	2300      	movs	r3, #0
 8003c28:	e000      	b.n	8003c2c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 8003c2a:	2302      	movs	r3, #2
  }
}
 8003c2c:	4618      	mov	r0, r3
 8003c2e:	3728      	adds	r7, #40	; 0x28
 8003c30:	46bd      	mov	sp, r7
 8003c32:	bd80      	pop	{r7, pc}
 8003c34:	00010004 	.word	0x00010004

08003c38 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8003c38:	b580      	push	{r7, lr}
 8003c3a:	b088      	sub	sp, #32
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003c40:	2300      	movs	r3, #0
 8003c42:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	685b      	ldr	r3, [r3, #4]
 8003c4a:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c50:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c58:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c60:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003c62:	7bfb      	ldrb	r3, [r7, #15]
 8003c64:	2b10      	cmp	r3, #16
 8003c66:	d003      	beq.n	8003c70 <HAL_I2C_EV_IRQHandler+0x38>
 8003c68:	7bfb      	ldrb	r3, [r7, #15]
 8003c6a:	2b40      	cmp	r3, #64	; 0x40
 8003c6c:	f040 80b1 	bne.w	8003dd2 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	699b      	ldr	r3, [r3, #24]
 8003c76:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	f003 0301 	and.w	r3, r3, #1
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d10d      	bne.n	8003ca6 <HAL_I2C_EV_IRQHandler+0x6e>
 8003c8a:	693b      	ldr	r3, [r7, #16]
 8003c8c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8003c90:	d003      	beq.n	8003c9a <HAL_I2C_EV_IRQHandler+0x62>
 8003c92:	693b      	ldr	r3, [r7, #16]
 8003c94:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003c98:	d101      	bne.n	8003c9e <HAL_I2C_EV_IRQHandler+0x66>
 8003c9a:	2301      	movs	r3, #1
 8003c9c:	e000      	b.n	8003ca0 <HAL_I2C_EV_IRQHandler+0x68>
 8003c9e:	2300      	movs	r3, #0
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	f000 8114 	beq.w	8003ece <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	f003 0301 	and.w	r3, r3, #1
 8003cac:	2b00      	cmp	r3, #0
 8003cae:	d00b      	beq.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x90>
 8003cb0:	697b      	ldr	r3, [r7, #20]
 8003cb2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d006      	beq.n	8003cc8 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f001 fea1 	bl	8005a02 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003cc0:	6878      	ldr	r0, [r7, #4]
 8003cc2:	f000 fcbf 	bl	8004644 <I2C_Master_SB>
 8003cc6:	e083      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003cc8:	69fb      	ldr	r3, [r7, #28]
 8003cca:	f003 0308 	and.w	r3, r3, #8
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d008      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0xac>
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d003      	beq.n	8003ce4 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8003cdc:	6878      	ldr	r0, [r7, #4]
 8003cde:	f000 fd37 	bl	8004750 <I2C_Master_ADD10>
 8003ce2:	e075      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ce4:	69fb      	ldr	r3, [r7, #28]
 8003ce6:	f003 0302 	and.w	r3, r3, #2
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d008      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xc8>
 8003cee:	697b      	ldr	r3, [r7, #20]
 8003cf0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d003      	beq.n	8003d00 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 8003cf8:	6878      	ldr	r0, [r7, #4]
 8003cfa:	f000 fd53 	bl	80047a4 <I2C_Master_ADDR>
 8003cfe:	e067      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8003d00:	69bb      	ldr	r3, [r7, #24]
 8003d02:	f003 0304 	and.w	r3, r3, #4
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	685b      	ldr	r3, [r3, #4]
 8003d10:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d14:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d18:	f000 80db 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d1c:	69fb      	ldr	r3, [r7, #28]
 8003d1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d00d      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d26:	697b      	ldr	r3, [r7, #20]
 8003d28:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d2c:	2b00      	cmp	r3, #0
 8003d2e:	d008      	beq.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
 8003d30:	69fb      	ldr	r3, [r7, #28]
 8003d32:	f003 0304 	and.w	r3, r3, #4
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d103      	bne.n	8003d42 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 f937 	bl	8003fae <I2C_MasterTransmit_TXE>
 8003d40:	e046      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d42:	69fb      	ldr	r3, [r7, #28]
 8003d44:	f003 0304 	and.w	r3, r3, #4
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	f000 80c2 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003d4e:	697b      	ldr	r3, [r7, #20]
 8003d50:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	f000 80bc 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8003d5a:	7bbb      	ldrb	r3, [r7, #14]
 8003d5c:	2b21      	cmp	r3, #33	; 0x21
 8003d5e:	d103      	bne.n	8003d68 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003d60:	6878      	ldr	r0, [r7, #4]
 8003d62:	f000 f9c0 	bl	80040e6 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d66:	e0b4      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8003d68:	7bfb      	ldrb	r3, [r7, #15]
 8003d6a:	2b40      	cmp	r3, #64	; 0x40
 8003d6c:	f040 80b1 	bne.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa2e 	bl	80041d2 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003d76:	e0ac      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003d82:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d86:	f000 80a4 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003d8a:	69fb      	ldr	r3, [r7, #28]
 8003d8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d00d      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
 8003d94:	697b      	ldr	r3, [r7, #20]
 8003d96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d008      	beq.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
 8003d9e:	69fb      	ldr	r3, [r7, #28]
 8003da0:	f003 0304 	and.w	r3, r3, #4
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d103      	bne.n	8003db0 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 faa6 	bl	80042fa <I2C_MasterReceive_RXNE>
 8003dae:	e00f      	b.n	8003dd0 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003db0:	69fb      	ldr	r3, [r7, #28]
 8003db2:	f003 0304 	and.w	r3, r3, #4
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	f000 808b 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dbc:	697b      	ldr	r3, [r7, #20]
 8003dbe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	f000 8085 	beq.w	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003dc8:	6878      	ldr	r0, [r7, #4]
 8003dca:	f000 fb51 	bl	8004470 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003dce:	e080      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
 8003dd0:	e07f      	b.n	8003ed2 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d004      	beq.n	8003de4 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	695b      	ldr	r3, [r3, #20]
 8003de0:	61fb      	str	r3, [r7, #28]
 8003de2:	e007      	b.n	8003df4 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	699b      	ldr	r3, [r3, #24]
 8003dea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	695b      	ldr	r3, [r3, #20]
 8003df2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	f003 0302 	and.w	r3, r3, #2
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d011      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x1ea>
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d00c      	beq.n	8003e22 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d003      	beq.n	8003e18 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	699b      	ldr	r3, [r3, #24]
 8003e16:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003e18:	69b9      	ldr	r1, [r7, #24]
 8003e1a:	6878      	ldr	r0, [r7, #4]
 8003e1c:	f000 ff11 	bl	8004c42 <I2C_Slave_ADDR>
 8003e20:	e05a      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e22:	69fb      	ldr	r3, [r7, #28]
 8003e24:	f003 0310 	and.w	r3, r3, #16
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d008      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x206>
 8003e2c:	697b      	ldr	r3, [r7, #20]
 8003e2e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d003      	beq.n	8003e3e <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 ff4c 	bl	8004cd4 <I2C_Slave_STOPF>
 8003e3c:	e04c      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8003e3e:	7bbb      	ldrb	r3, [r7, #14]
 8003e40:	2b21      	cmp	r3, #33	; 0x21
 8003e42:	d002      	beq.n	8003e4a <HAL_I2C_EV_IRQHandler+0x212>
 8003e44:	7bbb      	ldrb	r3, [r7, #14]
 8003e46:	2b29      	cmp	r3, #41	; 0x29
 8003e48:	d120      	bne.n	8003e8c <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e4a:	69fb      	ldr	r3, [r7, #28]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d00d      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
 8003e54:	697b      	ldr	r3, [r7, #20]
 8003e56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d008      	beq.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
 8003e5e:	69fb      	ldr	r3, [r7, #28]
 8003e60:	f003 0304 	and.w	r3, r3, #4
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d103      	bne.n	8003e70 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fe2c 	bl	8004ac6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e6e:	e032      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003e70:	69fb      	ldr	r3, [r7, #28]
 8003e72:	f003 0304 	and.w	r3, r3, #4
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d02d      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
 8003e7a:	697b      	ldr	r3, [r7, #20]
 8003e7c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d028      	beq.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003e84:	6878      	ldr	r0, [r7, #4]
 8003e86:	f000 fe5b 	bl	8004b40 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8a:	e024      	b.n	8003ed6 <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003e8c:	69fb      	ldr	r3, [r7, #28]
 8003e8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d00d      	beq.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003e96:	697b      	ldr	r3, [r7, #20]
 8003e98:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d008      	beq.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
 8003ea0:	69fb      	ldr	r3, [r7, #28]
 8003ea2:	f003 0304 	and.w	r3, r3, #4
 8003ea6:	2b00      	cmp	r3, #0
 8003ea8:	d103      	bne.n	8003eb2 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003eaa:	6878      	ldr	r0, [r7, #4]
 8003eac:	f000 fe69 	bl	8004b82 <I2C_SlaveReceive_RXNE>
 8003eb0:	e012      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003eb2:	69fb      	ldr	r3, [r7, #28]
 8003eb4:	f003 0304 	and.w	r3, r3, #4
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d00d      	beq.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
 8003ebc:	697b      	ldr	r3, [r7, #20]
 8003ebe:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ec2:	2b00      	cmp	r3, #0
 8003ec4:	d008      	beq.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 fe99 	bl	8004bfe <I2C_SlaveReceive_BTF>
 8003ecc:	e004      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8003ece:	bf00      	nop
 8003ed0:	e002      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003ed2:	bf00      	nop
 8003ed4:	e000      	b.n	8003ed8 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003ed6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003ed8:	3720      	adds	r7, #32
 8003eda:	46bd      	mov	sp, r7
 8003edc:	bd80      	pop	{r7, pc}

08003ede <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ede:	b480      	push	{r7}
 8003ee0:	b083      	sub	sp, #12
 8003ee2:	af00      	add	r7, sp, #0
 8003ee4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003ee6:	bf00      	nop
 8003ee8:	370c      	adds	r7, #12
 8003eea:	46bd      	mov	sp, r7
 8003eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef0:	4770      	bx	lr

08003ef2 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ef2:	b480      	push	{r7}
 8003ef4:	b083      	sub	sp, #12
 8003ef6:	af00      	add	r7, sp, #0
 8003ef8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003efa:	bf00      	nop
 8003efc:	370c      	adds	r7, #12
 8003efe:	46bd      	mov	sp, r7
 8003f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f04:	4770      	bx	lr

08003f06 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f06:	b480      	push	{r7}
 8003f08:	b083      	sub	sp, #12
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003f0e:	bf00      	nop
 8003f10:	370c      	adds	r7, #12
 8003f12:	46bd      	mov	sp, r7
 8003f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f18:	4770      	bx	lr

08003f1a <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003f22:	bf00      	nop
 8003f24:	370c      	adds	r7, #12
 8003f26:	46bd      	mov	sp, r7
 8003f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2c:	4770      	bx	lr

08003f2e <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003f2e:	b480      	push	{r7}
 8003f30:	b083      	sub	sp, #12
 8003f32:	af00      	add	r7, sp, #0
 8003f34:	6078      	str	r0, [r7, #4]
 8003f36:	460b      	mov	r3, r1
 8003f38:	70fb      	strb	r3, [r7, #3]
 8003f3a:	4613      	mov	r3, r2
 8003f3c:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003f3e:	bf00      	nop
 8003f40:	370c      	adds	r7, #12
 8003f42:	46bd      	mov	sp, r7
 8003f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f48:	4770      	bx	lr

08003f4a <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f4a:	b480      	push	{r7}
 8003f4c:	b083      	sub	sp, #12
 8003f4e:	af00      	add	r7, sp, #0
 8003f50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003f52:	bf00      	nop
 8003f54:	370c      	adds	r7, #12
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr

08003f5e <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f5e:	b480      	push	{r7}
 8003f60:	b083      	sub	sp, #12
 8003f62:	af00      	add	r7, sp, #0
 8003f64:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003f66:	bf00      	nop
 8003f68:	370c      	adds	r7, #12
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr

08003f72 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f72:	b480      	push	{r7}
 8003f74:	b083      	sub	sp, #12
 8003f76:	af00      	add	r7, sp, #0
 8003f78:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003f7a:	bf00      	nop
 8003f7c:	370c      	adds	r7, #12
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr

08003f86 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003f86:	b480      	push	{r7}
 8003f88:	b083      	sub	sp, #12
 8003f8a:	af00      	add	r7, sp, #0
 8003f8c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003f8e:	bf00      	nop
 8003f90:	370c      	adds	r7, #12
 8003f92:	46bd      	mov	sp, r7
 8003f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f98:	4770      	bx	lr

08003f9a <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003f9a:	b480      	push	{r7}
 8003f9c:	b083      	sub	sp, #12
 8003f9e:	af00      	add	r7, sp, #0
 8003fa0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003fa2:	bf00      	nop
 8003fa4:	370c      	adds	r7, #12
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fac:	4770      	bx	lr

08003fae <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003fae:	b580      	push	{r7, lr}
 8003fb0:	b084      	sub	sp, #16
 8003fb2:	af00      	add	r7, sp, #0
 8003fb4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003fbc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fc4:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fca:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d150      	bne.n	8004076 <I2C_MasterTransmit_TXE+0xc8>
 8003fd4:	7bfb      	ldrb	r3, [r7, #15]
 8003fd6:	2b21      	cmp	r3, #33	; 0x21
 8003fd8:	d14d      	bne.n	8004076 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d01d      	beq.n	800401c <I2C_MasterTransmit_TXE+0x6e>
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	2b20      	cmp	r3, #32
 8003fe4:	d01a      	beq.n	800401c <I2C_MasterTransmit_TXE+0x6e>
 8003fe6:	68bb      	ldr	r3, [r7, #8]
 8003fe8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003fec:	d016      	beq.n	800401c <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ffc:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2211      	movs	r2, #17
 8004002:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	2200      	movs	r2, #0
 8004008:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2220      	movs	r2, #32
 8004010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8004014:	6878      	ldr	r0, [r7, #4]
 8004016:	f7ff ff62 	bl	8003ede <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800401a:	e060      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	685a      	ldr	r2, [r3, #4]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800402a:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	681a      	ldr	r2, [r3, #0]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800403a:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2200      	movs	r2, #0
 8004040:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2220      	movs	r2, #32
 8004046:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004050:	b2db      	uxtb	r3, r3
 8004052:	2b40      	cmp	r3, #64	; 0x40
 8004054:	d107      	bne.n	8004066 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2200      	movs	r2, #0
 800405a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f7ff ff7d 	bl	8003f5e <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004064:	e03b      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800406e:	6878      	ldr	r0, [r7, #4]
 8004070:	f7ff ff35 	bl	8003ede <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004074:	e033      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004076:	7bfb      	ldrb	r3, [r7, #15]
 8004078:	2b21      	cmp	r3, #33	; 0x21
 800407a:	d005      	beq.n	8004088 <I2C_MasterTransmit_TXE+0xda>
 800407c:	7bbb      	ldrb	r3, [r7, #14]
 800407e:	2b40      	cmp	r3, #64	; 0x40
 8004080:	d12d      	bne.n	80040de <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004082:	7bfb      	ldrb	r3, [r7, #15]
 8004084:	2b22      	cmp	r3, #34	; 0x22
 8004086:	d12a      	bne.n	80040de <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800408c:	b29b      	uxth	r3, r3
 800408e:	2b00      	cmp	r3, #0
 8004090:	d108      	bne.n	80040a4 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	685a      	ldr	r2, [r3, #4]
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040a0:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 80040a2:	e01c      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040aa:	b2db      	uxtb	r3, r3
 80040ac:	2b40      	cmp	r3, #64	; 0x40
 80040ae:	d103      	bne.n	80040b8 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 80040b0:	6878      	ldr	r0, [r7, #4]
 80040b2:	f000 f88e 	bl	80041d2 <I2C_MemoryTransmit_TXE_BTF>
}
 80040b6:	e012      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040bc:	781a      	ldrb	r2, [r3, #0]
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c8:	1c5a      	adds	r2, r3, #1
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040d2:	b29b      	uxth	r3, r3
 80040d4:	3b01      	subs	r3, #1
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80040dc:	e7ff      	b.n	80040de <I2C_MasterTransmit_TXE+0x130>
 80040de:	bf00      	nop
 80040e0:	3710      	adds	r7, #16
 80040e2:	46bd      	mov	sp, r7
 80040e4:	bd80      	pop	{r7, pc}

080040e6 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b084      	sub	sp, #16
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f2:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040fa:	b2db      	uxtb	r3, r3
 80040fc:	2b21      	cmp	r3, #33	; 0x21
 80040fe:	d164      	bne.n	80041ca <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004104:	b29b      	uxth	r3, r3
 8004106:	2b00      	cmp	r3, #0
 8004108:	d012      	beq.n	8004130 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800410e:	781a      	ldrb	r2, [r3, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411a:	1c5a      	adds	r2, r3, #1
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004124:	b29b      	uxth	r3, r3
 8004126:	3b01      	subs	r3, #1
 8004128:	b29a      	uxth	r2, r3
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 800412e:	e04c      	b.n	80041ca <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2b08      	cmp	r3, #8
 8004134:	d01d      	beq.n	8004172 <I2C_MasterTransmit_BTF+0x8c>
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2b20      	cmp	r3, #32
 800413a:	d01a      	beq.n	8004172 <I2C_MasterTransmit_BTF+0x8c>
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004142:	d016      	beq.n	8004172 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	685a      	ldr	r2, [r3, #4]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004152:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2211      	movs	r2, #17
 8004158:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2220      	movs	r2, #32
 8004166:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800416a:	6878      	ldr	r0, [r7, #4]
 800416c:	f7ff feb7 	bl	8003ede <HAL_I2C_MasterTxCpltCallback>
}
 8004170:	e02b      	b.n	80041ca <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	685a      	ldr	r2, [r3, #4]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004180:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681a      	ldr	r2, [r3, #0]
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004190:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2220      	movs	r2, #32
 800419c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041a6:	b2db      	uxtb	r3, r3
 80041a8:	2b40      	cmp	r3, #64	; 0x40
 80041aa:	d107      	bne.n	80041bc <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 80041b4:	6878      	ldr	r0, [r7, #4]
 80041b6:	f7ff fed2 	bl	8003f5e <HAL_I2C_MemTxCpltCallback>
}
 80041ba:	e006      	b.n	80041ca <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 80041c4:	6878      	ldr	r0, [r7, #4]
 80041c6:	f7ff fe8a 	bl	8003ede <HAL_I2C_MasterTxCpltCallback>
}
 80041ca:	bf00      	nop
 80041cc:	3710      	adds	r7, #16
 80041ce:	46bd      	mov	sp, r7
 80041d0:	bd80      	pop	{r7, pc}

080041d2 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 80041d2:	b580      	push	{r7, lr}
 80041d4:	b084      	sub	sp, #16
 80041d6:	af00      	add	r7, sp, #0
 80041d8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80041e0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d11d      	bne.n	8004226 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80041ee:	2b01      	cmp	r3, #1
 80041f0:	d10b      	bne.n	800420a <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041f6:	b2da      	uxtb	r2, r3
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004202:	1c9a      	adds	r2, r3, #2
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004208:	e073      	b.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	b29b      	uxth	r3, r3
 8004210:	121b      	asrs	r3, r3, #8
 8004212:	b2da      	uxtb	r2, r3
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800421e:	1c5a      	adds	r2, r3, #1
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004224:	e065      	b.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 1U)
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800422a:	2b01      	cmp	r3, #1
 800422c:	d10b      	bne.n	8004246 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004232:	b2da      	uxtb	r2, r3
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800423e:	1c5a      	adds	r2, r3, #1
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004244:	e055      	b.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
  else if (hi2c->EventCount == 2U)
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	2b02      	cmp	r3, #2
 800424c:	d151      	bne.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800424e:	7bfb      	ldrb	r3, [r7, #15]
 8004250:	2b22      	cmp	r3, #34	; 0x22
 8004252:	d10d      	bne.n	8004270 <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	681a      	ldr	r2, [r3, #0]
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004262:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004268:	1c5a      	adds	r2, r3, #1
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	651a      	str	r2, [r3, #80]	; 0x50
}
 800426e:	e040      	b.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d015      	beq.n	80042a6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 800427a:	7bfb      	ldrb	r3, [r7, #15]
 800427c:	2b21      	cmp	r3, #33	; 0x21
 800427e:	d112      	bne.n	80042a6 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004284:	781a      	ldrb	r2, [r3, #0]
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004290:	1c5a      	adds	r2, r3, #1
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429a:	b29b      	uxth	r3, r3
 800429c:	3b01      	subs	r3, #1
 800429e:	b29a      	uxth	r2, r3
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80042a4:	e025      	b.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042aa:	b29b      	uxth	r3, r3
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d120      	bne.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
 80042b0:	7bfb      	ldrb	r3, [r7, #15]
 80042b2:	2b21      	cmp	r3, #33	; 0x21
 80042b4:	d11d      	bne.n	80042f2 <I2C_MemoryTransmit_TXE_BTF+0x120>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	685a      	ldr	r2, [r3, #4]
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80042c4:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042d4:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	2200      	movs	r2, #0
 80042da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2220      	movs	r2, #32
 80042e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2200      	movs	r2, #0
 80042e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 80042ec:	6878      	ldr	r0, [r7, #4]
 80042ee:	f7ff fe36 	bl	8003f5e <HAL_I2C_MemTxCpltCallback>
}
 80042f2:	bf00      	nop
 80042f4:	3710      	adds	r7, #16
 80042f6:	46bd      	mov	sp, r7
 80042f8:	bd80      	pop	{r7, pc}

080042fa <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80042fa:	b580      	push	{r7, lr}
 80042fc:	b084      	sub	sp, #16
 80042fe:	af00      	add	r7, sp, #0
 8004300:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004308:	b2db      	uxtb	r3, r3
 800430a:	2b22      	cmp	r3, #34	; 0x22
 800430c:	f040 80ac 	bne.w	8004468 <I2C_MasterReceive_RXNE+0x16e>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004314:	b29b      	uxth	r3, r3
 8004316:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	2b03      	cmp	r3, #3
 800431c:	d921      	bls.n	8004362 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	691a      	ldr	r2, [r3, #16]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004328:	b2d2      	uxtb	r2, r2
 800432a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29a      	uxth	r2, r3
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004348:	b29b      	uxth	r3, r3
 800434a:	2b03      	cmp	r3, #3
 800434c:	f040 808c 	bne.w	8004468 <I2C_MasterReceive_RXNE+0x16e>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685a      	ldr	r2, [r3, #4]
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800435e:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8004360:	e082      	b.n	8004468 <I2C_MasterReceive_RXNE+0x16e>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004366:	2b02      	cmp	r3, #2
 8004368:	d075      	beq.n	8004456 <I2C_MasterReceive_RXNE+0x15c>
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	2b01      	cmp	r3, #1
 800436e:	d002      	beq.n	8004376 <I2C_MasterReceive_RXNE+0x7c>
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d16f      	bne.n	8004456 <I2C_MasterReceive_RXNE+0x15c>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f001 fa8c 	bl	8005894 <I2C_WaitOnSTOPRequestThroughIT>
 800437c:	4603      	mov	r3, r0
 800437e:	2b00      	cmp	r3, #0
 8004380:	d142      	bne.n	8004408 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	681a      	ldr	r2, [r3, #0]
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004390:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	685a      	ldr	r2, [r3, #4]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80043a0:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	691a      	ldr	r2, [r3, #16]
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043ac:	b2d2      	uxtb	r2, r2
 80043ae:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043b4:	1c5a      	adds	r2, r3, #1
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043be:	b29b      	uxth	r3, r3
 80043c0:	3b01      	subs	r3, #1
 80043c2:	b29a      	uxth	r2, r3
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2220      	movs	r2, #32
 80043cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043d6:	b2db      	uxtb	r3, r3
 80043d8:	2b40      	cmp	r3, #64	; 0x40
 80043da:	d10a      	bne.n	80043f2 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	2200      	movs	r2, #0
 80043e8:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80043ea:	6878      	ldr	r0, [r7, #4]
 80043ec:	f7ff fdc1 	bl	8003f72 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80043f0:	e03a      	b.n	8004468 <I2C_MasterReceive_RXNE+0x16e>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	2200      	movs	r2, #0
 80043f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	2212      	movs	r2, #18
 80043fe:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004400:	6878      	ldr	r0, [r7, #4]
 8004402:	f7ff fd76 	bl	8003ef2 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004406:	e02f      	b.n	8004468 <I2C_MasterReceive_RXNE+0x16e>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	685a      	ldr	r2, [r3, #4]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004416:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	691a      	ldr	r2, [r3, #16]
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004422:	b2d2      	uxtb	r2, r2
 8004424:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800442a:	1c5a      	adds	r2, r3, #1
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	3b01      	subs	r3, #1
 8004438:	b29a      	uxth	r2, r3
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2220      	movs	r2, #32
 8004442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	2200      	movs	r2, #0
 800444a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	f7ff fd99 	bl	8003f86 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004454:	e008      	b.n	8004468 <I2C_MasterReceive_RXNE+0x16e>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	685a      	ldr	r2, [r3, #4]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004464:	605a      	str	r2, [r3, #4]
}
 8004466:	e7ff      	b.n	8004468 <I2C_MasterReceive_RXNE+0x16e>
 8004468:	bf00      	nop
 800446a:	3710      	adds	r7, #16
 800446c:	46bd      	mov	sp, r7
 800446e:	bd80      	pop	{r7, pc}

08004470 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800447c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004482:	b29b      	uxth	r3, r3
 8004484:	2b04      	cmp	r3, #4
 8004486:	d11b      	bne.n	80044c0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685a      	ldr	r2, [r3, #4]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004496:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	691a      	ldr	r2, [r3, #16]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a2:	b2d2      	uxtb	r2, r2
 80044a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044aa:	1c5a      	adds	r2, r3, #1
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b4:	b29b      	uxth	r3, r3
 80044b6:	3b01      	subs	r3, #1
 80044b8:	b29a      	uxth	r2, r3
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80044be:	e0bd      	b.n	800463c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044c4:	b29b      	uxth	r3, r3
 80044c6:	2b03      	cmp	r3, #3
 80044c8:	d129      	bne.n	800451e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	685a      	ldr	r2, [r3, #4]
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044d8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2b04      	cmp	r3, #4
 80044de:	d00a      	beq.n	80044f6 <I2C_MasterReceive_BTF+0x86>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d007      	beq.n	80044f6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	681a      	ldr	r2, [r3, #0]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	691a      	ldr	r2, [r3, #16]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004500:	b2d2      	uxtb	r2, r2
 8004502:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004508:	1c5a      	adds	r2, r3, #1
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004512:	b29b      	uxth	r3, r3
 8004514:	3b01      	subs	r3, #1
 8004516:	b29a      	uxth	r2, r3
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800451c:	e08e      	b.n	800463c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004522:	b29b      	uxth	r3, r3
 8004524:	2b02      	cmp	r3, #2
 8004526:	d176      	bne.n	8004616 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	2b01      	cmp	r3, #1
 800452c:	d002      	beq.n	8004534 <I2C_MasterReceive_BTF+0xc4>
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	2b10      	cmp	r3, #16
 8004532:	d108      	bne.n	8004546 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004542:	601a      	str	r2, [r3, #0]
 8004544:	e019      	b.n	800457a <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b04      	cmp	r3, #4
 800454a:	d002      	beq.n	8004552 <I2C_MasterReceive_BTF+0xe2>
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	2b02      	cmp	r3, #2
 8004550:	d108      	bne.n	8004564 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	681b      	ldr	r3, [r3, #0]
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004560:	601a      	str	r2, [r3, #0]
 8004562:	e00a      	b.n	800457a <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	2b10      	cmp	r3, #16
 8004568:	d007      	beq.n	800457a <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004578:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	691a      	ldr	r2, [r3, #16]
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004584:	b2d2      	uxtb	r2, r2
 8004586:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800458c:	1c5a      	adds	r2, r3, #1
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004596:	b29b      	uxth	r3, r3
 8004598:	3b01      	subs	r3, #1
 800459a:	b29a      	uxth	r2, r3
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	691a      	ldr	r2, [r3, #16]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045aa:	b2d2      	uxtb	r2, r2
 80045ac:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b2:	1c5a      	adds	r2, r3, #1
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045bc:	b29b      	uxth	r3, r3
 80045be:	3b01      	subs	r3, #1
 80045c0:	b29a      	uxth	r2, r3
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	685a      	ldr	r2, [r3, #4]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80045d4:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2220      	movs	r2, #32
 80045da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045e4:	b2db      	uxtb	r3, r3
 80045e6:	2b40      	cmp	r3, #64	; 0x40
 80045e8:	d10a      	bne.n	8004600 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	2200      	movs	r2, #0
 80045ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	2200      	movs	r2, #0
 80045f6:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f7ff fcba 	bl	8003f72 <HAL_I2C_MemRxCpltCallback>
}
 80045fe:	e01d      	b.n	800463c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2212      	movs	r2, #18
 800460c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800460e:	6878      	ldr	r0, [r7, #4]
 8004610:	f7ff fc6f 	bl	8003ef2 <HAL_I2C_MasterRxCpltCallback>
}
 8004614:	e012      	b.n	800463c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	691a      	ldr	r2, [r3, #16]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004620:	b2d2      	uxtb	r2, r2
 8004622:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004628:	1c5a      	adds	r2, r3, #1
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004632:	b29b      	uxth	r3, r3
 8004634:	3b01      	subs	r3, #1
 8004636:	b29a      	uxth	r2, r3
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800463c:	bf00      	nop
 800463e:	3710      	adds	r7, #16
 8004640:	46bd      	mov	sp, r7
 8004642:	bd80      	pop	{r7, pc}

08004644 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004644:	b480      	push	{r7}
 8004646:	b083      	sub	sp, #12
 8004648:	af00      	add	r7, sp, #0
 800464a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004652:	b2db      	uxtb	r3, r3
 8004654:	2b40      	cmp	r3, #64	; 0x40
 8004656:	d117      	bne.n	8004688 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800465c:	2b00      	cmp	r3, #0
 800465e:	d109      	bne.n	8004674 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	b2db      	uxtb	r3, r3
 8004666:	461a      	mov	r2, r3
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004670:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004672:	e067      	b.n	8004744 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004678:	b2db      	uxtb	r3, r3
 800467a:	f043 0301 	orr.w	r3, r3, #1
 800467e:	b2da      	uxtb	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	611a      	str	r2, [r3, #16]
}
 8004686:	e05d      	b.n	8004744 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	691b      	ldr	r3, [r3, #16]
 800468c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004690:	d133      	bne.n	80046fa <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004698:	b2db      	uxtb	r3, r3
 800469a:	2b21      	cmp	r3, #33	; 0x21
 800469c:	d109      	bne.n	80046b2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046a2:	b2db      	uxtb	r3, r3
 80046a4:	461a      	mov	r2, r3
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80046ae:	611a      	str	r2, [r3, #16]
 80046b0:	e008      	b.n	80046c4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f043 0301 	orr.w	r3, r3, #1
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046c8:	2b00      	cmp	r3, #0
 80046ca:	d004      	beq.n	80046d6 <I2C_Master_SB+0x92>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d108      	bne.n	80046e8 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d032      	beq.n	8004744 <I2C_Master_SB+0x100>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046e4:	2b00      	cmp	r3, #0
 80046e6:	d02d      	beq.n	8004744 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685a      	ldr	r2, [r3, #4]
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80046f6:	605a      	str	r2, [r3, #4]
}
 80046f8:	e024      	b.n	8004744 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d10e      	bne.n	8004720 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004706:	b29b      	uxth	r3, r3
 8004708:	11db      	asrs	r3, r3, #7
 800470a:	b2db      	uxtb	r3, r3
 800470c:	f003 0306 	and.w	r3, r3, #6
 8004710:	b2db      	uxtb	r3, r3
 8004712:	f063 030f 	orn	r3, r3, #15
 8004716:	b2da      	uxtb	r2, r3
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	611a      	str	r2, [r3, #16]
}
 800471e:	e011      	b.n	8004744 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004724:	2b01      	cmp	r3, #1
 8004726:	d10d      	bne.n	8004744 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800472c:	b29b      	uxth	r3, r3
 800472e:	11db      	asrs	r3, r3, #7
 8004730:	b2db      	uxtb	r3, r3
 8004732:	f003 0306 	and.w	r3, r3, #6
 8004736:	b2db      	uxtb	r3, r3
 8004738:	f063 030e 	orn	r3, r3, #14
 800473c:	b2da      	uxtb	r2, r3
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	681b      	ldr	r3, [r3, #0]
 8004742:	611a      	str	r2, [r3, #16]
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800475c:	b2da      	uxtb	r2, r3
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004764:	687b      	ldr	r3, [r7, #4]
 8004766:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004768:	2b00      	cmp	r3, #0
 800476a:	d004      	beq.n	8004776 <I2C_Master_ADD10+0x26>
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004770:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004772:	2b00      	cmp	r3, #0
 8004774:	d108      	bne.n	8004788 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800477a:	2b00      	cmp	r3, #0
 800477c:	d00c      	beq.n	8004798 <I2C_Master_ADD10+0x48>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004782:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004784:	2b00      	cmp	r3, #0
 8004786:	d007      	beq.n	8004798 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	685a      	ldr	r2, [r3, #4]
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004796:	605a      	str	r2, [r3, #4]
  }
}
 8004798:	bf00      	nop
 800479a:	370c      	adds	r7, #12
 800479c:	46bd      	mov	sp, r7
 800479e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a2:	4770      	bx	lr

080047a4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b091      	sub	sp, #68	; 0x44
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80047b2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047ba:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80047c0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80047c8:	b2db      	uxtb	r3, r3
 80047ca:	2b22      	cmp	r3, #34	; 0x22
 80047cc:	f040 8169 	bne.w	8004aa2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d10f      	bne.n	80047f8 <I2C_Master_ADDR+0x54>
 80047d8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80047dc:	2b40      	cmp	r3, #64	; 0x40
 80047de:	d10b      	bne.n	80047f8 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047e0:	2300      	movs	r3, #0
 80047e2:	633b      	str	r3, [r7, #48]	; 0x30
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	695b      	ldr	r3, [r3, #20]
 80047ea:	633b      	str	r3, [r7, #48]	; 0x30
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	699b      	ldr	r3, [r3, #24]
 80047f2:	633b      	str	r3, [r7, #48]	; 0x30
 80047f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80047f6:	e160      	b.n	8004aba <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047fc:	2b00      	cmp	r3, #0
 80047fe:	d11d      	bne.n	800483c <I2C_Master_ADDR+0x98>
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004808:	d118      	bne.n	800483c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800480a:	2300      	movs	r3, #0
 800480c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	699b      	ldr	r3, [r3, #24]
 800481c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800481e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	681a      	ldr	r2, [r3, #0]
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800482e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004834:	1c5a      	adds	r2, r3, #1
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	651a      	str	r2, [r3, #80]	; 0x50
 800483a:	e13e      	b.n	8004aba <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004840:	b29b      	uxth	r3, r3
 8004842:	2b00      	cmp	r3, #0
 8004844:	d113      	bne.n	800486e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004846:	2300      	movs	r3, #0
 8004848:	62bb      	str	r3, [r7, #40]	; 0x28
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	62bb      	str	r3, [r7, #40]	; 0x28
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	699b      	ldr	r3, [r3, #24]
 8004858:	62bb      	str	r3, [r7, #40]	; 0x28
 800485a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681a      	ldr	r2, [r3, #0]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800486a:	601a      	str	r2, [r3, #0]
 800486c:	e115      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004872:	b29b      	uxth	r3, r3
 8004874:	2b01      	cmp	r3, #1
 8004876:	f040 808a 	bne.w	800498e <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800487a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800487c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004880:	d137      	bne.n	80048f2 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	681a      	ldr	r2, [r3, #0]
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004890:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	681b      	ldr	r3, [r3, #0]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800489c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80048a0:	d113      	bne.n	80048ca <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	681a      	ldr	r2, [r3, #0]
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80048b0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048b2:	2300      	movs	r3, #0
 80048b4:	627b      	str	r3, [r7, #36]	; 0x24
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	695b      	ldr	r3, [r3, #20]
 80048bc:	627b      	str	r3, [r7, #36]	; 0x24
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	699b      	ldr	r3, [r3, #24]
 80048c4:	627b      	str	r3, [r7, #36]	; 0x24
 80048c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048c8:	e0e7      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80048ca:	2300      	movs	r3, #0
 80048cc:	623b      	str	r3, [r7, #32]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	695b      	ldr	r3, [r3, #20]
 80048d4:	623b      	str	r3, [r7, #32]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	699b      	ldr	r3, [r3, #24]
 80048dc:	623b      	str	r3, [r7, #32]
 80048de:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	681a      	ldr	r2, [r3, #0]
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	681b      	ldr	r3, [r3, #0]
 80048ea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048ee:	601a      	str	r2, [r3, #0]
 80048f0:	e0d3      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80048f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048f4:	2b08      	cmp	r3, #8
 80048f6:	d02e      	beq.n	8004956 <I2C_Master_ADDR+0x1b2>
 80048f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	d02b      	beq.n	8004956 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80048fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004900:	2b12      	cmp	r3, #18
 8004902:	d102      	bne.n	800490a <I2C_Master_ADDR+0x166>
 8004904:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004906:	2b01      	cmp	r3, #1
 8004908:	d125      	bne.n	8004956 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800490a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800490c:	2b04      	cmp	r3, #4
 800490e:	d00e      	beq.n	800492e <I2C_Master_ADDR+0x18a>
 8004910:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004912:	2b02      	cmp	r3, #2
 8004914:	d00b      	beq.n	800492e <I2C_Master_ADDR+0x18a>
 8004916:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004918:	2b10      	cmp	r3, #16
 800491a:	d008      	beq.n	800492e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	681a      	ldr	r2, [r3, #0]
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492a:	601a      	str	r2, [r3, #0]
 800492c:	e007      	b.n	800493e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	681a      	ldr	r2, [r3, #0]
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800493c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800493e:	2300      	movs	r3, #0
 8004940:	61fb      	str	r3, [r7, #28]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	695b      	ldr	r3, [r3, #20]
 8004948:	61fb      	str	r3, [r7, #28]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	699b      	ldr	r3, [r3, #24]
 8004950:	61fb      	str	r3, [r7, #28]
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	e0a1      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	681a      	ldr	r2, [r3, #0]
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004964:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004966:	2300      	movs	r3, #0
 8004968:	61bb      	str	r3, [r7, #24]
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	695b      	ldr	r3, [r3, #20]
 8004970:	61bb      	str	r3, [r7, #24]
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	699b      	ldr	r3, [r3, #24]
 8004978:	61bb      	str	r3, [r7, #24]
 800497a:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	681b      	ldr	r3, [r3, #0]
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800498a:	601a      	str	r2, [r3, #0]
 800498c:	e085      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b02      	cmp	r3, #2
 8004996:	d14d      	bne.n	8004a34 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004998:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800499a:	2b04      	cmp	r3, #4
 800499c:	d016      	beq.n	80049cc <I2C_Master_ADDR+0x228>
 800499e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a0:	2b02      	cmp	r3, #2
 80049a2:	d013      	beq.n	80049cc <I2C_Master_ADDR+0x228>
 80049a4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049a6:	2b10      	cmp	r3, #16
 80049a8:	d010      	beq.n	80049cc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	681a      	ldr	r2, [r3, #0]
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049b8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80049c8:	601a      	str	r2, [r3, #0]
 80049ca:	e007      	b.n	80049dc <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80049da:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	681b      	ldr	r3, [r3, #0]
 80049e0:	685b      	ldr	r3, [r3, #4]
 80049e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049e6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049ea:	d117      	bne.n	8004a1c <I2C_Master_ADDR+0x278>
 80049ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049ee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049f2:	d00b      	beq.n	8004a0c <I2C_Master_ADDR+0x268>
 80049f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049f6:	2b01      	cmp	r3, #1
 80049f8:	d008      	beq.n	8004a0c <I2C_Master_ADDR+0x268>
 80049fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80049fc:	2b08      	cmp	r3, #8
 80049fe:	d005      	beq.n	8004a0c <I2C_Master_ADDR+0x268>
 8004a00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a02:	2b10      	cmp	r3, #16
 8004a04:	d002      	beq.n	8004a0c <I2C_Master_ADDR+0x268>
 8004a06:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a08:	2b20      	cmp	r3, #32
 8004a0a:	d107      	bne.n	8004a1c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685a      	ldr	r2, [r3, #4]
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a1a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	617b      	str	r3, [r7, #20]
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	695b      	ldr	r3, [r3, #20]
 8004a26:	617b      	str	r3, [r7, #20]
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	699b      	ldr	r3, [r3, #24]
 8004a2e:	617b      	str	r3, [r7, #20]
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	e032      	b.n	8004a9a <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	681a      	ldr	r2, [r3, #0]
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a42:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a52:	d117      	bne.n	8004a84 <I2C_Master_ADDR+0x2e0>
 8004a54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a56:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004a5a:	d00b      	beq.n	8004a74 <I2C_Master_ADDR+0x2d0>
 8004a5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a5e:	2b01      	cmp	r3, #1
 8004a60:	d008      	beq.n	8004a74 <I2C_Master_ADDR+0x2d0>
 8004a62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a64:	2b08      	cmp	r3, #8
 8004a66:	d005      	beq.n	8004a74 <I2C_Master_ADDR+0x2d0>
 8004a68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a6a:	2b10      	cmp	r3, #16
 8004a6c:	d002      	beq.n	8004a74 <I2C_Master_ADDR+0x2d0>
 8004a6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a70:	2b20      	cmp	r3, #32
 8004a72:	d107      	bne.n	8004a84 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	685a      	ldr	r2, [r3, #4]
 8004a7a:	687b      	ldr	r3, [r7, #4]
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004a82:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a84:	2300      	movs	r3, #0
 8004a86:	613b      	str	r3, [r7, #16]
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	681b      	ldr	r3, [r3, #0]
 8004a8c:	695b      	ldr	r3, [r3, #20]
 8004a8e:	613b      	str	r3, [r7, #16]
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	699b      	ldr	r3, [r3, #24]
 8004a96:	613b      	str	r3, [r7, #16]
 8004a98:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004aa0:	e00b      	b.n	8004aba <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	60fb      	str	r3, [r7, #12]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	695b      	ldr	r3, [r3, #20]
 8004aac:	60fb      	str	r3, [r7, #12]
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	699b      	ldr	r3, [r3, #24]
 8004ab4:	60fb      	str	r3, [r7, #12]
 8004ab6:	68fb      	ldr	r3, [r7, #12]
}
 8004ab8:	e7ff      	b.n	8004aba <I2C_Master_ADDR+0x316>
 8004aba:	bf00      	nop
 8004abc:	3744      	adds	r7, #68	; 0x44
 8004abe:	46bd      	mov	sp, r7
 8004ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac4:	4770      	bx	lr

08004ac6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004ac6:	b580      	push	{r7, lr}
 8004ac8:	b084      	sub	sp, #16
 8004aca:	af00      	add	r7, sp, #0
 8004acc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ada:	b29b      	uxth	r3, r3
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d02b      	beq.n	8004b38 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ae4:	781a      	ldrb	r2, [r3, #0]
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af0:	1c5a      	adds	r2, r3, #1
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004afa:	b29b      	uxth	r3, r3
 8004afc:	3b01      	subs	r3, #1
 8004afe:	b29a      	uxth	r2, r3
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b08:	b29b      	uxth	r3, r3
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	d114      	bne.n	8004b38 <I2C_SlaveTransmit_TXE+0x72>
 8004b0e:	7bfb      	ldrb	r3, [r7, #15]
 8004b10:	2b29      	cmp	r3, #41	; 0x29
 8004b12:	d111      	bne.n	8004b38 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	685a      	ldr	r2, [r3, #4]
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b22:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	2221      	movs	r2, #33	; 0x21
 8004b28:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	2228      	movs	r2, #40	; 0x28
 8004b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004b32:	6878      	ldr	r0, [r7, #4]
 8004b34:	f7ff f9e7 	bl	8003f06 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004b38:	bf00      	nop
 8004b3a:	3710      	adds	r7, #16
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004b40:	b480      	push	{r7}
 8004b42:	b083      	sub	sp, #12
 8004b44:	af00      	add	r7, sp, #0
 8004b46:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b4c:	b29b      	uxth	r3, r3
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d011      	beq.n	8004b76 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b56:	781a      	ldrb	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004b76:	bf00      	nop
 8004b78:	370c      	adds	r7, #12
 8004b7a:	46bd      	mov	sp, r7
 8004b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b80:	4770      	bx	lr

08004b82 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b82:	b580      	push	{r7, lr}
 8004b84:	b084      	sub	sp, #16
 8004b86:	af00      	add	r7, sp, #0
 8004b88:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b90:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b96:	b29b      	uxth	r3, r3
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d02c      	beq.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	691a      	ldr	r2, [r3, #16]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ba6:	b2d2      	uxtb	r2, r2
 8004ba8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bae:	1c5a      	adds	r2, r3, #1
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb8:	b29b      	uxth	r3, r3
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	b29a      	uxth	r2, r3
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bc6:	b29b      	uxth	r3, r3
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d114      	bne.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
 8004bcc:	7bfb      	ldrb	r3, [r7, #15]
 8004bce:	2b2a      	cmp	r3, #42	; 0x2a
 8004bd0:	d111      	bne.n	8004bf6 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	685a      	ldr	r2, [r3, #4]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2222      	movs	r2, #34	; 0x22
 8004be6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	2228      	movs	r2, #40	; 0x28
 8004bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004bf0:	6878      	ldr	r0, [r7, #4]
 8004bf2:	f7ff f992 	bl	8003f1a <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004bf6:	bf00      	nop
 8004bf8:	3710      	adds	r7, #16
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	bd80      	pop	{r7, pc}

08004bfe <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d012      	beq.n	8004c36 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	691a      	ldr	r2, [r3, #16]
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1a:	b2d2      	uxtb	r2, r2
 8004c1c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c22:	1c5a      	adds	r2, r3, #1
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004c36:	bf00      	nop
 8004c38:	370c      	adds	r7, #12
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr

08004c42 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004c42:	b580      	push	{r7, lr}
 8004c44:	b084      	sub	sp, #16
 8004c46:	af00      	add	r7, sp, #0
 8004c48:	6078      	str	r0, [r7, #4]
 8004c4a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004c4c:	2300      	movs	r3, #0
 8004c4e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c56:	b2db      	uxtb	r3, r3
 8004c58:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c5c:	2b28      	cmp	r3, #40	; 0x28
 8004c5e:	d125      	bne.n	8004cac <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	685a      	ldr	r2, [r3, #4]
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	681b      	ldr	r3, [r3, #0]
 8004c6a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c6e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	f003 0304 	and.w	r3, r3, #4
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d101      	bne.n	8004c7e <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d103      	bne.n	8004c90 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	81bb      	strh	r3, [r7, #12]
 8004c8e:	e002      	b.n	8004c96 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2200      	movs	r2, #0
 8004c9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004c9e:	89ba      	ldrh	r2, [r7, #12]
 8004ca0:	7bfb      	ldrb	r3, [r7, #15]
 8004ca2:	4619      	mov	r1, r3
 8004ca4:	6878      	ldr	r0, [r7, #4]
 8004ca6:	f7ff f942 	bl	8003f2e <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8004caa:	e00e      	b.n	8004cca <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004cac:	2300      	movs	r3, #0
 8004cae:	60bb      	str	r3, [r7, #8]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	60bb      	str	r3, [r7, #8]
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	699b      	ldr	r3, [r3, #24]
 8004cbe:	60bb      	str	r3, [r7, #8]
 8004cc0:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004cca:	bf00      	nop
 8004ccc:	3710      	adds	r7, #16
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
	...

08004cd4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b084      	sub	sp, #16
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	685a      	ldr	r2, [r3, #4]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004cf2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004cf4:	2300      	movs	r3, #0
 8004cf6:	60bb      	str	r3, [r7, #8]
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	60bb      	str	r3, [r7, #8]
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	681a      	ldr	r2, [r3, #0]
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	f042 0201 	orr.w	r2, r2, #1
 8004d0e:	601a      	str	r2, [r3, #0]
 8004d10:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	681a      	ldr	r2, [r3, #0]
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d20:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004d2c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004d30:	d172      	bne.n	8004e18 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004d32:	7bfb      	ldrb	r3, [r7, #15]
 8004d34:	2b22      	cmp	r3, #34	; 0x22
 8004d36:	d002      	beq.n	8004d3e <I2C_Slave_STOPF+0x6a>
 8004d38:	7bfb      	ldrb	r3, [r7, #15]
 8004d3a:	2b2a      	cmp	r3, #42	; 0x2a
 8004d3c:	d135      	bne.n	8004daa <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	b29a      	uxth	r2, r3
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d50:	b29b      	uxth	r3, r3
 8004d52:	2b00      	cmp	r3, #0
 8004d54:	d005      	beq.n	8004d62 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5a:	f043 0204 	orr.w	r2, r3, #4
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	685a      	ldr	r2, [r3, #4]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d70:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d76:	4618      	mov	r0, r3
 8004d78:	f7fe f933 	bl	8002fe2 <HAL_DMA_GetState>
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d049      	beq.n	8004e16 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d86:	4a69      	ldr	r2, [pc, #420]	; (8004f2c <I2C_Slave_STOPF+0x258>)
 8004d88:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d8e:	4618      	mov	r0, r3
 8004d90:	f7fe f905 	bl	8002f9e <HAL_DMA_Abort_IT>
 8004d94:	4603      	mov	r3, r0
 8004d96:	2b00      	cmp	r3, #0
 8004d98:	d03d      	beq.n	8004e16 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d9e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004da4:	4610      	mov	r0, r2
 8004da6:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004da8:	e035      	b.n	8004e16 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	685b      	ldr	r3, [r3, #4]
 8004db2:	b29a      	uxth	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dbc:	b29b      	uxth	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d005      	beq.n	8004dce <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dc6:	f043 0204 	orr.w	r2, r3, #4
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	685a      	ldr	r2, [r3, #4]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ddc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004de2:	4618      	mov	r0, r3
 8004de4:	f7fe f8fd 	bl	8002fe2 <HAL_DMA_GetState>
 8004de8:	4603      	mov	r3, r0
 8004dea:	2b01      	cmp	r3, #1
 8004dec:	d014      	beq.n	8004e18 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004df2:	4a4e      	ldr	r2, [pc, #312]	; (8004f2c <I2C_Slave_STOPF+0x258>)
 8004df4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	f7fe f8cf 	bl	8002f9e <HAL_DMA_Abort_IT>
 8004e00:	4603      	mov	r3, r0
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d008      	beq.n	8004e18 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004e06:	687b      	ldr	r3, [r7, #4]
 8004e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e0a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004e0c:	687a      	ldr	r2, [r7, #4]
 8004e0e:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004e10:	4610      	mov	r0, r2
 8004e12:	4798      	blx	r3
 8004e14:	e000      	b.n	8004e18 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004e16:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e1c:	b29b      	uxth	r3, r3
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d03e      	beq.n	8004ea0 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	681b      	ldr	r3, [r3, #0]
 8004e26:	695b      	ldr	r3, [r3, #20]
 8004e28:	f003 0304 	and.w	r3, r3, #4
 8004e2c:	2b04      	cmp	r3, #4
 8004e2e:	d112      	bne.n	8004e56 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	691a      	ldr	r2, [r3, #16]
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e3a:	b2d2      	uxtb	r2, r2
 8004e3c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e42:	1c5a      	adds	r2, r3, #1
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e4c:	b29b      	uxth	r3, r3
 8004e4e:	3b01      	subs	r3, #1
 8004e50:	b29a      	uxth	r2, r3
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004e56:	687b      	ldr	r3, [r7, #4]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e60:	2b40      	cmp	r3, #64	; 0x40
 8004e62:	d112      	bne.n	8004e8a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	691a      	ldr	r2, [r3, #16]
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e6e:	b2d2      	uxtb	r2, r2
 8004e70:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e76:	1c5a      	adds	r2, r3, #1
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e80:	b29b      	uxth	r3, r3
 8004e82:	3b01      	subs	r3, #1
 8004e84:	b29a      	uxth	r2, r3
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e8e:	b29b      	uxth	r3, r3
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d005      	beq.n	8004ea0 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e98:	f043 0204 	orr.w	r2, r3, #4
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea4:	2b00      	cmp	r3, #0
 8004ea6:	d003      	beq.n	8004eb0 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004ea8:	6878      	ldr	r0, [r7, #4]
 8004eaa:	f000 f843 	bl	8004f34 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004eae:	e039      	b.n	8004f24 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004eb0:	7bfb      	ldrb	r3, [r7, #15]
 8004eb2:	2b2a      	cmp	r3, #42	; 0x2a
 8004eb4:	d109      	bne.n	8004eca <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	2200      	movs	r2, #0
 8004eba:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2228      	movs	r2, #40	; 0x28
 8004ec0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f7ff f828 	bl	8003f1a <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ed0:	b2db      	uxtb	r3, r3
 8004ed2:	2b28      	cmp	r3, #40	; 0x28
 8004ed4:	d111      	bne.n	8004efa <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	4a15      	ldr	r2, [pc, #84]	; (8004f30 <I2C_Slave_STOPF+0x25c>)
 8004eda:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2200      	movs	r2, #0
 8004ee0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	2220      	movs	r2, #32
 8004ee6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	2200      	movs	r2, #0
 8004eee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ef2:	6878      	ldr	r0, [r7, #4]
 8004ef4:	f7ff f829 	bl	8003f4a <HAL_I2C_ListenCpltCallback>
}
 8004ef8:	e014      	b.n	8004f24 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004efe:	2b22      	cmp	r3, #34	; 0x22
 8004f00:	d002      	beq.n	8004f08 <I2C_Slave_STOPF+0x234>
 8004f02:	7bfb      	ldrb	r3, [r7, #15]
 8004f04:	2b22      	cmp	r3, #34	; 0x22
 8004f06:	d10d      	bne.n	8004f24 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2200      	movs	r2, #0
 8004f0c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	2220      	movs	r2, #32
 8004f12:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004f1e:	6878      	ldr	r0, [r7, #4]
 8004f20:	f7fe fffb 	bl	8003f1a <HAL_I2C_SlaveRxCpltCallback>
}
 8004f24:	bf00      	nop
 8004f26:	3710      	adds	r7, #16
 8004f28:	46bd      	mov	sp, r7
 8004f2a:	bd80      	pop	{r7, pc}
 8004f2c:	08005495 	.word	0x08005495
 8004f30:	ffff0000 	.word	0xffff0000

08004f34 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b084      	sub	sp, #16
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f42:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f4a:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004f4c:	7bbb      	ldrb	r3, [r7, #14]
 8004f4e:	2b10      	cmp	r3, #16
 8004f50:	d002      	beq.n	8004f58 <I2C_ITError+0x24>
 8004f52:	7bbb      	ldrb	r3, [r7, #14]
 8004f54:	2b40      	cmp	r3, #64	; 0x40
 8004f56:	d10a      	bne.n	8004f6e <I2C_ITError+0x3a>
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b22      	cmp	r3, #34	; 0x22
 8004f5c:	d107      	bne.n	8004f6e <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	681a      	ldr	r2, [r3, #0]
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004f6c:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f6e:	7bfb      	ldrb	r3, [r7, #15]
 8004f70:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f74:	2b28      	cmp	r3, #40	; 0x28
 8004f76:	d107      	bne.n	8004f88 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	2228      	movs	r2, #40	; 0x28
 8004f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f86:	e015      	b.n	8004fb4 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	685b      	ldr	r3, [r3, #4]
 8004f8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f92:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f96:	d00a      	beq.n	8004fae <I2C_ITError+0x7a>
 8004f98:	7bfb      	ldrb	r3, [r7, #15]
 8004f9a:	2b60      	cmp	r3, #96	; 0x60
 8004f9c:	d007      	beq.n	8004fae <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	2220      	movs	r2, #32
 8004fa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	685b      	ldr	r3, [r3, #4]
 8004fba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004fbe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004fc2:	d162      	bne.n	800508a <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	685a      	ldr	r2, [r3, #4]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004fd2:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004fdc:	b2db      	uxtb	r3, r3
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d020      	beq.n	8005024 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fe6:	4a6a      	ldr	r2, [pc, #424]	; (8005190 <I2C_ITError+0x25c>)
 8004fe8:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fd ffd5 	bl	8002f9e <HAL_DMA_Abort_IT>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	f000 8089 	beq.w	800510e <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f022 0201 	bic.w	r2, r2, #1
 800500a:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2220      	movs	r2, #32
 8005010:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005018:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800501a:	687a      	ldr	r2, [r7, #4]
 800501c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800501e:	4610      	mov	r0, r2
 8005020:	4798      	blx	r3
 8005022:	e074      	b.n	800510e <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005028:	4a59      	ldr	r2, [pc, #356]	; (8005190 <I2C_ITError+0x25c>)
 800502a:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005030:	4618      	mov	r0, r3
 8005032:	f7fd ffb4 	bl	8002f9e <HAL_DMA_Abort_IT>
 8005036:	4603      	mov	r3, r0
 8005038:	2b00      	cmp	r3, #0
 800503a:	d068      	beq.n	800510e <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	695b      	ldr	r3, [r3, #20]
 8005042:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005046:	2b40      	cmp	r3, #64	; 0x40
 8005048:	d10b      	bne.n	8005062 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	691a      	ldr	r2, [r3, #16]
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005054:	b2d2      	uxtb	r2, r2
 8005056:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800505c:	1c5a      	adds	r2, r3, #1
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f022 0201 	bic.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	2220      	movs	r2, #32
 8005076:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800507e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005080:	687a      	ldr	r2, [r7, #4]
 8005082:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005084:	4610      	mov	r0, r2
 8005086:	4798      	blx	r3
 8005088:	e041      	b.n	800510e <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005090:	b2db      	uxtb	r3, r3
 8005092:	2b60      	cmp	r3, #96	; 0x60
 8005094:	d125      	bne.n	80050e2 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	2220      	movs	r2, #32
 800509a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2200      	movs	r2, #0
 80050a2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	695b      	ldr	r3, [r3, #20]
 80050aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ae:	2b40      	cmp	r3, #64	; 0x40
 80050b0:	d10b      	bne.n	80050ca <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	691a      	ldr	r2, [r3, #16]
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050bc:	b2d2      	uxtb	r2, r2
 80050be:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050c4:	1c5a      	adds	r2, r3, #1
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f022 0201 	bic.w	r2, r2, #1
 80050d8:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80050da:	6878      	ldr	r0, [r7, #4]
 80050dc:	f7fe ff5d 	bl	8003f9a <HAL_I2C_AbortCpltCallback>
 80050e0:	e015      	b.n	800510e <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	695b      	ldr	r3, [r3, #20]
 80050e8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80050ec:	2b40      	cmp	r3, #64	; 0x40
 80050ee:	d10b      	bne.n	8005108 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005108:	6878      	ldr	r0, [r7, #4]
 800510a:	f7fe ff3c 	bl	8003f86 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	f003 0301 	and.w	r3, r3, #1
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10e      	bne.n	800513c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800511e:	68bb      	ldr	r3, [r7, #8]
 8005120:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005124:	2b00      	cmp	r3, #0
 8005126:	d109      	bne.n	800513c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800512e:	2b00      	cmp	r3, #0
 8005130:	d104      	bne.n	800513c <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005132:	68bb      	ldr	r3, [r7, #8]
 8005134:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005138:	2b00      	cmp	r3, #0
 800513a:	d007      	beq.n	800514c <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	685a      	ldr	r2, [r3, #4]
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800514a:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005152:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005158:	f003 0304 	and.w	r3, r3, #4
 800515c:	2b04      	cmp	r3, #4
 800515e:	d113      	bne.n	8005188 <I2C_ITError+0x254>
 8005160:	7bfb      	ldrb	r3, [r7, #15]
 8005162:	2b28      	cmp	r3, #40	; 0x28
 8005164:	d110      	bne.n	8005188 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	4a0a      	ldr	r2, [pc, #40]	; (8005194 <I2C_ITError+0x260>)
 800516a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2200      	movs	r2, #0
 8005170:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2220      	movs	r2, #32
 8005176:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	2200      	movs	r2, #0
 800517e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005182:	6878      	ldr	r0, [r7, #4]
 8005184:	f7fe fee1 	bl	8003f4a <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005188:	bf00      	nop
 800518a:	3710      	adds	r7, #16
 800518c:	46bd      	mov	sp, r7
 800518e:	bd80      	pop	{r7, pc}
 8005190:	08005495 	.word	0x08005495
 8005194:	ffff0000 	.word	0xffff0000

08005198 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005198:	b580      	push	{r7, lr}
 800519a:	b088      	sub	sp, #32
 800519c:	af02      	add	r7, sp, #8
 800519e:	60f8      	str	r0, [r7, #12]
 80051a0:	4608      	mov	r0, r1
 80051a2:	4611      	mov	r1, r2
 80051a4:	461a      	mov	r2, r3
 80051a6:	4603      	mov	r3, r0
 80051a8:	817b      	strh	r3, [r7, #10]
 80051aa:	460b      	mov	r3, r1
 80051ac:	813b      	strh	r3, [r7, #8]
 80051ae:	4613      	mov	r3, r2
 80051b0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80051c0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80051c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051c4:	9300      	str	r3, [sp, #0]
 80051c6:	6a3b      	ldr	r3, [r7, #32]
 80051c8:	2200      	movs	r2, #0
 80051ca:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f000 fa08 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 80051d4:	4603      	mov	r3, r0
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d00d      	beq.n	80051f6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051e4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80051e8:	d103      	bne.n	80051f2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	f44f 7200 	mov.w	r2, #512	; 0x200
 80051f0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e05f      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80051f6:	897b      	ldrh	r3, [r7, #10]
 80051f8:	b2db      	uxtb	r3, r3
 80051fa:	461a      	mov	r2, r3
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	681b      	ldr	r3, [r3, #0]
 8005200:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005204:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005208:	6a3a      	ldr	r2, [r7, #32]
 800520a:	492d      	ldr	r1, [pc, #180]	; (80052c0 <I2C_RequestMemoryWrite+0x128>)
 800520c:	68f8      	ldr	r0, [r7, #12]
 800520e:	f000 fa40 	bl	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8005212:	4603      	mov	r3, r0
 8005214:	2b00      	cmp	r3, #0
 8005216:	d001      	beq.n	800521c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8005218:	2301      	movs	r3, #1
 800521a:	e04c      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800521c:	2300      	movs	r3, #0
 800521e:	617b      	str	r3, [r7, #20]
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	695b      	ldr	r3, [r3, #20]
 8005226:	617b      	str	r3, [r7, #20]
 8005228:	68fb      	ldr	r3, [r7, #12]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	699b      	ldr	r3, [r3, #24]
 800522e:	617b      	str	r3, [r7, #20]
 8005230:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005232:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005234:	6a39      	ldr	r1, [r7, #32]
 8005236:	68f8      	ldr	r0, [r7, #12]
 8005238:	f000 faaa 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 800523c:	4603      	mov	r3, r0
 800523e:	2b00      	cmp	r3, #0
 8005240:	d00d      	beq.n	800525e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005246:	2b04      	cmp	r3, #4
 8005248:	d107      	bne.n	800525a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	681a      	ldr	r2, [r3, #0]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005258:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800525a:	2301      	movs	r3, #1
 800525c:	e02b      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800525e:	88fb      	ldrh	r3, [r7, #6]
 8005260:	2b01      	cmp	r3, #1
 8005262:	d105      	bne.n	8005270 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005264:	893b      	ldrh	r3, [r7, #8]
 8005266:	b2da      	uxtb	r2, r3
 8005268:	68fb      	ldr	r3, [r7, #12]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	611a      	str	r2, [r3, #16]
 800526e:	e021      	b.n	80052b4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005270:	893b      	ldrh	r3, [r7, #8]
 8005272:	0a1b      	lsrs	r3, r3, #8
 8005274:	b29b      	uxth	r3, r3
 8005276:	b2da      	uxtb	r2, r3
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800527e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005280:	6a39      	ldr	r1, [r7, #32]
 8005282:	68f8      	ldr	r0, [r7, #12]
 8005284:	f000 fa84 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 8005288:	4603      	mov	r3, r0
 800528a:	2b00      	cmp	r3, #0
 800528c:	d00d      	beq.n	80052aa <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005292:	2b04      	cmp	r3, #4
 8005294:	d107      	bne.n	80052a6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	681b      	ldr	r3, [r3, #0]
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052a4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80052a6:	2301      	movs	r3, #1
 80052a8:	e005      	b.n	80052b6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80052aa:	893b      	ldrh	r3, [r7, #8]
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80052b4:	2300      	movs	r3, #0
}
 80052b6:	4618      	mov	r0, r3
 80052b8:	3718      	adds	r7, #24
 80052ba:	46bd      	mov	sp, r7
 80052bc:	bd80      	pop	{r7, pc}
 80052be:	bf00      	nop
 80052c0:	00010002 	.word	0x00010002

080052c4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80052c4:	b580      	push	{r7, lr}
 80052c6:	b088      	sub	sp, #32
 80052c8:	af02      	add	r7, sp, #8
 80052ca:	60f8      	str	r0, [r7, #12]
 80052cc:	4608      	mov	r0, r1
 80052ce:	4611      	mov	r1, r2
 80052d0:	461a      	mov	r2, r3
 80052d2:	4603      	mov	r3, r0
 80052d4:	817b      	strh	r3, [r7, #10]
 80052d6:	460b      	mov	r3, r1
 80052d8:	813b      	strh	r3, [r7, #8]
 80052da:	4613      	mov	r3, r2
 80052dc:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	681a      	ldr	r2, [r3, #0]
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80052ec:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80052ee:	68fb      	ldr	r3, [r7, #12]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	681a      	ldr	r2, [r3, #0]
 80052f4:	68fb      	ldr	r3, [r7, #12]
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80052fc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6a3b      	ldr	r3, [r7, #32]
 8005304:	2200      	movs	r2, #0
 8005306:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800530a:	68f8      	ldr	r0, [r7, #12]
 800530c:	f000 f96a 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 8005310:	4603      	mov	r3, r0
 8005312:	2b00      	cmp	r3, #0
 8005314:	d00d      	beq.n	8005332 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005320:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005324:	d103      	bne.n	800532e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	f44f 7200 	mov.w	r2, #512	; 0x200
 800532c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800532e:	2303      	movs	r3, #3
 8005330:	e0aa      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005332:	897b      	ldrh	r3, [r7, #10]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	461a      	mov	r2, r3
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005340:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005342:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005344:	6a3a      	ldr	r2, [r7, #32]
 8005346:	4952      	ldr	r1, [pc, #328]	; (8005490 <I2C_RequestMemoryRead+0x1cc>)
 8005348:	68f8      	ldr	r0, [r7, #12]
 800534a:	f000 f9a2 	bl	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800534e:	4603      	mov	r3, r0
 8005350:	2b00      	cmp	r3, #0
 8005352:	d001      	beq.n	8005358 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005354:	2301      	movs	r3, #1
 8005356:	e097      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005358:	2300      	movs	r3, #0
 800535a:	617b      	str	r3, [r7, #20]
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695b      	ldr	r3, [r3, #20]
 8005362:	617b      	str	r3, [r7, #20]
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	699b      	ldr	r3, [r3, #24]
 800536a:	617b      	str	r3, [r7, #20]
 800536c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800536e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005370:	6a39      	ldr	r1, [r7, #32]
 8005372:	68f8      	ldr	r0, [r7, #12]
 8005374:	f000 fa0c 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d00d      	beq.n	800539a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005382:	2b04      	cmp	r3, #4
 8005384:	d107      	bne.n	8005396 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005386:	68fb      	ldr	r3, [r7, #12]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	681a      	ldr	r2, [r3, #0]
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005394:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005396:	2301      	movs	r3, #1
 8005398:	e076      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800539a:	88fb      	ldrh	r3, [r7, #6]
 800539c:	2b01      	cmp	r3, #1
 800539e:	d105      	bne.n	80053ac <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053a0:	893b      	ldrh	r3, [r7, #8]
 80053a2:	b2da      	uxtb	r2, r3
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	611a      	str	r2, [r3, #16]
 80053aa:	e021      	b.n	80053f0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80053ac:	893b      	ldrh	r3, [r7, #8]
 80053ae:	0a1b      	lsrs	r3, r3, #8
 80053b0:	b29b      	uxth	r3, r3
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053ba:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053bc:	6a39      	ldr	r1, [r7, #32]
 80053be:	68f8      	ldr	r0, [r7, #12]
 80053c0:	f000 f9e6 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 80053c4:	4603      	mov	r3, r0
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053ce:	2b04      	cmp	r3, #4
 80053d0:	d107      	bne.n	80053e2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	681a      	ldr	r2, [r3, #0]
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053e0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80053e2:	2301      	movs	r3, #1
 80053e4:	e050      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80053e6:	893b      	ldrh	r3, [r7, #8]
 80053e8:	b2da      	uxtb	r2, r3
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80053f0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f2:	6a39      	ldr	r1, [r7, #32]
 80053f4:	68f8      	ldr	r0, [r7, #12]
 80053f6:	f000 f9cb 	bl	8005790 <I2C_WaitOnTXEFlagUntilTimeout>
 80053fa:	4603      	mov	r3, r0
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d00d      	beq.n	800541c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005404:	2b04      	cmp	r3, #4
 8005406:	d107      	bne.n	8005418 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	681a      	ldr	r2, [r3, #0]
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005416:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e035      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800542a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800542c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800542e:	9300      	str	r3, [sp, #0]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	2200      	movs	r2, #0
 8005434:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8005438:	68f8      	ldr	r0, [r7, #12]
 800543a:	f000 f8d3 	bl	80055e4 <I2C_WaitOnFlagUntilTimeout>
 800543e:	4603      	mov	r3, r0
 8005440:	2b00      	cmp	r3, #0
 8005442:	d00d      	beq.n	8005460 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005444:	68fb      	ldr	r3, [r7, #12]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800544e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005452:	d103      	bne.n	800545c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f44f 7200 	mov.w	r2, #512	; 0x200
 800545a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800545c:	2303      	movs	r3, #3
 800545e:	e013      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005460:	897b      	ldrh	r3, [r7, #10]
 8005462:	b2db      	uxtb	r3, r3
 8005464:	f043 0301 	orr.w	r3, r3, #1
 8005468:	b2da      	uxtb	r2, r3
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005472:	6a3a      	ldr	r2, [r7, #32]
 8005474:	4906      	ldr	r1, [pc, #24]	; (8005490 <I2C_RequestMemoryRead+0x1cc>)
 8005476:	68f8      	ldr	r0, [r7, #12]
 8005478:	f000 f90b 	bl	8005692 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800547c:	4603      	mov	r3, r0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d001      	beq.n	8005486 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005482:	2301      	movs	r3, #1
 8005484:	e000      	b.n	8005488 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005486:	2300      	movs	r3, #0
}
 8005488:	4618      	mov	r0, r3
 800548a:	3718      	adds	r7, #24
 800548c:	46bd      	mov	sp, r7
 800548e:	bd80      	pop	{r7, pc}
 8005490:	00010002 	.word	0x00010002

08005494 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005494:	b580      	push	{r7, lr}
 8005496:	b086      	sub	sp, #24
 8005498:	af00      	add	r7, sp, #0
 800549a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800549c:	2300      	movs	r3, #0
 800549e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80054a4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80054a6:	697b      	ldr	r3, [r7, #20]
 80054a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054ac:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80054ae:	4b4b      	ldr	r3, [pc, #300]	; (80055dc <I2C_DMAAbort+0x148>)
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	08db      	lsrs	r3, r3, #3
 80054b4:	4a4a      	ldr	r2, [pc, #296]	; (80055e0 <I2C_DMAAbort+0x14c>)
 80054b6:	fba2 2303 	umull	r2, r3, r2, r3
 80054ba:	0a1a      	lsrs	r2, r3, #8
 80054bc:	4613      	mov	r3, r2
 80054be:	009b      	lsls	r3, r3, #2
 80054c0:	4413      	add	r3, r2
 80054c2:	00da      	lsls	r2, r3, #3
 80054c4:	1ad3      	subs	r3, r2, r3
 80054c6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d106      	bne.n	80054dc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80054ce:	697b      	ldr	r3, [r7, #20]
 80054d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054d2:	f043 0220 	orr.w	r2, r3, #32
 80054d6:	697b      	ldr	r3, [r7, #20]
 80054d8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80054da:	e00a      	b.n	80054f2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	3b01      	subs	r3, #1
 80054e0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80054ec:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80054f0:	d0ea      	beq.n	80054c8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d003      	beq.n	8005502 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80054fa:	697b      	ldr	r3, [r7, #20]
 80054fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054fe:	2200      	movs	r2, #0
 8005500:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005506:	2b00      	cmp	r3, #0
 8005508:	d003      	beq.n	8005512 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800550a:	697b      	ldr	r3, [r7, #20]
 800550c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800550e:	2200      	movs	r2, #0
 8005510:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005512:	697b      	ldr	r3, [r7, #20]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	681a      	ldr	r2, [r3, #0]
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005520:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	2200      	movs	r2, #0
 8005526:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800552c:	2b00      	cmp	r3, #0
 800552e:	d003      	beq.n	8005538 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005534:	2200      	movs	r2, #0
 8005536:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005538:	697b      	ldr	r3, [r7, #20]
 800553a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800553c:	2b00      	cmp	r3, #0
 800553e:	d003      	beq.n	8005548 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005540:	697b      	ldr	r3, [r7, #20]
 8005542:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005544:	2200      	movs	r2, #0
 8005546:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005548:	697b      	ldr	r3, [r7, #20]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	681a      	ldr	r2, [r3, #0]
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f022 0201 	bic.w	r2, r2, #1
 8005556:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005558:	697b      	ldr	r3, [r7, #20]
 800555a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800555e:	b2db      	uxtb	r3, r3
 8005560:	2b60      	cmp	r3, #96	; 0x60
 8005562:	d10e      	bne.n	8005582 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005564:	697b      	ldr	r3, [r7, #20]
 8005566:	2220      	movs	r2, #32
 8005568:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800556c:	697b      	ldr	r3, [r7, #20]
 800556e:	2200      	movs	r2, #0
 8005570:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005574:	697b      	ldr	r3, [r7, #20]
 8005576:	2200      	movs	r2, #0
 8005578:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800557a:	6978      	ldr	r0, [r7, #20]
 800557c:	f7fe fd0d 	bl	8003f9a <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005580:	e027      	b.n	80055d2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005582:	7cfb      	ldrb	r3, [r7, #19]
 8005584:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005588:	2b28      	cmp	r3, #40	; 0x28
 800558a:	d117      	bne.n	80055bc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800558c:	697b      	ldr	r3, [r7, #20]
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	681a      	ldr	r2, [r3, #0]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	f042 0201 	orr.w	r2, r2, #1
 800559a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	681a      	ldr	r2, [r3, #0]
 80055a2:	697b      	ldr	r3, [r7, #20]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80055aa:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80055ac:	697b      	ldr	r3, [r7, #20]
 80055ae:	2200      	movs	r2, #0
 80055b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	2228      	movs	r2, #40	; 0x28
 80055b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80055ba:	e007      	b.n	80055cc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80055bc:	697b      	ldr	r3, [r7, #20]
 80055be:	2220      	movs	r2, #32
 80055c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80055c4:	697b      	ldr	r3, [r7, #20]
 80055c6:	2200      	movs	r2, #0
 80055c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80055cc:	6978      	ldr	r0, [r7, #20]
 80055ce:	f7fe fcda 	bl	8003f86 <HAL_I2C_ErrorCallback>
}
 80055d2:	bf00      	nop
 80055d4:	3718      	adds	r7, #24
 80055d6:	46bd      	mov	sp, r7
 80055d8:	bd80      	pop	{r7, pc}
 80055da:	bf00      	nop
 80055dc:	20000090 	.word	0x20000090
 80055e0:	14f8b589 	.word	0x14f8b589

080055e4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80055e4:	b580      	push	{r7, lr}
 80055e6:	b084      	sub	sp, #16
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	603b      	str	r3, [r7, #0]
 80055f0:	4613      	mov	r3, r2
 80055f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80055f4:	e025      	b.n	8005642 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80055f6:	683b      	ldr	r3, [r7, #0]
 80055f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055fc:	d021      	beq.n	8005642 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80055fe:	f7fd fb1d 	bl	8002c3c <HAL_GetTick>
 8005602:	4602      	mov	r2, r0
 8005604:	69bb      	ldr	r3, [r7, #24]
 8005606:	1ad3      	subs	r3, r2, r3
 8005608:	683a      	ldr	r2, [r7, #0]
 800560a:	429a      	cmp	r2, r3
 800560c:	d302      	bcc.n	8005614 <I2C_WaitOnFlagUntilTimeout+0x30>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b00      	cmp	r3, #0
 8005612:	d116      	bne.n	8005642 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	2200      	movs	r2, #0
 8005618:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	2220      	movs	r2, #32
 800561e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800562e:	f043 0220 	orr.w	r2, r3, #32
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	2200      	movs	r2, #0
 800563a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800563e:	2301      	movs	r3, #1
 8005640:	e023      	b.n	800568a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	0c1b      	lsrs	r3, r3, #16
 8005646:	b2db      	uxtb	r3, r3
 8005648:	2b01      	cmp	r3, #1
 800564a:	d10d      	bne.n	8005668 <I2C_WaitOnFlagUntilTimeout+0x84>
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	681b      	ldr	r3, [r3, #0]
 8005650:	695b      	ldr	r3, [r3, #20]
 8005652:	43da      	mvns	r2, r3
 8005654:	68bb      	ldr	r3, [r7, #8]
 8005656:	4013      	ands	r3, r2
 8005658:	b29b      	uxth	r3, r3
 800565a:	2b00      	cmp	r3, #0
 800565c:	bf0c      	ite	eq
 800565e:	2301      	moveq	r3, #1
 8005660:	2300      	movne	r3, #0
 8005662:	b2db      	uxtb	r3, r3
 8005664:	461a      	mov	r2, r3
 8005666:	e00c      	b.n	8005682 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	699b      	ldr	r3, [r3, #24]
 800566e:	43da      	mvns	r2, r3
 8005670:	68bb      	ldr	r3, [r7, #8]
 8005672:	4013      	ands	r3, r2
 8005674:	b29b      	uxth	r3, r3
 8005676:	2b00      	cmp	r3, #0
 8005678:	bf0c      	ite	eq
 800567a:	2301      	moveq	r3, #1
 800567c:	2300      	movne	r3, #0
 800567e:	b2db      	uxtb	r3, r3
 8005680:	461a      	mov	r2, r3
 8005682:	79fb      	ldrb	r3, [r7, #7]
 8005684:	429a      	cmp	r2, r3
 8005686:	d0b6      	beq.n	80055f6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3710      	adds	r7, #16
 800568e:	46bd      	mov	sp, r7
 8005690:	bd80      	pop	{r7, pc}

08005692 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005692:	b580      	push	{r7, lr}
 8005694:	b084      	sub	sp, #16
 8005696:	af00      	add	r7, sp, #0
 8005698:	60f8      	str	r0, [r7, #12]
 800569a:	60b9      	str	r1, [r7, #8]
 800569c:	607a      	str	r2, [r7, #4]
 800569e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80056a0:	e051      	b.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056ac:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80056b0:	d123      	bne.n	80056fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b2:	68fb      	ldr	r3, [r7, #12]
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	681a      	ldr	r2, [r3, #0]
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80056ca:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	2200      	movs	r2, #0
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	2220      	movs	r2, #32
 80056d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	2200      	movs	r2, #0
 80056de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80056e2:	68fb      	ldr	r3, [r7, #12]
 80056e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e6:	f043 0204 	orr.w	r2, r3, #4
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80056ee:	68fb      	ldr	r3, [r7, #12]
 80056f0:	2200      	movs	r2, #0
 80056f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80056f6:	2301      	movs	r3, #1
 80056f8:	e046      	b.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005700:	d021      	beq.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005702:	f7fd fa9b 	bl	8002c3c <HAL_GetTick>
 8005706:	4602      	mov	r2, r0
 8005708:	683b      	ldr	r3, [r7, #0]
 800570a:	1ad3      	subs	r3, r2, r3
 800570c:	687a      	ldr	r2, [r7, #4]
 800570e:	429a      	cmp	r2, r3
 8005710:	d302      	bcc.n	8005718 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d116      	bne.n	8005746 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	2200      	movs	r2, #0
 800571c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	2220      	movs	r2, #32
 8005722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005726:	68fb      	ldr	r3, [r7, #12]
 8005728:	2200      	movs	r2, #0
 800572a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005732:	f043 0220 	orr.w	r2, r3, #32
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2200      	movs	r2, #0
 800573e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	e020      	b.n	8005788 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005746:	68bb      	ldr	r3, [r7, #8]
 8005748:	0c1b      	lsrs	r3, r3, #16
 800574a:	b2db      	uxtb	r3, r3
 800574c:	2b01      	cmp	r3, #1
 800574e:	d10c      	bne.n	800576a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	695b      	ldr	r3, [r3, #20]
 8005756:	43da      	mvns	r2, r3
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	4013      	ands	r3, r2
 800575c:	b29b      	uxth	r3, r3
 800575e:	2b00      	cmp	r3, #0
 8005760:	bf14      	ite	ne
 8005762:	2301      	movne	r3, #1
 8005764:	2300      	moveq	r3, #0
 8005766:	b2db      	uxtb	r3, r3
 8005768:	e00b      	b.n	8005782 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	699b      	ldr	r3, [r3, #24]
 8005770:	43da      	mvns	r2, r3
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	4013      	ands	r3, r2
 8005776:	b29b      	uxth	r3, r3
 8005778:	2b00      	cmp	r3, #0
 800577a:	bf14      	ite	ne
 800577c:	2301      	movne	r3, #1
 800577e:	2300      	moveq	r3, #0
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b00      	cmp	r3, #0
 8005784:	d18d      	bne.n	80056a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005786:	2300      	movs	r3, #0
}
 8005788:	4618      	mov	r0, r3
 800578a:	3710      	adds	r7, #16
 800578c:	46bd      	mov	sp, r7
 800578e:	bd80      	pop	{r7, pc}

08005790 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005790:	b580      	push	{r7, lr}
 8005792:	b084      	sub	sp, #16
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800579c:	e02d      	b.n	80057fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800579e:	68f8      	ldr	r0, [r7, #12]
 80057a0:	f000 f900 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 80057a4:	4603      	mov	r3, r0
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d001      	beq.n	80057ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80057aa:	2301      	movs	r3, #1
 80057ac:	e02d      	b.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80057ae:	68bb      	ldr	r3, [r7, #8]
 80057b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057b4:	d021      	beq.n	80057fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80057b6:	f7fd fa41 	bl	8002c3c <HAL_GetTick>
 80057ba:	4602      	mov	r2, r0
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	1ad3      	subs	r3, r2, r3
 80057c0:	68ba      	ldr	r2, [r7, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d302      	bcc.n	80057cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80057c6:	68bb      	ldr	r3, [r7, #8]
 80057c8:	2b00      	cmp	r3, #0
 80057ca:	d116      	bne.n	80057fa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	2200      	movs	r2, #0
 80057d0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	2220      	movs	r2, #32
 80057d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2200      	movs	r2, #0
 80057de:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057e6:	f043 0220 	orr.w	r2, r3, #32
 80057ea:	68fb      	ldr	r3, [r7, #12]
 80057ec:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	2200      	movs	r2, #0
 80057f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e007      	b.n	800580a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	695b      	ldr	r3, [r3, #20]
 8005800:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005804:	2b80      	cmp	r3, #128	; 0x80
 8005806:	d1ca      	bne.n	800579e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005808:	2300      	movs	r3, #0
}
 800580a:	4618      	mov	r0, r3
 800580c:	3710      	adds	r7, #16
 800580e:	46bd      	mov	sp, r7
 8005810:	bd80      	pop	{r7, pc}

08005812 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005812:	b580      	push	{r7, lr}
 8005814:	b084      	sub	sp, #16
 8005816:	af00      	add	r7, sp, #0
 8005818:	60f8      	str	r0, [r7, #12]
 800581a:	60b9      	str	r1, [r7, #8]
 800581c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800581e:	e02d      	b.n	800587c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005820:	68f8      	ldr	r0, [r7, #12]
 8005822:	f000 f8bf 	bl	80059a4 <I2C_IsAcknowledgeFailed>
 8005826:	4603      	mov	r3, r0
 8005828:	2b00      	cmp	r3, #0
 800582a:	d001      	beq.n	8005830 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800582c:	2301      	movs	r3, #1
 800582e:	e02d      	b.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005836:	d021      	beq.n	800587c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005838:	f7fd fa00 	bl	8002c3c <HAL_GetTick>
 800583c:	4602      	mov	r2, r0
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	1ad3      	subs	r3, r2, r3
 8005842:	68ba      	ldr	r2, [r7, #8]
 8005844:	429a      	cmp	r2, r3
 8005846:	d302      	bcc.n	800584e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005848:	68bb      	ldr	r3, [r7, #8]
 800584a:	2b00      	cmp	r3, #0
 800584c:	d116      	bne.n	800587c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	2220      	movs	r2, #32
 8005858:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800585c:	68fb      	ldr	r3, [r7, #12]
 800585e:	2200      	movs	r2, #0
 8005860:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005864:	68fb      	ldr	r3, [r7, #12]
 8005866:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005868:	f043 0220 	orr.w	r2, r3, #32
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	2200      	movs	r2, #0
 8005874:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005878:	2301      	movs	r3, #1
 800587a:	e007      	b.n	800588c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	695b      	ldr	r3, [r3, #20]
 8005882:	f003 0304 	and.w	r3, r3, #4
 8005886:	2b04      	cmp	r3, #4
 8005888:	d1ca      	bne.n	8005820 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800588a:	2300      	movs	r3, #0
}
 800588c:	4618      	mov	r0, r3
 800588e:	3710      	adds	r7, #16
 8005890:	46bd      	mov	sp, r7
 8005892:	bd80      	pop	{r7, pc}

08005894 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005894:	b480      	push	{r7}
 8005896:	b085      	sub	sp, #20
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800589c:	2300      	movs	r3, #0
 800589e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80058a0:	4b13      	ldr	r3, [pc, #76]	; (80058f0 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	08db      	lsrs	r3, r3, #3
 80058a6:	4a13      	ldr	r2, [pc, #76]	; (80058f4 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 80058a8:	fba2 2303 	umull	r2, r3, r2, r3
 80058ac:	0a1a      	lsrs	r2, r3, #8
 80058ae:	4613      	mov	r3, r2
 80058b0:	009b      	lsls	r3, r3, #2
 80058b2:	4413      	add	r3, r2
 80058b4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 80058b6:	68fb      	ldr	r3, [r7, #12]
 80058b8:	3b01      	subs	r3, #1
 80058ba:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d107      	bne.n	80058d2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80058c6:	f043 0220 	orr.w	r2, r3, #32
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 80058ce:	2301      	movs	r3, #1
 80058d0:	e008      	b.n	80058e4 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80058dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80058e0:	d0e9      	beq.n	80058b6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80058e2:	2300      	movs	r3, #0
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ee:	4770      	bx	lr
 80058f0:	20000090 	.word	0x20000090
 80058f4:	14f8b589 	.word	0x14f8b589

080058f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b084      	sub	sp, #16
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	60f8      	str	r0, [r7, #12]
 8005900:	60b9      	str	r1, [r7, #8]
 8005902:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005904:	e042      	b.n	800598c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	695b      	ldr	r3, [r3, #20]
 800590c:	f003 0310 	and.w	r3, r3, #16
 8005910:	2b10      	cmp	r3, #16
 8005912:	d119      	bne.n	8005948 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f06f 0210 	mvn.w	r2, #16
 800591c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	2200      	movs	r2, #0
 8005922:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	2200      	movs	r2, #0
 8005940:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e029      	b.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005948:	f7fd f978 	bl	8002c3c <HAL_GetTick>
 800594c:	4602      	mov	r2, r0
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	1ad3      	subs	r3, r2, r3
 8005952:	68ba      	ldr	r2, [r7, #8]
 8005954:	429a      	cmp	r2, r3
 8005956:	d302      	bcc.n	800595e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d116      	bne.n	800598c <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	2220      	movs	r2, #32
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	2200      	movs	r2, #0
 8005970:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005974:	68fb      	ldr	r3, [r7, #12]
 8005976:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005978:	f043 0220 	orr.w	r2, r3, #32
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005988:	2301      	movs	r3, #1
 800598a:	e007      	b.n	800599c <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005996:	2b40      	cmp	r3, #64	; 0x40
 8005998:	d1b5      	bne.n	8005906 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 800599a:	2300      	movs	r3, #0
}
 800599c:	4618      	mov	r0, r3
 800599e:	3710      	adds	r7, #16
 80059a0:	46bd      	mov	sp, r7
 80059a2:	bd80      	pop	{r7, pc}

080059a4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80059a4:	b480      	push	{r7}
 80059a6:	b083      	sub	sp, #12
 80059a8:	af00      	add	r7, sp, #0
 80059aa:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	695b      	ldr	r3, [r3, #20]
 80059b2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80059b6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80059ba:	d11b      	bne.n	80059f4 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80059c4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2220      	movs	r2, #32
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059e0:	f043 0204 	orr.w	r2, r3, #4
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2200      	movs	r2, #0
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80059f0:	2301      	movs	r3, #1
 80059f2:	e000      	b.n	80059f6 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80059f4:	2300      	movs	r3, #0
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	370c      	adds	r7, #12
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr

08005a02 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005a02:	b480      	push	{r7}
 8005a04:	b083      	sub	sp, #12
 8005a06:	af00      	add	r7, sp, #0
 8005a08:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a0e:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005a12:	d103      	bne.n	8005a1c <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005a1a:	e007      	b.n	8005a2c <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a20:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005a24:	d102      	bne.n	8005a2c <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	2208      	movs	r2, #8
 8005a2a:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005a2c:	bf00      	nop
 8005a2e:	370c      	adds	r7, #12
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr

08005a38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005a38:	b580      	push	{r7, lr}
 8005a3a:	b086      	sub	sp, #24
 8005a3c:	af00      	add	r7, sp, #0
 8005a3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d101      	bne.n	8005a4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005a46:	2301      	movs	r3, #1
 8005a48:	e267      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	f003 0301 	and.w	r3, r3, #1
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d075      	beq.n	8005b42 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a56:	4b88      	ldr	r3, [pc, #544]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005a58:	689b      	ldr	r3, [r3, #8]
 8005a5a:	f003 030c 	and.w	r3, r3, #12
 8005a5e:	2b04      	cmp	r3, #4
 8005a60:	d00c      	beq.n	8005a7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a62:	4b85      	ldr	r3, [pc, #532]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005a64:	689b      	ldr	r3, [r3, #8]
 8005a66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005a6a:	2b08      	cmp	r3, #8
 8005a6c:	d112      	bne.n	8005a94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005a6e:	4b82      	ldr	r3, [pc, #520]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005a70:	685b      	ldr	r3, [r3, #4]
 8005a72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005a7a:	d10b      	bne.n	8005a94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005a7c:	4b7e      	ldr	r3, [pc, #504]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005a7e:	681b      	ldr	r3, [r3, #0]
 8005a80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d05b      	beq.n	8005b40 <HAL_RCC_OscConfig+0x108>
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	685b      	ldr	r3, [r3, #4]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d157      	bne.n	8005b40 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005a90:	2301      	movs	r3, #1
 8005a92:	e242      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	685b      	ldr	r3, [r3, #4]
 8005a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005a9c:	d106      	bne.n	8005aac <HAL_RCC_OscConfig+0x74>
 8005a9e:	4b76      	ldr	r3, [pc, #472]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	4a75      	ldr	r2, [pc, #468]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005aa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005aa8:	6013      	str	r3, [r2, #0]
 8005aaa:	e01d      	b.n	8005ae8 <HAL_RCC_OscConfig+0xb0>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	685b      	ldr	r3, [r3, #4]
 8005ab0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ab4:	d10c      	bne.n	8005ad0 <HAL_RCC_OscConfig+0x98>
 8005ab6:	4b70      	ldr	r3, [pc, #448]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a6f      	ldr	r2, [pc, #444]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005abc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	4b6d      	ldr	r3, [pc, #436]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	4a6c      	ldr	r2, [pc, #432]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ac8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005acc:	6013      	str	r3, [r2, #0]
 8005ace:	e00b      	b.n	8005ae8 <HAL_RCC_OscConfig+0xb0>
 8005ad0:	4b69      	ldr	r3, [pc, #420]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a68      	ldr	r2, [pc, #416]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ad6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005ada:	6013      	str	r3, [r2, #0]
 8005adc:	4b66      	ldr	r3, [pc, #408]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	4a65      	ldr	r2, [pc, #404]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005ae2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005ae6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d013      	beq.n	8005b18 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005af0:	f7fd f8a4 	bl	8002c3c <HAL_GetTick>
 8005af4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005af6:	e008      	b.n	8005b0a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005af8:	f7fd f8a0 	bl	8002c3c <HAL_GetTick>
 8005afc:	4602      	mov	r2, r0
 8005afe:	693b      	ldr	r3, [r7, #16]
 8005b00:	1ad3      	subs	r3, r2, r3
 8005b02:	2b64      	cmp	r3, #100	; 0x64
 8005b04:	d901      	bls.n	8005b0a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005b06:	2303      	movs	r3, #3
 8005b08:	e207      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005b0a:	4b5b      	ldr	r3, [pc, #364]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	d0f0      	beq.n	8005af8 <HAL_RCC_OscConfig+0xc0>
 8005b16:	e014      	b.n	8005b42 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005b18:	f7fd f890 	bl	8002c3c <HAL_GetTick>
 8005b1c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b1e:	e008      	b.n	8005b32 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005b20:	f7fd f88c 	bl	8002c3c <HAL_GetTick>
 8005b24:	4602      	mov	r2, r0
 8005b26:	693b      	ldr	r3, [r7, #16]
 8005b28:	1ad3      	subs	r3, r2, r3
 8005b2a:	2b64      	cmp	r3, #100	; 0x64
 8005b2c:	d901      	bls.n	8005b32 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005b2e:	2303      	movs	r3, #3
 8005b30:	e1f3      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005b32:	4b51      	ldr	r3, [pc, #324]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d1f0      	bne.n	8005b20 <HAL_RCC_OscConfig+0xe8>
 8005b3e:	e000      	b.n	8005b42 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b40:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	f003 0302 	and.w	r3, r3, #2
 8005b4a:	2b00      	cmp	r3, #0
 8005b4c:	d063      	beq.n	8005c16 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b4e:	4b4a      	ldr	r3, [pc, #296]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b50:	689b      	ldr	r3, [r3, #8]
 8005b52:	f003 030c 	and.w	r3, r3, #12
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d00b      	beq.n	8005b72 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b5a:	4b47      	ldr	r3, [pc, #284]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005b62:	2b08      	cmp	r3, #8
 8005b64:	d11c      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005b66:	4b44      	ldr	r3, [pc, #272]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b68:	685b      	ldr	r3, [r3, #4]
 8005b6a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d116      	bne.n	8005ba0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b72:	4b41      	ldr	r3, [pc, #260]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f003 0302 	and.w	r3, r3, #2
 8005b7a:	2b00      	cmp	r3, #0
 8005b7c:	d005      	beq.n	8005b8a <HAL_RCC_OscConfig+0x152>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	68db      	ldr	r3, [r3, #12]
 8005b82:	2b01      	cmp	r3, #1
 8005b84:	d001      	beq.n	8005b8a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005b86:	2301      	movs	r3, #1
 8005b88:	e1c7      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005b8a:	4b3b      	ldr	r3, [pc, #236]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	691b      	ldr	r3, [r3, #16]
 8005b96:	00db      	lsls	r3, r3, #3
 8005b98:	4937      	ldr	r1, [pc, #220]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005b9a:	4313      	orrs	r3, r2
 8005b9c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005b9e:	e03a      	b.n	8005c16 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	68db      	ldr	r3, [r3, #12]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d020      	beq.n	8005bea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005ba8:	4b34      	ldr	r3, [pc, #208]	; (8005c7c <HAL_RCC_OscConfig+0x244>)
 8005baa:	2201      	movs	r2, #1
 8005bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bae:	f7fd f845 	bl	8002c3c <HAL_GetTick>
 8005bb2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bb4:	e008      	b.n	8005bc8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bb6:	f7fd f841 	bl	8002c3c <HAL_GetTick>
 8005bba:	4602      	mov	r2, r0
 8005bbc:	693b      	ldr	r3, [r7, #16]
 8005bbe:	1ad3      	subs	r3, r2, r3
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d901      	bls.n	8005bc8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e1a8      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005bc8:	4b2b      	ldr	r3, [pc, #172]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	f003 0302 	and.w	r3, r3, #2
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d0f0      	beq.n	8005bb6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bd4:	4b28      	ldr	r3, [pc, #160]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005bd6:	681b      	ldr	r3, [r3, #0]
 8005bd8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	00db      	lsls	r3, r3, #3
 8005be2:	4925      	ldr	r1, [pc, #148]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005be4:	4313      	orrs	r3, r2
 8005be6:	600b      	str	r3, [r1, #0]
 8005be8:	e015      	b.n	8005c16 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005bea:	4b24      	ldr	r3, [pc, #144]	; (8005c7c <HAL_RCC_OscConfig+0x244>)
 8005bec:	2200      	movs	r2, #0
 8005bee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005bf0:	f7fd f824 	bl	8002c3c <HAL_GetTick>
 8005bf4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005bf6:	e008      	b.n	8005c0a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005bf8:	f7fd f820 	bl	8002c3c <HAL_GetTick>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	693b      	ldr	r3, [r7, #16]
 8005c00:	1ad3      	subs	r3, r2, r3
 8005c02:	2b02      	cmp	r3, #2
 8005c04:	d901      	bls.n	8005c0a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005c06:	2303      	movs	r3, #3
 8005c08:	e187      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005c0a:	4b1b      	ldr	r3, [pc, #108]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	f003 0302 	and.w	r3, r3, #2
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1f0      	bne.n	8005bf8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f003 0308 	and.w	r3, r3, #8
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d036      	beq.n	8005c90 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	695b      	ldr	r3, [r3, #20]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d016      	beq.n	8005c58 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005c2a:	4b15      	ldr	r3, [pc, #84]	; (8005c80 <HAL_RCC_OscConfig+0x248>)
 8005c2c:	2201      	movs	r2, #1
 8005c2e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005c30:	f7fd f804 	bl	8002c3c <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c38:	f7fd f800 	bl	8002c3c <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e167      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005c4a:	4b0b      	ldr	r3, [pc, #44]	; (8005c78 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c4e:	f003 0302 	and.w	r3, r3, #2
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d0f0      	beq.n	8005c38 <HAL_RCC_OscConfig+0x200>
 8005c56:	e01b      	b.n	8005c90 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005c58:	4b09      	ldr	r3, [pc, #36]	; (8005c80 <HAL_RCC_OscConfig+0x248>)
 8005c5a:	2200      	movs	r2, #0
 8005c5c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005c5e:	f7fc ffed 	bl	8002c3c <HAL_GetTick>
 8005c62:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c64:	e00e      	b.n	8005c84 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005c66:	f7fc ffe9 	bl	8002c3c <HAL_GetTick>
 8005c6a:	4602      	mov	r2, r0
 8005c6c:	693b      	ldr	r3, [r7, #16]
 8005c6e:	1ad3      	subs	r3, r2, r3
 8005c70:	2b02      	cmp	r3, #2
 8005c72:	d907      	bls.n	8005c84 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005c74:	2303      	movs	r3, #3
 8005c76:	e150      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
 8005c78:	40023800 	.word	0x40023800
 8005c7c:	42470000 	.word	0x42470000
 8005c80:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005c84:	4b88      	ldr	r3, [pc, #544]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005c86:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005c88:	f003 0302 	and.w	r3, r3, #2
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d1ea      	bne.n	8005c66 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	f003 0304 	and.w	r3, r3, #4
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	f000 8097 	beq.w	8005dcc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005c9e:	2300      	movs	r3, #0
 8005ca0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005ca2:	4b81      	ldr	r3, [pc, #516]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005ca4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ca6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10f      	bne.n	8005cce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005cae:	2300      	movs	r3, #0
 8005cb0:	60bb      	str	r3, [r7, #8]
 8005cb2:	4b7d      	ldr	r3, [pc, #500]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005cb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cb6:	4a7c      	ldr	r2, [pc, #496]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005cb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cbc:	6413      	str	r3, [r2, #64]	; 0x40
 8005cbe:	4b7a      	ldr	r3, [pc, #488]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005cc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cc6:	60bb      	str	r3, [r7, #8]
 8005cc8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cce:	4b77      	ldr	r3, [pc, #476]	; (8005eac <HAL_RCC_OscConfig+0x474>)
 8005cd0:	681b      	ldr	r3, [r3, #0]
 8005cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d118      	bne.n	8005d0c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005cda:	4b74      	ldr	r3, [pc, #464]	; (8005eac <HAL_RCC_OscConfig+0x474>)
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	4a73      	ldr	r2, [pc, #460]	; (8005eac <HAL_RCC_OscConfig+0x474>)
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005ce6:	f7fc ffa9 	bl	8002c3c <HAL_GetTick>
 8005cea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005cec:	e008      	b.n	8005d00 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005cee:	f7fc ffa5 	bl	8002c3c <HAL_GetTick>
 8005cf2:	4602      	mov	r2, r0
 8005cf4:	693b      	ldr	r3, [r7, #16]
 8005cf6:	1ad3      	subs	r3, r2, r3
 8005cf8:	2b02      	cmp	r3, #2
 8005cfa:	d901      	bls.n	8005d00 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005cfc:	2303      	movs	r3, #3
 8005cfe:	e10c      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005d00:	4b6a      	ldr	r3, [pc, #424]	; (8005eac <HAL_RCC_OscConfig+0x474>)
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d0f0      	beq.n	8005cee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	689b      	ldr	r3, [r3, #8]
 8005d10:	2b01      	cmp	r3, #1
 8005d12:	d106      	bne.n	8005d22 <HAL_RCC_OscConfig+0x2ea>
 8005d14:	4b64      	ldr	r3, [pc, #400]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d16:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d18:	4a63      	ldr	r2, [pc, #396]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d1a:	f043 0301 	orr.w	r3, r3, #1
 8005d1e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d20:	e01c      	b.n	8005d5c <HAL_RCC_OscConfig+0x324>
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	689b      	ldr	r3, [r3, #8]
 8005d26:	2b05      	cmp	r3, #5
 8005d28:	d10c      	bne.n	8005d44 <HAL_RCC_OscConfig+0x30c>
 8005d2a:	4b5f      	ldr	r3, [pc, #380]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d2e:	4a5e      	ldr	r2, [pc, #376]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d30:	f043 0304 	orr.w	r3, r3, #4
 8005d34:	6713      	str	r3, [r2, #112]	; 0x70
 8005d36:	4b5c      	ldr	r3, [pc, #368]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d3a:	4a5b      	ldr	r2, [pc, #364]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d3c:	f043 0301 	orr.w	r3, r3, #1
 8005d40:	6713      	str	r3, [r2, #112]	; 0x70
 8005d42:	e00b      	b.n	8005d5c <HAL_RCC_OscConfig+0x324>
 8005d44:	4b58      	ldr	r3, [pc, #352]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d46:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d48:	4a57      	ldr	r2, [pc, #348]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d4a:	f023 0301 	bic.w	r3, r3, #1
 8005d4e:	6713      	str	r3, [r2, #112]	; 0x70
 8005d50:	4b55      	ldr	r3, [pc, #340]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d54:	4a54      	ldr	r2, [pc, #336]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d56:	f023 0304 	bic.w	r3, r3, #4
 8005d5a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	689b      	ldr	r3, [r3, #8]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d015      	beq.n	8005d90 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d64:	f7fc ff6a 	bl	8002c3c <HAL_GetTick>
 8005d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d6a:	e00a      	b.n	8005d82 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d6c:	f7fc ff66 	bl	8002c3c <HAL_GetTick>
 8005d70:	4602      	mov	r2, r0
 8005d72:	693b      	ldr	r3, [r7, #16]
 8005d74:	1ad3      	subs	r3, r2, r3
 8005d76:	f241 3288 	movw	r2, #5000	; 0x1388
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e0cb      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005d82:	4b49      	ldr	r3, [pc, #292]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005d84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005d86:	f003 0302 	and.w	r3, r3, #2
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0ee      	beq.n	8005d6c <HAL_RCC_OscConfig+0x334>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d90:	f7fc ff54 	bl	8002c3c <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005d96:	e00a      	b.n	8005dae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005d98:	f7fc ff50 	bl	8002c3c <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	f241 3288 	movw	r2, #5000	; 0x1388
 8005da6:	4293      	cmp	r3, r2
 8005da8:	d901      	bls.n	8005dae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005daa:	2303      	movs	r3, #3
 8005dac:	e0b5      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005dae:	4b3e      	ldr	r3, [pc, #248]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005db0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005db2:	f003 0302 	and.w	r3, r3, #2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d1ee      	bne.n	8005d98 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005dba:	7dfb      	ldrb	r3, [r7, #23]
 8005dbc:	2b01      	cmp	r3, #1
 8005dbe:	d105      	bne.n	8005dcc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005dc0:	4b39      	ldr	r3, [pc, #228]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005dc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dc4:	4a38      	ldr	r2, [pc, #224]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005dc6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005dca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	699b      	ldr	r3, [r3, #24]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	f000 80a1 	beq.w	8005f18 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005dd6:	4b34      	ldr	r3, [pc, #208]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
 8005dda:	f003 030c 	and.w	r3, r3, #12
 8005dde:	2b08      	cmp	r3, #8
 8005de0:	d05c      	beq.n	8005e9c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	2b02      	cmp	r3, #2
 8005de8:	d141      	bne.n	8005e6e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005dea:	4b31      	ldr	r3, [pc, #196]	; (8005eb0 <HAL_RCC_OscConfig+0x478>)
 8005dec:	2200      	movs	r2, #0
 8005dee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005df0:	f7fc ff24 	bl	8002c3c <HAL_GetTick>
 8005df4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005df6:	e008      	b.n	8005e0a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005df8:	f7fc ff20 	bl	8002c3c <HAL_GetTick>
 8005dfc:	4602      	mov	r2, r0
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	1ad3      	subs	r3, r2, r3
 8005e02:	2b02      	cmp	r3, #2
 8005e04:	d901      	bls.n	8005e0a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005e06:	2303      	movs	r3, #3
 8005e08:	e087      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e0a:	4b27      	ldr	r3, [pc, #156]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d1f0      	bne.n	8005df8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	69da      	ldr	r2, [r3, #28]
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	431a      	orrs	r2, r3
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e24:	019b      	lsls	r3, r3, #6
 8005e26:	431a      	orrs	r2, r3
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2c:	085b      	lsrs	r3, r3, #1
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	041b      	lsls	r3, r3, #16
 8005e32:	431a      	orrs	r2, r3
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005e38:	061b      	lsls	r3, r3, #24
 8005e3a:	491b      	ldr	r1, [pc, #108]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005e40:	4b1b      	ldr	r3, [pc, #108]	; (8005eb0 <HAL_RCC_OscConfig+0x478>)
 8005e42:	2201      	movs	r2, #1
 8005e44:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e46:	f7fc fef9 	bl	8002c3c <HAL_GetTick>
 8005e4a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e4c:	e008      	b.n	8005e60 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e4e:	f7fc fef5 	bl	8002c3c <HAL_GetTick>
 8005e52:	4602      	mov	r2, r0
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	1ad3      	subs	r3, r2, r3
 8005e58:	2b02      	cmp	r3, #2
 8005e5a:	d901      	bls.n	8005e60 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005e5c:	2303      	movs	r3, #3
 8005e5e:	e05c      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005e60:	4b11      	ldr	r3, [pc, #68]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	d0f0      	beq.n	8005e4e <HAL_RCC_OscConfig+0x416>
 8005e6c:	e054      	b.n	8005f18 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005e6e:	4b10      	ldr	r3, [pc, #64]	; (8005eb0 <HAL_RCC_OscConfig+0x478>)
 8005e70:	2200      	movs	r2, #0
 8005e72:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005e74:	f7fc fee2 	bl	8002c3c <HAL_GetTick>
 8005e78:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e7a:	e008      	b.n	8005e8e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005e7c:	f7fc fede 	bl	8002c3c <HAL_GetTick>
 8005e80:	4602      	mov	r2, r0
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	1ad3      	subs	r3, r2, r3
 8005e86:	2b02      	cmp	r3, #2
 8005e88:	d901      	bls.n	8005e8e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005e8a:	2303      	movs	r3, #3
 8005e8c:	e045      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005e8e:	4b06      	ldr	r3, [pc, #24]	; (8005ea8 <HAL_RCC_OscConfig+0x470>)
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d1f0      	bne.n	8005e7c <HAL_RCC_OscConfig+0x444>
 8005e9a:	e03d      	b.n	8005f18 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	699b      	ldr	r3, [r3, #24]
 8005ea0:	2b01      	cmp	r3, #1
 8005ea2:	d107      	bne.n	8005eb4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	e038      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
 8005ea8:	40023800 	.word	0x40023800
 8005eac:	40007000 	.word	0x40007000
 8005eb0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005eb4:	4b1b      	ldr	r3, [pc, #108]	; (8005f24 <HAL_RCC_OscConfig+0x4ec>)
 8005eb6:	685b      	ldr	r3, [r3, #4]
 8005eb8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	699b      	ldr	r3, [r3, #24]
 8005ebe:	2b01      	cmp	r3, #1
 8005ec0:	d028      	beq.n	8005f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005ecc:	429a      	cmp	r2, r3
 8005ece:	d121      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005eda:	429a      	cmp	r2, r3
 8005edc:	d11a      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ede:	68fa      	ldr	r2, [r7, #12]
 8005ee0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ee4:	4013      	ands	r3, r2
 8005ee6:	687a      	ldr	r2, [r7, #4]
 8005ee8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005eea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005eec:	4293      	cmp	r3, r2
 8005eee:	d111      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005efa:	085b      	lsrs	r3, r3, #1
 8005efc:	3b01      	subs	r3, #1
 8005efe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d107      	bne.n	8005f14 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005f04:	68fb      	ldr	r3, [r7, #12]
 8005f06:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f0e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005f10:	429a      	cmp	r2, r3
 8005f12:	d001      	beq.n	8005f18 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e000      	b.n	8005f1a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005f18:	2300      	movs	r3, #0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3718      	adds	r7, #24
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
 8005f22:	bf00      	nop
 8005f24:	40023800 	.word	0x40023800

08005f28 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	b084      	sub	sp, #16
 8005f2c:	af00      	add	r7, sp, #0
 8005f2e:	6078      	str	r0, [r7, #4]
 8005f30:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005f38:	2301      	movs	r3, #1
 8005f3a:	e0cc      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005f3c:	4b68      	ldr	r3, [pc, #416]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	683a      	ldr	r2, [r7, #0]
 8005f46:	429a      	cmp	r2, r3
 8005f48:	d90c      	bls.n	8005f64 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005f4a:	4b65      	ldr	r3, [pc, #404]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f4c:	683a      	ldr	r2, [r7, #0]
 8005f4e:	b2d2      	uxtb	r2, r2
 8005f50:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005f52:	4b63      	ldr	r3, [pc, #396]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8005f54:	681b      	ldr	r3, [r3, #0]
 8005f56:	f003 0307 	and.w	r3, r3, #7
 8005f5a:	683a      	ldr	r2, [r7, #0]
 8005f5c:	429a      	cmp	r2, r3
 8005f5e:	d001      	beq.n	8005f64 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e0b8      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	f003 0302 	and.w	r3, r3, #2
 8005f6c:	2b00      	cmp	r3, #0
 8005f6e:	d020      	beq.n	8005fb2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f003 0304 	and.w	r3, r3, #4
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d005      	beq.n	8005f88 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005f7c:	4b59      	ldr	r3, [pc, #356]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f7e:	689b      	ldr	r3, [r3, #8]
 8005f80:	4a58      	ldr	r2, [pc, #352]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f82:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005f86:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 0308 	and.w	r3, r3, #8
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d005      	beq.n	8005fa0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005f94:	4b53      	ldr	r3, [pc, #332]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f96:	689b      	ldr	r3, [r3, #8]
 8005f98:	4a52      	ldr	r2, [pc, #328]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005f9a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005f9e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005fa0:	4b50      	ldr	r3, [pc, #320]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	494d      	ldr	r1, [pc, #308]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fae:	4313      	orrs	r3, r2
 8005fb0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	f003 0301 	and.w	r3, r3, #1
 8005fba:	2b00      	cmp	r3, #0
 8005fbc:	d044      	beq.n	8006048 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	685b      	ldr	r3, [r3, #4]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d107      	bne.n	8005fd6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005fc6:	4b47      	ldr	r3, [pc, #284]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d119      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005fd2:	2301      	movs	r3, #1
 8005fd4:	e07f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	685b      	ldr	r3, [r3, #4]
 8005fda:	2b02      	cmp	r3, #2
 8005fdc:	d003      	beq.n	8005fe6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d107      	bne.n	8005ff6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005fe6:	4b3f      	ldr	r3, [pc, #252]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d109      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005ff2:	2301      	movs	r3, #1
 8005ff4:	e06f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ff6:	4b3b      	ldr	r3, [pc, #236]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f003 0302 	and.w	r3, r3, #2
 8005ffe:	2b00      	cmp	r3, #0
 8006000:	d101      	bne.n	8006006 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006002:	2301      	movs	r3, #1
 8006004:	e067      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006006:	4b37      	ldr	r3, [pc, #220]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	f023 0203 	bic.w	r2, r3, #3
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	685b      	ldr	r3, [r3, #4]
 8006012:	4934      	ldr	r1, [pc, #208]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006014:	4313      	orrs	r3, r2
 8006016:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006018:	f7fc fe10 	bl	8002c3c <HAL_GetTick>
 800601c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800601e:	e00a      	b.n	8006036 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006020:	f7fc fe0c 	bl	8002c3c <HAL_GetTick>
 8006024:	4602      	mov	r2, r0
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	1ad3      	subs	r3, r2, r3
 800602a:	f241 3288 	movw	r2, #5000	; 0x1388
 800602e:	4293      	cmp	r3, r2
 8006030:	d901      	bls.n	8006036 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006032:	2303      	movs	r3, #3
 8006034:	e04f      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006036:	4b2b      	ldr	r3, [pc, #172]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 8006038:	689b      	ldr	r3, [r3, #8]
 800603a:	f003 020c 	and.w	r2, r3, #12
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	685b      	ldr	r3, [r3, #4]
 8006042:	009b      	lsls	r3, r3, #2
 8006044:	429a      	cmp	r2, r3
 8006046:	d1eb      	bne.n	8006020 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006048:	4b25      	ldr	r3, [pc, #148]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	f003 0307 	and.w	r3, r3, #7
 8006050:	683a      	ldr	r2, [r7, #0]
 8006052:	429a      	cmp	r2, r3
 8006054:	d20c      	bcs.n	8006070 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006056:	4b22      	ldr	r3, [pc, #136]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006058:	683a      	ldr	r2, [r7, #0]
 800605a:	b2d2      	uxtb	r2, r2
 800605c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800605e:	4b20      	ldr	r3, [pc, #128]	; (80060e0 <HAL_RCC_ClockConfig+0x1b8>)
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	f003 0307 	and.w	r3, r3, #7
 8006066:	683a      	ldr	r2, [r7, #0]
 8006068:	429a      	cmp	r2, r3
 800606a:	d001      	beq.n	8006070 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800606c:	2301      	movs	r3, #1
 800606e:	e032      	b.n	80060d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f003 0304 	and.w	r3, r3, #4
 8006078:	2b00      	cmp	r3, #0
 800607a:	d008      	beq.n	800608e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800607c:	4b19      	ldr	r3, [pc, #100]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800607e:	689b      	ldr	r3, [r3, #8]
 8006080:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	68db      	ldr	r3, [r3, #12]
 8006088:	4916      	ldr	r1, [pc, #88]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800608a:	4313      	orrs	r3, r2
 800608c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	f003 0308 	and.w	r3, r3, #8
 8006096:	2b00      	cmp	r3, #0
 8006098:	d009      	beq.n	80060ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800609a:	4b12      	ldr	r3, [pc, #72]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 800609c:	689b      	ldr	r3, [r3, #8]
 800609e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	691b      	ldr	r3, [r3, #16]
 80060a6:	00db      	lsls	r3, r3, #3
 80060a8:	490e      	ldr	r1, [pc, #56]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060aa:	4313      	orrs	r3, r2
 80060ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80060ae:	f000 f821 	bl	80060f4 <HAL_RCC_GetSysClockFreq>
 80060b2:	4602      	mov	r2, r0
 80060b4:	4b0b      	ldr	r3, [pc, #44]	; (80060e4 <HAL_RCC_ClockConfig+0x1bc>)
 80060b6:	689b      	ldr	r3, [r3, #8]
 80060b8:	091b      	lsrs	r3, r3, #4
 80060ba:	f003 030f 	and.w	r3, r3, #15
 80060be:	490a      	ldr	r1, [pc, #40]	; (80060e8 <HAL_RCC_ClockConfig+0x1c0>)
 80060c0:	5ccb      	ldrb	r3, [r1, r3]
 80060c2:	fa22 f303 	lsr.w	r3, r2, r3
 80060c6:	4a09      	ldr	r2, [pc, #36]	; (80060ec <HAL_RCC_ClockConfig+0x1c4>)
 80060c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80060ca:	4b09      	ldr	r3, [pc, #36]	; (80060f0 <HAL_RCC_ClockConfig+0x1c8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4618      	mov	r0, r3
 80060d0:	f7fc fd70 	bl	8002bb4 <HAL_InitTick>

  return HAL_OK;
 80060d4:	2300      	movs	r3, #0
}
 80060d6:	4618      	mov	r0, r3
 80060d8:	3710      	adds	r7, #16
 80060da:	46bd      	mov	sp, r7
 80060dc:	bd80      	pop	{r7, pc}
 80060de:	bf00      	nop
 80060e0:	40023c00 	.word	0x40023c00
 80060e4:	40023800 	.word	0x40023800
 80060e8:	08009398 	.word	0x08009398
 80060ec:	20000090 	.word	0x20000090
 80060f0:	20000094 	.word	0x20000094

080060f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80060f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80060f8:	b090      	sub	sp, #64	; 0x40
 80060fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80060fc:	2300      	movs	r3, #0
 80060fe:	637b      	str	r3, [r7, #52]	; 0x34
 8006100:	2300      	movs	r3, #0
 8006102:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006104:	2300      	movs	r3, #0
 8006106:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006108:	2300      	movs	r3, #0
 800610a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800610c:	4b59      	ldr	r3, [pc, #356]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800610e:	689b      	ldr	r3, [r3, #8]
 8006110:	f003 030c 	and.w	r3, r3, #12
 8006114:	2b08      	cmp	r3, #8
 8006116:	d00d      	beq.n	8006134 <HAL_RCC_GetSysClockFreq+0x40>
 8006118:	2b08      	cmp	r3, #8
 800611a:	f200 80a1 	bhi.w	8006260 <HAL_RCC_GetSysClockFreq+0x16c>
 800611e:	2b00      	cmp	r3, #0
 8006120:	d002      	beq.n	8006128 <HAL_RCC_GetSysClockFreq+0x34>
 8006122:	2b04      	cmp	r3, #4
 8006124:	d003      	beq.n	800612e <HAL_RCC_GetSysClockFreq+0x3a>
 8006126:	e09b      	b.n	8006260 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006128:	4b53      	ldr	r3, [pc, #332]	; (8006278 <HAL_RCC_GetSysClockFreq+0x184>)
 800612a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800612c:	e09b      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800612e:	4b53      	ldr	r3, [pc, #332]	; (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 8006130:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006132:	e098      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006134:	4b4f      	ldr	r3, [pc, #316]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006136:	685b      	ldr	r3, [r3, #4]
 8006138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800613c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800613e:	4b4d      	ldr	r3, [pc, #308]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006140:	685b      	ldr	r3, [r3, #4]
 8006142:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006146:	2b00      	cmp	r3, #0
 8006148:	d028      	beq.n	800619c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800614a:	4b4a      	ldr	r3, [pc, #296]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800614c:	685b      	ldr	r3, [r3, #4]
 800614e:	099b      	lsrs	r3, r3, #6
 8006150:	2200      	movs	r2, #0
 8006152:	623b      	str	r3, [r7, #32]
 8006154:	627a      	str	r2, [r7, #36]	; 0x24
 8006156:	6a3b      	ldr	r3, [r7, #32]
 8006158:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800615c:	2100      	movs	r1, #0
 800615e:	4b47      	ldr	r3, [pc, #284]	; (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 8006160:	fb03 f201 	mul.w	r2, r3, r1
 8006164:	2300      	movs	r3, #0
 8006166:	fb00 f303 	mul.w	r3, r0, r3
 800616a:	4413      	add	r3, r2
 800616c:	4a43      	ldr	r2, [pc, #268]	; (800627c <HAL_RCC_GetSysClockFreq+0x188>)
 800616e:	fba0 1202 	umull	r1, r2, r0, r2
 8006172:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006174:	460a      	mov	r2, r1
 8006176:	62ba      	str	r2, [r7, #40]	; 0x28
 8006178:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800617a:	4413      	add	r3, r2
 800617c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800617e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006180:	2200      	movs	r2, #0
 8006182:	61bb      	str	r3, [r7, #24]
 8006184:	61fa      	str	r2, [r7, #28]
 8006186:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800618a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800618e:	f7fa fd13 	bl	8000bb8 <__aeabi_uldivmod>
 8006192:	4602      	mov	r2, r0
 8006194:	460b      	mov	r3, r1
 8006196:	4613      	mov	r3, r2
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619a:	e053      	b.n	8006244 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800619c:	4b35      	ldr	r3, [pc, #212]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 800619e:	685b      	ldr	r3, [r3, #4]
 80061a0:	099b      	lsrs	r3, r3, #6
 80061a2:	2200      	movs	r2, #0
 80061a4:	613b      	str	r3, [r7, #16]
 80061a6:	617a      	str	r2, [r7, #20]
 80061a8:	693b      	ldr	r3, [r7, #16]
 80061aa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80061ae:	f04f 0b00 	mov.w	fp, #0
 80061b2:	4652      	mov	r2, sl
 80061b4:	465b      	mov	r3, fp
 80061b6:	f04f 0000 	mov.w	r0, #0
 80061ba:	f04f 0100 	mov.w	r1, #0
 80061be:	0159      	lsls	r1, r3, #5
 80061c0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80061c4:	0150      	lsls	r0, r2, #5
 80061c6:	4602      	mov	r2, r0
 80061c8:	460b      	mov	r3, r1
 80061ca:	ebb2 080a 	subs.w	r8, r2, sl
 80061ce:	eb63 090b 	sbc.w	r9, r3, fp
 80061d2:	f04f 0200 	mov.w	r2, #0
 80061d6:	f04f 0300 	mov.w	r3, #0
 80061da:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80061de:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80061e2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80061e6:	ebb2 0408 	subs.w	r4, r2, r8
 80061ea:	eb63 0509 	sbc.w	r5, r3, r9
 80061ee:	f04f 0200 	mov.w	r2, #0
 80061f2:	f04f 0300 	mov.w	r3, #0
 80061f6:	00eb      	lsls	r3, r5, #3
 80061f8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061fc:	00e2      	lsls	r2, r4, #3
 80061fe:	4614      	mov	r4, r2
 8006200:	461d      	mov	r5, r3
 8006202:	eb14 030a 	adds.w	r3, r4, sl
 8006206:	603b      	str	r3, [r7, #0]
 8006208:	eb45 030b 	adc.w	r3, r5, fp
 800620c:	607b      	str	r3, [r7, #4]
 800620e:	f04f 0200 	mov.w	r2, #0
 8006212:	f04f 0300 	mov.w	r3, #0
 8006216:	e9d7 4500 	ldrd	r4, r5, [r7]
 800621a:	4629      	mov	r1, r5
 800621c:	028b      	lsls	r3, r1, #10
 800621e:	4621      	mov	r1, r4
 8006220:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8006224:	4621      	mov	r1, r4
 8006226:	028a      	lsls	r2, r1, #10
 8006228:	4610      	mov	r0, r2
 800622a:	4619      	mov	r1, r3
 800622c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800622e:	2200      	movs	r2, #0
 8006230:	60bb      	str	r3, [r7, #8]
 8006232:	60fa      	str	r2, [r7, #12]
 8006234:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006238:	f7fa fcbe 	bl	8000bb8 <__aeabi_uldivmod>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4613      	mov	r3, r2
 8006242:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006244:	4b0b      	ldr	r3, [pc, #44]	; (8006274 <HAL_RCC_GetSysClockFreq+0x180>)
 8006246:	685b      	ldr	r3, [r3, #4]
 8006248:	0c1b      	lsrs	r3, r3, #16
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	3301      	adds	r3, #1
 8006250:	005b      	lsls	r3, r3, #1
 8006252:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8006254:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006256:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006258:	fbb2 f3f3 	udiv	r3, r2, r3
 800625c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800625e:	e002      	b.n	8006266 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006260:	4b05      	ldr	r3, [pc, #20]	; (8006278 <HAL_RCC_GetSysClockFreq+0x184>)
 8006262:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006264:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006266:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006268:	4618      	mov	r0, r3
 800626a:	3740      	adds	r7, #64	; 0x40
 800626c:	46bd      	mov	sp, r7
 800626e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006272:	bf00      	nop
 8006274:	40023800 	.word	0x40023800
 8006278:	00f42400 	.word	0x00f42400
 800627c:	017d7840 	.word	0x017d7840

08006280 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006280:	b480      	push	{r7}
 8006282:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006284:	4b03      	ldr	r3, [pc, #12]	; (8006294 <HAL_RCC_GetHCLKFreq+0x14>)
 8006286:	681b      	ldr	r3, [r3, #0]
}
 8006288:	4618      	mov	r0, r3
 800628a:	46bd      	mov	sp, r7
 800628c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006290:	4770      	bx	lr
 8006292:	bf00      	nop
 8006294:	20000090 	.word	0x20000090

08006298 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006298:	b580      	push	{r7, lr}
 800629a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800629c:	f7ff fff0 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062a0:	4602      	mov	r2, r0
 80062a2:	4b05      	ldr	r3, [pc, #20]	; (80062b8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80062a4:	689b      	ldr	r3, [r3, #8]
 80062a6:	0a9b      	lsrs	r3, r3, #10
 80062a8:	f003 0307 	and.w	r3, r3, #7
 80062ac:	4903      	ldr	r1, [pc, #12]	; (80062bc <HAL_RCC_GetPCLK1Freq+0x24>)
 80062ae:	5ccb      	ldrb	r3, [r1, r3]
 80062b0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062b4:	4618      	mov	r0, r3
 80062b6:	bd80      	pop	{r7, pc}
 80062b8:	40023800 	.word	0x40023800
 80062bc:	080093a8 	.word	0x080093a8

080062c0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80062c0:	b580      	push	{r7, lr}
 80062c2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80062c4:	f7ff ffdc 	bl	8006280 <HAL_RCC_GetHCLKFreq>
 80062c8:	4602      	mov	r2, r0
 80062ca:	4b05      	ldr	r3, [pc, #20]	; (80062e0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80062cc:	689b      	ldr	r3, [r3, #8]
 80062ce:	0b5b      	lsrs	r3, r3, #13
 80062d0:	f003 0307 	and.w	r3, r3, #7
 80062d4:	4903      	ldr	r1, [pc, #12]	; (80062e4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80062d6:	5ccb      	ldrb	r3, [r1, r3]
 80062d8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80062dc:	4618      	mov	r0, r3
 80062de:	bd80      	pop	{r7, pc}
 80062e0:	40023800 	.word	0x40023800
 80062e4:	080093a8 	.word	0x080093a8

080062e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80062e8:	b580      	push	{r7, lr}
 80062ea:	b082      	sub	sp, #8
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d101      	bne.n	80062fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
 80062f8:	e041      	b.n	800637e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006300:	b2db      	uxtb	r3, r3
 8006302:	2b00      	cmp	r3, #0
 8006304:	d106      	bne.n	8006314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	2200      	movs	r2, #0
 800630a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f7fc faf2 	bl	80028f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	2202      	movs	r2, #2
 8006318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	681a      	ldr	r2, [r3, #0]
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f000 faf0 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	2201      	movs	r2, #1
 8006330:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	2201      	movs	r2, #1
 8006338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2201      	movs	r2, #1
 8006340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	2201      	movs	r2, #1
 8006350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	2201      	movs	r2, #1
 8006360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	2201      	movs	r2, #1
 8006370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800637c:	2300      	movs	r3, #0
}
 800637e:	4618      	mov	r0, r3
 8006380:	3708      	adds	r7, #8
 8006382:	46bd      	mov	sp, r7
 8006384:	bd80      	pop	{r7, pc}

08006386 <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8006386:	b580      	push	{r7, lr}
 8006388:	b082      	sub	sp, #8
 800638a:	af00      	add	r7, sp, #0
 800638c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2b00      	cmp	r3, #0
 8006392:	d101      	bne.n	8006398 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8006394:	2301      	movs	r3, #1
 8006396:	e041      	b.n	800641c <HAL_TIM_OC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b00      	cmp	r3, #0
 80063a2:	d106      	bne.n	80063b2 <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 80063ac:	6878      	ldr	r0, [r7, #4]
 80063ae:	f000 f839 	bl	8006424 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	2202      	movs	r2, #2
 80063b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 80063ba:	687b      	ldr	r3, [r7, #4]
 80063bc:	681a      	ldr	r2, [r3, #0]
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	3304      	adds	r3, #4
 80063c2:	4619      	mov	r1, r3
 80063c4:	4610      	mov	r0, r2
 80063c6:	f000 faa1 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	2201      	movs	r2, #1
 80063ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2201      	movs	r2, #1
 80063d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	2201      	movs	r2, #1
 80063de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	2201      	movs	r2, #1
 80063e6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	2201      	movs	r2, #1
 80063ee:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	2201      	movs	r2, #1
 80063fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	2201      	movs	r2, #1
 8006406:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2201      	movs	r2, #1
 8006416:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800641a:	2300      	movs	r3, #0
}
 800641c:	4618      	mov	r0, r3
 800641e:	3708      	adds	r7, #8
 8006420:	46bd      	mov	sp, r7
 8006422:	bd80      	pop	{r7, pc}

08006424 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8006424:	b480      	push	{r7}
 8006426:	b083      	sub	sp, #12
 8006428:	af00      	add	r7, sp, #0
 800642a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 800642c:	bf00      	nop
 800642e:	370c      	adds	r7, #12
 8006430:	46bd      	mov	sp, r7
 8006432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006436:	4770      	bx	lr

08006438 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006438:	b580      	push	{r7, lr}
 800643a:	b082      	sub	sp, #8
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d101      	bne.n	800644a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006446:	2301      	movs	r3, #1
 8006448:	e041      	b.n	80064ce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006450:	b2db      	uxtb	r3, r3
 8006452:	2b00      	cmp	r3, #0
 8006454:	d106      	bne.n	8006464 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	2200      	movs	r2, #0
 800645a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f839 	bl	80064d6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	2202      	movs	r2, #2
 8006468:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	3304      	adds	r3, #4
 8006474:	4619      	mov	r1, r3
 8006476:	4610      	mov	r0, r2
 8006478:	f000 fa48 	bl	800690c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2201      	movs	r2, #1
 8006488:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2201      	movs	r2, #1
 80064a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	2201      	movs	r2, #1
 80064b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2201      	movs	r2, #1
 80064b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	2201      	movs	r2, #1
 80064c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2201      	movs	r2, #1
 80064c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064cc:	2300      	movs	r3, #0
}
 80064ce:	4618      	mov	r0, r3
 80064d0:	3708      	adds	r7, #8
 80064d2:	46bd      	mov	sp, r7
 80064d4:	bd80      	pop	{r7, pc}

080064d6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80064d6:	b480      	push	{r7}
 80064d8:	b083      	sub	sp, #12
 80064da:	af00      	add	r7, sp, #0
 80064dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80064de:	bf00      	nop
 80064e0:	370c      	adds	r7, #12
 80064e2:	46bd      	mov	sp, r7
 80064e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e8:	4770      	bx	lr
	...

080064ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80064ec:	b580      	push	{r7, lr}
 80064ee:	b084      	sub	sp, #16
 80064f0:	af00      	add	r7, sp, #0
 80064f2:	6078      	str	r0, [r7, #4]
 80064f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d109      	bne.n	8006510 <HAL_TIM_PWM_Start+0x24>
 80064fc:	687b      	ldr	r3, [r7, #4]
 80064fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006502:	b2db      	uxtb	r3, r3
 8006504:	2b01      	cmp	r3, #1
 8006506:	bf14      	ite	ne
 8006508:	2301      	movne	r3, #1
 800650a:	2300      	moveq	r3, #0
 800650c:	b2db      	uxtb	r3, r3
 800650e:	e022      	b.n	8006556 <HAL_TIM_PWM_Start+0x6a>
 8006510:	683b      	ldr	r3, [r7, #0]
 8006512:	2b04      	cmp	r3, #4
 8006514:	d109      	bne.n	800652a <HAL_TIM_PWM_Start+0x3e>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800651c:	b2db      	uxtb	r3, r3
 800651e:	2b01      	cmp	r3, #1
 8006520:	bf14      	ite	ne
 8006522:	2301      	movne	r3, #1
 8006524:	2300      	moveq	r3, #0
 8006526:	b2db      	uxtb	r3, r3
 8006528:	e015      	b.n	8006556 <HAL_TIM_PWM_Start+0x6a>
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	2b08      	cmp	r3, #8
 800652e:	d109      	bne.n	8006544 <HAL_TIM_PWM_Start+0x58>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006536:	b2db      	uxtb	r3, r3
 8006538:	2b01      	cmp	r3, #1
 800653a:	bf14      	ite	ne
 800653c:	2301      	movne	r3, #1
 800653e:	2300      	moveq	r3, #0
 8006540:	b2db      	uxtb	r3, r3
 8006542:	e008      	b.n	8006556 <HAL_TIM_PWM_Start+0x6a>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800654a:	b2db      	uxtb	r3, r3
 800654c:	2b01      	cmp	r3, #1
 800654e:	bf14      	ite	ne
 8006550:	2301      	movne	r3, #1
 8006552:	2300      	moveq	r3, #0
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b00      	cmp	r3, #0
 8006558:	d001      	beq.n	800655e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800655a:	2301      	movs	r3, #1
 800655c:	e068      	b.n	8006630 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800655e:	683b      	ldr	r3, [r7, #0]
 8006560:	2b00      	cmp	r3, #0
 8006562:	d104      	bne.n	800656e <HAL_TIM_PWM_Start+0x82>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	2202      	movs	r2, #2
 8006568:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800656c:	e013      	b.n	8006596 <HAL_TIM_PWM_Start+0xaa>
 800656e:	683b      	ldr	r3, [r7, #0]
 8006570:	2b04      	cmp	r3, #4
 8006572:	d104      	bne.n	800657e <HAL_TIM_PWM_Start+0x92>
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800657c:	e00b      	b.n	8006596 <HAL_TIM_PWM_Start+0xaa>
 800657e:	683b      	ldr	r3, [r7, #0]
 8006580:	2b08      	cmp	r3, #8
 8006582:	d104      	bne.n	800658e <HAL_TIM_PWM_Start+0xa2>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2202      	movs	r2, #2
 8006588:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800658c:	e003      	b.n	8006596 <HAL_TIM_PWM_Start+0xaa>
 800658e:	687b      	ldr	r3, [r7, #4]
 8006590:	2202      	movs	r2, #2
 8006592:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	2201      	movs	r2, #1
 800659c:	6839      	ldr	r1, [r7, #0]
 800659e:	4618      	mov	r0, r3
 80065a0:	f000 fcd0 	bl	8006f44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	4a23      	ldr	r2, [pc, #140]	; (8006638 <HAL_TIM_PWM_Start+0x14c>)
 80065aa:	4293      	cmp	r3, r2
 80065ac:	d107      	bne.n	80065be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	4a1d      	ldr	r2, [pc, #116]	; (8006638 <HAL_TIM_PWM_Start+0x14c>)
 80065c4:	4293      	cmp	r3, r2
 80065c6:	d018      	beq.n	80065fa <HAL_TIM_PWM_Start+0x10e>
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065d0:	d013      	beq.n	80065fa <HAL_TIM_PWM_Start+0x10e>
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	4a19      	ldr	r2, [pc, #100]	; (800663c <HAL_TIM_PWM_Start+0x150>)
 80065d8:	4293      	cmp	r3, r2
 80065da:	d00e      	beq.n	80065fa <HAL_TIM_PWM_Start+0x10e>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	4a17      	ldr	r2, [pc, #92]	; (8006640 <HAL_TIM_PWM_Start+0x154>)
 80065e2:	4293      	cmp	r3, r2
 80065e4:	d009      	beq.n	80065fa <HAL_TIM_PWM_Start+0x10e>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	681b      	ldr	r3, [r3, #0]
 80065ea:	4a16      	ldr	r2, [pc, #88]	; (8006644 <HAL_TIM_PWM_Start+0x158>)
 80065ec:	4293      	cmp	r3, r2
 80065ee:	d004      	beq.n	80065fa <HAL_TIM_PWM_Start+0x10e>
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	4a14      	ldr	r2, [pc, #80]	; (8006648 <HAL_TIM_PWM_Start+0x15c>)
 80065f6:	4293      	cmp	r3, r2
 80065f8:	d111      	bne.n	800661e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	689b      	ldr	r3, [r3, #8]
 8006600:	f003 0307 	and.w	r3, r3, #7
 8006604:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	2b06      	cmp	r3, #6
 800660a:	d010      	beq.n	800662e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	681a      	ldr	r2, [r3, #0]
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f042 0201 	orr.w	r2, r2, #1
 800661a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800661c:	e007      	b.n	800662e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f042 0201 	orr.w	r2, r2, #1
 800662c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	3710      	adds	r7, #16
 8006634:	46bd      	mov	sp, r7
 8006636:	bd80      	pop	{r7, pc}
 8006638:	40010000 	.word	0x40010000
 800663c:	40000400 	.word	0x40000400
 8006640:	40000800 	.word	0x40000800
 8006644:	40000c00 	.word	0x40000c00
 8006648:	40014000 	.word	0x40014000

0800664c <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 800664c:	b580      	push	{r7, lr}
 800664e:	b086      	sub	sp, #24
 8006650:	af00      	add	r7, sp, #0
 8006652:	60f8      	str	r0, [r7, #12]
 8006654:	60b9      	str	r1, [r7, #8]
 8006656:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006658:	2300      	movs	r3, #0
 800665a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006662:	2b01      	cmp	r3, #1
 8006664:	d101      	bne.n	800666a <HAL_TIM_OC_ConfigChannel+0x1e>
 8006666:	2302      	movs	r3, #2
 8006668:	e048      	b.n	80066fc <HAL_TIM_OC_ConfigChannel+0xb0>
 800666a:	68fb      	ldr	r3, [r7, #12]
 800666c:	2201      	movs	r2, #1
 800666e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d839      	bhi.n	80066ec <HAL_TIM_OC_ConfigChannel+0xa0>
 8006678:	a201      	add	r2, pc, #4	; (adr r2, 8006680 <HAL_TIM_OC_ConfigChannel+0x34>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066ed 	.word	0x080066ed
 8006688:	080066ed 	.word	0x080066ed
 800668c:	080066ed 	.word	0x080066ed
 8006690:	080066c3 	.word	0x080066c3
 8006694:	080066ed 	.word	0x080066ed
 8006698:	080066ed 	.word	0x080066ed
 800669c:	080066ed 	.word	0x080066ed
 80066a0:	080066d1 	.word	0x080066d1
 80066a4:	080066ed 	.word	0x080066ed
 80066a8:	080066ed 	.word	0x080066ed
 80066ac:	080066ed 	.word	0x080066ed
 80066b0:	080066df 	.word	0x080066df
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	681b      	ldr	r3, [r3, #0]
 80066b8:	68b9      	ldr	r1, [r7, #8]
 80066ba:	4618      	mov	r0, r3
 80066bc:	f000 f9a6 	bl	8006a0c <TIM_OC1_SetConfig>
      break;
 80066c0:	e017      	b.n	80066f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68b9      	ldr	r1, [r7, #8]
 80066c8:	4618      	mov	r0, r3
 80066ca:	f000 fa05 	bl	8006ad8 <TIM_OC2_SetConfig>
      break;
 80066ce:	e010      	b.n	80066f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	68b9      	ldr	r1, [r7, #8]
 80066d6:	4618      	mov	r0, r3
 80066d8:	f000 fa6a 	bl	8006bb0 <TIM_OC3_SetConfig>
      break;
 80066dc:	e009      	b.n	80066f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f000 facd 	bl	8006c84 <TIM_OC4_SetConfig>
      break;
 80066ea:	e002      	b.n	80066f2 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      status = HAL_ERROR;
 80066ec:	2301      	movs	r3, #1
 80066ee:	75fb      	strb	r3, [r7, #23]
      break;
 80066f0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	2200      	movs	r2, #0
 80066f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066fa:	7dfb      	ldrb	r3, [r7, #23]
}
 80066fc:	4618      	mov	r0, r3
 80066fe:	3718      	adds	r7, #24
 8006700:	46bd      	mov	sp, r7
 8006702:	bd80      	pop	{r7, pc}

08006704 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006704:	b580      	push	{r7, lr}
 8006706:	b086      	sub	sp, #24
 8006708:	af00      	add	r7, sp, #0
 800670a:	60f8      	str	r0, [r7, #12]
 800670c:	60b9      	str	r1, [r7, #8]
 800670e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006710:	2300      	movs	r3, #0
 8006712:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800671a:	2b01      	cmp	r3, #1
 800671c:	d101      	bne.n	8006722 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800671e:	2302      	movs	r3, #2
 8006720:	e0ae      	b.n	8006880 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	2201      	movs	r2, #1
 8006726:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	2b0c      	cmp	r3, #12
 800672e:	f200 809f 	bhi.w	8006870 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006732:	a201      	add	r2, pc, #4	; (adr r2, 8006738 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006734:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006738:	0800676d 	.word	0x0800676d
 800673c:	08006871 	.word	0x08006871
 8006740:	08006871 	.word	0x08006871
 8006744:	08006871 	.word	0x08006871
 8006748:	080067ad 	.word	0x080067ad
 800674c:	08006871 	.word	0x08006871
 8006750:	08006871 	.word	0x08006871
 8006754:	08006871 	.word	0x08006871
 8006758:	080067ef 	.word	0x080067ef
 800675c:	08006871 	.word	0x08006871
 8006760:	08006871 	.word	0x08006871
 8006764:	08006871 	.word	0x08006871
 8006768:	0800682f 	.word	0x0800682f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	68b9      	ldr	r1, [r7, #8]
 8006772:	4618      	mov	r0, r3
 8006774:	f000 f94a 	bl	8006a0c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	699a      	ldr	r2, [r3, #24]
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	f042 0208 	orr.w	r2, r2, #8
 8006786:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	699a      	ldr	r2, [r3, #24]
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0204 	bic.w	r2, r2, #4
 8006796:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006798:	68fb      	ldr	r3, [r7, #12]
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	6999      	ldr	r1, [r3, #24]
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	691a      	ldr	r2, [r3, #16]
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	430a      	orrs	r2, r1
 80067a8:	619a      	str	r2, [r3, #24]
      break;
 80067aa:	e064      	b.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	68b9      	ldr	r1, [r7, #8]
 80067b2:	4618      	mov	r0, r3
 80067b4:	f000 f990 	bl	8006ad8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80067b8:	68fb      	ldr	r3, [r7, #12]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	699a      	ldr	r2, [r3, #24]
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80067c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80067c8:	68fb      	ldr	r3, [r7, #12]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	699a      	ldr	r2, [r3, #24]
 80067ce:	68fb      	ldr	r3, [r7, #12]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80067d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80067d8:	68fb      	ldr	r3, [r7, #12]
 80067da:	681b      	ldr	r3, [r3, #0]
 80067dc:	6999      	ldr	r1, [r3, #24]
 80067de:	68bb      	ldr	r3, [r7, #8]
 80067e0:	691b      	ldr	r3, [r3, #16]
 80067e2:	021a      	lsls	r2, r3, #8
 80067e4:	68fb      	ldr	r3, [r7, #12]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	430a      	orrs	r2, r1
 80067ea:	619a      	str	r2, [r3, #24]
      break;
 80067ec:	e043      	b.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	68b9      	ldr	r1, [r7, #8]
 80067f4:	4618      	mov	r0, r3
 80067f6:	f000 f9db 	bl	8006bb0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	69da      	ldr	r2, [r3, #28]
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	f042 0208 	orr.w	r2, r2, #8
 8006808:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	69da      	ldr	r2, [r3, #28]
 8006810:	68fb      	ldr	r3, [r7, #12]
 8006812:	681b      	ldr	r3, [r3, #0]
 8006814:	f022 0204 	bic.w	r2, r2, #4
 8006818:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	69d9      	ldr	r1, [r3, #28]
 8006820:	68bb      	ldr	r3, [r7, #8]
 8006822:	691a      	ldr	r2, [r3, #16]
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	430a      	orrs	r2, r1
 800682a:	61da      	str	r2, [r3, #28]
      break;
 800682c:	e023      	b.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	68b9      	ldr	r1, [r7, #8]
 8006834:	4618      	mov	r0, r3
 8006836:	f000 fa25 	bl	8006c84 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	69da      	ldr	r2, [r3, #28]
 8006840:	68fb      	ldr	r3, [r7, #12]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006848:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800684a:	68fb      	ldr	r3, [r7, #12]
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	69da      	ldr	r2, [r3, #28]
 8006850:	68fb      	ldr	r3, [r7, #12]
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006858:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800685a:	68fb      	ldr	r3, [r7, #12]
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	69d9      	ldr	r1, [r3, #28]
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	021a      	lsls	r2, r3, #8
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	430a      	orrs	r2, r1
 800686c:	61da      	str	r2, [r3, #28]
      break;
 800686e:	e002      	b.n	8006876 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	75fb      	strb	r3, [r7, #23]
      break;
 8006874:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006876:	68fb      	ldr	r3, [r7, #12]
 8006878:	2200      	movs	r2, #0
 800687a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800687e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006880:	4618      	mov	r0, r3
 8006882:	3718      	adds	r7, #24
 8006884:	46bd      	mov	sp, r7
 8006886:	bd80      	pop	{r7, pc}

08006888 <HAL_TIM_SlaveConfigSynchro>:
  *         timer input or external trigger input) and the Slave mode
  *         (Disable, Reset, Gated, Trigger, External clock mode 1).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_SlaveConfigSynchro(TIM_HandleTypeDef *htim, TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006888:	b580      	push	{r7, lr}
 800688a:	b082      	sub	sp, #8
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
 8006890:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_SLAVE_INSTANCE(htim->Instance));
  assert_param(IS_TIM_SLAVE_MODE(sSlaveConfig->SlaveMode));
  assert_param(IS_TIM_TRIGGER_SELECTION(sSlaveConfig->InputTrigger));

  __HAL_LOCK(htim);
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006898:	2b01      	cmp	r3, #1
 800689a:	d101      	bne.n	80068a0 <HAL_TIM_SlaveConfigSynchro+0x18>
 800689c:	2302      	movs	r3, #2
 800689e:	e031      	b.n	8006904 <HAL_TIM_SlaveConfigSynchro+0x7c>
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	2201      	movs	r2, #1
 80068a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	2202      	movs	r2, #2
 80068ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (TIM_SlaveTimer_SetConfig(htim, sSlaveConfig) != HAL_OK)
 80068b0:	6839      	ldr	r1, [r7, #0]
 80068b2:	6878      	ldr	r0, [r7, #4]
 80068b4:	f000 fa36 	bl	8006d24 <TIM_SlaveTimer_SetConfig>
 80068b8:	4603      	mov	r3, r0
 80068ba:	2b00      	cmp	r3, #0
 80068bc:	d009      	beq.n	80068d2 <HAL_TIM_SlaveConfigSynchro+0x4a>
  {
    htim->State = HAL_TIM_STATE_READY;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	2201      	movs	r2, #1
 80068c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	2200      	movs	r2, #0
 80068ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e018      	b.n	8006904 <HAL_TIM_SlaveConfigSynchro+0x7c>
  }

  /* Disable Trigger Interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	68da      	ldr	r2, [r3, #12]
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80068e0:	60da      	str	r2, [r3, #12]

  /* Disable Trigger DMA request */
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	68da      	ldr	r2, [r3, #12]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80068f0:	60da      	str	r2, [r3, #12]

  htim->State = HAL_TIM_STATE_READY;
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	2201      	movs	r2, #1
 80068f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	2200      	movs	r2, #0
 80068fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006902:	2300      	movs	r3, #0
}
 8006904:	4618      	mov	r0, r3
 8006906:	3708      	adds	r7, #8
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}

0800690c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800690c:	b480      	push	{r7}
 800690e:	b085      	sub	sp, #20
 8006910:	af00      	add	r7, sp, #0
 8006912:	6078      	str	r0, [r7, #4]
 8006914:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	4a34      	ldr	r2, [pc, #208]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 8006920:	4293      	cmp	r3, r2
 8006922:	d00f      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800692a:	d00b      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	4a31      	ldr	r2, [pc, #196]	; (80069f4 <TIM_Base_SetConfig+0xe8>)
 8006930:	4293      	cmp	r3, r2
 8006932:	d007      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	4a30      	ldr	r2, [pc, #192]	; (80069f8 <TIM_Base_SetConfig+0xec>)
 8006938:	4293      	cmp	r3, r2
 800693a:	d003      	beq.n	8006944 <TIM_Base_SetConfig+0x38>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	4a2f      	ldr	r2, [pc, #188]	; (80069fc <TIM_Base_SetConfig+0xf0>)
 8006940:	4293      	cmp	r3, r2
 8006942:	d108      	bne.n	8006956 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800694a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800694c:	683b      	ldr	r3, [r7, #0]
 800694e:	685b      	ldr	r3, [r3, #4]
 8006950:	68fa      	ldr	r2, [r7, #12]
 8006952:	4313      	orrs	r3, r2
 8006954:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	4a25      	ldr	r2, [pc, #148]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d01b      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006964:	d017      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	4a22      	ldr	r2, [pc, #136]	; (80069f4 <TIM_Base_SetConfig+0xe8>)
 800696a:	4293      	cmp	r3, r2
 800696c:	d013      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	4a21      	ldr	r2, [pc, #132]	; (80069f8 <TIM_Base_SetConfig+0xec>)
 8006972:	4293      	cmp	r3, r2
 8006974:	d00f      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	4a20      	ldr	r2, [pc, #128]	; (80069fc <TIM_Base_SetConfig+0xf0>)
 800697a:	4293      	cmp	r3, r2
 800697c:	d00b      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	4a1f      	ldr	r2, [pc, #124]	; (8006a00 <TIM_Base_SetConfig+0xf4>)
 8006982:	4293      	cmp	r3, r2
 8006984:	d007      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	4a1e      	ldr	r2, [pc, #120]	; (8006a04 <TIM_Base_SetConfig+0xf8>)
 800698a:	4293      	cmp	r3, r2
 800698c:	d003      	beq.n	8006996 <TIM_Base_SetConfig+0x8a>
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	4a1d      	ldr	r2, [pc, #116]	; (8006a08 <TIM_Base_SetConfig+0xfc>)
 8006992:	4293      	cmp	r3, r2
 8006994:	d108      	bne.n	80069a8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006996:	68fb      	ldr	r3, [r7, #12]
 8006998:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800699c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4313      	orrs	r3, r2
 80069a6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80069ae:	683b      	ldr	r3, [r7, #0]
 80069b0:	695b      	ldr	r3, [r3, #20]
 80069b2:	4313      	orrs	r3, r2
 80069b4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	68fa      	ldr	r2, [r7, #12]
 80069ba:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80069bc:	683b      	ldr	r3, [r7, #0]
 80069be:	689a      	ldr	r2, [r3, #8]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80069c4:	683b      	ldr	r3, [r7, #0]
 80069c6:	681a      	ldr	r2, [r3, #0]
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	4a08      	ldr	r2, [pc, #32]	; (80069f0 <TIM_Base_SetConfig+0xe4>)
 80069d0:	4293      	cmp	r3, r2
 80069d2:	d103      	bne.n	80069dc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	691a      	ldr	r2, [r3, #16]
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	615a      	str	r2, [r3, #20]
}
 80069e2:	bf00      	nop
 80069e4:	3714      	adds	r7, #20
 80069e6:	46bd      	mov	sp, r7
 80069e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ec:	4770      	bx	lr
 80069ee:	bf00      	nop
 80069f0:	40010000 	.word	0x40010000
 80069f4:	40000400 	.word	0x40000400
 80069f8:	40000800 	.word	0x40000800
 80069fc:	40000c00 	.word	0x40000c00
 8006a00:	40014000 	.word	0x40014000
 8006a04:	40014400 	.word	0x40014400
 8006a08:	40014800 	.word	0x40014800

08006a0c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a0c:	b480      	push	{r7}
 8006a0e:	b087      	sub	sp, #28
 8006a10:	af00      	add	r7, sp, #0
 8006a12:	6078      	str	r0, [r7, #4]
 8006a14:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6a1b      	ldr	r3, [r3, #32]
 8006a1a:	f023 0201 	bic.w	r2, r3, #1
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	6a1b      	ldr	r3, [r3, #32]
 8006a26:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	685b      	ldr	r3, [r3, #4]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	699b      	ldr	r3, [r3, #24]
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006a34:	68fb      	ldr	r3, [r7, #12]
 8006a36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a3a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	f023 0303 	bic.w	r3, r3, #3
 8006a42:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006a44:	683b      	ldr	r3, [r7, #0]
 8006a46:	681b      	ldr	r3, [r3, #0]
 8006a48:	68fa      	ldr	r2, [r7, #12]
 8006a4a:	4313      	orrs	r3, r2
 8006a4c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	f023 0302 	bic.w	r3, r3, #2
 8006a54:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a56:	683b      	ldr	r3, [r7, #0]
 8006a58:	689b      	ldr	r3, [r3, #8]
 8006a5a:	697a      	ldr	r2, [r7, #20]
 8006a5c:	4313      	orrs	r3, r2
 8006a5e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	4a1c      	ldr	r2, [pc, #112]	; (8006ad4 <TIM_OC1_SetConfig+0xc8>)
 8006a64:	4293      	cmp	r3, r2
 8006a66:	d10c      	bne.n	8006a82 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a68:	697b      	ldr	r3, [r7, #20]
 8006a6a:	f023 0308 	bic.w	r3, r3, #8
 8006a6e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	68db      	ldr	r3, [r3, #12]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	4313      	orrs	r3, r2
 8006a78:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a7a:	697b      	ldr	r3, [r7, #20]
 8006a7c:	f023 0304 	bic.w	r3, r3, #4
 8006a80:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	4a13      	ldr	r2, [pc, #76]	; (8006ad4 <TIM_OC1_SetConfig+0xc8>)
 8006a86:	4293      	cmp	r3, r2
 8006a88:	d111      	bne.n	8006aae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a90:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a92:	693b      	ldr	r3, [r7, #16]
 8006a94:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a98:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a9a:	683b      	ldr	r3, [r7, #0]
 8006a9c:	695b      	ldr	r3, [r3, #20]
 8006a9e:	693a      	ldr	r2, [r7, #16]
 8006aa0:	4313      	orrs	r3, r2
 8006aa2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	693a      	ldr	r2, [r7, #16]
 8006aaa:	4313      	orrs	r3, r2
 8006aac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	693a      	ldr	r2, [r7, #16]
 8006ab2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006aba:	683b      	ldr	r3, [r7, #0]
 8006abc:	685a      	ldr	r2, [r3, #4]
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	697a      	ldr	r2, [r7, #20]
 8006ac6:	621a      	str	r2, [r3, #32]
}
 8006ac8:	bf00      	nop
 8006aca:	371c      	adds	r7, #28
 8006acc:	46bd      	mov	sp, r7
 8006ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad2:	4770      	bx	lr
 8006ad4:	40010000 	.word	0x40010000

08006ad8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006ad8:	b480      	push	{r7}
 8006ada:	b087      	sub	sp, #28
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
 8006ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	6a1b      	ldr	r3, [r3, #32]
 8006ae6:	f023 0210 	bic.w	r2, r3, #16
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	6a1b      	ldr	r3, [r3, #32]
 8006af2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	685b      	ldr	r3, [r3, #4]
 8006af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	699b      	ldr	r3, [r3, #24]
 8006afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b0e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006b10:	683b      	ldr	r3, [r7, #0]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	021b      	lsls	r3, r3, #8
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	4313      	orrs	r3, r2
 8006b1a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006b1c:	697b      	ldr	r3, [r7, #20]
 8006b1e:	f023 0320 	bic.w	r3, r3, #32
 8006b22:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006b24:	683b      	ldr	r3, [r7, #0]
 8006b26:	689b      	ldr	r3, [r3, #8]
 8006b28:	011b      	lsls	r3, r3, #4
 8006b2a:	697a      	ldr	r2, [r7, #20]
 8006b2c:	4313      	orrs	r3, r2
 8006b2e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	4a1e      	ldr	r2, [pc, #120]	; (8006bac <TIM_OC2_SetConfig+0xd4>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d10d      	bne.n	8006b54 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006b38:	697b      	ldr	r3, [r7, #20]
 8006b3a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	68db      	ldr	r3, [r3, #12]
 8006b44:	011b      	lsls	r3, r3, #4
 8006b46:	697a      	ldr	r2, [r7, #20]
 8006b48:	4313      	orrs	r3, r2
 8006b4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b52:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	4a15      	ldr	r2, [pc, #84]	; (8006bac <TIM_OC2_SetConfig+0xd4>)
 8006b58:	4293      	cmp	r3, r2
 8006b5a:	d113      	bne.n	8006b84 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b5c:	693b      	ldr	r3, [r7, #16]
 8006b5e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b62:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b64:	693b      	ldr	r3, [r7, #16]
 8006b66:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b6a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	009b      	lsls	r3, r3, #2
 8006b72:	693a      	ldr	r2, [r7, #16]
 8006b74:	4313      	orrs	r3, r2
 8006b76:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b78:	683b      	ldr	r3, [r7, #0]
 8006b7a:	699b      	ldr	r3, [r3, #24]
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	693a      	ldr	r2, [r7, #16]
 8006b80:	4313      	orrs	r3, r2
 8006b82:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	693a      	ldr	r2, [r7, #16]
 8006b88:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	68fa      	ldr	r2, [r7, #12]
 8006b8e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b90:	683b      	ldr	r3, [r7, #0]
 8006b92:	685a      	ldr	r2, [r3, #4]
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	697a      	ldr	r2, [r7, #20]
 8006b9c:	621a      	str	r2, [r3, #32]
}
 8006b9e:	bf00      	nop
 8006ba0:	371c      	adds	r7, #28
 8006ba2:	46bd      	mov	sp, r7
 8006ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba8:	4770      	bx	lr
 8006baa:	bf00      	nop
 8006bac:	40010000 	.word	0x40010000

08006bb0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b087      	sub	sp, #28
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	6078      	str	r0, [r7, #4]
 8006bb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	6a1b      	ldr	r3, [r3, #32]
 8006bca:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006bcc:	687b      	ldr	r3, [r7, #4]
 8006bce:	685b      	ldr	r3, [r3, #4]
 8006bd0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	69db      	ldr	r3, [r3, #28]
 8006bd6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006bde:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006be0:	68fb      	ldr	r3, [r7, #12]
 8006be2:	f023 0303 	bic.w	r3, r3, #3
 8006be6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006be8:	683b      	ldr	r3, [r7, #0]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	68fa      	ldr	r2, [r7, #12]
 8006bee:	4313      	orrs	r3, r2
 8006bf0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006bf2:	697b      	ldr	r3, [r7, #20]
 8006bf4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006bf8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006bfa:	683b      	ldr	r3, [r7, #0]
 8006bfc:	689b      	ldr	r3, [r3, #8]
 8006bfe:	021b      	lsls	r3, r3, #8
 8006c00:	697a      	ldr	r2, [r7, #20]
 8006c02:	4313      	orrs	r3, r2
 8006c04:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	4a1d      	ldr	r2, [pc, #116]	; (8006c80 <TIM_OC3_SetConfig+0xd0>)
 8006c0a:	4293      	cmp	r3, r2
 8006c0c:	d10d      	bne.n	8006c2a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c14:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	68db      	ldr	r3, [r3, #12]
 8006c1a:	021b      	lsls	r3, r3, #8
 8006c1c:	697a      	ldr	r2, [r7, #20]
 8006c1e:	4313      	orrs	r3, r2
 8006c20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006c22:	697b      	ldr	r3, [r7, #20]
 8006c24:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006c28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	4a14      	ldr	r2, [pc, #80]	; (8006c80 <TIM_OC3_SetConfig+0xd0>)
 8006c2e:	4293      	cmp	r3, r2
 8006c30:	d113      	bne.n	8006c5a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006c32:	693b      	ldr	r3, [r7, #16]
 8006c34:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c38:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006c3a:	693b      	ldr	r3, [r7, #16]
 8006c3c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c40:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	695b      	ldr	r3, [r3, #20]
 8006c46:	011b      	lsls	r3, r3, #4
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	4313      	orrs	r3, r2
 8006c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006c4e:	683b      	ldr	r3, [r7, #0]
 8006c50:	699b      	ldr	r3, [r3, #24]
 8006c52:	011b      	lsls	r3, r3, #4
 8006c54:	693a      	ldr	r2, [r7, #16]
 8006c56:	4313      	orrs	r3, r2
 8006c58:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	693a      	ldr	r2, [r7, #16]
 8006c5e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	68fa      	ldr	r2, [r7, #12]
 8006c64:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c66:	683b      	ldr	r3, [r7, #0]
 8006c68:	685a      	ldr	r2, [r3, #4]
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	697a      	ldr	r2, [r7, #20]
 8006c72:	621a      	str	r2, [r3, #32]
}
 8006c74:	bf00      	nop
 8006c76:	371c      	adds	r7, #28
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	40010000 	.word	0x40010000

08006c84 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c84:	b480      	push	{r7}
 8006c86:	b087      	sub	sp, #28
 8006c88:	af00      	add	r7, sp, #0
 8006c8a:	6078      	str	r0, [r7, #4]
 8006c8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6a1b      	ldr	r3, [r3, #32]
 8006c92:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6a1b      	ldr	r3, [r3, #32]
 8006c9e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	685b      	ldr	r3, [r3, #4]
 8006ca4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	69db      	ldr	r3, [r3, #28]
 8006caa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006cac:	68fb      	ldr	r3, [r7, #12]
 8006cae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006cb2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006cb4:	68fb      	ldr	r3, [r7, #12]
 8006cb6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006cba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006cbc:	683b      	ldr	r3, [r7, #0]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	021b      	lsls	r3, r3, #8
 8006cc2:	68fa      	ldr	r2, [r7, #12]
 8006cc4:	4313      	orrs	r3, r2
 8006cc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006cc8:	693b      	ldr	r3, [r7, #16]
 8006cca:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006cce:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006cd0:	683b      	ldr	r3, [r7, #0]
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	031b      	lsls	r3, r3, #12
 8006cd6:	693a      	ldr	r2, [r7, #16]
 8006cd8:	4313      	orrs	r3, r2
 8006cda:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	4a10      	ldr	r2, [pc, #64]	; (8006d20 <TIM_OC4_SetConfig+0x9c>)
 8006ce0:	4293      	cmp	r3, r2
 8006ce2:	d109      	bne.n	8006cf8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006ce4:	697b      	ldr	r3, [r7, #20]
 8006ce6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cea:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006cec:	683b      	ldr	r3, [r7, #0]
 8006cee:	695b      	ldr	r3, [r3, #20]
 8006cf0:	019b      	lsls	r3, r3, #6
 8006cf2:	697a      	ldr	r2, [r7, #20]
 8006cf4:	4313      	orrs	r3, r2
 8006cf6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	697a      	ldr	r2, [r7, #20]
 8006cfc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	68fa      	ldr	r2, [r7, #12]
 8006d02:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d04:	683b      	ldr	r3, [r7, #0]
 8006d06:	685a      	ldr	r2, [r3, #4]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	621a      	str	r2, [r3, #32]
}
 8006d12:	bf00      	nop
 8006d14:	371c      	adds	r7, #28
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	40010000 	.word	0x40010000

08006d24 <TIM_SlaveTimer_SetConfig>:
  * @param  sSlaveConfig Slave timer configuration
  * @retval None
  */
static HAL_StatusTypeDef TIM_SlaveTimer_SetConfig(TIM_HandleTypeDef *htim,
                                                  TIM_SlaveConfigTypeDef *sSlaveConfig)
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
 8006d2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006d2e:	2300      	movs	r3, #0
 8006d30:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	613b      	str	r3, [r7, #16]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006d3a:	693b      	ldr	r3, [r7, #16]
 8006d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d40:	613b      	str	r3, [r7, #16]
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	685b      	ldr	r3, [r3, #4]
 8006d46:	693a      	ldr	r2, [r7, #16]
 8006d48:	4313      	orrs	r3, r2
 8006d4a:	613b      	str	r3, [r7, #16]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
 8006d4c:	693b      	ldr	r3, [r7, #16]
 8006d4e:	f023 0307 	bic.w	r3, r3, #7
 8006d52:	613b      	str	r3, [r7, #16]
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 8006d54:	683b      	ldr	r3, [r7, #0]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	693a      	ldr	r2, [r7, #16]
 8006d5a:	4313      	orrs	r3, r2
 8006d5c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	693a      	ldr	r2, [r7, #16]
 8006d64:	609a      	str	r2, [r3, #8]

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	685b      	ldr	r3, [r3, #4]
 8006d6a:	2b70      	cmp	r3, #112	; 0x70
 8006d6c:	d01a      	beq.n	8006da4 <TIM_SlaveTimer_SetConfig+0x80>
 8006d6e:	2b70      	cmp	r3, #112	; 0x70
 8006d70:	d860      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d72:	2b60      	cmp	r3, #96	; 0x60
 8006d74:	d054      	beq.n	8006e20 <TIM_SlaveTimer_SetConfig+0xfc>
 8006d76:	2b60      	cmp	r3, #96	; 0x60
 8006d78:	d85c      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d7a:	2b50      	cmp	r3, #80	; 0x50
 8006d7c:	d046      	beq.n	8006e0c <TIM_SlaveTimer_SetConfig+0xe8>
 8006d7e:	2b50      	cmp	r3, #80	; 0x50
 8006d80:	d858      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d82:	2b40      	cmp	r3, #64	; 0x40
 8006d84:	d019      	beq.n	8006dba <TIM_SlaveTimer_SetConfig+0x96>
 8006d86:	2b40      	cmp	r3, #64	; 0x40
 8006d88:	d854      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d8a:	2b30      	cmp	r3, #48	; 0x30
 8006d8c:	d055      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x116>
 8006d8e:	2b30      	cmp	r3, #48	; 0x30
 8006d90:	d850      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d92:	2b20      	cmp	r3, #32
 8006d94:	d051      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x116>
 8006d96:	2b20      	cmp	r3, #32
 8006d98:	d84c      	bhi.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d04d      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x116>
 8006d9e:	2b10      	cmp	r3, #16
 8006da0:	d04b      	beq.n	8006e3a <TIM_SlaveTimer_SetConfig+0x116>
 8006da2:	e047      	b.n	8006e34 <TIM_SlaveTimer_SetConfig+0x110>
      assert_param(IS_TIM_CLOCKSOURCE_ETRMODE1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPRESCALER(sSlaveConfig->TriggerPrescaler));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));
      /* Configure the ETR Trigger source */
      TIM_ETR_SetConfig(htim->Instance,
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	6818      	ldr	r0, [r3, #0]
 8006da8:	683b      	ldr	r3, [r7, #0]
 8006daa:	68d9      	ldr	r1, [r3, #12]
 8006dac:	683b      	ldr	r3, [r7, #0]
 8006dae:	689a      	ldr	r2, [r3, #8]
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	691b      	ldr	r3, [r3, #16]
 8006db4:	f000 f8a6 	bl	8006f04 <TIM_ETR_SetConfig>
                        sSlaveConfig->TriggerPrescaler,
                        sSlaveConfig->TriggerPolarity,
                        sSlaveConfig->TriggerFilter);
      break;
 8006db8:	e040      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x118>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	681b      	ldr	r3, [r3, #0]
 8006dbe:	2b05      	cmp	r3, #5
 8006dc0:	d101      	bne.n	8006dc6 <TIM_SlaveTimer_SetConfig+0xa2>
      {
        return HAL_ERROR;
 8006dc2:	2301      	movs	r3, #1
 8006dc4:	e03b      	b.n	8006e3e <TIM_SlaveTimer_SetConfig+0x11a>
      }

      /* Disable the Channel 1: Reset the CC1E Bit */
      tmpccer = htim->Instance->CCER;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	6a1b      	ldr	r3, [r3, #32]
 8006dcc:	60fb      	str	r3, [r7, #12]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	6a1a      	ldr	r2, [r3, #32]
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	f022 0201 	bic.w	r2, r2, #1
 8006ddc:	621a      	str	r2, [r3, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	681b      	ldr	r3, [r3, #0]
 8006de2:	699b      	ldr	r3, [r3, #24]
 8006de4:	60bb      	str	r3, [r7, #8]

      /* Set the filter */
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006de6:	68bb      	ldr	r3, [r7, #8]
 8006de8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dec:	60bb      	str	r3, [r7, #8]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8006dee:	683b      	ldr	r3, [r7, #0]
 8006df0:	691b      	ldr	r3, [r3, #16]
 8006df2:	011b      	lsls	r3, r3, #4
 8006df4:	68ba      	ldr	r2, [r7, #8]
 8006df6:	4313      	orrs	r3, r2
 8006df8:	60bb      	str	r3, [r7, #8]

      /* Write to TIMx CCMR1 and CCER registers */
      htim->Instance->CCMR1 = tmpccmr1;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	619a      	str	r2, [r3, #24]
      htim->Instance->CCER = tmpccer;
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	68fa      	ldr	r2, [r7, #12]
 8006e08:	621a      	str	r2, [r3, #32]
      break;
 8006e0a:	e017      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI1 Filter and Polarity */
      TIM_TI1_ConfigInputStage(htim->Instance,
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6818      	ldr	r0, [r3, #0]
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	6899      	ldr	r1, [r3, #8]
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	691b      	ldr	r3, [r3, #16]
 8006e18:	461a      	mov	r2, r3
 8006e1a:	f000 f814 	bl	8006e46 <TIM_TI1_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e1e:	e00d      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      assert_param(IS_TIM_TRIGGERPOLARITY(sSlaveConfig->TriggerPolarity));
      assert_param(IS_TIM_TRIGGERFILTER(sSlaveConfig->TriggerFilter));

      /* Configure TI2 Filter and Polarity */
      TIM_TI2_ConfigInputStage(htim->Instance,
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6818      	ldr	r0, [r3, #0]
 8006e24:	683b      	ldr	r3, [r7, #0]
 8006e26:	6899      	ldr	r1, [r3, #8]
 8006e28:	683b      	ldr	r3, [r7, #0]
 8006e2a:	691b      	ldr	r3, [r3, #16]
 8006e2c:	461a      	mov	r2, r3
 8006e2e:	f000 f839 	bl	8006ea4 <TIM_TI2_ConfigInputStage>
                               sSlaveConfig->TriggerPolarity,
                               sSlaveConfig->TriggerFilter);
      break;
 8006e32:	e003      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x118>
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));
      break;
    }

    default:
      status = HAL_ERROR;
 8006e34:	2301      	movs	r3, #1
 8006e36:	75fb      	strb	r3, [r7, #23]
      break;
 8006e38:	e000      	b.n	8006e3c <TIM_SlaveTimer_SetConfig+0x118>
      break;
 8006e3a:	bf00      	nop
  }

  return status;
 8006e3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e3e:	4618      	mov	r0, r3
 8006e40:	3718      	adds	r7, #24
 8006e42:	46bd      	mov	sp, r7
 8006e44:	bd80      	pop	{r7, pc}

08006e46 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e46:	b480      	push	{r7}
 8006e48:	b087      	sub	sp, #28
 8006e4a:	af00      	add	r7, sp, #0
 8006e4c:	60f8      	str	r0, [r7, #12]
 8006e4e:	60b9      	str	r1, [r7, #8]
 8006e50:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6a1b      	ldr	r3, [r3, #32]
 8006e56:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	6a1b      	ldr	r3, [r3, #32]
 8006e5c:	f023 0201 	bic.w	r2, r3, #1
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	699b      	ldr	r3, [r3, #24]
 8006e68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006e6a:	693b      	ldr	r3, [r7, #16]
 8006e6c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006e70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	011b      	lsls	r3, r3, #4
 8006e76:	693a      	ldr	r2, [r7, #16]
 8006e78:	4313      	orrs	r3, r2
 8006e7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006e7c:	697b      	ldr	r3, [r7, #20]
 8006e7e:	f023 030a 	bic.w	r3, r3, #10
 8006e82:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006e84:	697a      	ldr	r2, [r7, #20]
 8006e86:	68bb      	ldr	r3, [r7, #8]
 8006e88:	4313      	orrs	r3, r2
 8006e8a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	693a      	ldr	r2, [r7, #16]
 8006e90:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	697a      	ldr	r2, [r7, #20]
 8006e96:	621a      	str	r2, [r3, #32]
}
 8006e98:	bf00      	nop
 8006e9a:	371c      	adds	r7, #28
 8006e9c:	46bd      	mov	sp, r7
 8006e9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ea2:	4770      	bx	lr

08006ea4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b087      	sub	sp, #28
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	60f8      	str	r0, [r7, #12]
 8006eac:	60b9      	str	r1, [r7, #8]
 8006eae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006eb0:	68fb      	ldr	r3, [r7, #12]
 8006eb2:	6a1b      	ldr	r3, [r3, #32]
 8006eb4:	f023 0210 	bic.w	r2, r3, #16
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	699b      	ldr	r3, [r3, #24]
 8006ec0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	6a1b      	ldr	r3, [r3, #32]
 8006ec6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ec8:	697b      	ldr	r3, [r7, #20]
 8006eca:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ece:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ed0:	687b      	ldr	r3, [r7, #4]
 8006ed2:	031b      	lsls	r3, r3, #12
 8006ed4:	697a      	ldr	r2, [r7, #20]
 8006ed6:	4313      	orrs	r3, r2
 8006ed8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eda:	693b      	ldr	r3, [r7, #16]
 8006edc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006ee0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006ee2:	68bb      	ldr	r3, [r7, #8]
 8006ee4:	011b      	lsls	r3, r3, #4
 8006ee6:	693a      	ldr	r2, [r7, #16]
 8006ee8:	4313      	orrs	r3, r2
 8006eea:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	697a      	ldr	r2, [r7, #20]
 8006ef0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	693a      	ldr	r2, [r7, #16]
 8006ef6:	621a      	str	r2, [r3, #32]
}
 8006ef8:	bf00      	nop
 8006efa:	371c      	adds	r7, #28
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr

08006f04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006f04:	b480      	push	{r7}
 8006f06:	b087      	sub	sp, #28
 8006f08:	af00      	add	r7, sp, #0
 8006f0a:	60f8      	str	r0, [r7, #12]
 8006f0c:	60b9      	str	r1, [r7, #8]
 8006f0e:	607a      	str	r2, [r7, #4]
 8006f10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006f12:	68fb      	ldr	r3, [r7, #12]
 8006f14:	689b      	ldr	r3, [r3, #8]
 8006f16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f18:	697b      	ldr	r3, [r7, #20]
 8006f1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006f20:	683b      	ldr	r3, [r7, #0]
 8006f22:	021a      	lsls	r2, r3, #8
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	431a      	orrs	r2, r3
 8006f28:	68bb      	ldr	r3, [r7, #8]
 8006f2a:	4313      	orrs	r3, r2
 8006f2c:	697a      	ldr	r2, [r7, #20]
 8006f2e:	4313      	orrs	r3, r2
 8006f30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	697a      	ldr	r2, [r7, #20]
 8006f36:	609a      	str	r2, [r3, #8]
}
 8006f38:	bf00      	nop
 8006f3a:	371c      	adds	r7, #28
 8006f3c:	46bd      	mov	sp, r7
 8006f3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f42:	4770      	bx	lr

08006f44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006f44:	b480      	push	{r7}
 8006f46:	b087      	sub	sp, #28
 8006f48:	af00      	add	r7, sp, #0
 8006f4a:	60f8      	str	r0, [r7, #12]
 8006f4c:	60b9      	str	r1, [r7, #8]
 8006f4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006f50:	68bb      	ldr	r3, [r7, #8]
 8006f52:	f003 031f 	and.w	r3, r3, #31
 8006f56:	2201      	movs	r2, #1
 8006f58:	fa02 f303 	lsl.w	r3, r2, r3
 8006f5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006f5e:	68fb      	ldr	r3, [r7, #12]
 8006f60:	6a1a      	ldr	r2, [r3, #32]
 8006f62:	697b      	ldr	r3, [r7, #20]
 8006f64:	43db      	mvns	r3, r3
 8006f66:	401a      	ands	r2, r3
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	6a1a      	ldr	r2, [r3, #32]
 8006f70:	68bb      	ldr	r3, [r7, #8]
 8006f72:	f003 031f 	and.w	r3, r3, #31
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	fa01 f303 	lsl.w	r3, r1, r3
 8006f7c:	431a      	orrs	r2, r3
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	621a      	str	r2, [r3, #32]
}
 8006f82:	bf00      	nop
 8006f84:	371c      	adds	r7, #28
 8006f86:	46bd      	mov	sp, r7
 8006f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f8c:	4770      	bx	lr
	...

08006f90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006f90:	b480      	push	{r7}
 8006f92:	b085      	sub	sp, #20
 8006f94:	af00      	add	r7, sp, #0
 8006f96:	6078      	str	r0, [r7, #4]
 8006f98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fa0:	2b01      	cmp	r3, #1
 8006fa2:	d101      	bne.n	8006fa8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006fa4:	2302      	movs	r3, #2
 8006fa6:	e050      	b.n	800704a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	2201      	movs	r2, #1
 8006fac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	2202      	movs	r2, #2
 8006fb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	685b      	ldr	r3, [r3, #4]
 8006fbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006fc0:	687b      	ldr	r3, [r7, #4]
 8006fc2:	681b      	ldr	r3, [r3, #0]
 8006fc4:	689b      	ldr	r3, [r3, #8]
 8006fc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006fd0:	683b      	ldr	r3, [r7, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	68fa      	ldr	r2, [r7, #12]
 8006fd6:	4313      	orrs	r3, r2
 8006fd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	68fa      	ldr	r2, [r7, #12]
 8006fe0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006fe2:	687b      	ldr	r3, [r7, #4]
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	4a1c      	ldr	r2, [pc, #112]	; (8007058 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006fe8:	4293      	cmp	r3, r2
 8006fea:	d018      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006fec:	687b      	ldr	r3, [r7, #4]
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006ff4:	d013      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	681b      	ldr	r3, [r3, #0]
 8006ffa:	4a18      	ldr	r2, [pc, #96]	; (800705c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006ffc:	4293      	cmp	r3, r2
 8006ffe:	d00e      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a16      	ldr	r2, [pc, #88]	; (8007060 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d009      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	4a15      	ldr	r2, [pc, #84]	; (8007064 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007010:	4293      	cmp	r3, r2
 8007012:	d004      	beq.n	800701e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	4a13      	ldr	r2, [pc, #76]	; (8007068 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800701a:	4293      	cmp	r3, r2
 800701c:	d10c      	bne.n	8007038 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007024:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007026:	683b      	ldr	r3, [r7, #0]
 8007028:	685b      	ldr	r3, [r3, #4]
 800702a:	68ba      	ldr	r2, [r7, #8]
 800702c:	4313      	orrs	r3, r2
 800702e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	68ba      	ldr	r2, [r7, #8]
 8007036:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	2201      	movs	r2, #1
 800703c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007048:	2300      	movs	r3, #0
}
 800704a:	4618      	mov	r0, r3
 800704c:	3714      	adds	r7, #20
 800704e:	46bd      	mov	sp, r7
 8007050:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007054:	4770      	bx	lr
 8007056:	bf00      	nop
 8007058:	40010000 	.word	0x40010000
 800705c:	40000400 	.word	0x40000400
 8007060:	40000800 	.word	0x40000800
 8007064:	40000c00 	.word	0x40000c00
 8007068:	40014000 	.word	0x40014000

0800706c <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 800706c:	b480      	push	{r7}
 800706e:	b085      	sub	sp, #20
 8007070:	af00      	add	r7, sp, #0
 8007072:	6078      	str	r0, [r7, #4]
 8007074:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007076:	2300      	movs	r3, #0
 8007078:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 800707a:	687b      	ldr	r3, [r7, #4]
 800707c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007080:	2b01      	cmp	r3, #1
 8007082:	d101      	bne.n	8007088 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007084:	2302      	movs	r3, #2
 8007086:	e03d      	b.n	8007104 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2201      	movs	r2, #1
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007096:	683b      	ldr	r3, [r7, #0]
 8007098:	68db      	ldr	r3, [r3, #12]
 800709a:	4313      	orrs	r3, r2
 800709c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800709e:	68fb      	ldr	r3, [r7, #12]
 80070a0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	689b      	ldr	r3, [r3, #8]
 80070a8:	4313      	orrs	r3, r2
 80070aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	685b      	ldr	r3, [r3, #4]
 80070b6:	4313      	orrs	r3, r2
 80070b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 80070c0:	683b      	ldr	r3, [r7, #0]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	4313      	orrs	r3, r2
 80070c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	691b      	ldr	r3, [r3, #16]
 80070d2:	4313      	orrs	r3, r2
 80070d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 80070dc:	683b      	ldr	r3, [r7, #0]
 80070de:	695b      	ldr	r3, [r3, #20]
 80070e0:	4313      	orrs	r3, r2
 80070e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80070e4:	68fb      	ldr	r3, [r7, #12]
 80070e6:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 80070ea:	683b      	ldr	r3, [r7, #0]
 80070ec:	69db      	ldr	r3, [r3, #28]
 80070ee:	4313      	orrs	r3, r2
 80070f0:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	68fa      	ldr	r2, [r7, #12]
 80070f8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	2200      	movs	r2, #0
 80070fe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007102:	2300      	movs	r3, #0
}
 8007104:	4618      	mov	r0, r3
 8007106:	3714      	adds	r7, #20
 8007108:	46bd      	mov	sp, r7
 800710a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800710e:	4770      	bx	lr

08007110 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007110:	b580      	push	{r7, lr}
 8007112:	b082      	sub	sp, #8
 8007114:	af00      	add	r7, sp, #0
 8007116:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d101      	bne.n	8007122 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800711e:	2301      	movs	r3, #1
 8007120:	e03f      	b.n	80071a2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007128:	b2db      	uxtb	r3, r3
 800712a:	2b00      	cmp	r3, #0
 800712c:	d106      	bne.n	800713c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007136:	6878      	ldr	r0, [r7, #4]
 8007138:	f7fb fca0 	bl	8002a7c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	2224      	movs	r2, #36	; 0x24
 8007140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	68da      	ldr	r2, [r3, #12]
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	681b      	ldr	r3, [r3, #0]
 800714e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007152:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007154:	6878      	ldr	r0, [r7, #4]
 8007156:	f000 fcdf 	bl	8007b18 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	691a      	ldr	r2, [r3, #16]
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007168:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	681b      	ldr	r3, [r3, #0]
 800716e:	695a      	ldr	r2, [r3, #20]
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007178:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	68da      	ldr	r2, [r3, #12]
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007188:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2200      	movs	r2, #0
 800718e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	2220      	movs	r2, #32
 8007194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	2220      	movs	r2, #32
 800719c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80071a0:	2300      	movs	r3, #0
}
 80071a2:	4618      	mov	r0, r3
 80071a4:	3708      	adds	r7, #8
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}

080071aa <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80071aa:	b580      	push	{r7, lr}
 80071ac:	b084      	sub	sp, #16
 80071ae:	af00      	add	r7, sp, #0
 80071b0:	60f8      	str	r0, [r7, #12]
 80071b2:	60b9      	str	r1, [r7, #8]
 80071b4:	4613      	mov	r3, r2
 80071b6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80071be:	b2db      	uxtb	r3, r3
 80071c0:	2b20      	cmp	r3, #32
 80071c2:	d11d      	bne.n	8007200 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80071c4:	68bb      	ldr	r3, [r7, #8]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <HAL_UART_Receive_IT+0x26>
 80071ca:	88fb      	ldrh	r3, [r7, #6]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d101      	bne.n	80071d4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80071d0:	2301      	movs	r3, #1
 80071d2:	e016      	b.n	8007202 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80071da:	2b01      	cmp	r3, #1
 80071dc:	d101      	bne.n	80071e2 <HAL_UART_Receive_IT+0x38>
 80071de:	2302      	movs	r3, #2
 80071e0:	e00f      	b.n	8007202 <HAL_UART_Receive_IT+0x58>
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	2201      	movs	r2, #1
 80071e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	2200      	movs	r2, #0
 80071ee:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80071f0:	88fb      	ldrh	r3, [r7, #6]
 80071f2:	461a      	mov	r2, r3
 80071f4:	68b9      	ldr	r1, [r7, #8]
 80071f6:	68f8      	ldr	r0, [r7, #12]
 80071f8:	f000 fab6 	bl	8007768 <UART_Start_Receive_IT>
 80071fc:	4603      	mov	r3, r0
 80071fe:	e000      	b.n	8007202 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007200:	2302      	movs	r3, #2
  }
}
 8007202:	4618      	mov	r0, r3
 8007204:	3710      	adds	r7, #16
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
	...

0800720c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b0ba      	sub	sp, #232	; 0xe8
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007232:	2300      	movs	r3, #0
 8007234:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007238:	2300      	movs	r3, #0
 800723a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800723e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007242:	f003 030f 	and.w	r3, r3, #15
 8007246:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800724a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800724e:	2b00      	cmp	r3, #0
 8007250:	d10f      	bne.n	8007272 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007256:	f003 0320 	and.w	r3, r3, #32
 800725a:	2b00      	cmp	r3, #0
 800725c:	d009      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
 800725e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007262:	f003 0320 	and.w	r3, r3, #32
 8007266:	2b00      	cmp	r3, #0
 8007268:	d003      	beq.n	8007272 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800726a:	6878      	ldr	r0, [r7, #4]
 800726c:	f000 fb99 	bl	80079a2 <UART_Receive_IT>
      return;
 8007270:	e256      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007272:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007276:	2b00      	cmp	r3, #0
 8007278:	f000 80de 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
 800727c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007280:	f003 0301 	and.w	r3, r3, #1
 8007284:	2b00      	cmp	r3, #0
 8007286:	d106      	bne.n	8007296 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007288:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800728c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007290:	2b00      	cmp	r3, #0
 8007292:	f000 80d1 	beq.w	8007438 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007296:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800729a:	f003 0301 	and.w	r3, r3, #1
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d00b      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
 80072a2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80072a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d005      	beq.n	80072ba <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80072ae:	687b      	ldr	r3, [r7, #4]
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	f043 0201 	orr.w	r2, r3, #1
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072be:	f003 0304 	and.w	r3, r3, #4
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d00b      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
 80072c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ca:	f003 0301 	and.w	r3, r3, #1
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d005      	beq.n	80072de <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072d6:	f043 0202 	orr.w	r2, r3, #2
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80072de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80072e2:	f003 0302 	and.w	r3, r3, #2
 80072e6:	2b00      	cmp	r3, #0
 80072e8:	d00b      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
 80072ea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d005      	beq.n	8007302 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072fa:	f043 0204 	orr.w	r2, r3, #4
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007302:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007306:	f003 0308 	and.w	r3, r3, #8
 800730a:	2b00      	cmp	r3, #0
 800730c:	d011      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
 800730e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007312:	f003 0320 	and.w	r3, r3, #32
 8007316:	2b00      	cmp	r3, #0
 8007318:	d105      	bne.n	8007326 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800731a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800731e:	f003 0301 	and.w	r3, r3, #1
 8007322:	2b00      	cmp	r3, #0
 8007324:	d005      	beq.n	8007332 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800732a:	f043 0208 	orr.w	r2, r3, #8
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007336:	2b00      	cmp	r3, #0
 8007338:	f000 81ed 	beq.w	8007716 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800733c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007340:	f003 0320 	and.w	r3, r3, #32
 8007344:	2b00      	cmp	r3, #0
 8007346:	d008      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
 8007348:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800734c:	f003 0320 	and.w	r3, r3, #32
 8007350:	2b00      	cmp	r3, #0
 8007352:	d002      	beq.n	800735a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fb24 	bl	80079a2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800735a:	687b      	ldr	r3, [r7, #4]
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	695b      	ldr	r3, [r3, #20]
 8007360:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007364:	2b40      	cmp	r3, #64	; 0x40
 8007366:	bf0c      	ite	eq
 8007368:	2301      	moveq	r3, #1
 800736a:	2300      	movne	r3, #0
 800736c:	b2db      	uxtb	r3, r3
 800736e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007376:	f003 0308 	and.w	r3, r3, #8
 800737a:	2b00      	cmp	r3, #0
 800737c:	d103      	bne.n	8007386 <HAL_UART_IRQHandler+0x17a>
 800737e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007382:	2b00      	cmp	r3, #0
 8007384:	d04f      	beq.n	8007426 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007386:	6878      	ldr	r0, [r7, #4]
 8007388:	f000 fa2c 	bl	80077e4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	695b      	ldr	r3, [r3, #20]
 8007392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007396:	2b40      	cmp	r3, #64	; 0x40
 8007398:	d141      	bne.n	800741e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	3314      	adds	r3, #20
 80073a0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073a4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80073a8:	e853 3f00 	ldrex	r3, [r3]
 80073ac:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80073b0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80073b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073b8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	3314      	adds	r3, #20
 80073c2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80073c6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80073ca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073ce:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80073d2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80073d6:	e841 2300 	strex	r3, r2, [r1]
 80073da:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80073de:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80073e2:	2b00      	cmp	r3, #0
 80073e4:	d1d9      	bne.n	800739a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d013      	beq.n	8007416 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073f2:	4a7d      	ldr	r2, [pc, #500]	; (80075e8 <HAL_UART_IRQHandler+0x3dc>)
 80073f4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80073fa:	4618      	mov	r0, r3
 80073fc:	f7fb fdcf 	bl	8002f9e <HAL_DMA_Abort_IT>
 8007400:	4603      	mov	r3, r0
 8007402:	2b00      	cmp	r3, #0
 8007404:	d016      	beq.n	8007434 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800740a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007410:	4610      	mov	r0, r2
 8007412:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007414:	e00e      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007416:	6878      	ldr	r0, [r7, #4]
 8007418:	f000 f990 	bl	800773c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800741c:	e00a      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 f98c 	bl	800773c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007424:	e006      	b.n	8007434 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007426:	6878      	ldr	r0, [r7, #4]
 8007428:	f000 f988 	bl	800773c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2200      	movs	r2, #0
 8007430:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007432:	e170      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007434:	bf00      	nop
    return;
 8007436:	e16e      	b.n	8007716 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800743c:	2b01      	cmp	r3, #1
 800743e:	f040 814a 	bne.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007442:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007446:	f003 0310 	and.w	r3, r3, #16
 800744a:	2b00      	cmp	r3, #0
 800744c:	f000 8143 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007450:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007454:	f003 0310 	and.w	r3, r3, #16
 8007458:	2b00      	cmp	r3, #0
 800745a:	f000 813c 	beq.w	80076d6 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800745e:	2300      	movs	r3, #0
 8007460:	60bb      	str	r3, [r7, #8]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	681b      	ldr	r3, [r3, #0]
 8007468:	60bb      	str	r3, [r7, #8]
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	685b      	ldr	r3, [r3, #4]
 8007470:	60bb      	str	r3, [r7, #8]
 8007472:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	695b      	ldr	r3, [r3, #20]
 800747a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800747e:	2b40      	cmp	r3, #64	; 0x40
 8007480:	f040 80b4 	bne.w	80075ec <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	685b      	ldr	r3, [r3, #4]
 800748c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007490:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007494:	2b00      	cmp	r3, #0
 8007496:	f000 8140 	beq.w	800771a <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800749e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074a2:	429a      	cmp	r2, r3
 80074a4:	f080 8139 	bcs.w	800771a <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80074ae:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074b4:	69db      	ldr	r3, [r3, #28]
 80074b6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80074ba:	f000 8088 	beq.w	80075ce <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	330c      	adds	r3, #12
 80074c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80074cc:	e853 3f00 	ldrex	r3, [r3]
 80074d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80074d4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80074d8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80074dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	330c      	adds	r3, #12
 80074e6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80074ea:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80074ee:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074f2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80074f6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80074fa:	e841 2300 	strex	r3, r2, [r1]
 80074fe:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007502:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1d9      	bne.n	80074be <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	3314      	adds	r3, #20
 8007510:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007512:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007514:	e853 3f00 	ldrex	r3, [r3]
 8007518:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800751a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800751c:	f023 0301 	bic.w	r3, r3, #1
 8007520:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	681b      	ldr	r3, [r3, #0]
 8007528:	3314      	adds	r3, #20
 800752a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800752e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007532:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007534:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007536:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800753a:	e841 2300 	strex	r3, r2, [r1]
 800753e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007540:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007542:	2b00      	cmp	r3, #0
 8007544:	d1e1      	bne.n	800750a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	3314      	adds	r3, #20
 800754c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800754e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007550:	e853 3f00 	ldrex	r3, [r3]
 8007554:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007556:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007558:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800755c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	3314      	adds	r3, #20
 8007566:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800756a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800756c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800756e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007570:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007572:	e841 2300 	strex	r3, r2, [r1]
 8007576:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007578:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800757a:	2b00      	cmp	r3, #0
 800757c:	d1e3      	bne.n	8007546 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2220      	movs	r2, #32
 8007582:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2200      	movs	r2, #0
 800758a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	330c      	adds	r3, #12
 8007592:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007594:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007596:	e853 3f00 	ldrex	r3, [r3]
 800759a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800759c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800759e:	f023 0310 	bic.w	r3, r3, #16
 80075a2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	330c      	adds	r3, #12
 80075ac:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80075b0:	65ba      	str	r2, [r7, #88]	; 0x58
 80075b2:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075b4:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80075b6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80075b8:	e841 2300 	strex	r3, r2, [r1]
 80075bc:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80075be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80075c0:	2b00      	cmp	r3, #0
 80075c2:	d1e3      	bne.n	800758c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80075c8:	4618      	mov	r0, r3
 80075ca:	f7fb fc78 	bl	8002ebe <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075d6:	b29b      	uxth	r3, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	b29b      	uxth	r3, r3
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f8b6 	bl	8007750 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80075e4:	e099      	b.n	800771a <HAL_UART_IRQHandler+0x50e>
 80075e6:	bf00      	nop
 80075e8:	080078ab 	.word	0x080078ab
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	1ad3      	subs	r3, r2, r3
 80075f8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	f000 808b 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007608:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800760c:	2b00      	cmp	r3, #0
 800760e:	f000 8086 	beq.w	800771e <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007612:	687b      	ldr	r3, [r7, #4]
 8007614:	681b      	ldr	r3, [r3, #0]
 8007616:	330c      	adds	r3, #12
 8007618:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800761a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800761c:	e853 3f00 	ldrex	r3, [r3]
 8007620:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007622:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007624:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007628:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	330c      	adds	r3, #12
 8007632:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007636:	647a      	str	r2, [r7, #68]	; 0x44
 8007638:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800763a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800763c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800763e:	e841 2300 	strex	r3, r2, [r1]
 8007642:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007644:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007646:	2b00      	cmp	r3, #0
 8007648:	d1e3      	bne.n	8007612 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	681b      	ldr	r3, [r3, #0]
 800764e:	3314      	adds	r3, #20
 8007650:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007652:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007654:	e853 3f00 	ldrex	r3, [r3]
 8007658:	623b      	str	r3, [r7, #32]
   return(result);
 800765a:	6a3b      	ldr	r3, [r7, #32]
 800765c:	f023 0301 	bic.w	r3, r3, #1
 8007660:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007664:	687b      	ldr	r3, [r7, #4]
 8007666:	681b      	ldr	r3, [r3, #0]
 8007668:	3314      	adds	r3, #20
 800766a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800766e:	633a      	str	r2, [r7, #48]	; 0x30
 8007670:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007672:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007674:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007676:	e841 2300 	strex	r3, r2, [r1]
 800767a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800767c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800767e:	2b00      	cmp	r3, #0
 8007680:	d1e3      	bne.n	800764a <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2220      	movs	r2, #32
 8007686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	330c      	adds	r3, #12
 8007696:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007698:	693b      	ldr	r3, [r7, #16]
 800769a:	e853 3f00 	ldrex	r3, [r3]
 800769e:	60fb      	str	r3, [r7, #12]
   return(result);
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	f023 0310 	bic.w	r3, r3, #16
 80076a6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80076aa:	687b      	ldr	r3, [r7, #4]
 80076ac:	681b      	ldr	r3, [r3, #0]
 80076ae:	330c      	adds	r3, #12
 80076b0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80076b4:	61fa      	str	r2, [r7, #28]
 80076b6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b8:	69b9      	ldr	r1, [r7, #24]
 80076ba:	69fa      	ldr	r2, [r7, #28]
 80076bc:	e841 2300 	strex	r3, r2, [r1]
 80076c0:	617b      	str	r3, [r7, #20]
   return(result);
 80076c2:	697b      	ldr	r3, [r7, #20]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d1e3      	bne.n	8007690 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80076c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80076cc:	4619      	mov	r1, r3
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 f83e 	bl	8007750 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80076d4:	e023      	b.n	800771e <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80076d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076de:	2b00      	cmp	r3, #0
 80076e0:	d009      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80076e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d003      	beq.n	80076f6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 f8ef 	bl	80078d2 <UART_Transmit_IT>
    return;
 80076f4:	e014      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80076f6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80076fa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d00e      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
 8007702:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007706:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800770a:	2b00      	cmp	r3, #0
 800770c:	d008      	beq.n	8007720 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800770e:	6878      	ldr	r0, [r7, #4]
 8007710:	f000 f92f 	bl	8007972 <UART_EndTransmit_IT>
    return;
 8007714:	e004      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
    return;
 8007716:	bf00      	nop
 8007718:	e002      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771a:	bf00      	nop
 800771c:	e000      	b.n	8007720 <HAL_UART_IRQHandler+0x514>
      return;
 800771e:	bf00      	nop
  }
}
 8007720:	37e8      	adds	r7, #232	; 0xe8
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop

08007728 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007728:	b480      	push	{r7}
 800772a:	b083      	sub	sp, #12
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007730:	bf00      	nop
 8007732:	370c      	adds	r7, #12
 8007734:	46bd      	mov	sp, r7
 8007736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800773a:	4770      	bx	lr

0800773c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800773c:	b480      	push	{r7}
 800773e:	b083      	sub	sp, #12
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007744:	bf00      	nop
 8007746:	370c      	adds	r7, #12
 8007748:	46bd      	mov	sp, r7
 800774a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800774e:	4770      	bx	lr

08007750 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007750:	b480      	push	{r7}
 8007752:	b083      	sub	sp, #12
 8007754:	af00      	add	r7, sp, #0
 8007756:	6078      	str	r0, [r7, #4]
 8007758:	460b      	mov	r3, r1
 800775a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800775c:	bf00      	nop
 800775e:	370c      	adds	r7, #12
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007768:	b480      	push	{r7}
 800776a:	b085      	sub	sp, #20
 800776c:	af00      	add	r7, sp, #0
 800776e:	60f8      	str	r0, [r7, #12]
 8007770:	60b9      	str	r1, [r7, #8]
 8007772:	4613      	mov	r3, r2
 8007774:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	68ba      	ldr	r2, [r7, #8]
 800777a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	88fa      	ldrh	r2, [r7, #6]
 8007780:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	88fa      	ldrh	r2, [r7, #6]
 8007786:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	2200      	movs	r2, #0
 800778c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800778e:	68fb      	ldr	r3, [r7, #12]
 8007790:	2222      	movs	r2, #34	; 0x22
 8007792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	2200      	movs	r2, #0
 800779a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	691b      	ldr	r3, [r3, #16]
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d007      	beq.n	80077b6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80077a6:	68fb      	ldr	r3, [r7, #12]
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	68da      	ldr	r2, [r3, #12]
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80077b4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	695a      	ldr	r2, [r3, #20]
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	f042 0201 	orr.w	r2, r2, #1
 80077c4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80077c6:	68fb      	ldr	r3, [r7, #12]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68da      	ldr	r2, [r3, #12]
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	f042 0220 	orr.w	r2, r2, #32
 80077d4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80077d6:	2300      	movs	r3, #0
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3714      	adds	r7, #20
 80077dc:	46bd      	mov	sp, r7
 80077de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077e2:	4770      	bx	lr

080077e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80077e4:	b480      	push	{r7}
 80077e6:	b095      	sub	sp, #84	; 0x54
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	330c      	adds	r3, #12
 80077f2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80077f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f6:	e853 3f00 	ldrex	r3, [r3]
 80077fa:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80077fc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80077fe:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007802:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	330c      	adds	r3, #12
 800780a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800780c:	643a      	str	r2, [r7, #64]	; 0x40
 800780e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007810:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007812:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007814:	e841 2300 	strex	r3, r2, [r1]
 8007818:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	2b00      	cmp	r3, #0
 800781e:	d1e5      	bne.n	80077ec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3314      	adds	r3, #20
 8007826:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007828:	6a3b      	ldr	r3, [r7, #32]
 800782a:	e853 3f00 	ldrex	r3, [r3]
 800782e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007830:	69fb      	ldr	r3, [r7, #28]
 8007832:	f023 0301 	bic.w	r3, r3, #1
 8007836:	64bb      	str	r3, [r7, #72]	; 0x48
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	3314      	adds	r3, #20
 800783e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007840:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007842:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007844:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007846:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007848:	e841 2300 	strex	r3, r2, [r1]
 800784c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800784e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007850:	2b00      	cmp	r3, #0
 8007852:	d1e5      	bne.n	8007820 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007858:	2b01      	cmp	r3, #1
 800785a:	d119      	bne.n	8007890 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800785c:	687b      	ldr	r3, [r7, #4]
 800785e:	681b      	ldr	r3, [r3, #0]
 8007860:	330c      	adds	r3, #12
 8007862:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007864:	68fb      	ldr	r3, [r7, #12]
 8007866:	e853 3f00 	ldrex	r3, [r3]
 800786a:	60bb      	str	r3, [r7, #8]
   return(result);
 800786c:	68bb      	ldr	r3, [r7, #8]
 800786e:	f023 0310 	bic.w	r3, r3, #16
 8007872:	647b      	str	r3, [r7, #68]	; 0x44
 8007874:	687b      	ldr	r3, [r7, #4]
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	330c      	adds	r3, #12
 800787a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800787c:	61ba      	str	r2, [r7, #24]
 800787e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007880:	6979      	ldr	r1, [r7, #20]
 8007882:	69ba      	ldr	r2, [r7, #24]
 8007884:	e841 2300 	strex	r3, r2, [r1]
 8007888:	613b      	str	r3, [r7, #16]
   return(result);
 800788a:	693b      	ldr	r3, [r7, #16]
 800788c:	2b00      	cmp	r3, #0
 800788e:	d1e5      	bne.n	800785c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2220      	movs	r2, #32
 8007894:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	2200      	movs	r2, #0
 800789c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800789e:	bf00      	nop
 80078a0:	3754      	adds	r7, #84	; 0x54
 80078a2:	46bd      	mov	sp, r7
 80078a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a8:	4770      	bx	lr

080078aa <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80078aa:	b580      	push	{r7, lr}
 80078ac:	b084      	sub	sp, #16
 80078ae:	af00      	add	r7, sp, #0
 80078b0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80078b6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	2200      	movs	r2, #0
 80078c2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80078c4:	68f8      	ldr	r0, [r7, #12]
 80078c6:	f7ff ff39 	bl	800773c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80078ca:	bf00      	nop
 80078cc:	3710      	adds	r7, #16
 80078ce:	46bd      	mov	sp, r7
 80078d0:	bd80      	pop	{r7, pc}

080078d2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80078d2:	b480      	push	{r7}
 80078d4:	b085      	sub	sp, #20
 80078d6:	af00      	add	r7, sp, #0
 80078d8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078e0:	b2db      	uxtb	r3, r3
 80078e2:	2b21      	cmp	r3, #33	; 0x21
 80078e4:	d13e      	bne.n	8007964 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80078ee:	d114      	bne.n	800791a <UART_Transmit_IT+0x48>
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	691b      	ldr	r3, [r3, #16]
 80078f4:	2b00      	cmp	r3, #0
 80078f6:	d110      	bne.n	800791a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	881b      	ldrh	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800790c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6a1b      	ldr	r3, [r3, #32]
 8007912:	1c9a      	adds	r2, r3, #2
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	621a      	str	r2, [r3, #32]
 8007918:	e008      	b.n	800792c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a1b      	ldr	r3, [r3, #32]
 800791e:	1c59      	adds	r1, r3, #1
 8007920:	687a      	ldr	r2, [r7, #4]
 8007922:	6211      	str	r1, [r2, #32]
 8007924:	781a      	ldrb	r2, [r3, #0]
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007930:	b29b      	uxth	r3, r3
 8007932:	3b01      	subs	r3, #1
 8007934:	b29b      	uxth	r3, r3
 8007936:	687a      	ldr	r2, [r7, #4]
 8007938:	4619      	mov	r1, r3
 800793a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800793c:	2b00      	cmp	r3, #0
 800793e:	d10f      	bne.n	8007960 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	68da      	ldr	r2, [r3, #12]
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	681b      	ldr	r3, [r3, #0]
 800794a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800794e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800795e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007960:	2300      	movs	r3, #0
 8007962:	e000      	b.n	8007966 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007964:	2302      	movs	r3, #2
  }
}
 8007966:	4618      	mov	r0, r3
 8007968:	3714      	adds	r7, #20
 800796a:	46bd      	mov	sp, r7
 800796c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007970:	4770      	bx	lr

08007972 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007972:	b580      	push	{r7, lr}
 8007974:	b082      	sub	sp, #8
 8007976:	af00      	add	r7, sp, #0
 8007978:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800797a:	687b      	ldr	r3, [r7, #4]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	68da      	ldr	r2, [r3, #12]
 8007980:	687b      	ldr	r3, [r7, #4]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007988:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2220      	movs	r2, #32
 800798e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007992:	6878      	ldr	r0, [r7, #4]
 8007994:	f7ff fec8 	bl	8007728 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8007998:	2300      	movs	r3, #0
}
 800799a:	4618      	mov	r0, r3
 800799c:	3708      	adds	r7, #8
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}

080079a2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80079a2:	b580      	push	{r7, lr}
 80079a4:	b08c      	sub	sp, #48	; 0x30
 80079a6:	af00      	add	r7, sp, #0
 80079a8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b0:	b2db      	uxtb	r3, r3
 80079b2:	2b22      	cmp	r3, #34	; 0x22
 80079b4:	f040 80ab 	bne.w	8007b0e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	689b      	ldr	r3, [r3, #8]
 80079bc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079c0:	d117      	bne.n	80079f2 <UART_Receive_IT+0x50>
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	2b00      	cmp	r3, #0
 80079c8:	d113      	bne.n	80079f2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80079ca:	2300      	movs	r3, #0
 80079cc:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079d2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	681b      	ldr	r3, [r3, #0]
 80079d8:	685b      	ldr	r3, [r3, #4]
 80079da:	b29b      	uxth	r3, r3
 80079dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80079e0:	b29a      	uxth	r2, r3
 80079e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80079e4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079ea:	1c9a      	adds	r2, r3, #2
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	629a      	str	r2, [r3, #40]	; 0x28
 80079f0:	e026      	b.n	8007a40 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80079f6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80079f8:	2300      	movs	r3, #0
 80079fa:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	689b      	ldr	r3, [r3, #8]
 8007a00:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a04:	d007      	beq.n	8007a16 <UART_Receive_IT+0x74>
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	2b00      	cmp	r3, #0
 8007a0c:	d10a      	bne.n	8007a24 <UART_Receive_IT+0x82>
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	691b      	ldr	r3, [r3, #16]
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d106      	bne.n	8007a24 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	681b      	ldr	r3, [r3, #0]
 8007a1a:	685b      	ldr	r3, [r3, #4]
 8007a1c:	b2da      	uxtb	r2, r3
 8007a1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a20:	701a      	strb	r2, [r3, #0]
 8007a22:	e008      	b.n	8007a36 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	685b      	ldr	r3, [r3, #4]
 8007a2a:	b2db      	uxtb	r3, r3
 8007a2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007a34:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007a36:	687b      	ldr	r3, [r7, #4]
 8007a38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007a3a:	1c5a      	adds	r2, r3, #1
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007a44:	b29b      	uxth	r3, r3
 8007a46:	3b01      	subs	r3, #1
 8007a48:	b29b      	uxth	r3, r3
 8007a4a:	687a      	ldr	r2, [r7, #4]
 8007a4c:	4619      	mov	r1, r3
 8007a4e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d15a      	bne.n	8007b0a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007a54:	687b      	ldr	r3, [r7, #4]
 8007a56:	681b      	ldr	r3, [r3, #0]
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	f022 0220 	bic.w	r2, r2, #32
 8007a62:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	68da      	ldr	r2, [r3, #12]
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007a72:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	695a      	ldr	r2, [r3, #20]
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	f022 0201 	bic.w	r2, r2, #1
 8007a82:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a90:	2b01      	cmp	r3, #1
 8007a92:	d135      	bne.n	8007b00 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a9a:	687b      	ldr	r3, [r7, #4]
 8007a9c:	681b      	ldr	r3, [r3, #0]
 8007a9e:	330c      	adds	r3, #12
 8007aa0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007aa2:	697b      	ldr	r3, [r7, #20]
 8007aa4:	e853 3f00 	ldrex	r3, [r3]
 8007aa8:	613b      	str	r3, [r7, #16]
   return(result);
 8007aaa:	693b      	ldr	r3, [r7, #16]
 8007aac:	f023 0310 	bic.w	r3, r3, #16
 8007ab0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	681b      	ldr	r3, [r3, #0]
 8007ab6:	330c      	adds	r3, #12
 8007ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007aba:	623a      	str	r2, [r7, #32]
 8007abc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007abe:	69f9      	ldr	r1, [r7, #28]
 8007ac0:	6a3a      	ldr	r2, [r7, #32]
 8007ac2:	e841 2300 	strex	r3, r2, [r1]
 8007ac6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ac8:	69bb      	ldr	r3, [r7, #24]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d1e5      	bne.n	8007a9a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	681b      	ldr	r3, [r3, #0]
 8007ad4:	f003 0310 	and.w	r3, r3, #16
 8007ad8:	2b10      	cmp	r3, #16
 8007ada:	d10a      	bne.n	8007af2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007adc:	2300      	movs	r3, #0
 8007ade:	60fb      	str	r3, [r7, #12]
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	681b      	ldr	r3, [r3, #0]
 8007ae6:	60fb      	str	r3, [r7, #12]
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	685b      	ldr	r3, [r3, #4]
 8007aee:	60fb      	str	r3, [r7, #12]
 8007af0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007af6:	4619      	mov	r1, r3
 8007af8:	6878      	ldr	r0, [r7, #4]
 8007afa:	f7ff fe29 	bl	8007750 <HAL_UARTEx_RxEventCallback>
 8007afe:	e002      	b.n	8007b06 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007b00:	6878      	ldr	r0, [r7, #4]
 8007b02:	f7f9 fad3 	bl	80010ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007b06:	2300      	movs	r3, #0
 8007b08:	e002      	b.n	8007b10 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
 8007b0c:	e000      	b.n	8007b10 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8007b0e:	2302      	movs	r3, #2
  }
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3730      	adds	r7, #48	; 0x30
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007b18:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007b1c:	b0c0      	sub	sp, #256	; 0x100
 8007b1e:	af00      	add	r7, sp, #0
 8007b20:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007b24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	691b      	ldr	r3, [r3, #16]
 8007b2c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007b30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b34:	68d9      	ldr	r1, [r3, #12]
 8007b36:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b3a:	681a      	ldr	r2, [r3, #0]
 8007b3c:	ea40 0301 	orr.w	r3, r0, r1
 8007b40:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007b42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b46:	689a      	ldr	r2, [r3, #8]
 8007b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b4c:	691b      	ldr	r3, [r3, #16]
 8007b4e:	431a      	orrs	r2, r3
 8007b50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b54:	695b      	ldr	r3, [r3, #20]
 8007b56:	431a      	orrs	r2, r3
 8007b58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b5c:	69db      	ldr	r3, [r3, #28]
 8007b5e:	4313      	orrs	r3, r2
 8007b60:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007b64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	68db      	ldr	r3, [r3, #12]
 8007b6c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007b70:	f021 010c 	bic.w	r1, r1, #12
 8007b74:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b78:	681a      	ldr	r2, [r3, #0]
 8007b7a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007b7e:	430b      	orrs	r3, r1
 8007b80:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	695b      	ldr	r3, [r3, #20]
 8007b8a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b92:	6999      	ldr	r1, [r3, #24]
 8007b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007b98:	681a      	ldr	r2, [r3, #0]
 8007b9a:	ea40 0301 	orr.w	r3, r0, r1
 8007b9e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007ba0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ba4:	681a      	ldr	r2, [r3, #0]
 8007ba6:	4b8f      	ldr	r3, [pc, #572]	; (8007de4 <UART_SetConfig+0x2cc>)
 8007ba8:	429a      	cmp	r2, r3
 8007baa:	d005      	beq.n	8007bb8 <UART_SetConfig+0xa0>
 8007bac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	4b8d      	ldr	r3, [pc, #564]	; (8007de8 <UART_SetConfig+0x2d0>)
 8007bb4:	429a      	cmp	r2, r3
 8007bb6:	d104      	bne.n	8007bc2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007bb8:	f7fe fb82 	bl	80062c0 <HAL_RCC_GetPCLK2Freq>
 8007bbc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007bc0:	e003      	b.n	8007bca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007bc2:	f7fe fb69 	bl	8006298 <HAL_RCC_GetPCLK1Freq>
 8007bc6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007bca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007bce:	69db      	ldr	r3, [r3, #28]
 8007bd0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007bd4:	f040 810c 	bne.w	8007df0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007bdc:	2200      	movs	r2, #0
 8007bde:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007be2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007be6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8007bea:	4622      	mov	r2, r4
 8007bec:	462b      	mov	r3, r5
 8007bee:	1891      	adds	r1, r2, r2
 8007bf0:	65b9      	str	r1, [r7, #88]	; 0x58
 8007bf2:	415b      	adcs	r3, r3
 8007bf4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007bf6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8007bfa:	4621      	mov	r1, r4
 8007bfc:	eb12 0801 	adds.w	r8, r2, r1
 8007c00:	4629      	mov	r1, r5
 8007c02:	eb43 0901 	adc.w	r9, r3, r1
 8007c06:	f04f 0200 	mov.w	r2, #0
 8007c0a:	f04f 0300 	mov.w	r3, #0
 8007c0e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007c12:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007c16:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007c1a:	4690      	mov	r8, r2
 8007c1c:	4699      	mov	r9, r3
 8007c1e:	4623      	mov	r3, r4
 8007c20:	eb18 0303 	adds.w	r3, r8, r3
 8007c24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007c28:	462b      	mov	r3, r5
 8007c2a:	eb49 0303 	adc.w	r3, r9, r3
 8007c2e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007c36:	685b      	ldr	r3, [r3, #4]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007c3e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007c42:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007c46:	460b      	mov	r3, r1
 8007c48:	18db      	adds	r3, r3, r3
 8007c4a:	653b      	str	r3, [r7, #80]	; 0x50
 8007c4c:	4613      	mov	r3, r2
 8007c4e:	eb42 0303 	adc.w	r3, r2, r3
 8007c52:	657b      	str	r3, [r7, #84]	; 0x54
 8007c54:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007c58:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007c5c:	f7f8 ffac 	bl	8000bb8 <__aeabi_uldivmod>
 8007c60:	4602      	mov	r2, r0
 8007c62:	460b      	mov	r3, r1
 8007c64:	4b61      	ldr	r3, [pc, #388]	; (8007dec <UART_SetConfig+0x2d4>)
 8007c66:	fba3 2302 	umull	r2, r3, r3, r2
 8007c6a:	095b      	lsrs	r3, r3, #5
 8007c6c:	011c      	lsls	r4, r3, #4
 8007c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007c72:	2200      	movs	r2, #0
 8007c74:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c78:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007c7c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007c80:	4642      	mov	r2, r8
 8007c82:	464b      	mov	r3, r9
 8007c84:	1891      	adds	r1, r2, r2
 8007c86:	64b9      	str	r1, [r7, #72]	; 0x48
 8007c88:	415b      	adcs	r3, r3
 8007c8a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007c8c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007c90:	4641      	mov	r1, r8
 8007c92:	eb12 0a01 	adds.w	sl, r2, r1
 8007c96:	4649      	mov	r1, r9
 8007c98:	eb43 0b01 	adc.w	fp, r3, r1
 8007c9c:	f04f 0200 	mov.w	r2, #0
 8007ca0:	f04f 0300 	mov.w	r3, #0
 8007ca4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ca8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007cac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007cb0:	4692      	mov	sl, r2
 8007cb2:	469b      	mov	fp, r3
 8007cb4:	4643      	mov	r3, r8
 8007cb6:	eb1a 0303 	adds.w	r3, sl, r3
 8007cba:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007cbe:	464b      	mov	r3, r9
 8007cc0:	eb4b 0303 	adc.w	r3, fp, r3
 8007cc4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ccc:	685b      	ldr	r3, [r3, #4]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007cd4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007cd8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007cdc:	460b      	mov	r3, r1
 8007cde:	18db      	adds	r3, r3, r3
 8007ce0:	643b      	str	r3, [r7, #64]	; 0x40
 8007ce2:	4613      	mov	r3, r2
 8007ce4:	eb42 0303 	adc.w	r3, r2, r3
 8007ce8:	647b      	str	r3, [r7, #68]	; 0x44
 8007cea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8007cee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007cf2:	f7f8 ff61 	bl	8000bb8 <__aeabi_uldivmod>
 8007cf6:	4602      	mov	r2, r0
 8007cf8:	460b      	mov	r3, r1
 8007cfa:	4611      	mov	r1, r2
 8007cfc:	4b3b      	ldr	r3, [pc, #236]	; (8007dec <UART_SetConfig+0x2d4>)
 8007cfe:	fba3 2301 	umull	r2, r3, r3, r1
 8007d02:	095b      	lsrs	r3, r3, #5
 8007d04:	2264      	movs	r2, #100	; 0x64
 8007d06:	fb02 f303 	mul.w	r3, r2, r3
 8007d0a:	1acb      	subs	r3, r1, r3
 8007d0c:	00db      	lsls	r3, r3, #3
 8007d0e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007d12:	4b36      	ldr	r3, [pc, #216]	; (8007dec <UART_SetConfig+0x2d4>)
 8007d14:	fba3 2302 	umull	r2, r3, r3, r2
 8007d18:	095b      	lsrs	r3, r3, #5
 8007d1a:	005b      	lsls	r3, r3, #1
 8007d1c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007d20:	441c      	add	r4, r3
 8007d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007d26:	2200      	movs	r2, #0
 8007d28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d2c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007d30:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007d34:	4642      	mov	r2, r8
 8007d36:	464b      	mov	r3, r9
 8007d38:	1891      	adds	r1, r2, r2
 8007d3a:	63b9      	str	r1, [r7, #56]	; 0x38
 8007d3c:	415b      	adcs	r3, r3
 8007d3e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007d40:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007d44:	4641      	mov	r1, r8
 8007d46:	1851      	adds	r1, r2, r1
 8007d48:	6339      	str	r1, [r7, #48]	; 0x30
 8007d4a:	4649      	mov	r1, r9
 8007d4c:	414b      	adcs	r3, r1
 8007d4e:	637b      	str	r3, [r7, #52]	; 0x34
 8007d50:	f04f 0200 	mov.w	r2, #0
 8007d54:	f04f 0300 	mov.w	r3, #0
 8007d58:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007d5c:	4659      	mov	r1, fp
 8007d5e:	00cb      	lsls	r3, r1, #3
 8007d60:	4651      	mov	r1, sl
 8007d62:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007d66:	4651      	mov	r1, sl
 8007d68:	00ca      	lsls	r2, r1, #3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	4619      	mov	r1, r3
 8007d6e:	4603      	mov	r3, r0
 8007d70:	4642      	mov	r2, r8
 8007d72:	189b      	adds	r3, r3, r2
 8007d74:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d78:	464b      	mov	r3, r9
 8007d7a:	460a      	mov	r2, r1
 8007d7c:	eb42 0303 	adc.w	r3, r2, r3
 8007d80:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007d88:	685b      	ldr	r3, [r3, #4]
 8007d8a:	2200      	movs	r2, #0
 8007d8c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007d90:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007d94:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007d98:	460b      	mov	r3, r1
 8007d9a:	18db      	adds	r3, r3, r3
 8007d9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8007d9e:	4613      	mov	r3, r2
 8007da0:	eb42 0303 	adc.w	r3, r2, r3
 8007da4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007da6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007daa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007dae:	f7f8 ff03 	bl	8000bb8 <__aeabi_uldivmod>
 8007db2:	4602      	mov	r2, r0
 8007db4:	460b      	mov	r3, r1
 8007db6:	4b0d      	ldr	r3, [pc, #52]	; (8007dec <UART_SetConfig+0x2d4>)
 8007db8:	fba3 1302 	umull	r1, r3, r3, r2
 8007dbc:	095b      	lsrs	r3, r3, #5
 8007dbe:	2164      	movs	r1, #100	; 0x64
 8007dc0:	fb01 f303 	mul.w	r3, r1, r3
 8007dc4:	1ad3      	subs	r3, r2, r3
 8007dc6:	00db      	lsls	r3, r3, #3
 8007dc8:	3332      	adds	r3, #50	; 0x32
 8007dca:	4a08      	ldr	r2, [pc, #32]	; (8007dec <UART_SetConfig+0x2d4>)
 8007dcc:	fba2 2303 	umull	r2, r3, r2, r3
 8007dd0:	095b      	lsrs	r3, r3, #5
 8007dd2:	f003 0207 	and.w	r2, r3, #7
 8007dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007dda:	681b      	ldr	r3, [r3, #0]
 8007ddc:	4422      	add	r2, r4
 8007dde:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007de0:	e106      	b.n	8007ff0 <UART_SetConfig+0x4d8>
 8007de2:	bf00      	nop
 8007de4:	40011000 	.word	0x40011000
 8007de8:	40011400 	.word	0x40011400
 8007dec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007df4:	2200      	movs	r2, #0
 8007df6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8007dfa:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8007dfe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007e02:	4642      	mov	r2, r8
 8007e04:	464b      	mov	r3, r9
 8007e06:	1891      	adds	r1, r2, r2
 8007e08:	6239      	str	r1, [r7, #32]
 8007e0a:	415b      	adcs	r3, r3
 8007e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8007e0e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007e12:	4641      	mov	r1, r8
 8007e14:	1854      	adds	r4, r2, r1
 8007e16:	4649      	mov	r1, r9
 8007e18:	eb43 0501 	adc.w	r5, r3, r1
 8007e1c:	f04f 0200 	mov.w	r2, #0
 8007e20:	f04f 0300 	mov.w	r3, #0
 8007e24:	00eb      	lsls	r3, r5, #3
 8007e26:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007e2a:	00e2      	lsls	r2, r4, #3
 8007e2c:	4614      	mov	r4, r2
 8007e2e:	461d      	mov	r5, r3
 8007e30:	4643      	mov	r3, r8
 8007e32:	18e3      	adds	r3, r4, r3
 8007e34:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007e38:	464b      	mov	r3, r9
 8007e3a:	eb45 0303 	adc.w	r3, r5, r3
 8007e3e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007e42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	2200      	movs	r2, #0
 8007e4a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007e4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007e52:	f04f 0200 	mov.w	r2, #0
 8007e56:	f04f 0300 	mov.w	r3, #0
 8007e5a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007e5e:	4629      	mov	r1, r5
 8007e60:	008b      	lsls	r3, r1, #2
 8007e62:	4621      	mov	r1, r4
 8007e64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007e68:	4621      	mov	r1, r4
 8007e6a:	008a      	lsls	r2, r1, #2
 8007e6c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007e70:	f7f8 fea2 	bl	8000bb8 <__aeabi_uldivmod>
 8007e74:	4602      	mov	r2, r0
 8007e76:	460b      	mov	r3, r1
 8007e78:	4b60      	ldr	r3, [pc, #384]	; (8007ffc <UART_SetConfig+0x4e4>)
 8007e7a:	fba3 2302 	umull	r2, r3, r3, r2
 8007e7e:	095b      	lsrs	r3, r3, #5
 8007e80:	011c      	lsls	r4, r3, #4
 8007e82:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007e8c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007e90:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007e94:	4642      	mov	r2, r8
 8007e96:	464b      	mov	r3, r9
 8007e98:	1891      	adds	r1, r2, r2
 8007e9a:	61b9      	str	r1, [r7, #24]
 8007e9c:	415b      	adcs	r3, r3
 8007e9e:	61fb      	str	r3, [r7, #28]
 8007ea0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007ea4:	4641      	mov	r1, r8
 8007ea6:	1851      	adds	r1, r2, r1
 8007ea8:	6139      	str	r1, [r7, #16]
 8007eaa:	4649      	mov	r1, r9
 8007eac:	414b      	adcs	r3, r1
 8007eae:	617b      	str	r3, [r7, #20]
 8007eb0:	f04f 0200 	mov.w	r2, #0
 8007eb4:	f04f 0300 	mov.w	r3, #0
 8007eb8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ebc:	4659      	mov	r1, fp
 8007ebe:	00cb      	lsls	r3, r1, #3
 8007ec0:	4651      	mov	r1, sl
 8007ec2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ec6:	4651      	mov	r1, sl
 8007ec8:	00ca      	lsls	r2, r1, #3
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4619      	mov	r1, r3
 8007ece:	4603      	mov	r3, r0
 8007ed0:	4642      	mov	r2, r8
 8007ed2:	189b      	adds	r3, r3, r2
 8007ed4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007ed8:	464b      	mov	r3, r9
 8007eda:	460a      	mov	r2, r1
 8007edc:	eb42 0303 	adc.w	r3, r2, r3
 8007ee0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007ee4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007ee8:	685b      	ldr	r3, [r3, #4]
 8007eea:	2200      	movs	r2, #0
 8007eec:	67bb      	str	r3, [r7, #120]	; 0x78
 8007eee:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007ef0:	f04f 0200 	mov.w	r2, #0
 8007ef4:	f04f 0300 	mov.w	r3, #0
 8007ef8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8007efc:	4649      	mov	r1, r9
 8007efe:	008b      	lsls	r3, r1, #2
 8007f00:	4641      	mov	r1, r8
 8007f02:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f06:	4641      	mov	r1, r8
 8007f08:	008a      	lsls	r2, r1, #2
 8007f0a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007f0e:	f7f8 fe53 	bl	8000bb8 <__aeabi_uldivmod>
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	4611      	mov	r1, r2
 8007f18:	4b38      	ldr	r3, [pc, #224]	; (8007ffc <UART_SetConfig+0x4e4>)
 8007f1a:	fba3 2301 	umull	r2, r3, r3, r1
 8007f1e:	095b      	lsrs	r3, r3, #5
 8007f20:	2264      	movs	r2, #100	; 0x64
 8007f22:	fb02 f303 	mul.w	r3, r2, r3
 8007f26:	1acb      	subs	r3, r1, r3
 8007f28:	011b      	lsls	r3, r3, #4
 8007f2a:	3332      	adds	r3, #50	; 0x32
 8007f2c:	4a33      	ldr	r2, [pc, #204]	; (8007ffc <UART_SetConfig+0x4e4>)
 8007f2e:	fba2 2303 	umull	r2, r3, r2, r3
 8007f32:	095b      	lsrs	r3, r3, #5
 8007f34:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007f38:	441c      	add	r4, r3
 8007f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007f3e:	2200      	movs	r2, #0
 8007f40:	673b      	str	r3, [r7, #112]	; 0x70
 8007f42:	677a      	str	r2, [r7, #116]	; 0x74
 8007f44:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007f48:	4642      	mov	r2, r8
 8007f4a:	464b      	mov	r3, r9
 8007f4c:	1891      	adds	r1, r2, r2
 8007f4e:	60b9      	str	r1, [r7, #8]
 8007f50:	415b      	adcs	r3, r3
 8007f52:	60fb      	str	r3, [r7, #12]
 8007f54:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f58:	4641      	mov	r1, r8
 8007f5a:	1851      	adds	r1, r2, r1
 8007f5c:	6039      	str	r1, [r7, #0]
 8007f5e:	4649      	mov	r1, r9
 8007f60:	414b      	adcs	r3, r1
 8007f62:	607b      	str	r3, [r7, #4]
 8007f64:	f04f 0200 	mov.w	r2, #0
 8007f68:	f04f 0300 	mov.w	r3, #0
 8007f6c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007f70:	4659      	mov	r1, fp
 8007f72:	00cb      	lsls	r3, r1, #3
 8007f74:	4651      	mov	r1, sl
 8007f76:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007f7a:	4651      	mov	r1, sl
 8007f7c:	00ca      	lsls	r2, r1, #3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	4619      	mov	r1, r3
 8007f82:	4603      	mov	r3, r0
 8007f84:	4642      	mov	r2, r8
 8007f86:	189b      	adds	r3, r3, r2
 8007f88:	66bb      	str	r3, [r7, #104]	; 0x68
 8007f8a:	464b      	mov	r3, r9
 8007f8c:	460a      	mov	r2, r1
 8007f8e:	eb42 0303 	adc.w	r3, r2, r3
 8007f92:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007f94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007f98:	685b      	ldr	r3, [r3, #4]
 8007f9a:	2200      	movs	r2, #0
 8007f9c:	663b      	str	r3, [r7, #96]	; 0x60
 8007f9e:	667a      	str	r2, [r7, #100]	; 0x64
 8007fa0:	f04f 0200 	mov.w	r2, #0
 8007fa4:	f04f 0300 	mov.w	r3, #0
 8007fa8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007fac:	4649      	mov	r1, r9
 8007fae:	008b      	lsls	r3, r1, #2
 8007fb0:	4641      	mov	r1, r8
 8007fb2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007fb6:	4641      	mov	r1, r8
 8007fb8:	008a      	lsls	r2, r1, #2
 8007fba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007fbe:	f7f8 fdfb 	bl	8000bb8 <__aeabi_uldivmod>
 8007fc2:	4602      	mov	r2, r0
 8007fc4:	460b      	mov	r3, r1
 8007fc6:	4b0d      	ldr	r3, [pc, #52]	; (8007ffc <UART_SetConfig+0x4e4>)
 8007fc8:	fba3 1302 	umull	r1, r3, r3, r2
 8007fcc:	095b      	lsrs	r3, r3, #5
 8007fce:	2164      	movs	r1, #100	; 0x64
 8007fd0:	fb01 f303 	mul.w	r3, r1, r3
 8007fd4:	1ad3      	subs	r3, r2, r3
 8007fd6:	011b      	lsls	r3, r3, #4
 8007fd8:	3332      	adds	r3, #50	; 0x32
 8007fda:	4a08      	ldr	r2, [pc, #32]	; (8007ffc <UART_SetConfig+0x4e4>)
 8007fdc:	fba2 2303 	umull	r2, r3, r2, r3
 8007fe0:	095b      	lsrs	r3, r3, #5
 8007fe2:	f003 020f 	and.w	r2, r3, #15
 8007fe6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007fea:	681b      	ldr	r3, [r3, #0]
 8007fec:	4422      	add	r2, r4
 8007fee:	609a      	str	r2, [r3, #8]
}
 8007ff0:	bf00      	nop
 8007ff2:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007ff6:	46bd      	mov	sp, r7
 8007ff8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007ffc:	51eb851f 	.word	0x51eb851f

08008000 <siscanf>:
 8008000:	b40e      	push	{r1, r2, r3}
 8008002:	b510      	push	{r4, lr}
 8008004:	b09f      	sub	sp, #124	; 0x7c
 8008006:	ac21      	add	r4, sp, #132	; 0x84
 8008008:	f44f 7101 	mov.w	r1, #516	; 0x204
 800800c:	f854 2b04 	ldr.w	r2, [r4], #4
 8008010:	9201      	str	r2, [sp, #4]
 8008012:	f8ad 101c 	strh.w	r1, [sp, #28]
 8008016:	9004      	str	r0, [sp, #16]
 8008018:	9008      	str	r0, [sp, #32]
 800801a:	f7f8 f8e1 	bl	80001e0 <strlen>
 800801e:	4b0c      	ldr	r3, [pc, #48]	; (8008050 <siscanf+0x50>)
 8008020:	9005      	str	r0, [sp, #20]
 8008022:	9009      	str	r0, [sp, #36]	; 0x24
 8008024:	930d      	str	r3, [sp, #52]	; 0x34
 8008026:	480b      	ldr	r0, [pc, #44]	; (8008054 <siscanf+0x54>)
 8008028:	9a01      	ldr	r2, [sp, #4]
 800802a:	6800      	ldr	r0, [r0, #0]
 800802c:	9403      	str	r4, [sp, #12]
 800802e:	2300      	movs	r3, #0
 8008030:	9311      	str	r3, [sp, #68]	; 0x44
 8008032:	9316      	str	r3, [sp, #88]	; 0x58
 8008034:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008038:	f8ad 301e 	strh.w	r3, [sp, #30]
 800803c:	a904      	add	r1, sp, #16
 800803e:	4623      	mov	r3, r4
 8008040:	f000 f992 	bl	8008368 <__ssvfiscanf_r>
 8008044:	b01f      	add	sp, #124	; 0x7c
 8008046:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800804a:	b003      	add	sp, #12
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	08008059 	.word	0x08008059
 8008054:	200000e8 	.word	0x200000e8

08008058 <__seofread>:
 8008058:	2000      	movs	r0, #0
 800805a:	4770      	bx	lr

0800805c <memset>:
 800805c:	4402      	add	r2, r0
 800805e:	4603      	mov	r3, r0
 8008060:	4293      	cmp	r3, r2
 8008062:	d100      	bne.n	8008066 <memset+0xa>
 8008064:	4770      	bx	lr
 8008066:	f803 1b01 	strb.w	r1, [r3], #1
 800806a:	e7f9      	b.n	8008060 <memset+0x4>

0800806c <__errno>:
 800806c:	4b01      	ldr	r3, [pc, #4]	; (8008074 <__errno+0x8>)
 800806e:	6818      	ldr	r0, [r3, #0]
 8008070:	4770      	bx	lr
 8008072:	bf00      	nop
 8008074:	200000e8 	.word	0x200000e8

08008078 <__libc_init_array>:
 8008078:	b570      	push	{r4, r5, r6, lr}
 800807a:	4d0d      	ldr	r5, [pc, #52]	; (80080b0 <__libc_init_array+0x38>)
 800807c:	4c0d      	ldr	r4, [pc, #52]	; (80080b4 <__libc_init_array+0x3c>)
 800807e:	1b64      	subs	r4, r4, r5
 8008080:	10a4      	asrs	r4, r4, #2
 8008082:	2600      	movs	r6, #0
 8008084:	42a6      	cmp	r6, r4
 8008086:	d109      	bne.n	800809c <__libc_init_array+0x24>
 8008088:	4d0b      	ldr	r5, [pc, #44]	; (80080b8 <__libc_init_array+0x40>)
 800808a:	4c0c      	ldr	r4, [pc, #48]	; (80080bc <__libc_init_array+0x44>)
 800808c:	f001 f96e 	bl	800936c <_init>
 8008090:	1b64      	subs	r4, r4, r5
 8008092:	10a4      	asrs	r4, r4, #2
 8008094:	2600      	movs	r6, #0
 8008096:	42a6      	cmp	r6, r4
 8008098:	d105      	bne.n	80080a6 <__libc_init_array+0x2e>
 800809a:	bd70      	pop	{r4, r5, r6, pc}
 800809c:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a0:	4798      	blx	r3
 80080a2:	3601      	adds	r6, #1
 80080a4:	e7ee      	b.n	8008084 <__libc_init_array+0xc>
 80080a6:	f855 3b04 	ldr.w	r3, [r5], #4
 80080aa:	4798      	blx	r3
 80080ac:	3601      	adds	r6, #1
 80080ae:	e7f2      	b.n	8008096 <__libc_init_array+0x1e>
 80080b0:	08009548 	.word	0x08009548
 80080b4:	08009548 	.word	0x08009548
 80080b8:	08009548 	.word	0x08009548
 80080bc:	0800954c 	.word	0x0800954c

080080c0 <__retarget_lock_acquire_recursive>:
 80080c0:	4770      	bx	lr

080080c2 <__retarget_lock_release_recursive>:
 80080c2:	4770      	bx	lr

080080c4 <_free_r>:
 80080c4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80080c6:	2900      	cmp	r1, #0
 80080c8:	d044      	beq.n	8008154 <_free_r+0x90>
 80080ca:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80080ce:	9001      	str	r0, [sp, #4]
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	f1a1 0404 	sub.w	r4, r1, #4
 80080d6:	bfb8      	it	lt
 80080d8:	18e4      	addlt	r4, r4, r3
 80080da:	f000 f8df 	bl	800829c <__malloc_lock>
 80080de:	4a1e      	ldr	r2, [pc, #120]	; (8008158 <_free_r+0x94>)
 80080e0:	9801      	ldr	r0, [sp, #4]
 80080e2:	6813      	ldr	r3, [r2, #0]
 80080e4:	b933      	cbnz	r3, 80080f4 <_free_r+0x30>
 80080e6:	6063      	str	r3, [r4, #4]
 80080e8:	6014      	str	r4, [r2, #0]
 80080ea:	b003      	add	sp, #12
 80080ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80080f0:	f000 b8da 	b.w	80082a8 <__malloc_unlock>
 80080f4:	42a3      	cmp	r3, r4
 80080f6:	d908      	bls.n	800810a <_free_r+0x46>
 80080f8:	6825      	ldr	r5, [r4, #0]
 80080fa:	1961      	adds	r1, r4, r5
 80080fc:	428b      	cmp	r3, r1
 80080fe:	bf01      	itttt	eq
 8008100:	6819      	ldreq	r1, [r3, #0]
 8008102:	685b      	ldreq	r3, [r3, #4]
 8008104:	1949      	addeq	r1, r1, r5
 8008106:	6021      	streq	r1, [r4, #0]
 8008108:	e7ed      	b.n	80080e6 <_free_r+0x22>
 800810a:	461a      	mov	r2, r3
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	b10b      	cbz	r3, 8008114 <_free_r+0x50>
 8008110:	42a3      	cmp	r3, r4
 8008112:	d9fa      	bls.n	800810a <_free_r+0x46>
 8008114:	6811      	ldr	r1, [r2, #0]
 8008116:	1855      	adds	r5, r2, r1
 8008118:	42a5      	cmp	r5, r4
 800811a:	d10b      	bne.n	8008134 <_free_r+0x70>
 800811c:	6824      	ldr	r4, [r4, #0]
 800811e:	4421      	add	r1, r4
 8008120:	1854      	adds	r4, r2, r1
 8008122:	42a3      	cmp	r3, r4
 8008124:	6011      	str	r1, [r2, #0]
 8008126:	d1e0      	bne.n	80080ea <_free_r+0x26>
 8008128:	681c      	ldr	r4, [r3, #0]
 800812a:	685b      	ldr	r3, [r3, #4]
 800812c:	6053      	str	r3, [r2, #4]
 800812e:	440c      	add	r4, r1
 8008130:	6014      	str	r4, [r2, #0]
 8008132:	e7da      	b.n	80080ea <_free_r+0x26>
 8008134:	d902      	bls.n	800813c <_free_r+0x78>
 8008136:	230c      	movs	r3, #12
 8008138:	6003      	str	r3, [r0, #0]
 800813a:	e7d6      	b.n	80080ea <_free_r+0x26>
 800813c:	6825      	ldr	r5, [r4, #0]
 800813e:	1961      	adds	r1, r4, r5
 8008140:	428b      	cmp	r3, r1
 8008142:	bf04      	itt	eq
 8008144:	6819      	ldreq	r1, [r3, #0]
 8008146:	685b      	ldreq	r3, [r3, #4]
 8008148:	6063      	str	r3, [r4, #4]
 800814a:	bf04      	itt	eq
 800814c:	1949      	addeq	r1, r1, r5
 800814e:	6021      	streq	r1, [r4, #0]
 8008150:	6054      	str	r4, [r2, #4]
 8008152:	e7ca      	b.n	80080ea <_free_r+0x26>
 8008154:	b003      	add	sp, #12
 8008156:	bd30      	pop	{r4, r5, pc}
 8008158:	20000414 	.word	0x20000414

0800815c <sbrk_aligned>:
 800815c:	b570      	push	{r4, r5, r6, lr}
 800815e:	4e0e      	ldr	r6, [pc, #56]	; (8008198 <sbrk_aligned+0x3c>)
 8008160:	460c      	mov	r4, r1
 8008162:	6831      	ldr	r1, [r6, #0]
 8008164:	4605      	mov	r5, r0
 8008166:	b911      	cbnz	r1, 800816e <sbrk_aligned+0x12>
 8008168:	f000 fc38 	bl	80089dc <_sbrk_r>
 800816c:	6030      	str	r0, [r6, #0]
 800816e:	4621      	mov	r1, r4
 8008170:	4628      	mov	r0, r5
 8008172:	f000 fc33 	bl	80089dc <_sbrk_r>
 8008176:	1c43      	adds	r3, r0, #1
 8008178:	d00a      	beq.n	8008190 <sbrk_aligned+0x34>
 800817a:	1cc4      	adds	r4, r0, #3
 800817c:	f024 0403 	bic.w	r4, r4, #3
 8008180:	42a0      	cmp	r0, r4
 8008182:	d007      	beq.n	8008194 <sbrk_aligned+0x38>
 8008184:	1a21      	subs	r1, r4, r0
 8008186:	4628      	mov	r0, r5
 8008188:	f000 fc28 	bl	80089dc <_sbrk_r>
 800818c:	3001      	adds	r0, #1
 800818e:	d101      	bne.n	8008194 <sbrk_aligned+0x38>
 8008190:	f04f 34ff 	mov.w	r4, #4294967295
 8008194:	4620      	mov	r0, r4
 8008196:	bd70      	pop	{r4, r5, r6, pc}
 8008198:	20000418 	.word	0x20000418

0800819c <_malloc_r>:
 800819c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80081a0:	1ccd      	adds	r5, r1, #3
 80081a2:	f025 0503 	bic.w	r5, r5, #3
 80081a6:	3508      	adds	r5, #8
 80081a8:	2d0c      	cmp	r5, #12
 80081aa:	bf38      	it	cc
 80081ac:	250c      	movcc	r5, #12
 80081ae:	2d00      	cmp	r5, #0
 80081b0:	4607      	mov	r7, r0
 80081b2:	db01      	blt.n	80081b8 <_malloc_r+0x1c>
 80081b4:	42a9      	cmp	r1, r5
 80081b6:	d905      	bls.n	80081c4 <_malloc_r+0x28>
 80081b8:	230c      	movs	r3, #12
 80081ba:	603b      	str	r3, [r7, #0]
 80081bc:	2600      	movs	r6, #0
 80081be:	4630      	mov	r0, r6
 80081c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80081c4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008298 <_malloc_r+0xfc>
 80081c8:	f000 f868 	bl	800829c <__malloc_lock>
 80081cc:	f8d8 3000 	ldr.w	r3, [r8]
 80081d0:	461c      	mov	r4, r3
 80081d2:	bb5c      	cbnz	r4, 800822c <_malloc_r+0x90>
 80081d4:	4629      	mov	r1, r5
 80081d6:	4638      	mov	r0, r7
 80081d8:	f7ff ffc0 	bl	800815c <sbrk_aligned>
 80081dc:	1c43      	adds	r3, r0, #1
 80081de:	4604      	mov	r4, r0
 80081e0:	d155      	bne.n	800828e <_malloc_r+0xf2>
 80081e2:	f8d8 4000 	ldr.w	r4, [r8]
 80081e6:	4626      	mov	r6, r4
 80081e8:	2e00      	cmp	r6, #0
 80081ea:	d145      	bne.n	8008278 <_malloc_r+0xdc>
 80081ec:	2c00      	cmp	r4, #0
 80081ee:	d048      	beq.n	8008282 <_malloc_r+0xe6>
 80081f0:	6823      	ldr	r3, [r4, #0]
 80081f2:	4631      	mov	r1, r6
 80081f4:	4638      	mov	r0, r7
 80081f6:	eb04 0903 	add.w	r9, r4, r3
 80081fa:	f000 fbef 	bl	80089dc <_sbrk_r>
 80081fe:	4581      	cmp	r9, r0
 8008200:	d13f      	bne.n	8008282 <_malloc_r+0xe6>
 8008202:	6821      	ldr	r1, [r4, #0]
 8008204:	1a6d      	subs	r5, r5, r1
 8008206:	4629      	mov	r1, r5
 8008208:	4638      	mov	r0, r7
 800820a:	f7ff ffa7 	bl	800815c <sbrk_aligned>
 800820e:	3001      	adds	r0, #1
 8008210:	d037      	beq.n	8008282 <_malloc_r+0xe6>
 8008212:	6823      	ldr	r3, [r4, #0]
 8008214:	442b      	add	r3, r5
 8008216:	6023      	str	r3, [r4, #0]
 8008218:	f8d8 3000 	ldr.w	r3, [r8]
 800821c:	2b00      	cmp	r3, #0
 800821e:	d038      	beq.n	8008292 <_malloc_r+0xf6>
 8008220:	685a      	ldr	r2, [r3, #4]
 8008222:	42a2      	cmp	r2, r4
 8008224:	d12b      	bne.n	800827e <_malloc_r+0xe2>
 8008226:	2200      	movs	r2, #0
 8008228:	605a      	str	r2, [r3, #4]
 800822a:	e00f      	b.n	800824c <_malloc_r+0xb0>
 800822c:	6822      	ldr	r2, [r4, #0]
 800822e:	1b52      	subs	r2, r2, r5
 8008230:	d41f      	bmi.n	8008272 <_malloc_r+0xd6>
 8008232:	2a0b      	cmp	r2, #11
 8008234:	d917      	bls.n	8008266 <_malloc_r+0xca>
 8008236:	1961      	adds	r1, r4, r5
 8008238:	42a3      	cmp	r3, r4
 800823a:	6025      	str	r5, [r4, #0]
 800823c:	bf18      	it	ne
 800823e:	6059      	strne	r1, [r3, #4]
 8008240:	6863      	ldr	r3, [r4, #4]
 8008242:	bf08      	it	eq
 8008244:	f8c8 1000 	streq.w	r1, [r8]
 8008248:	5162      	str	r2, [r4, r5]
 800824a:	604b      	str	r3, [r1, #4]
 800824c:	4638      	mov	r0, r7
 800824e:	f104 060b 	add.w	r6, r4, #11
 8008252:	f000 f829 	bl	80082a8 <__malloc_unlock>
 8008256:	f026 0607 	bic.w	r6, r6, #7
 800825a:	1d23      	adds	r3, r4, #4
 800825c:	1af2      	subs	r2, r6, r3
 800825e:	d0ae      	beq.n	80081be <_malloc_r+0x22>
 8008260:	1b9b      	subs	r3, r3, r6
 8008262:	50a3      	str	r3, [r4, r2]
 8008264:	e7ab      	b.n	80081be <_malloc_r+0x22>
 8008266:	42a3      	cmp	r3, r4
 8008268:	6862      	ldr	r2, [r4, #4]
 800826a:	d1dd      	bne.n	8008228 <_malloc_r+0x8c>
 800826c:	f8c8 2000 	str.w	r2, [r8]
 8008270:	e7ec      	b.n	800824c <_malloc_r+0xb0>
 8008272:	4623      	mov	r3, r4
 8008274:	6864      	ldr	r4, [r4, #4]
 8008276:	e7ac      	b.n	80081d2 <_malloc_r+0x36>
 8008278:	4634      	mov	r4, r6
 800827a:	6876      	ldr	r6, [r6, #4]
 800827c:	e7b4      	b.n	80081e8 <_malloc_r+0x4c>
 800827e:	4613      	mov	r3, r2
 8008280:	e7cc      	b.n	800821c <_malloc_r+0x80>
 8008282:	230c      	movs	r3, #12
 8008284:	603b      	str	r3, [r7, #0]
 8008286:	4638      	mov	r0, r7
 8008288:	f000 f80e 	bl	80082a8 <__malloc_unlock>
 800828c:	e797      	b.n	80081be <_malloc_r+0x22>
 800828e:	6025      	str	r5, [r4, #0]
 8008290:	e7dc      	b.n	800824c <_malloc_r+0xb0>
 8008292:	605b      	str	r3, [r3, #4]
 8008294:	deff      	udf	#255	; 0xff
 8008296:	bf00      	nop
 8008298:	20000414 	.word	0x20000414

0800829c <__malloc_lock>:
 800829c:	4801      	ldr	r0, [pc, #4]	; (80082a4 <__malloc_lock+0x8>)
 800829e:	f7ff bf0f 	b.w	80080c0 <__retarget_lock_acquire_recursive>
 80082a2:	bf00      	nop
 80082a4:	20000410 	.word	0x20000410

080082a8 <__malloc_unlock>:
 80082a8:	4801      	ldr	r0, [pc, #4]	; (80082b0 <__malloc_unlock+0x8>)
 80082aa:	f7ff bf0a 	b.w	80080c2 <__retarget_lock_release_recursive>
 80082ae:	bf00      	nop
 80082b0:	20000410 	.word	0x20000410

080082b4 <_sungetc_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	1c4b      	adds	r3, r1, #1
 80082b8:	4614      	mov	r4, r2
 80082ba:	d103      	bne.n	80082c4 <_sungetc_r+0x10>
 80082bc:	f04f 35ff 	mov.w	r5, #4294967295
 80082c0:	4628      	mov	r0, r5
 80082c2:	bd38      	pop	{r3, r4, r5, pc}
 80082c4:	8993      	ldrh	r3, [r2, #12]
 80082c6:	f023 0320 	bic.w	r3, r3, #32
 80082ca:	8193      	strh	r3, [r2, #12]
 80082cc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80082ce:	6852      	ldr	r2, [r2, #4]
 80082d0:	b2cd      	uxtb	r5, r1
 80082d2:	b18b      	cbz	r3, 80082f8 <_sungetc_r+0x44>
 80082d4:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 80082d6:	4293      	cmp	r3, r2
 80082d8:	dd08      	ble.n	80082ec <_sungetc_r+0x38>
 80082da:	6823      	ldr	r3, [r4, #0]
 80082dc:	1e5a      	subs	r2, r3, #1
 80082de:	6022      	str	r2, [r4, #0]
 80082e0:	f803 5c01 	strb.w	r5, [r3, #-1]
 80082e4:	6863      	ldr	r3, [r4, #4]
 80082e6:	3301      	adds	r3, #1
 80082e8:	6063      	str	r3, [r4, #4]
 80082ea:	e7e9      	b.n	80082c0 <_sungetc_r+0xc>
 80082ec:	4621      	mov	r1, r4
 80082ee:	f000 fb3a 	bl	8008966 <__submore>
 80082f2:	2800      	cmp	r0, #0
 80082f4:	d0f1      	beq.n	80082da <_sungetc_r+0x26>
 80082f6:	e7e1      	b.n	80082bc <_sungetc_r+0x8>
 80082f8:	6921      	ldr	r1, [r4, #16]
 80082fa:	6823      	ldr	r3, [r4, #0]
 80082fc:	b151      	cbz	r1, 8008314 <_sungetc_r+0x60>
 80082fe:	4299      	cmp	r1, r3
 8008300:	d208      	bcs.n	8008314 <_sungetc_r+0x60>
 8008302:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8008306:	42a9      	cmp	r1, r5
 8008308:	d104      	bne.n	8008314 <_sungetc_r+0x60>
 800830a:	3b01      	subs	r3, #1
 800830c:	3201      	adds	r2, #1
 800830e:	6023      	str	r3, [r4, #0]
 8008310:	6062      	str	r2, [r4, #4]
 8008312:	e7d5      	b.n	80082c0 <_sungetc_r+0xc>
 8008314:	e9c4 320f 	strd	r3, r2, [r4, #60]	; 0x3c
 8008318:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800831c:	6363      	str	r3, [r4, #52]	; 0x34
 800831e:	2303      	movs	r3, #3
 8008320:	63a3      	str	r3, [r4, #56]	; 0x38
 8008322:	4623      	mov	r3, r4
 8008324:	f803 5f46 	strb.w	r5, [r3, #70]!
 8008328:	6023      	str	r3, [r4, #0]
 800832a:	2301      	movs	r3, #1
 800832c:	e7dc      	b.n	80082e8 <_sungetc_r+0x34>

0800832e <__ssrefill_r>:
 800832e:	b510      	push	{r4, lr}
 8008330:	460c      	mov	r4, r1
 8008332:	6b49      	ldr	r1, [r1, #52]	; 0x34
 8008334:	b169      	cbz	r1, 8008352 <__ssrefill_r+0x24>
 8008336:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800833a:	4299      	cmp	r1, r3
 800833c:	d001      	beq.n	8008342 <__ssrefill_r+0x14>
 800833e:	f7ff fec1 	bl	80080c4 <_free_r>
 8008342:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008344:	6063      	str	r3, [r4, #4]
 8008346:	2000      	movs	r0, #0
 8008348:	6360      	str	r0, [r4, #52]	; 0x34
 800834a:	b113      	cbz	r3, 8008352 <__ssrefill_r+0x24>
 800834c:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800834e:	6023      	str	r3, [r4, #0]
 8008350:	bd10      	pop	{r4, pc}
 8008352:	6923      	ldr	r3, [r4, #16]
 8008354:	6023      	str	r3, [r4, #0]
 8008356:	2300      	movs	r3, #0
 8008358:	6063      	str	r3, [r4, #4]
 800835a:	89a3      	ldrh	r3, [r4, #12]
 800835c:	f043 0320 	orr.w	r3, r3, #32
 8008360:	81a3      	strh	r3, [r4, #12]
 8008362:	f04f 30ff 	mov.w	r0, #4294967295
 8008366:	e7f3      	b.n	8008350 <__ssrefill_r+0x22>

08008368 <__ssvfiscanf_r>:
 8008368:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800836c:	460c      	mov	r4, r1
 800836e:	f5ad 7d22 	sub.w	sp, sp, #648	; 0x288
 8008372:	2100      	movs	r1, #0
 8008374:	e9cd 1144 	strd	r1, r1, [sp, #272]	; 0x110
 8008378:	49a6      	ldr	r1, [pc, #664]	; (8008614 <__ssvfiscanf_r+0x2ac>)
 800837a:	91a0      	str	r1, [sp, #640]	; 0x280
 800837c:	f10d 0804 	add.w	r8, sp, #4
 8008380:	49a5      	ldr	r1, [pc, #660]	; (8008618 <__ssvfiscanf_r+0x2b0>)
 8008382:	4fa6      	ldr	r7, [pc, #664]	; (800861c <__ssvfiscanf_r+0x2b4>)
 8008384:	f8df 9298 	ldr.w	r9, [pc, #664]	; 8008620 <__ssvfiscanf_r+0x2b8>
 8008388:	f8cd 8118 	str.w	r8, [sp, #280]	; 0x118
 800838c:	4606      	mov	r6, r0
 800838e:	91a1      	str	r1, [sp, #644]	; 0x284
 8008390:	9300      	str	r3, [sp, #0]
 8008392:	7813      	ldrb	r3, [r2, #0]
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 815a 	beq.w	800864e <__ssvfiscanf_r+0x2e6>
 800839a:	5cf9      	ldrb	r1, [r7, r3]
 800839c:	f011 0108 	ands.w	r1, r1, #8
 80083a0:	f102 0501 	add.w	r5, r2, #1
 80083a4:	d019      	beq.n	80083da <__ssvfiscanf_r+0x72>
 80083a6:	6863      	ldr	r3, [r4, #4]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	dd0f      	ble.n	80083cc <__ssvfiscanf_r+0x64>
 80083ac:	6823      	ldr	r3, [r4, #0]
 80083ae:	781a      	ldrb	r2, [r3, #0]
 80083b0:	5cba      	ldrb	r2, [r7, r2]
 80083b2:	0712      	lsls	r2, r2, #28
 80083b4:	d401      	bmi.n	80083ba <__ssvfiscanf_r+0x52>
 80083b6:	462a      	mov	r2, r5
 80083b8:	e7eb      	b.n	8008392 <__ssvfiscanf_r+0x2a>
 80083ba:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80083bc:	3201      	adds	r2, #1
 80083be:	9245      	str	r2, [sp, #276]	; 0x114
 80083c0:	6862      	ldr	r2, [r4, #4]
 80083c2:	3301      	adds	r3, #1
 80083c4:	3a01      	subs	r2, #1
 80083c6:	6062      	str	r2, [r4, #4]
 80083c8:	6023      	str	r3, [r4, #0]
 80083ca:	e7ec      	b.n	80083a6 <__ssvfiscanf_r+0x3e>
 80083cc:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80083ce:	4621      	mov	r1, r4
 80083d0:	4630      	mov	r0, r6
 80083d2:	4798      	blx	r3
 80083d4:	2800      	cmp	r0, #0
 80083d6:	d0e9      	beq.n	80083ac <__ssvfiscanf_r+0x44>
 80083d8:	e7ed      	b.n	80083b6 <__ssvfiscanf_r+0x4e>
 80083da:	2b25      	cmp	r3, #37	; 0x25
 80083dc:	d012      	beq.n	8008404 <__ssvfiscanf_r+0x9c>
 80083de:	469a      	mov	sl, r3
 80083e0:	6863      	ldr	r3, [r4, #4]
 80083e2:	2b00      	cmp	r3, #0
 80083e4:	f340 8091 	ble.w	800850a <__ssvfiscanf_r+0x1a2>
 80083e8:	6822      	ldr	r2, [r4, #0]
 80083ea:	7813      	ldrb	r3, [r2, #0]
 80083ec:	4553      	cmp	r3, sl
 80083ee:	f040 812e 	bne.w	800864e <__ssvfiscanf_r+0x2e6>
 80083f2:	6863      	ldr	r3, [r4, #4]
 80083f4:	3b01      	subs	r3, #1
 80083f6:	6063      	str	r3, [r4, #4]
 80083f8:	9b45      	ldr	r3, [sp, #276]	; 0x114
 80083fa:	3201      	adds	r2, #1
 80083fc:	3301      	adds	r3, #1
 80083fe:	6022      	str	r2, [r4, #0]
 8008400:	9345      	str	r3, [sp, #276]	; 0x114
 8008402:	e7d8      	b.n	80083b6 <__ssvfiscanf_r+0x4e>
 8008404:	9141      	str	r1, [sp, #260]	; 0x104
 8008406:	9143      	str	r1, [sp, #268]	; 0x10c
 8008408:	7853      	ldrb	r3, [r2, #1]
 800840a:	2b2a      	cmp	r3, #42	; 0x2a
 800840c:	bf02      	ittt	eq
 800840e:	2310      	moveq	r3, #16
 8008410:	1c95      	addeq	r5, r2, #2
 8008412:	9341      	streq	r3, [sp, #260]	; 0x104
 8008414:	220a      	movs	r2, #10
 8008416:	46aa      	mov	sl, r5
 8008418:	f81a 1b01 	ldrb.w	r1, [sl], #1
 800841c:	f1a1 0330 	sub.w	r3, r1, #48	; 0x30
 8008420:	2b09      	cmp	r3, #9
 8008422:	d91c      	bls.n	800845e <__ssvfiscanf_r+0xf6>
 8008424:	487e      	ldr	r0, [pc, #504]	; (8008620 <__ssvfiscanf_r+0x2b8>)
 8008426:	2203      	movs	r2, #3
 8008428:	f7f7 fee2 	bl	80001f0 <memchr>
 800842c:	b138      	cbz	r0, 800843e <__ssvfiscanf_r+0xd6>
 800842e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008430:	eba0 0009 	sub.w	r0, r0, r9
 8008434:	2301      	movs	r3, #1
 8008436:	4083      	lsls	r3, r0
 8008438:	4313      	orrs	r3, r2
 800843a:	9341      	str	r3, [sp, #260]	; 0x104
 800843c:	4655      	mov	r5, sl
 800843e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8008442:	2b78      	cmp	r3, #120	; 0x78
 8008444:	d806      	bhi.n	8008454 <__ssvfiscanf_r+0xec>
 8008446:	2b57      	cmp	r3, #87	; 0x57
 8008448:	d810      	bhi.n	800846c <__ssvfiscanf_r+0x104>
 800844a:	2b25      	cmp	r3, #37	; 0x25
 800844c:	d0c7      	beq.n	80083de <__ssvfiscanf_r+0x76>
 800844e:	d857      	bhi.n	8008500 <__ssvfiscanf_r+0x198>
 8008450:	2b00      	cmp	r3, #0
 8008452:	d065      	beq.n	8008520 <__ssvfiscanf_r+0x1b8>
 8008454:	2303      	movs	r3, #3
 8008456:	9347      	str	r3, [sp, #284]	; 0x11c
 8008458:	230a      	movs	r3, #10
 800845a:	9342      	str	r3, [sp, #264]	; 0x108
 800845c:	e076      	b.n	800854c <__ssvfiscanf_r+0x1e4>
 800845e:	9b43      	ldr	r3, [sp, #268]	; 0x10c
 8008460:	fb02 1103 	mla	r1, r2, r3, r1
 8008464:	3930      	subs	r1, #48	; 0x30
 8008466:	9143      	str	r1, [sp, #268]	; 0x10c
 8008468:	4655      	mov	r5, sl
 800846a:	e7d4      	b.n	8008416 <__ssvfiscanf_r+0xae>
 800846c:	f1a3 0258 	sub.w	r2, r3, #88	; 0x58
 8008470:	2a20      	cmp	r2, #32
 8008472:	d8ef      	bhi.n	8008454 <__ssvfiscanf_r+0xec>
 8008474:	a101      	add	r1, pc, #4	; (adr r1, 800847c <__ssvfiscanf_r+0x114>)
 8008476:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800847a:	bf00      	nop
 800847c:	0800852f 	.word	0x0800852f
 8008480:	08008455 	.word	0x08008455
 8008484:	08008455 	.word	0x08008455
 8008488:	0800858d 	.word	0x0800858d
 800848c:	08008455 	.word	0x08008455
 8008490:	08008455 	.word	0x08008455
 8008494:	08008455 	.word	0x08008455
 8008498:	08008455 	.word	0x08008455
 800849c:	08008455 	.word	0x08008455
 80084a0:	08008455 	.word	0x08008455
 80084a4:	08008455 	.word	0x08008455
 80084a8:	080085a3 	.word	0x080085a3
 80084ac:	08008589 	.word	0x08008589
 80084b0:	08008507 	.word	0x08008507
 80084b4:	08008507 	.word	0x08008507
 80084b8:	08008507 	.word	0x08008507
 80084bc:	08008455 	.word	0x08008455
 80084c0:	08008545 	.word	0x08008545
 80084c4:	08008455 	.word	0x08008455
 80084c8:	08008455 	.word	0x08008455
 80084cc:	08008455 	.word	0x08008455
 80084d0:	08008455 	.word	0x08008455
 80084d4:	080085b3 	.word	0x080085b3
 80084d8:	08008581 	.word	0x08008581
 80084dc:	08008527 	.word	0x08008527
 80084e0:	08008455 	.word	0x08008455
 80084e4:	08008455 	.word	0x08008455
 80084e8:	080085af 	.word	0x080085af
 80084ec:	08008455 	.word	0x08008455
 80084f0:	08008589 	.word	0x08008589
 80084f4:	08008455 	.word	0x08008455
 80084f8:	08008455 	.word	0x08008455
 80084fc:	0800852f 	.word	0x0800852f
 8008500:	3b45      	subs	r3, #69	; 0x45
 8008502:	2b02      	cmp	r3, #2
 8008504:	d8a6      	bhi.n	8008454 <__ssvfiscanf_r+0xec>
 8008506:	2305      	movs	r3, #5
 8008508:	e01f      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 800850a:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 800850c:	4621      	mov	r1, r4
 800850e:	4630      	mov	r0, r6
 8008510:	4798      	blx	r3
 8008512:	2800      	cmp	r0, #0
 8008514:	f43f af68 	beq.w	80083e8 <__ssvfiscanf_r+0x80>
 8008518:	9844      	ldr	r0, [sp, #272]	; 0x110
 800851a:	2800      	cmp	r0, #0
 800851c:	f040 808d 	bne.w	800863a <__ssvfiscanf_r+0x2d2>
 8008520:	f04f 30ff 	mov.w	r0, #4294967295
 8008524:	e08f      	b.n	8008646 <__ssvfiscanf_r+0x2de>
 8008526:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008528:	f042 0220 	orr.w	r2, r2, #32
 800852c:	9241      	str	r2, [sp, #260]	; 0x104
 800852e:	9a41      	ldr	r2, [sp, #260]	; 0x104
 8008530:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8008534:	9241      	str	r2, [sp, #260]	; 0x104
 8008536:	2210      	movs	r2, #16
 8008538:	2b6f      	cmp	r3, #111	; 0x6f
 800853a:	9242      	str	r2, [sp, #264]	; 0x108
 800853c:	bf34      	ite	cc
 800853e:	2303      	movcc	r3, #3
 8008540:	2304      	movcs	r3, #4
 8008542:	e002      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 8008544:	2300      	movs	r3, #0
 8008546:	9342      	str	r3, [sp, #264]	; 0x108
 8008548:	2303      	movs	r3, #3
 800854a:	9347      	str	r3, [sp, #284]	; 0x11c
 800854c:	6863      	ldr	r3, [r4, #4]
 800854e:	2b00      	cmp	r3, #0
 8008550:	dd3d      	ble.n	80085ce <__ssvfiscanf_r+0x266>
 8008552:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008554:	0659      	lsls	r1, r3, #25
 8008556:	d404      	bmi.n	8008562 <__ssvfiscanf_r+0x1fa>
 8008558:	6823      	ldr	r3, [r4, #0]
 800855a:	781a      	ldrb	r2, [r3, #0]
 800855c:	5cba      	ldrb	r2, [r7, r2]
 800855e:	0712      	lsls	r2, r2, #28
 8008560:	d43c      	bmi.n	80085dc <__ssvfiscanf_r+0x274>
 8008562:	9b47      	ldr	r3, [sp, #284]	; 0x11c
 8008564:	2b02      	cmp	r3, #2
 8008566:	dc4b      	bgt.n	8008600 <__ssvfiscanf_r+0x298>
 8008568:	466b      	mov	r3, sp
 800856a:	4622      	mov	r2, r4
 800856c:	a941      	add	r1, sp, #260	; 0x104
 800856e:	4630      	mov	r0, r6
 8008570:	f000 f872 	bl	8008658 <_scanf_chars>
 8008574:	2801      	cmp	r0, #1
 8008576:	d06a      	beq.n	800864e <__ssvfiscanf_r+0x2e6>
 8008578:	2802      	cmp	r0, #2
 800857a:	f47f af1c 	bne.w	80083b6 <__ssvfiscanf_r+0x4e>
 800857e:	e7cb      	b.n	8008518 <__ssvfiscanf_r+0x1b0>
 8008580:	2308      	movs	r3, #8
 8008582:	9342      	str	r3, [sp, #264]	; 0x108
 8008584:	2304      	movs	r3, #4
 8008586:	e7e0      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 8008588:	220a      	movs	r2, #10
 800858a:	e7d5      	b.n	8008538 <__ssvfiscanf_r+0x1d0>
 800858c:	4629      	mov	r1, r5
 800858e:	4640      	mov	r0, r8
 8008590:	f000 f9b0 	bl	80088f4 <__sccl>
 8008594:	9b41      	ldr	r3, [sp, #260]	; 0x104
 8008596:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800859a:	9341      	str	r3, [sp, #260]	; 0x104
 800859c:	4605      	mov	r5, r0
 800859e:	2301      	movs	r3, #1
 80085a0:	e7d3      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 80085a2:	9b41      	ldr	r3, [sp, #260]	; 0x104
 80085a4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80085a8:	9341      	str	r3, [sp, #260]	; 0x104
 80085aa:	2300      	movs	r3, #0
 80085ac:	e7cd      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 80085ae:	2302      	movs	r3, #2
 80085b0:	e7cb      	b.n	800854a <__ssvfiscanf_r+0x1e2>
 80085b2:	9841      	ldr	r0, [sp, #260]	; 0x104
 80085b4:	06c3      	lsls	r3, r0, #27
 80085b6:	f53f aefe 	bmi.w	80083b6 <__ssvfiscanf_r+0x4e>
 80085ba:	9b00      	ldr	r3, [sp, #0]
 80085bc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085be:	1d19      	adds	r1, r3, #4
 80085c0:	9100      	str	r1, [sp, #0]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	07c0      	lsls	r0, r0, #31
 80085c6:	bf4c      	ite	mi
 80085c8:	801a      	strhmi	r2, [r3, #0]
 80085ca:	601a      	strpl	r2, [r3, #0]
 80085cc:	e6f3      	b.n	80083b6 <__ssvfiscanf_r+0x4e>
 80085ce:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085d0:	4621      	mov	r1, r4
 80085d2:	4630      	mov	r0, r6
 80085d4:	4798      	blx	r3
 80085d6:	2800      	cmp	r0, #0
 80085d8:	d0bb      	beq.n	8008552 <__ssvfiscanf_r+0x1ea>
 80085da:	e79d      	b.n	8008518 <__ssvfiscanf_r+0x1b0>
 80085dc:	9a45      	ldr	r2, [sp, #276]	; 0x114
 80085de:	3201      	adds	r2, #1
 80085e0:	9245      	str	r2, [sp, #276]	; 0x114
 80085e2:	6862      	ldr	r2, [r4, #4]
 80085e4:	3a01      	subs	r2, #1
 80085e6:	2a00      	cmp	r2, #0
 80085e8:	6062      	str	r2, [r4, #4]
 80085ea:	dd02      	ble.n	80085f2 <__ssvfiscanf_r+0x28a>
 80085ec:	3301      	adds	r3, #1
 80085ee:	6023      	str	r3, [r4, #0]
 80085f0:	e7b2      	b.n	8008558 <__ssvfiscanf_r+0x1f0>
 80085f2:	9ba1      	ldr	r3, [sp, #644]	; 0x284
 80085f4:	4621      	mov	r1, r4
 80085f6:	4630      	mov	r0, r6
 80085f8:	4798      	blx	r3
 80085fa:	2800      	cmp	r0, #0
 80085fc:	d0ac      	beq.n	8008558 <__ssvfiscanf_r+0x1f0>
 80085fe:	e78b      	b.n	8008518 <__ssvfiscanf_r+0x1b0>
 8008600:	2b04      	cmp	r3, #4
 8008602:	dc0f      	bgt.n	8008624 <__ssvfiscanf_r+0x2bc>
 8008604:	466b      	mov	r3, sp
 8008606:	4622      	mov	r2, r4
 8008608:	a941      	add	r1, sp, #260	; 0x104
 800860a:	4630      	mov	r0, r6
 800860c:	f000 f87e 	bl	800870c <_scanf_i>
 8008610:	e7b0      	b.n	8008574 <__ssvfiscanf_r+0x20c>
 8008612:	bf00      	nop
 8008614:	080082b5 	.word	0x080082b5
 8008618:	0800832f 	.word	0x0800832f
 800861c:	080093d0 	.word	0x080093d0
 8008620:	080093b0 	.word	0x080093b0
 8008624:	4b0b      	ldr	r3, [pc, #44]	; (8008654 <__ssvfiscanf_r+0x2ec>)
 8008626:	2b00      	cmp	r3, #0
 8008628:	f43f aec5 	beq.w	80083b6 <__ssvfiscanf_r+0x4e>
 800862c:	466b      	mov	r3, sp
 800862e:	4622      	mov	r2, r4
 8008630:	a941      	add	r1, sp, #260	; 0x104
 8008632:	4630      	mov	r0, r6
 8008634:	f3af 8000 	nop.w
 8008638:	e79c      	b.n	8008574 <__ssvfiscanf_r+0x20c>
 800863a:	89a3      	ldrh	r3, [r4, #12]
 800863c:	f013 0f40 	tst.w	r3, #64	; 0x40
 8008640:	bf18      	it	ne
 8008642:	f04f 30ff 	movne.w	r0, #4294967295
 8008646:	f50d 7d22 	add.w	sp, sp, #648	; 0x288
 800864a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800864e:	9844      	ldr	r0, [sp, #272]	; 0x110
 8008650:	e7f9      	b.n	8008646 <__ssvfiscanf_r+0x2de>
 8008652:	bf00      	nop
 8008654:	00000000 	.word	0x00000000

08008658 <_scanf_chars>:
 8008658:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800865c:	4615      	mov	r5, r2
 800865e:	688a      	ldr	r2, [r1, #8]
 8008660:	4680      	mov	r8, r0
 8008662:	460c      	mov	r4, r1
 8008664:	b932      	cbnz	r2, 8008674 <_scanf_chars+0x1c>
 8008666:	698a      	ldr	r2, [r1, #24]
 8008668:	2a00      	cmp	r2, #0
 800866a:	bf0c      	ite	eq
 800866c:	2201      	moveq	r2, #1
 800866e:	f04f 32ff 	movne.w	r2, #4294967295
 8008672:	608a      	str	r2, [r1, #8]
 8008674:	6822      	ldr	r2, [r4, #0]
 8008676:	f8df 9090 	ldr.w	r9, [pc, #144]	; 8008708 <_scanf_chars+0xb0>
 800867a:	06d1      	lsls	r1, r2, #27
 800867c:	bf5f      	itttt	pl
 800867e:	681a      	ldrpl	r2, [r3, #0]
 8008680:	1d11      	addpl	r1, r2, #4
 8008682:	6019      	strpl	r1, [r3, #0]
 8008684:	6816      	ldrpl	r6, [r2, #0]
 8008686:	2700      	movs	r7, #0
 8008688:	69a0      	ldr	r0, [r4, #24]
 800868a:	b188      	cbz	r0, 80086b0 <_scanf_chars+0x58>
 800868c:	2801      	cmp	r0, #1
 800868e:	d107      	bne.n	80086a0 <_scanf_chars+0x48>
 8008690:	682a      	ldr	r2, [r5, #0]
 8008692:	7811      	ldrb	r1, [r2, #0]
 8008694:	6962      	ldr	r2, [r4, #20]
 8008696:	5c52      	ldrb	r2, [r2, r1]
 8008698:	b952      	cbnz	r2, 80086b0 <_scanf_chars+0x58>
 800869a:	2f00      	cmp	r7, #0
 800869c:	d031      	beq.n	8008702 <_scanf_chars+0xaa>
 800869e:	e022      	b.n	80086e6 <_scanf_chars+0x8e>
 80086a0:	2802      	cmp	r0, #2
 80086a2:	d120      	bne.n	80086e6 <_scanf_chars+0x8e>
 80086a4:	682b      	ldr	r3, [r5, #0]
 80086a6:	781b      	ldrb	r3, [r3, #0]
 80086a8:	f819 3003 	ldrb.w	r3, [r9, r3]
 80086ac:	071b      	lsls	r3, r3, #28
 80086ae:	d41a      	bmi.n	80086e6 <_scanf_chars+0x8e>
 80086b0:	6823      	ldr	r3, [r4, #0]
 80086b2:	06da      	lsls	r2, r3, #27
 80086b4:	bf5e      	ittt	pl
 80086b6:	682b      	ldrpl	r3, [r5, #0]
 80086b8:	781b      	ldrbpl	r3, [r3, #0]
 80086ba:	f806 3b01 	strbpl.w	r3, [r6], #1
 80086be:	682a      	ldr	r2, [r5, #0]
 80086c0:	686b      	ldr	r3, [r5, #4]
 80086c2:	3201      	adds	r2, #1
 80086c4:	602a      	str	r2, [r5, #0]
 80086c6:	68a2      	ldr	r2, [r4, #8]
 80086c8:	3b01      	subs	r3, #1
 80086ca:	3a01      	subs	r2, #1
 80086cc:	606b      	str	r3, [r5, #4]
 80086ce:	3701      	adds	r7, #1
 80086d0:	60a2      	str	r2, [r4, #8]
 80086d2:	b142      	cbz	r2, 80086e6 <_scanf_chars+0x8e>
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	dcd7      	bgt.n	8008688 <_scanf_chars+0x30>
 80086d8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80086dc:	4629      	mov	r1, r5
 80086de:	4640      	mov	r0, r8
 80086e0:	4798      	blx	r3
 80086e2:	2800      	cmp	r0, #0
 80086e4:	d0d0      	beq.n	8008688 <_scanf_chars+0x30>
 80086e6:	6823      	ldr	r3, [r4, #0]
 80086e8:	f013 0310 	ands.w	r3, r3, #16
 80086ec:	d105      	bne.n	80086fa <_scanf_chars+0xa2>
 80086ee:	68e2      	ldr	r2, [r4, #12]
 80086f0:	3201      	adds	r2, #1
 80086f2:	60e2      	str	r2, [r4, #12]
 80086f4:	69a2      	ldr	r2, [r4, #24]
 80086f6:	b102      	cbz	r2, 80086fa <_scanf_chars+0xa2>
 80086f8:	7033      	strb	r3, [r6, #0]
 80086fa:	6923      	ldr	r3, [r4, #16]
 80086fc:	443b      	add	r3, r7
 80086fe:	6123      	str	r3, [r4, #16]
 8008700:	2000      	movs	r0, #0
 8008702:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008706:	bf00      	nop
 8008708:	080093d0 	.word	0x080093d0

0800870c <_scanf_i>:
 800870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008710:	4698      	mov	r8, r3
 8008712:	4b74      	ldr	r3, [pc, #464]	; (80088e4 <_scanf_i+0x1d8>)
 8008714:	460c      	mov	r4, r1
 8008716:	4682      	mov	sl, r0
 8008718:	4616      	mov	r6, r2
 800871a:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800871e:	b087      	sub	sp, #28
 8008720:	ab03      	add	r3, sp, #12
 8008722:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8008726:	4b70      	ldr	r3, [pc, #448]	; (80088e8 <_scanf_i+0x1dc>)
 8008728:	69a1      	ldr	r1, [r4, #24]
 800872a:	4a70      	ldr	r2, [pc, #448]	; (80088ec <_scanf_i+0x1e0>)
 800872c:	2903      	cmp	r1, #3
 800872e:	bf18      	it	ne
 8008730:	461a      	movne	r2, r3
 8008732:	68a3      	ldr	r3, [r4, #8]
 8008734:	9201      	str	r2, [sp, #4]
 8008736:	1e5a      	subs	r2, r3, #1
 8008738:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800873c:	bf88      	it	hi
 800873e:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008742:	4627      	mov	r7, r4
 8008744:	bf82      	ittt	hi
 8008746:	eb03 0905 	addhi.w	r9, r3, r5
 800874a:	f240 135d 	movwhi	r3, #349	; 0x15d
 800874e:	60a3      	strhi	r3, [r4, #8]
 8008750:	f857 3b1c 	ldr.w	r3, [r7], #28
 8008754:	f443 6350 	orr.w	r3, r3, #3328	; 0xd00
 8008758:	bf98      	it	ls
 800875a:	f04f 0900 	movls.w	r9, #0
 800875e:	6023      	str	r3, [r4, #0]
 8008760:	463d      	mov	r5, r7
 8008762:	f04f 0b00 	mov.w	fp, #0
 8008766:	6831      	ldr	r1, [r6, #0]
 8008768:	ab03      	add	r3, sp, #12
 800876a:	7809      	ldrb	r1, [r1, #0]
 800876c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 8008770:	2202      	movs	r2, #2
 8008772:	f7f7 fd3d 	bl	80001f0 <memchr>
 8008776:	b328      	cbz	r0, 80087c4 <_scanf_i+0xb8>
 8008778:	f1bb 0f01 	cmp.w	fp, #1
 800877c:	d159      	bne.n	8008832 <_scanf_i+0x126>
 800877e:	6862      	ldr	r2, [r4, #4]
 8008780:	b92a      	cbnz	r2, 800878e <_scanf_i+0x82>
 8008782:	6822      	ldr	r2, [r4, #0]
 8008784:	2308      	movs	r3, #8
 8008786:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800878a:	6063      	str	r3, [r4, #4]
 800878c:	6022      	str	r2, [r4, #0]
 800878e:	6822      	ldr	r2, [r4, #0]
 8008790:	f422 62a0 	bic.w	r2, r2, #1280	; 0x500
 8008794:	6022      	str	r2, [r4, #0]
 8008796:	68a2      	ldr	r2, [r4, #8]
 8008798:	1e51      	subs	r1, r2, #1
 800879a:	60a1      	str	r1, [r4, #8]
 800879c:	b192      	cbz	r2, 80087c4 <_scanf_i+0xb8>
 800879e:	6832      	ldr	r2, [r6, #0]
 80087a0:	1c51      	adds	r1, r2, #1
 80087a2:	6031      	str	r1, [r6, #0]
 80087a4:	7812      	ldrb	r2, [r2, #0]
 80087a6:	f805 2b01 	strb.w	r2, [r5], #1
 80087aa:	6872      	ldr	r2, [r6, #4]
 80087ac:	3a01      	subs	r2, #1
 80087ae:	2a00      	cmp	r2, #0
 80087b0:	6072      	str	r2, [r6, #4]
 80087b2:	dc07      	bgt.n	80087c4 <_scanf_i+0xb8>
 80087b4:	f8d4 2180 	ldr.w	r2, [r4, #384]	; 0x180
 80087b8:	4631      	mov	r1, r6
 80087ba:	4650      	mov	r0, sl
 80087bc:	4790      	blx	r2
 80087be:	2800      	cmp	r0, #0
 80087c0:	f040 8085 	bne.w	80088ce <_scanf_i+0x1c2>
 80087c4:	f10b 0b01 	add.w	fp, fp, #1
 80087c8:	f1bb 0f03 	cmp.w	fp, #3
 80087cc:	d1cb      	bne.n	8008766 <_scanf_i+0x5a>
 80087ce:	6863      	ldr	r3, [r4, #4]
 80087d0:	b90b      	cbnz	r3, 80087d6 <_scanf_i+0xca>
 80087d2:	230a      	movs	r3, #10
 80087d4:	6063      	str	r3, [r4, #4]
 80087d6:	6863      	ldr	r3, [r4, #4]
 80087d8:	4945      	ldr	r1, [pc, #276]	; (80088f0 <_scanf_i+0x1e4>)
 80087da:	6960      	ldr	r0, [r4, #20]
 80087dc:	1ac9      	subs	r1, r1, r3
 80087de:	f000 f889 	bl	80088f4 <__sccl>
 80087e2:	f04f 0b00 	mov.w	fp, #0
 80087e6:	68a3      	ldr	r3, [r4, #8]
 80087e8:	6822      	ldr	r2, [r4, #0]
 80087ea:	2b00      	cmp	r3, #0
 80087ec:	d03d      	beq.n	800886a <_scanf_i+0x15e>
 80087ee:	6831      	ldr	r1, [r6, #0]
 80087f0:	6960      	ldr	r0, [r4, #20]
 80087f2:	f891 c000 	ldrb.w	ip, [r1]
 80087f6:	f810 000c 	ldrb.w	r0, [r0, ip]
 80087fa:	2800      	cmp	r0, #0
 80087fc:	d035      	beq.n	800886a <_scanf_i+0x15e>
 80087fe:	f1bc 0f30 	cmp.w	ip, #48	; 0x30
 8008802:	d124      	bne.n	800884e <_scanf_i+0x142>
 8008804:	0510      	lsls	r0, r2, #20
 8008806:	d522      	bpl.n	800884e <_scanf_i+0x142>
 8008808:	f10b 0b01 	add.w	fp, fp, #1
 800880c:	f1b9 0f00 	cmp.w	r9, #0
 8008810:	d003      	beq.n	800881a <_scanf_i+0x10e>
 8008812:	3301      	adds	r3, #1
 8008814:	f109 39ff 	add.w	r9, r9, #4294967295
 8008818:	60a3      	str	r3, [r4, #8]
 800881a:	6873      	ldr	r3, [r6, #4]
 800881c:	3b01      	subs	r3, #1
 800881e:	2b00      	cmp	r3, #0
 8008820:	6073      	str	r3, [r6, #4]
 8008822:	dd1b      	ble.n	800885c <_scanf_i+0x150>
 8008824:	6833      	ldr	r3, [r6, #0]
 8008826:	3301      	adds	r3, #1
 8008828:	6033      	str	r3, [r6, #0]
 800882a:	68a3      	ldr	r3, [r4, #8]
 800882c:	3b01      	subs	r3, #1
 800882e:	60a3      	str	r3, [r4, #8]
 8008830:	e7d9      	b.n	80087e6 <_scanf_i+0xda>
 8008832:	f1bb 0f02 	cmp.w	fp, #2
 8008836:	d1ae      	bne.n	8008796 <_scanf_i+0x8a>
 8008838:	6822      	ldr	r2, [r4, #0]
 800883a:	f402 61c0 	and.w	r1, r2, #1536	; 0x600
 800883e:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
 8008842:	d1bf      	bne.n	80087c4 <_scanf_i+0xb8>
 8008844:	2310      	movs	r3, #16
 8008846:	6063      	str	r3, [r4, #4]
 8008848:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800884c:	e7a2      	b.n	8008794 <_scanf_i+0x88>
 800884e:	f422 6210 	bic.w	r2, r2, #2304	; 0x900
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	780b      	ldrb	r3, [r1, #0]
 8008856:	f805 3b01 	strb.w	r3, [r5], #1
 800885a:	e7de      	b.n	800881a <_scanf_i+0x10e>
 800885c:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 8008860:	4631      	mov	r1, r6
 8008862:	4650      	mov	r0, sl
 8008864:	4798      	blx	r3
 8008866:	2800      	cmp	r0, #0
 8008868:	d0df      	beq.n	800882a <_scanf_i+0x11e>
 800886a:	6823      	ldr	r3, [r4, #0]
 800886c:	05d9      	lsls	r1, r3, #23
 800886e:	d50d      	bpl.n	800888c <_scanf_i+0x180>
 8008870:	42bd      	cmp	r5, r7
 8008872:	d909      	bls.n	8008888 <_scanf_i+0x17c>
 8008874:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 8008878:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800887c:	4632      	mov	r2, r6
 800887e:	4650      	mov	r0, sl
 8008880:	4798      	blx	r3
 8008882:	f105 39ff 	add.w	r9, r5, #4294967295
 8008886:	464d      	mov	r5, r9
 8008888:	42bd      	cmp	r5, r7
 800888a:	d028      	beq.n	80088de <_scanf_i+0x1d2>
 800888c:	6822      	ldr	r2, [r4, #0]
 800888e:	f012 0210 	ands.w	r2, r2, #16
 8008892:	d113      	bne.n	80088bc <_scanf_i+0x1b0>
 8008894:	702a      	strb	r2, [r5, #0]
 8008896:	6863      	ldr	r3, [r4, #4]
 8008898:	9e01      	ldr	r6, [sp, #4]
 800889a:	4639      	mov	r1, r7
 800889c:	4650      	mov	r0, sl
 800889e:	47b0      	blx	r6
 80088a0:	f8d8 3000 	ldr.w	r3, [r8]
 80088a4:	6821      	ldr	r1, [r4, #0]
 80088a6:	1d1a      	adds	r2, r3, #4
 80088a8:	f8c8 2000 	str.w	r2, [r8]
 80088ac:	f011 0f20 	tst.w	r1, #32
 80088b0:	681b      	ldr	r3, [r3, #0]
 80088b2:	d00f      	beq.n	80088d4 <_scanf_i+0x1c8>
 80088b4:	6018      	str	r0, [r3, #0]
 80088b6:	68e3      	ldr	r3, [r4, #12]
 80088b8:	3301      	adds	r3, #1
 80088ba:	60e3      	str	r3, [r4, #12]
 80088bc:	6923      	ldr	r3, [r4, #16]
 80088be:	1bed      	subs	r5, r5, r7
 80088c0:	445d      	add	r5, fp
 80088c2:	442b      	add	r3, r5
 80088c4:	6123      	str	r3, [r4, #16]
 80088c6:	2000      	movs	r0, #0
 80088c8:	b007      	add	sp, #28
 80088ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ce:	f04f 0b00 	mov.w	fp, #0
 80088d2:	e7ca      	b.n	800886a <_scanf_i+0x15e>
 80088d4:	07ca      	lsls	r2, r1, #31
 80088d6:	bf4c      	ite	mi
 80088d8:	8018      	strhmi	r0, [r3, #0]
 80088da:	6018      	strpl	r0, [r3, #0]
 80088dc:	e7eb      	b.n	80088b6 <_scanf_i+0x1aa>
 80088de:	2001      	movs	r0, #1
 80088e0:	e7f2      	b.n	80088c8 <_scanf_i+0x1bc>
 80088e2:	bf00      	nop
 80088e4:	0800938c 	.word	0x0800938c
 80088e8:	08008c65 	.word	0x08008c65
 80088ec:	08008b7d 	.word	0x08008b7d
 80088f0:	080093c4 	.word	0x080093c4

080088f4 <__sccl>:
 80088f4:	b570      	push	{r4, r5, r6, lr}
 80088f6:	780b      	ldrb	r3, [r1, #0]
 80088f8:	4604      	mov	r4, r0
 80088fa:	2b5e      	cmp	r3, #94	; 0x5e
 80088fc:	bf0b      	itete	eq
 80088fe:	784b      	ldrbeq	r3, [r1, #1]
 8008900:	1c4a      	addne	r2, r1, #1
 8008902:	1c8a      	addeq	r2, r1, #2
 8008904:	2100      	movne	r1, #0
 8008906:	bf08      	it	eq
 8008908:	2101      	moveq	r1, #1
 800890a:	3801      	subs	r0, #1
 800890c:	f104 05ff 	add.w	r5, r4, #255	; 0xff
 8008910:	f800 1f01 	strb.w	r1, [r0, #1]!
 8008914:	42a8      	cmp	r0, r5
 8008916:	d1fb      	bne.n	8008910 <__sccl+0x1c>
 8008918:	b90b      	cbnz	r3, 800891e <__sccl+0x2a>
 800891a:	1e50      	subs	r0, r2, #1
 800891c:	bd70      	pop	{r4, r5, r6, pc}
 800891e:	f081 0101 	eor.w	r1, r1, #1
 8008922:	54e1      	strb	r1, [r4, r3]
 8008924:	4610      	mov	r0, r2
 8008926:	4602      	mov	r2, r0
 8008928:	f812 5b01 	ldrb.w	r5, [r2], #1
 800892c:	2d2d      	cmp	r5, #45	; 0x2d
 800892e:	d005      	beq.n	800893c <__sccl+0x48>
 8008930:	2d5d      	cmp	r5, #93	; 0x5d
 8008932:	d016      	beq.n	8008962 <__sccl+0x6e>
 8008934:	2d00      	cmp	r5, #0
 8008936:	d0f1      	beq.n	800891c <__sccl+0x28>
 8008938:	462b      	mov	r3, r5
 800893a:	e7f2      	b.n	8008922 <__sccl+0x2e>
 800893c:	7846      	ldrb	r6, [r0, #1]
 800893e:	2e5d      	cmp	r6, #93	; 0x5d
 8008940:	d0fa      	beq.n	8008938 <__sccl+0x44>
 8008942:	42b3      	cmp	r3, r6
 8008944:	dcf8      	bgt.n	8008938 <__sccl+0x44>
 8008946:	3002      	adds	r0, #2
 8008948:	461a      	mov	r2, r3
 800894a:	3201      	adds	r2, #1
 800894c:	4296      	cmp	r6, r2
 800894e:	54a1      	strb	r1, [r4, r2]
 8008950:	dcfb      	bgt.n	800894a <__sccl+0x56>
 8008952:	1af2      	subs	r2, r6, r3
 8008954:	3a01      	subs	r2, #1
 8008956:	1c5d      	adds	r5, r3, #1
 8008958:	42b3      	cmp	r3, r6
 800895a:	bfa8      	it	ge
 800895c:	2200      	movge	r2, #0
 800895e:	18ab      	adds	r3, r5, r2
 8008960:	e7e1      	b.n	8008926 <__sccl+0x32>
 8008962:	4610      	mov	r0, r2
 8008964:	e7da      	b.n	800891c <__sccl+0x28>

08008966 <__submore>:
 8008966:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800896a:	460c      	mov	r4, r1
 800896c:	6b49      	ldr	r1, [r1, #52]	; 0x34
 800896e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008972:	4299      	cmp	r1, r3
 8008974:	d11d      	bne.n	80089b2 <__submore+0x4c>
 8008976:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800897a:	f7ff fc0f 	bl	800819c <_malloc_r>
 800897e:	b918      	cbnz	r0, 8008988 <__submore+0x22>
 8008980:	f04f 30ff 	mov.w	r0, #4294967295
 8008984:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008988:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800898c:	63a3      	str	r3, [r4, #56]	; 0x38
 800898e:	f894 3046 	ldrb.w	r3, [r4, #70]	; 0x46
 8008992:	6360      	str	r0, [r4, #52]	; 0x34
 8008994:	f880 33ff 	strb.w	r3, [r0, #1023]	; 0x3ff
 8008998:	f894 3045 	ldrb.w	r3, [r4, #69]	; 0x45
 800899c:	f880 33fe 	strb.w	r3, [r0, #1022]	; 0x3fe
 80089a0:	f894 3044 	ldrb.w	r3, [r4, #68]	; 0x44
 80089a4:	f880 33fd 	strb.w	r3, [r0, #1021]	; 0x3fd
 80089a8:	f200 30fd 	addw	r0, r0, #1021	; 0x3fd
 80089ac:	6020      	str	r0, [r4, #0]
 80089ae:	2000      	movs	r0, #0
 80089b0:	e7e8      	b.n	8008984 <__submore+0x1e>
 80089b2:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 80089b4:	0077      	lsls	r7, r6, #1
 80089b6:	463a      	mov	r2, r7
 80089b8:	f000 f82e 	bl	8008a18 <_realloc_r>
 80089bc:	4605      	mov	r5, r0
 80089be:	2800      	cmp	r0, #0
 80089c0:	d0de      	beq.n	8008980 <__submore+0x1a>
 80089c2:	eb00 0806 	add.w	r8, r0, r6
 80089c6:	4601      	mov	r1, r0
 80089c8:	4632      	mov	r2, r6
 80089ca:	4640      	mov	r0, r8
 80089cc:	f000 f816 	bl	80089fc <memcpy>
 80089d0:	e9c4 570d 	strd	r5, r7, [r4, #52]	; 0x34
 80089d4:	f8c4 8000 	str.w	r8, [r4]
 80089d8:	e7e9      	b.n	80089ae <__submore+0x48>
	...

080089dc <_sbrk_r>:
 80089dc:	b538      	push	{r3, r4, r5, lr}
 80089de:	4d06      	ldr	r5, [pc, #24]	; (80089f8 <_sbrk_r+0x1c>)
 80089e0:	2300      	movs	r3, #0
 80089e2:	4604      	mov	r4, r0
 80089e4:	4608      	mov	r0, r1
 80089e6:	602b      	str	r3, [r5, #0]
 80089e8:	f7f9 fe24 	bl	8002634 <_sbrk>
 80089ec:	1c43      	adds	r3, r0, #1
 80089ee:	d102      	bne.n	80089f6 <_sbrk_r+0x1a>
 80089f0:	682b      	ldr	r3, [r5, #0]
 80089f2:	b103      	cbz	r3, 80089f6 <_sbrk_r+0x1a>
 80089f4:	6023      	str	r3, [r4, #0]
 80089f6:	bd38      	pop	{r3, r4, r5, pc}
 80089f8:	2000040c 	.word	0x2000040c

080089fc <memcpy>:
 80089fc:	440a      	add	r2, r1
 80089fe:	4291      	cmp	r1, r2
 8008a00:	f100 33ff 	add.w	r3, r0, #4294967295
 8008a04:	d100      	bne.n	8008a08 <memcpy+0xc>
 8008a06:	4770      	bx	lr
 8008a08:	b510      	push	{r4, lr}
 8008a0a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008a0e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008a12:	4291      	cmp	r1, r2
 8008a14:	d1f9      	bne.n	8008a0a <memcpy+0xe>
 8008a16:	bd10      	pop	{r4, pc}

08008a18 <_realloc_r>:
 8008a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a1c:	4680      	mov	r8, r0
 8008a1e:	4614      	mov	r4, r2
 8008a20:	460e      	mov	r6, r1
 8008a22:	b921      	cbnz	r1, 8008a2e <_realloc_r+0x16>
 8008a24:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008a28:	4611      	mov	r1, r2
 8008a2a:	f7ff bbb7 	b.w	800819c <_malloc_r>
 8008a2e:	b92a      	cbnz	r2, 8008a3c <_realloc_r+0x24>
 8008a30:	f7ff fb48 	bl	80080c4 <_free_r>
 8008a34:	4625      	mov	r5, r4
 8008a36:	4628      	mov	r0, r5
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	f000 f914 	bl	8008c68 <_malloc_usable_size_r>
 8008a40:	4284      	cmp	r4, r0
 8008a42:	4607      	mov	r7, r0
 8008a44:	d802      	bhi.n	8008a4c <_realloc_r+0x34>
 8008a46:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008a4a:	d812      	bhi.n	8008a72 <_realloc_r+0x5a>
 8008a4c:	4621      	mov	r1, r4
 8008a4e:	4640      	mov	r0, r8
 8008a50:	f7ff fba4 	bl	800819c <_malloc_r>
 8008a54:	4605      	mov	r5, r0
 8008a56:	2800      	cmp	r0, #0
 8008a58:	d0ed      	beq.n	8008a36 <_realloc_r+0x1e>
 8008a5a:	42bc      	cmp	r4, r7
 8008a5c:	4622      	mov	r2, r4
 8008a5e:	4631      	mov	r1, r6
 8008a60:	bf28      	it	cs
 8008a62:	463a      	movcs	r2, r7
 8008a64:	f7ff ffca 	bl	80089fc <memcpy>
 8008a68:	4631      	mov	r1, r6
 8008a6a:	4640      	mov	r0, r8
 8008a6c:	f7ff fb2a 	bl	80080c4 <_free_r>
 8008a70:	e7e1      	b.n	8008a36 <_realloc_r+0x1e>
 8008a72:	4635      	mov	r5, r6
 8008a74:	e7df      	b.n	8008a36 <_realloc_r+0x1e>
	...

08008a78 <_strtol_l.constprop.0>:
 8008a78:	2b01      	cmp	r3, #1
 8008a7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a7e:	d001      	beq.n	8008a84 <_strtol_l.constprop.0+0xc>
 8008a80:	2b24      	cmp	r3, #36	; 0x24
 8008a82:	d906      	bls.n	8008a92 <_strtol_l.constprop.0+0x1a>
 8008a84:	f7ff faf2 	bl	800806c <__errno>
 8008a88:	2316      	movs	r3, #22
 8008a8a:	6003      	str	r3, [r0, #0]
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a92:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008b78 <_strtol_l.constprop.0+0x100>
 8008a96:	460d      	mov	r5, r1
 8008a98:	462e      	mov	r6, r5
 8008a9a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008a9e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8008aa2:	f017 0708 	ands.w	r7, r7, #8
 8008aa6:	d1f7      	bne.n	8008a98 <_strtol_l.constprop.0+0x20>
 8008aa8:	2c2d      	cmp	r4, #45	; 0x2d
 8008aaa:	d132      	bne.n	8008b12 <_strtol_l.constprop.0+0x9a>
 8008aac:	782c      	ldrb	r4, [r5, #0]
 8008aae:	2701      	movs	r7, #1
 8008ab0:	1cb5      	adds	r5, r6, #2
 8008ab2:	2b00      	cmp	r3, #0
 8008ab4:	d05b      	beq.n	8008b6e <_strtol_l.constprop.0+0xf6>
 8008ab6:	2b10      	cmp	r3, #16
 8008ab8:	d109      	bne.n	8008ace <_strtol_l.constprop.0+0x56>
 8008aba:	2c30      	cmp	r4, #48	; 0x30
 8008abc:	d107      	bne.n	8008ace <_strtol_l.constprop.0+0x56>
 8008abe:	782c      	ldrb	r4, [r5, #0]
 8008ac0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008ac4:	2c58      	cmp	r4, #88	; 0x58
 8008ac6:	d14d      	bne.n	8008b64 <_strtol_l.constprop.0+0xec>
 8008ac8:	786c      	ldrb	r4, [r5, #1]
 8008aca:	2310      	movs	r3, #16
 8008acc:	3502      	adds	r5, #2
 8008ace:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008ad2:	f108 38ff 	add.w	r8, r8, #4294967295
 8008ad6:	f04f 0e00 	mov.w	lr, #0
 8008ada:	fbb8 f9f3 	udiv	r9, r8, r3
 8008ade:	4676      	mov	r6, lr
 8008ae0:	fb03 8a19 	mls	sl, r3, r9, r8
 8008ae4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008ae8:	f1bc 0f09 	cmp.w	ip, #9
 8008aec:	d816      	bhi.n	8008b1c <_strtol_l.constprop.0+0xa4>
 8008aee:	4664      	mov	r4, ip
 8008af0:	42a3      	cmp	r3, r4
 8008af2:	dd24      	ble.n	8008b3e <_strtol_l.constprop.0+0xc6>
 8008af4:	f1be 3fff 	cmp.w	lr, #4294967295
 8008af8:	d008      	beq.n	8008b0c <_strtol_l.constprop.0+0x94>
 8008afa:	45b1      	cmp	r9, r6
 8008afc:	d31c      	bcc.n	8008b38 <_strtol_l.constprop.0+0xc0>
 8008afe:	d101      	bne.n	8008b04 <_strtol_l.constprop.0+0x8c>
 8008b00:	45a2      	cmp	sl, r4
 8008b02:	db19      	blt.n	8008b38 <_strtol_l.constprop.0+0xc0>
 8008b04:	fb06 4603 	mla	r6, r6, r3, r4
 8008b08:	f04f 0e01 	mov.w	lr, #1
 8008b0c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b10:	e7e8      	b.n	8008ae4 <_strtol_l.constprop.0+0x6c>
 8008b12:	2c2b      	cmp	r4, #43	; 0x2b
 8008b14:	bf04      	itt	eq
 8008b16:	782c      	ldrbeq	r4, [r5, #0]
 8008b18:	1cb5      	addeq	r5, r6, #2
 8008b1a:	e7ca      	b.n	8008ab2 <_strtol_l.constprop.0+0x3a>
 8008b1c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008b20:	f1bc 0f19 	cmp.w	ip, #25
 8008b24:	d801      	bhi.n	8008b2a <_strtol_l.constprop.0+0xb2>
 8008b26:	3c37      	subs	r4, #55	; 0x37
 8008b28:	e7e2      	b.n	8008af0 <_strtol_l.constprop.0+0x78>
 8008b2a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008b2e:	f1bc 0f19 	cmp.w	ip, #25
 8008b32:	d804      	bhi.n	8008b3e <_strtol_l.constprop.0+0xc6>
 8008b34:	3c57      	subs	r4, #87	; 0x57
 8008b36:	e7db      	b.n	8008af0 <_strtol_l.constprop.0+0x78>
 8008b38:	f04f 3eff 	mov.w	lr, #4294967295
 8008b3c:	e7e6      	b.n	8008b0c <_strtol_l.constprop.0+0x94>
 8008b3e:	f1be 3fff 	cmp.w	lr, #4294967295
 8008b42:	d105      	bne.n	8008b50 <_strtol_l.constprop.0+0xd8>
 8008b44:	2322      	movs	r3, #34	; 0x22
 8008b46:	6003      	str	r3, [r0, #0]
 8008b48:	4646      	mov	r6, r8
 8008b4a:	b942      	cbnz	r2, 8008b5e <_strtol_l.constprop.0+0xe6>
 8008b4c:	4630      	mov	r0, r6
 8008b4e:	e79e      	b.n	8008a8e <_strtol_l.constprop.0+0x16>
 8008b50:	b107      	cbz	r7, 8008b54 <_strtol_l.constprop.0+0xdc>
 8008b52:	4276      	negs	r6, r6
 8008b54:	2a00      	cmp	r2, #0
 8008b56:	d0f9      	beq.n	8008b4c <_strtol_l.constprop.0+0xd4>
 8008b58:	f1be 0f00 	cmp.w	lr, #0
 8008b5c:	d000      	beq.n	8008b60 <_strtol_l.constprop.0+0xe8>
 8008b5e:	1e69      	subs	r1, r5, #1
 8008b60:	6011      	str	r1, [r2, #0]
 8008b62:	e7f3      	b.n	8008b4c <_strtol_l.constprop.0+0xd4>
 8008b64:	2430      	movs	r4, #48	; 0x30
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d1b1      	bne.n	8008ace <_strtol_l.constprop.0+0x56>
 8008b6a:	2308      	movs	r3, #8
 8008b6c:	e7af      	b.n	8008ace <_strtol_l.constprop.0+0x56>
 8008b6e:	2c30      	cmp	r4, #48	; 0x30
 8008b70:	d0a5      	beq.n	8008abe <_strtol_l.constprop.0+0x46>
 8008b72:	230a      	movs	r3, #10
 8008b74:	e7ab      	b.n	8008ace <_strtol_l.constprop.0+0x56>
 8008b76:	bf00      	nop
 8008b78:	080093d0 	.word	0x080093d0

08008b7c <_strtol_r>:
 8008b7c:	f7ff bf7c 	b.w	8008a78 <_strtol_l.constprop.0>

08008b80 <_strtoul_l.constprop.0>:
 8008b80:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008b84:	4f36      	ldr	r7, [pc, #216]	; (8008c60 <_strtoul_l.constprop.0+0xe0>)
 8008b86:	4686      	mov	lr, r0
 8008b88:	460d      	mov	r5, r1
 8008b8a:	4628      	mov	r0, r5
 8008b8c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008b90:	5d3e      	ldrb	r6, [r7, r4]
 8008b92:	f016 0608 	ands.w	r6, r6, #8
 8008b96:	d1f8      	bne.n	8008b8a <_strtoul_l.constprop.0+0xa>
 8008b98:	2c2d      	cmp	r4, #45	; 0x2d
 8008b9a:	d130      	bne.n	8008bfe <_strtoul_l.constprop.0+0x7e>
 8008b9c:	782c      	ldrb	r4, [r5, #0]
 8008b9e:	2601      	movs	r6, #1
 8008ba0:	1c85      	adds	r5, r0, #2
 8008ba2:	2b00      	cmp	r3, #0
 8008ba4:	d057      	beq.n	8008c56 <_strtoul_l.constprop.0+0xd6>
 8008ba6:	2b10      	cmp	r3, #16
 8008ba8:	d109      	bne.n	8008bbe <_strtoul_l.constprop.0+0x3e>
 8008baa:	2c30      	cmp	r4, #48	; 0x30
 8008bac:	d107      	bne.n	8008bbe <_strtoul_l.constprop.0+0x3e>
 8008bae:	7828      	ldrb	r0, [r5, #0]
 8008bb0:	f000 00df 	and.w	r0, r0, #223	; 0xdf
 8008bb4:	2858      	cmp	r0, #88	; 0x58
 8008bb6:	d149      	bne.n	8008c4c <_strtoul_l.constprop.0+0xcc>
 8008bb8:	786c      	ldrb	r4, [r5, #1]
 8008bba:	2310      	movs	r3, #16
 8008bbc:	3502      	adds	r5, #2
 8008bbe:	f04f 38ff 	mov.w	r8, #4294967295
 8008bc2:	2700      	movs	r7, #0
 8008bc4:	fbb8 f8f3 	udiv	r8, r8, r3
 8008bc8:	fb03 f908 	mul.w	r9, r3, r8
 8008bcc:	ea6f 0909 	mvn.w	r9, r9
 8008bd0:	4638      	mov	r0, r7
 8008bd2:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8008bd6:	f1bc 0f09 	cmp.w	ip, #9
 8008bda:	d815      	bhi.n	8008c08 <_strtoul_l.constprop.0+0x88>
 8008bdc:	4664      	mov	r4, ip
 8008bde:	42a3      	cmp	r3, r4
 8008be0:	dd23      	ble.n	8008c2a <_strtoul_l.constprop.0+0xaa>
 8008be2:	f1b7 3fff 	cmp.w	r7, #4294967295
 8008be6:	d007      	beq.n	8008bf8 <_strtoul_l.constprop.0+0x78>
 8008be8:	4580      	cmp	r8, r0
 8008bea:	d31b      	bcc.n	8008c24 <_strtoul_l.constprop.0+0xa4>
 8008bec:	d101      	bne.n	8008bf2 <_strtoul_l.constprop.0+0x72>
 8008bee:	45a1      	cmp	r9, r4
 8008bf0:	db18      	blt.n	8008c24 <_strtoul_l.constprop.0+0xa4>
 8008bf2:	fb00 4003 	mla	r0, r0, r3, r4
 8008bf6:	2701      	movs	r7, #1
 8008bf8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008bfc:	e7e9      	b.n	8008bd2 <_strtoul_l.constprop.0+0x52>
 8008bfe:	2c2b      	cmp	r4, #43	; 0x2b
 8008c00:	bf04      	itt	eq
 8008c02:	782c      	ldrbeq	r4, [r5, #0]
 8008c04:	1c85      	addeq	r5, r0, #2
 8008c06:	e7cc      	b.n	8008ba2 <_strtoul_l.constprop.0+0x22>
 8008c08:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8008c0c:	f1bc 0f19 	cmp.w	ip, #25
 8008c10:	d801      	bhi.n	8008c16 <_strtoul_l.constprop.0+0x96>
 8008c12:	3c37      	subs	r4, #55	; 0x37
 8008c14:	e7e3      	b.n	8008bde <_strtoul_l.constprop.0+0x5e>
 8008c16:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8008c1a:	f1bc 0f19 	cmp.w	ip, #25
 8008c1e:	d804      	bhi.n	8008c2a <_strtoul_l.constprop.0+0xaa>
 8008c20:	3c57      	subs	r4, #87	; 0x57
 8008c22:	e7dc      	b.n	8008bde <_strtoul_l.constprop.0+0x5e>
 8008c24:	f04f 37ff 	mov.w	r7, #4294967295
 8008c28:	e7e6      	b.n	8008bf8 <_strtoul_l.constprop.0+0x78>
 8008c2a:	1c7b      	adds	r3, r7, #1
 8008c2c:	d106      	bne.n	8008c3c <_strtoul_l.constprop.0+0xbc>
 8008c2e:	2322      	movs	r3, #34	; 0x22
 8008c30:	f8ce 3000 	str.w	r3, [lr]
 8008c34:	4638      	mov	r0, r7
 8008c36:	b932      	cbnz	r2, 8008c46 <_strtoul_l.constprop.0+0xc6>
 8008c38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008c3c:	b106      	cbz	r6, 8008c40 <_strtoul_l.constprop.0+0xc0>
 8008c3e:	4240      	negs	r0, r0
 8008c40:	2a00      	cmp	r2, #0
 8008c42:	d0f9      	beq.n	8008c38 <_strtoul_l.constprop.0+0xb8>
 8008c44:	b107      	cbz	r7, 8008c48 <_strtoul_l.constprop.0+0xc8>
 8008c46:	1e69      	subs	r1, r5, #1
 8008c48:	6011      	str	r1, [r2, #0]
 8008c4a:	e7f5      	b.n	8008c38 <_strtoul_l.constprop.0+0xb8>
 8008c4c:	2430      	movs	r4, #48	; 0x30
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1b5      	bne.n	8008bbe <_strtoul_l.constprop.0+0x3e>
 8008c52:	2308      	movs	r3, #8
 8008c54:	e7b3      	b.n	8008bbe <_strtoul_l.constprop.0+0x3e>
 8008c56:	2c30      	cmp	r4, #48	; 0x30
 8008c58:	d0a9      	beq.n	8008bae <_strtoul_l.constprop.0+0x2e>
 8008c5a:	230a      	movs	r3, #10
 8008c5c:	e7af      	b.n	8008bbe <_strtoul_l.constprop.0+0x3e>
 8008c5e:	bf00      	nop
 8008c60:	080093d0 	.word	0x080093d0

08008c64 <_strtoul_r>:
 8008c64:	f7ff bf8c 	b.w	8008b80 <_strtoul_l.constprop.0>

08008c68 <_malloc_usable_size_r>:
 8008c68:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008c6c:	1f18      	subs	r0, r3, #4
 8008c6e:	2b00      	cmp	r3, #0
 8008c70:	bfbc      	itt	lt
 8008c72:	580b      	ldrlt	r3, [r1, r0]
 8008c74:	18c0      	addlt	r0, r0, r3
 8008c76:	4770      	bx	lr

08008c78 <atan2>:
 8008c78:	f000 bab2 	b.w	80091e0 <__ieee754_atan2>

08008c7c <sqrt>:
 8008c7c:	b538      	push	{r3, r4, r5, lr}
 8008c7e:	ed2d 8b02 	vpush	{d8}
 8008c82:	ec55 4b10 	vmov	r4, r5, d0
 8008c86:	f000 f9d1 	bl	800902c <__ieee754_sqrt>
 8008c8a:	4622      	mov	r2, r4
 8008c8c:	462b      	mov	r3, r5
 8008c8e:	4620      	mov	r0, r4
 8008c90:	4629      	mov	r1, r5
 8008c92:	eeb0 8a40 	vmov.f32	s16, s0
 8008c96:	eef0 8a60 	vmov.f32	s17, s1
 8008c9a:	f7f7 ff4f 	bl	8000b3c <__aeabi_dcmpun>
 8008c9e:	b990      	cbnz	r0, 8008cc6 <sqrt+0x4a>
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	2300      	movs	r3, #0
 8008ca4:	4620      	mov	r0, r4
 8008ca6:	4629      	mov	r1, r5
 8008ca8:	f7f7 ff20 	bl	8000aec <__aeabi_dcmplt>
 8008cac:	b158      	cbz	r0, 8008cc6 <sqrt+0x4a>
 8008cae:	f7ff f9dd 	bl	800806c <__errno>
 8008cb2:	2321      	movs	r3, #33	; 0x21
 8008cb4:	6003      	str	r3, [r0, #0]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	2300      	movs	r3, #0
 8008cba:	4610      	mov	r0, r2
 8008cbc:	4619      	mov	r1, r3
 8008cbe:	f7f7 fdcd 	bl	800085c <__aeabi_ddiv>
 8008cc2:	ec41 0b18 	vmov	d8, r0, r1
 8008cc6:	eeb0 0a48 	vmov.f32	s0, s16
 8008cca:	eef0 0a68 	vmov.f32	s1, s17
 8008cce:	ecbd 8b02 	vpop	{d8}
 8008cd2:	bd38      	pop	{r3, r4, r5, pc}
 8008cd4:	0000      	movs	r0, r0
	...

08008cd8 <atan>:
 8008cd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cdc:	ec55 4b10 	vmov	r4, r5, d0
 8008ce0:	4bc3      	ldr	r3, [pc, #780]	; (8008ff0 <atan+0x318>)
 8008ce2:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8008ce6:	429e      	cmp	r6, r3
 8008ce8:	46ab      	mov	fp, r5
 8008cea:	dd18      	ble.n	8008d1e <atan+0x46>
 8008cec:	4bc1      	ldr	r3, [pc, #772]	; (8008ff4 <atan+0x31c>)
 8008cee:	429e      	cmp	r6, r3
 8008cf0:	dc01      	bgt.n	8008cf6 <atan+0x1e>
 8008cf2:	d109      	bne.n	8008d08 <atan+0x30>
 8008cf4:	b144      	cbz	r4, 8008d08 <atan+0x30>
 8008cf6:	4622      	mov	r2, r4
 8008cf8:	462b      	mov	r3, r5
 8008cfa:	4620      	mov	r0, r4
 8008cfc:	4629      	mov	r1, r5
 8008cfe:	f7f7 facd 	bl	800029c <__adddf3>
 8008d02:	4604      	mov	r4, r0
 8008d04:	460d      	mov	r5, r1
 8008d06:	e006      	b.n	8008d16 <atan+0x3e>
 8008d08:	f1bb 0f00 	cmp.w	fp, #0
 8008d0c:	f300 8131 	bgt.w	8008f72 <atan+0x29a>
 8008d10:	a59b      	add	r5, pc, #620	; (adr r5, 8008f80 <atan+0x2a8>)
 8008d12:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008d16:	ec45 4b10 	vmov	d0, r4, r5
 8008d1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1e:	4bb6      	ldr	r3, [pc, #728]	; (8008ff8 <atan+0x320>)
 8008d20:	429e      	cmp	r6, r3
 8008d22:	dc14      	bgt.n	8008d4e <atan+0x76>
 8008d24:	f1a3 73de 	sub.w	r3, r3, #29097984	; 0x1bc0000
 8008d28:	429e      	cmp	r6, r3
 8008d2a:	dc0d      	bgt.n	8008d48 <atan+0x70>
 8008d2c:	a396      	add	r3, pc, #600	; (adr r3, 8008f88 <atan+0x2b0>)
 8008d2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d32:	ee10 0a10 	vmov	r0, s0
 8008d36:	4629      	mov	r1, r5
 8008d38:	f7f7 fab0 	bl	800029c <__adddf3>
 8008d3c:	4baf      	ldr	r3, [pc, #700]	; (8008ffc <atan+0x324>)
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f7f7 fef2 	bl	8000b28 <__aeabi_dcmpgt>
 8008d44:	2800      	cmp	r0, #0
 8008d46:	d1e6      	bne.n	8008d16 <atan+0x3e>
 8008d48:	f04f 3aff 	mov.w	sl, #4294967295
 8008d4c:	e02b      	b.n	8008da6 <atan+0xce>
 8008d4e:	f000 f963 	bl	8009018 <fabs>
 8008d52:	4bab      	ldr	r3, [pc, #684]	; (8009000 <atan+0x328>)
 8008d54:	429e      	cmp	r6, r3
 8008d56:	ec55 4b10 	vmov	r4, r5, d0
 8008d5a:	f300 80bf 	bgt.w	8008edc <atan+0x204>
 8008d5e:	f5a3 2350 	sub.w	r3, r3, #851968	; 0xd0000
 8008d62:	429e      	cmp	r6, r3
 8008d64:	f300 80a0 	bgt.w	8008ea8 <atan+0x1d0>
 8008d68:	ee10 2a10 	vmov	r2, s0
 8008d6c:	ee10 0a10 	vmov	r0, s0
 8008d70:	462b      	mov	r3, r5
 8008d72:	4629      	mov	r1, r5
 8008d74:	f7f7 fa92 	bl	800029c <__adddf3>
 8008d78:	4ba0      	ldr	r3, [pc, #640]	; (8008ffc <atan+0x324>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	f7f7 fa8c 	bl	8000298 <__aeabi_dsub>
 8008d80:	2200      	movs	r2, #0
 8008d82:	4606      	mov	r6, r0
 8008d84:	460f      	mov	r7, r1
 8008d86:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d8a:	4620      	mov	r0, r4
 8008d8c:	4629      	mov	r1, r5
 8008d8e:	f7f7 fa85 	bl	800029c <__adddf3>
 8008d92:	4602      	mov	r2, r0
 8008d94:	460b      	mov	r3, r1
 8008d96:	4630      	mov	r0, r6
 8008d98:	4639      	mov	r1, r7
 8008d9a:	f7f7 fd5f 	bl	800085c <__aeabi_ddiv>
 8008d9e:	f04f 0a00 	mov.w	sl, #0
 8008da2:	4604      	mov	r4, r0
 8008da4:	460d      	mov	r5, r1
 8008da6:	4622      	mov	r2, r4
 8008da8:	462b      	mov	r3, r5
 8008daa:	4620      	mov	r0, r4
 8008dac:	4629      	mov	r1, r5
 8008dae:	f7f7 fc2b 	bl	8000608 <__aeabi_dmul>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	4680      	mov	r8, r0
 8008db8:	4689      	mov	r9, r1
 8008dba:	f7f7 fc25 	bl	8000608 <__aeabi_dmul>
 8008dbe:	a374      	add	r3, pc, #464	; (adr r3, 8008f90 <atan+0x2b8>)
 8008dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dc4:	4606      	mov	r6, r0
 8008dc6:	460f      	mov	r7, r1
 8008dc8:	f7f7 fc1e 	bl	8000608 <__aeabi_dmul>
 8008dcc:	a372      	add	r3, pc, #456	; (adr r3, 8008f98 <atan+0x2c0>)
 8008dce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd2:	f7f7 fa63 	bl	800029c <__adddf3>
 8008dd6:	4632      	mov	r2, r6
 8008dd8:	463b      	mov	r3, r7
 8008dda:	f7f7 fc15 	bl	8000608 <__aeabi_dmul>
 8008dde:	a370      	add	r3, pc, #448	; (adr r3, 8008fa0 <atan+0x2c8>)
 8008de0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008de4:	f7f7 fa5a 	bl	800029c <__adddf3>
 8008de8:	4632      	mov	r2, r6
 8008dea:	463b      	mov	r3, r7
 8008dec:	f7f7 fc0c 	bl	8000608 <__aeabi_dmul>
 8008df0:	a36d      	add	r3, pc, #436	; (adr r3, 8008fa8 <atan+0x2d0>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	f7f7 fa51 	bl	800029c <__adddf3>
 8008dfa:	4632      	mov	r2, r6
 8008dfc:	463b      	mov	r3, r7
 8008dfe:	f7f7 fc03 	bl	8000608 <__aeabi_dmul>
 8008e02:	a36b      	add	r3, pc, #428	; (adr r3, 8008fb0 <atan+0x2d8>)
 8008e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e08:	f7f7 fa48 	bl	800029c <__adddf3>
 8008e0c:	4632      	mov	r2, r6
 8008e0e:	463b      	mov	r3, r7
 8008e10:	f7f7 fbfa 	bl	8000608 <__aeabi_dmul>
 8008e14:	a368      	add	r3, pc, #416	; (adr r3, 8008fb8 <atan+0x2e0>)
 8008e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e1a:	f7f7 fa3f 	bl	800029c <__adddf3>
 8008e1e:	4642      	mov	r2, r8
 8008e20:	464b      	mov	r3, r9
 8008e22:	f7f7 fbf1 	bl	8000608 <__aeabi_dmul>
 8008e26:	a366      	add	r3, pc, #408	; (adr r3, 8008fc0 <atan+0x2e8>)
 8008e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e2c:	4680      	mov	r8, r0
 8008e2e:	4689      	mov	r9, r1
 8008e30:	4630      	mov	r0, r6
 8008e32:	4639      	mov	r1, r7
 8008e34:	f7f7 fbe8 	bl	8000608 <__aeabi_dmul>
 8008e38:	a363      	add	r3, pc, #396	; (adr r3, 8008fc8 <atan+0x2f0>)
 8008e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e3e:	f7f7 fa2b 	bl	8000298 <__aeabi_dsub>
 8008e42:	4632      	mov	r2, r6
 8008e44:	463b      	mov	r3, r7
 8008e46:	f7f7 fbdf 	bl	8000608 <__aeabi_dmul>
 8008e4a:	a361      	add	r3, pc, #388	; (adr r3, 8008fd0 <atan+0x2f8>)
 8008e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e50:	f7f7 fa22 	bl	8000298 <__aeabi_dsub>
 8008e54:	4632      	mov	r2, r6
 8008e56:	463b      	mov	r3, r7
 8008e58:	f7f7 fbd6 	bl	8000608 <__aeabi_dmul>
 8008e5c:	a35e      	add	r3, pc, #376	; (adr r3, 8008fd8 <atan+0x300>)
 8008e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e62:	f7f7 fa19 	bl	8000298 <__aeabi_dsub>
 8008e66:	4632      	mov	r2, r6
 8008e68:	463b      	mov	r3, r7
 8008e6a:	f7f7 fbcd 	bl	8000608 <__aeabi_dmul>
 8008e6e:	a35c      	add	r3, pc, #368	; (adr r3, 8008fe0 <atan+0x308>)
 8008e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e74:	f7f7 fa10 	bl	8000298 <__aeabi_dsub>
 8008e78:	4632      	mov	r2, r6
 8008e7a:	463b      	mov	r3, r7
 8008e7c:	f7f7 fbc4 	bl	8000608 <__aeabi_dmul>
 8008e80:	4602      	mov	r2, r0
 8008e82:	460b      	mov	r3, r1
 8008e84:	4640      	mov	r0, r8
 8008e86:	4649      	mov	r1, r9
 8008e88:	f7f7 fa08 	bl	800029c <__adddf3>
 8008e8c:	4622      	mov	r2, r4
 8008e8e:	462b      	mov	r3, r5
 8008e90:	f7f7 fbba 	bl	8000608 <__aeabi_dmul>
 8008e94:	f1ba 3fff 	cmp.w	sl, #4294967295
 8008e98:	4602      	mov	r2, r0
 8008e9a:	460b      	mov	r3, r1
 8008e9c:	d14b      	bne.n	8008f36 <atan+0x25e>
 8008e9e:	4620      	mov	r0, r4
 8008ea0:	4629      	mov	r1, r5
 8008ea2:	f7f7 f9f9 	bl	8000298 <__aeabi_dsub>
 8008ea6:	e72c      	b.n	8008d02 <atan+0x2a>
 8008ea8:	ee10 0a10 	vmov	r0, s0
 8008eac:	4b53      	ldr	r3, [pc, #332]	; (8008ffc <atan+0x324>)
 8008eae:	2200      	movs	r2, #0
 8008eb0:	4629      	mov	r1, r5
 8008eb2:	f7f7 f9f1 	bl	8000298 <__aeabi_dsub>
 8008eb6:	4b51      	ldr	r3, [pc, #324]	; (8008ffc <atan+0x324>)
 8008eb8:	4606      	mov	r6, r0
 8008eba:	460f      	mov	r7, r1
 8008ebc:	2200      	movs	r2, #0
 8008ebe:	4620      	mov	r0, r4
 8008ec0:	4629      	mov	r1, r5
 8008ec2:	f7f7 f9eb 	bl	800029c <__adddf3>
 8008ec6:	4602      	mov	r2, r0
 8008ec8:	460b      	mov	r3, r1
 8008eca:	4630      	mov	r0, r6
 8008ecc:	4639      	mov	r1, r7
 8008ece:	f7f7 fcc5 	bl	800085c <__aeabi_ddiv>
 8008ed2:	f04f 0a01 	mov.w	sl, #1
 8008ed6:	4604      	mov	r4, r0
 8008ed8:	460d      	mov	r5, r1
 8008eda:	e764      	b.n	8008da6 <atan+0xce>
 8008edc:	4b49      	ldr	r3, [pc, #292]	; (8009004 <atan+0x32c>)
 8008ede:	429e      	cmp	r6, r3
 8008ee0:	da1d      	bge.n	8008f1e <atan+0x246>
 8008ee2:	ee10 0a10 	vmov	r0, s0
 8008ee6:	4b48      	ldr	r3, [pc, #288]	; (8009008 <atan+0x330>)
 8008ee8:	2200      	movs	r2, #0
 8008eea:	4629      	mov	r1, r5
 8008eec:	f7f7 f9d4 	bl	8000298 <__aeabi_dsub>
 8008ef0:	4b45      	ldr	r3, [pc, #276]	; (8009008 <atan+0x330>)
 8008ef2:	4606      	mov	r6, r0
 8008ef4:	460f      	mov	r7, r1
 8008ef6:	2200      	movs	r2, #0
 8008ef8:	4620      	mov	r0, r4
 8008efa:	4629      	mov	r1, r5
 8008efc:	f7f7 fb84 	bl	8000608 <__aeabi_dmul>
 8008f00:	4b3e      	ldr	r3, [pc, #248]	; (8008ffc <atan+0x324>)
 8008f02:	2200      	movs	r2, #0
 8008f04:	f7f7 f9ca 	bl	800029c <__adddf3>
 8008f08:	4602      	mov	r2, r0
 8008f0a:	460b      	mov	r3, r1
 8008f0c:	4630      	mov	r0, r6
 8008f0e:	4639      	mov	r1, r7
 8008f10:	f7f7 fca4 	bl	800085c <__aeabi_ddiv>
 8008f14:	f04f 0a02 	mov.w	sl, #2
 8008f18:	4604      	mov	r4, r0
 8008f1a:	460d      	mov	r5, r1
 8008f1c:	e743      	b.n	8008da6 <atan+0xce>
 8008f1e:	462b      	mov	r3, r5
 8008f20:	ee10 2a10 	vmov	r2, s0
 8008f24:	4939      	ldr	r1, [pc, #228]	; (800900c <atan+0x334>)
 8008f26:	2000      	movs	r0, #0
 8008f28:	f7f7 fc98 	bl	800085c <__aeabi_ddiv>
 8008f2c:	f04f 0a03 	mov.w	sl, #3
 8008f30:	4604      	mov	r4, r0
 8008f32:	460d      	mov	r5, r1
 8008f34:	e737      	b.n	8008da6 <atan+0xce>
 8008f36:	4b36      	ldr	r3, [pc, #216]	; (8009010 <atan+0x338>)
 8008f38:	4e36      	ldr	r6, [pc, #216]	; (8009014 <atan+0x33c>)
 8008f3a:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f42:	f7f7 f9a9 	bl	8000298 <__aeabi_dsub>
 8008f46:	4622      	mov	r2, r4
 8008f48:	462b      	mov	r3, r5
 8008f4a:	f7f7 f9a5 	bl	8000298 <__aeabi_dsub>
 8008f4e:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 8008f52:	4602      	mov	r2, r0
 8008f54:	460b      	mov	r3, r1
 8008f56:	e9d6 0100 	ldrd	r0, r1, [r6]
 8008f5a:	f7f7 f99d 	bl	8000298 <__aeabi_dsub>
 8008f5e:	f1bb 0f00 	cmp.w	fp, #0
 8008f62:	4604      	mov	r4, r0
 8008f64:	460d      	mov	r5, r1
 8008f66:	f6bf aed6 	bge.w	8008d16 <atan+0x3e>
 8008f6a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f6e:	461d      	mov	r5, r3
 8008f70:	e6d1      	b.n	8008d16 <atan+0x3e>
 8008f72:	a51d      	add	r5, pc, #116	; (adr r5, 8008fe8 <atan+0x310>)
 8008f74:	e9d5 4500 	ldrd	r4, r5, [r5]
 8008f78:	e6cd      	b.n	8008d16 <atan+0x3e>
 8008f7a:	bf00      	nop
 8008f7c:	f3af 8000 	nop.w
 8008f80:	54442d18 	.word	0x54442d18
 8008f84:	bff921fb 	.word	0xbff921fb
 8008f88:	8800759c 	.word	0x8800759c
 8008f8c:	7e37e43c 	.word	0x7e37e43c
 8008f90:	e322da11 	.word	0xe322da11
 8008f94:	3f90ad3a 	.word	0x3f90ad3a
 8008f98:	24760deb 	.word	0x24760deb
 8008f9c:	3fa97b4b 	.word	0x3fa97b4b
 8008fa0:	a0d03d51 	.word	0xa0d03d51
 8008fa4:	3fb10d66 	.word	0x3fb10d66
 8008fa8:	c54c206e 	.word	0xc54c206e
 8008fac:	3fb745cd 	.word	0x3fb745cd
 8008fb0:	920083ff 	.word	0x920083ff
 8008fb4:	3fc24924 	.word	0x3fc24924
 8008fb8:	5555550d 	.word	0x5555550d
 8008fbc:	3fd55555 	.word	0x3fd55555
 8008fc0:	2c6a6c2f 	.word	0x2c6a6c2f
 8008fc4:	bfa2b444 	.word	0xbfa2b444
 8008fc8:	52defd9a 	.word	0x52defd9a
 8008fcc:	3fadde2d 	.word	0x3fadde2d
 8008fd0:	af749a6d 	.word	0xaf749a6d
 8008fd4:	3fb3b0f2 	.word	0x3fb3b0f2
 8008fd8:	fe231671 	.word	0xfe231671
 8008fdc:	3fbc71c6 	.word	0x3fbc71c6
 8008fe0:	9998ebc4 	.word	0x9998ebc4
 8008fe4:	3fc99999 	.word	0x3fc99999
 8008fe8:	54442d18 	.word	0x54442d18
 8008fec:	3ff921fb 	.word	0x3ff921fb
 8008ff0:	440fffff 	.word	0x440fffff
 8008ff4:	7ff00000 	.word	0x7ff00000
 8008ff8:	3fdbffff 	.word	0x3fdbffff
 8008ffc:	3ff00000 	.word	0x3ff00000
 8009000:	3ff2ffff 	.word	0x3ff2ffff
 8009004:	40038000 	.word	0x40038000
 8009008:	3ff80000 	.word	0x3ff80000
 800900c:	bff00000 	.word	0xbff00000
 8009010:	080094f0 	.word	0x080094f0
 8009014:	080094d0 	.word	0x080094d0

08009018 <fabs>:
 8009018:	ec51 0b10 	vmov	r0, r1, d0
 800901c:	ee10 2a10 	vmov	r2, s0
 8009020:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009024:	ec43 2b10 	vmov	d0, r2, r3
 8009028:	4770      	bx	lr
	...

0800902c <__ieee754_sqrt>:
 800902c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009030:	ec55 4b10 	vmov	r4, r5, d0
 8009034:	4e67      	ldr	r6, [pc, #412]	; (80091d4 <__ieee754_sqrt+0x1a8>)
 8009036:	43ae      	bics	r6, r5
 8009038:	ee10 0a10 	vmov	r0, s0
 800903c:	ee10 2a10 	vmov	r2, s0
 8009040:	4629      	mov	r1, r5
 8009042:	462b      	mov	r3, r5
 8009044:	d10d      	bne.n	8009062 <__ieee754_sqrt+0x36>
 8009046:	f7f7 fadf 	bl	8000608 <__aeabi_dmul>
 800904a:	4602      	mov	r2, r0
 800904c:	460b      	mov	r3, r1
 800904e:	4620      	mov	r0, r4
 8009050:	4629      	mov	r1, r5
 8009052:	f7f7 f923 	bl	800029c <__adddf3>
 8009056:	4604      	mov	r4, r0
 8009058:	460d      	mov	r5, r1
 800905a:	ec45 4b10 	vmov	d0, r4, r5
 800905e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009062:	2d00      	cmp	r5, #0
 8009064:	dc0b      	bgt.n	800907e <__ieee754_sqrt+0x52>
 8009066:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800906a:	4326      	orrs	r6, r4
 800906c:	d0f5      	beq.n	800905a <__ieee754_sqrt+0x2e>
 800906e:	b135      	cbz	r5, 800907e <__ieee754_sqrt+0x52>
 8009070:	f7f7 f912 	bl	8000298 <__aeabi_dsub>
 8009074:	4602      	mov	r2, r0
 8009076:	460b      	mov	r3, r1
 8009078:	f7f7 fbf0 	bl	800085c <__aeabi_ddiv>
 800907c:	e7eb      	b.n	8009056 <__ieee754_sqrt+0x2a>
 800907e:	1509      	asrs	r1, r1, #20
 8009080:	f000 808d 	beq.w	800919e <__ieee754_sqrt+0x172>
 8009084:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009088:	f2a1 36ff 	subw	r6, r1, #1023	; 0x3ff
 800908c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009090:	07c9      	lsls	r1, r1, #31
 8009092:	bf5c      	itt	pl
 8009094:	005b      	lslpl	r3, r3, #1
 8009096:	eb03 73d2 	addpl.w	r3, r3, r2, lsr #31
 800909a:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800909e:	bf58      	it	pl
 80090a0:	0052      	lslpl	r2, r2, #1
 80090a2:	2500      	movs	r5, #0
 80090a4:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090a8:	1076      	asrs	r6, r6, #1
 80090aa:	0052      	lsls	r2, r2, #1
 80090ac:	f04f 0e16 	mov.w	lr, #22
 80090b0:	46ac      	mov	ip, r5
 80090b2:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80090b6:	eb0c 0001 	add.w	r0, ip, r1
 80090ba:	4298      	cmp	r0, r3
 80090bc:	bfde      	ittt	le
 80090be:	1a1b      	suble	r3, r3, r0
 80090c0:	eb00 0c01 	addle.w	ip, r0, r1
 80090c4:	186d      	addle	r5, r5, r1
 80090c6:	005b      	lsls	r3, r3, #1
 80090c8:	f1be 0e01 	subs.w	lr, lr, #1
 80090cc:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 80090d0:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80090d4:	ea4f 0242 	mov.w	r2, r2, lsl #1
 80090d8:	d1ed      	bne.n	80090b6 <__ieee754_sqrt+0x8a>
 80090da:	4674      	mov	r4, lr
 80090dc:	2720      	movs	r7, #32
 80090de:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80090e2:	4563      	cmp	r3, ip
 80090e4:	eb01 000e 	add.w	r0, r1, lr
 80090e8:	dc02      	bgt.n	80090f0 <__ieee754_sqrt+0xc4>
 80090ea:	d113      	bne.n	8009114 <__ieee754_sqrt+0xe8>
 80090ec:	4290      	cmp	r0, r2
 80090ee:	d811      	bhi.n	8009114 <__ieee754_sqrt+0xe8>
 80090f0:	2800      	cmp	r0, #0
 80090f2:	eb00 0e01 	add.w	lr, r0, r1
 80090f6:	da57      	bge.n	80091a8 <__ieee754_sqrt+0x17c>
 80090f8:	f1be 0f00 	cmp.w	lr, #0
 80090fc:	db54      	blt.n	80091a8 <__ieee754_sqrt+0x17c>
 80090fe:	f10c 0801 	add.w	r8, ip, #1
 8009102:	eba3 030c 	sub.w	r3, r3, ip
 8009106:	4290      	cmp	r0, r2
 8009108:	bf88      	it	hi
 800910a:	f103 33ff 	addhi.w	r3, r3, #4294967295
 800910e:	1a12      	subs	r2, r2, r0
 8009110:	440c      	add	r4, r1
 8009112:	46c4      	mov	ip, r8
 8009114:	005b      	lsls	r3, r3, #1
 8009116:	3f01      	subs	r7, #1
 8009118:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
 800911c:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009120:	ea4f 0242 	mov.w	r2, r2, lsl #1
 8009124:	d1dd      	bne.n	80090e2 <__ieee754_sqrt+0xb6>
 8009126:	4313      	orrs	r3, r2
 8009128:	d01b      	beq.n	8009162 <__ieee754_sqrt+0x136>
 800912a:	f8df a0ac 	ldr.w	sl, [pc, #172]	; 80091d8 <__ieee754_sqrt+0x1ac>
 800912e:	f8df b0ac 	ldr.w	fp, [pc, #172]	; 80091dc <__ieee754_sqrt+0x1b0>
 8009132:	e9da 0100 	ldrd	r0, r1, [sl]
 8009136:	e9db 2300 	ldrd	r2, r3, [fp]
 800913a:	f7f7 f8ad 	bl	8000298 <__aeabi_dsub>
 800913e:	e9da 8900 	ldrd	r8, r9, [sl]
 8009142:	4602      	mov	r2, r0
 8009144:	460b      	mov	r3, r1
 8009146:	4640      	mov	r0, r8
 8009148:	4649      	mov	r1, r9
 800914a:	f7f7 fcd9 	bl	8000b00 <__aeabi_dcmple>
 800914e:	b140      	cbz	r0, 8009162 <__ieee754_sqrt+0x136>
 8009150:	f1b4 3fff 	cmp.w	r4, #4294967295
 8009154:	e9da 0100 	ldrd	r0, r1, [sl]
 8009158:	e9db 2300 	ldrd	r2, r3, [fp]
 800915c:	d126      	bne.n	80091ac <__ieee754_sqrt+0x180>
 800915e:	3501      	adds	r5, #1
 8009160:	463c      	mov	r4, r7
 8009162:	106a      	asrs	r2, r5, #1
 8009164:	0863      	lsrs	r3, r4, #1
 8009166:	07e9      	lsls	r1, r5, #31
 8009168:	f102 527f 	add.w	r2, r2, #1069547520	; 0x3fc00000
 800916c:	f502 1200 	add.w	r2, r2, #2097152	; 0x200000
 8009170:	bf48      	it	mi
 8009172:	f043 4300 	orrmi.w	r3, r3, #2147483648	; 0x80000000
 8009176:	eb02 5506 	add.w	r5, r2, r6, lsl #20
 800917a:	461c      	mov	r4, r3
 800917c:	e76d      	b.n	800905a <__ieee754_sqrt+0x2e>
 800917e:	0ad3      	lsrs	r3, r2, #11
 8009180:	3815      	subs	r0, #21
 8009182:	0552      	lsls	r2, r2, #21
 8009184:	2b00      	cmp	r3, #0
 8009186:	d0fa      	beq.n	800917e <__ieee754_sqrt+0x152>
 8009188:	02dc      	lsls	r4, r3, #11
 800918a:	d50a      	bpl.n	80091a2 <__ieee754_sqrt+0x176>
 800918c:	f1c1 0420 	rsb	r4, r1, #32
 8009190:	fa22 f404 	lsr.w	r4, r2, r4
 8009194:	1e4d      	subs	r5, r1, #1
 8009196:	408a      	lsls	r2, r1
 8009198:	4323      	orrs	r3, r4
 800919a:	1b41      	subs	r1, r0, r5
 800919c:	e772      	b.n	8009084 <__ieee754_sqrt+0x58>
 800919e:	4608      	mov	r0, r1
 80091a0:	e7f0      	b.n	8009184 <__ieee754_sqrt+0x158>
 80091a2:	005b      	lsls	r3, r3, #1
 80091a4:	3101      	adds	r1, #1
 80091a6:	e7ef      	b.n	8009188 <__ieee754_sqrt+0x15c>
 80091a8:	46e0      	mov	r8, ip
 80091aa:	e7aa      	b.n	8009102 <__ieee754_sqrt+0xd6>
 80091ac:	f7f7 f876 	bl	800029c <__adddf3>
 80091b0:	e9da 8900 	ldrd	r8, r9, [sl]
 80091b4:	4602      	mov	r2, r0
 80091b6:	460b      	mov	r3, r1
 80091b8:	4640      	mov	r0, r8
 80091ba:	4649      	mov	r1, r9
 80091bc:	f7f7 fc96 	bl	8000aec <__aeabi_dcmplt>
 80091c0:	b120      	cbz	r0, 80091cc <__ieee754_sqrt+0x1a0>
 80091c2:	1ca0      	adds	r0, r4, #2
 80091c4:	bf08      	it	eq
 80091c6:	3501      	addeq	r5, #1
 80091c8:	3402      	adds	r4, #2
 80091ca:	e7ca      	b.n	8009162 <__ieee754_sqrt+0x136>
 80091cc:	3401      	adds	r4, #1
 80091ce:	f024 0401 	bic.w	r4, r4, #1
 80091d2:	e7c6      	b.n	8009162 <__ieee754_sqrt+0x136>
 80091d4:	7ff00000 	.word	0x7ff00000
 80091d8:	200000f0 	.word	0x200000f0
 80091dc:	200000f8 	.word	0x200000f8

080091e0 <__ieee754_atan2>:
 80091e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091e4:	ec57 6b11 	vmov	r6, r7, d1
 80091e8:	4273      	negs	r3, r6
 80091ea:	f8df 817c 	ldr.w	r8, [pc, #380]	; 8009368 <__ieee754_atan2+0x188>
 80091ee:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80091f2:	4333      	orrs	r3, r6
 80091f4:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 80091f8:	4543      	cmp	r3, r8
 80091fa:	ec51 0b10 	vmov	r0, r1, d0
 80091fe:	ee11 5a10 	vmov	r5, s2
 8009202:	d80a      	bhi.n	800921a <__ieee754_atan2+0x3a>
 8009204:	4244      	negs	r4, r0
 8009206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800920a:	4304      	orrs	r4, r0
 800920c:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 8009210:	4544      	cmp	r4, r8
 8009212:	ee10 9a10 	vmov	r9, s0
 8009216:	468e      	mov	lr, r1
 8009218:	d907      	bls.n	800922a <__ieee754_atan2+0x4a>
 800921a:	4632      	mov	r2, r6
 800921c:	463b      	mov	r3, r7
 800921e:	f7f7 f83d 	bl	800029c <__adddf3>
 8009222:	ec41 0b10 	vmov	d0, r0, r1
 8009226:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800922a:	f107 4440 	add.w	r4, r7, #3221225472	; 0xc0000000
 800922e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009232:	4334      	orrs	r4, r6
 8009234:	d103      	bne.n	800923e <__ieee754_atan2+0x5e>
 8009236:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800923a:	f7ff bd4d 	b.w	8008cd8 <atan>
 800923e:	17bc      	asrs	r4, r7, #30
 8009240:	f004 0402 	and.w	r4, r4, #2
 8009244:	ea53 0909 	orrs.w	r9, r3, r9
 8009248:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800924c:	d107      	bne.n	800925e <__ieee754_atan2+0x7e>
 800924e:	2c02      	cmp	r4, #2
 8009250:	d05f      	beq.n	8009312 <__ieee754_atan2+0x132>
 8009252:	2c03      	cmp	r4, #3
 8009254:	d1e5      	bne.n	8009222 <__ieee754_atan2+0x42>
 8009256:	a140      	add	r1, pc, #256	; (adr r1, 8009358 <__ieee754_atan2+0x178>)
 8009258:	e9d1 0100 	ldrd	r0, r1, [r1]
 800925c:	e7e1      	b.n	8009222 <__ieee754_atan2+0x42>
 800925e:	4315      	orrs	r5, r2
 8009260:	d106      	bne.n	8009270 <__ieee754_atan2+0x90>
 8009262:	f1be 0f00 	cmp.w	lr, #0
 8009266:	da5f      	bge.n	8009328 <__ieee754_atan2+0x148>
 8009268:	a13d      	add	r1, pc, #244	; (adr r1, 8009360 <__ieee754_atan2+0x180>)
 800926a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800926e:	e7d8      	b.n	8009222 <__ieee754_atan2+0x42>
 8009270:	4542      	cmp	r2, r8
 8009272:	d10f      	bne.n	8009294 <__ieee754_atan2+0xb4>
 8009274:	4293      	cmp	r3, r2
 8009276:	f104 34ff 	add.w	r4, r4, #4294967295
 800927a:	d107      	bne.n	800928c <__ieee754_atan2+0xac>
 800927c:	2c02      	cmp	r4, #2
 800927e:	d84c      	bhi.n	800931a <__ieee754_atan2+0x13a>
 8009280:	4b33      	ldr	r3, [pc, #204]	; (8009350 <__ieee754_atan2+0x170>)
 8009282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009286:	e9d3 0100 	ldrd	r0, r1, [r3]
 800928a:	e7ca      	b.n	8009222 <__ieee754_atan2+0x42>
 800928c:	2c02      	cmp	r4, #2
 800928e:	d848      	bhi.n	8009322 <__ieee754_atan2+0x142>
 8009290:	4b30      	ldr	r3, [pc, #192]	; (8009354 <__ieee754_atan2+0x174>)
 8009292:	e7f6      	b.n	8009282 <__ieee754_atan2+0xa2>
 8009294:	4543      	cmp	r3, r8
 8009296:	d0e4      	beq.n	8009262 <__ieee754_atan2+0x82>
 8009298:	1a9b      	subs	r3, r3, r2
 800929a:	f1b3 7f74 	cmp.w	r3, #63963136	; 0x3d00000
 800929e:	ea4f 5223 	mov.w	r2, r3, asr #20
 80092a2:	da1e      	bge.n	80092e2 <__ieee754_atan2+0x102>
 80092a4:	2f00      	cmp	r7, #0
 80092a6:	da01      	bge.n	80092ac <__ieee754_atan2+0xcc>
 80092a8:	323c      	adds	r2, #60	; 0x3c
 80092aa:	db1e      	blt.n	80092ea <__ieee754_atan2+0x10a>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	f7f7 fad4 	bl	800085c <__aeabi_ddiv>
 80092b4:	ec41 0b10 	vmov	d0, r0, r1
 80092b8:	f7ff feae 	bl	8009018 <fabs>
 80092bc:	f7ff fd0c 	bl	8008cd8 <atan>
 80092c0:	ec51 0b10 	vmov	r0, r1, d0
 80092c4:	2c01      	cmp	r4, #1
 80092c6:	d013      	beq.n	80092f0 <__ieee754_atan2+0x110>
 80092c8:	2c02      	cmp	r4, #2
 80092ca:	d015      	beq.n	80092f8 <__ieee754_atan2+0x118>
 80092cc:	2c00      	cmp	r4, #0
 80092ce:	d0a8      	beq.n	8009222 <__ieee754_atan2+0x42>
 80092d0:	a317      	add	r3, pc, #92	; (adr r3, 8009330 <__ieee754_atan2+0x150>)
 80092d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092d6:	f7f6 ffdf 	bl	8000298 <__aeabi_dsub>
 80092da:	a317      	add	r3, pc, #92	; (adr r3, 8009338 <__ieee754_atan2+0x158>)
 80092dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092e0:	e014      	b.n	800930c <__ieee754_atan2+0x12c>
 80092e2:	a117      	add	r1, pc, #92	; (adr r1, 8009340 <__ieee754_atan2+0x160>)
 80092e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80092e8:	e7ec      	b.n	80092c4 <__ieee754_atan2+0xe4>
 80092ea:	2000      	movs	r0, #0
 80092ec:	2100      	movs	r1, #0
 80092ee:	e7e9      	b.n	80092c4 <__ieee754_atan2+0xe4>
 80092f0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80092f4:	4619      	mov	r1, r3
 80092f6:	e794      	b.n	8009222 <__ieee754_atan2+0x42>
 80092f8:	a30d      	add	r3, pc, #52	; (adr r3, 8009330 <__ieee754_atan2+0x150>)
 80092fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092fe:	f7f6 ffcb 	bl	8000298 <__aeabi_dsub>
 8009302:	4602      	mov	r2, r0
 8009304:	460b      	mov	r3, r1
 8009306:	a10c      	add	r1, pc, #48	; (adr r1, 8009338 <__ieee754_atan2+0x158>)
 8009308:	e9d1 0100 	ldrd	r0, r1, [r1]
 800930c:	f7f6 ffc4 	bl	8000298 <__aeabi_dsub>
 8009310:	e787      	b.n	8009222 <__ieee754_atan2+0x42>
 8009312:	a109      	add	r1, pc, #36	; (adr r1, 8009338 <__ieee754_atan2+0x158>)
 8009314:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009318:	e783      	b.n	8009222 <__ieee754_atan2+0x42>
 800931a:	a10b      	add	r1, pc, #44	; (adr r1, 8009348 <__ieee754_atan2+0x168>)
 800931c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009320:	e77f      	b.n	8009222 <__ieee754_atan2+0x42>
 8009322:	2000      	movs	r0, #0
 8009324:	2100      	movs	r1, #0
 8009326:	e77c      	b.n	8009222 <__ieee754_atan2+0x42>
 8009328:	a105      	add	r1, pc, #20	; (adr r1, 8009340 <__ieee754_atan2+0x160>)
 800932a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800932e:	e778      	b.n	8009222 <__ieee754_atan2+0x42>
 8009330:	33145c07 	.word	0x33145c07
 8009334:	3ca1a626 	.word	0x3ca1a626
 8009338:	54442d18 	.word	0x54442d18
 800933c:	400921fb 	.word	0x400921fb
 8009340:	54442d18 	.word	0x54442d18
 8009344:	3ff921fb 	.word	0x3ff921fb
 8009348:	54442d18 	.word	0x54442d18
 800934c:	3fe921fb 	.word	0x3fe921fb
 8009350:	08009510 	.word	0x08009510
 8009354:	08009528 	.word	0x08009528
 8009358:	54442d18 	.word	0x54442d18
 800935c:	c00921fb 	.word	0xc00921fb
 8009360:	54442d18 	.word	0x54442d18
 8009364:	bff921fb 	.word	0xbff921fb
 8009368:	7ff00000 	.word	0x7ff00000

0800936c <_init>:
 800936c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936e:	bf00      	nop
 8009370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009372:	bc08      	pop	{r3}
 8009374:	469e      	mov	lr, r3
 8009376:	4770      	bx	lr

08009378 <_fini>:
 8009378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800937a:	bf00      	nop
 800937c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800937e:	bc08      	pop	{r3}
 8009380:	469e      	mov	lr, r3
 8009382:	4770      	bx	lr
